# autodefined type arguments for class ------
mutable struct PetscPoCintFn end

mutable struct _n_DMInterpolationInfo end
const DMInterpolationInfo = Ptr{_n_DMInterpolationInfo}

mutable struct _n_PetscDS end
const PetscDS = Ptr{_n_PetscDS}

mutable struct _n_PetscFE end
const PetscFE = Ptr{_n_PetscFE}

mutable struct _n_DMField end
const DMField = Ptr{_n_DMField}

mutable struct _n_DMPoCintLocationType end
const DMPoCintLocationType = Ptr{_n_DMPoCintLocationType}

mutable struct PetscSimplePoCintFn end

mutable struct _n_DMSwarmCellDM end
const DMSwarmCellDM = Ptr{_n_DMSwarmCellDM}

mutable struct _n_AO end
const AO = Ptr{_n_AO}

mutable struct _n_PF end
const PF = Ptr{_n_PF}

mutable struct _n_moab_Tag end
const moab_Tag = Ptr{_n_moab_Tag}

mutable struct _n_moab_Range end
const moab_Range = Ptr{_n_moab_Range}

mutable struct _n_moab_EntityHandle end
const moab_EntityHandle = Ptr{_n_moab_EntityHandle}

mutable struct _n_moab_Interface end
const moab_Interface = Ptr{_n_moab_Interface}

mutable struct _n_moab_ParallelComm end
const moab_ParallelComm = Ptr{_n_moab_ParallelComm}

mutable struct _n_moab_EntityType end
const moab_EntityType = Ptr{_n_moab_EntityType}

mutable struct _n_DMPlexTransform end
const DMPlexTransform = Ptr{_n_DMPlexTransform}

mutable struct _n_PetscPartitioner end
const PetscPartitioner = Ptr{_n_PetscPartitioner}

mutable struct _n_PetscFV end
const PetscFV = Ptr{_n_PetscFV}

mutable struct _n_PetscWeakForm end
const PetscWeakForm = Ptr{_n_PetscWeakForm}

mutable struct _n_PetscGeom end
const PetscGeom = Ptr{_n_PetscGeom}

mutable struct _n_PetscHMapI end
const PetscHMapI = Ptr{_n_PetscHMapI}

mutable struct TSIFunctionFn end

mutable struct TSI2FunctionFn end

mutable struct TSI2JacobianFn end

mutable struct TSRHSFunctionFn end

mutable struct TSTransientVariableFn end

mutable struct TSSolutionFn end

mutable struct TSForcingFn end

mutable struct TSIJacobianFn end

mutable struct TSRHSJacobianFn end

mutable struct _n_TS end
const TS = Ptr{_n_TS}

mutable struct DMDATSRHSFunctionLocalFn end

mutable struct DMDATSRHSJacobianLocalFn end

mutable struct DMDATSIFunctionLocalFn end

mutable struct DMDATSIJacobianLocalFn end

# -------------------------------------------------------
"""
	DMCopyDMKSP(petsclib::PetscLibType,dmsrc::PetscDM, dmdest::PetscDM) 
copies a `DM` `DMKSP` context to a new `DM`

Logically Collective

Input Parameters:
- `dmsrc`  - `DM` to obtain context from
- `dmdest` - `DM` to add context to

Level: developer

-seealso: [](ch_ksp), `DMKSP`, `DM`, `KSP`, `DMGetDMKSP()`, `KSPSetDM()`

# External Links
$(_doc_external("Ksp/DMCopyDMKSP"))
"""
function DMCopyDMKSP(petsclib::PetscLibType, dmsrc::PetscDM, dmdest::PetscDM) end

@for_petsc function DMCopyDMKSP(petsclib::$UnionPetscLib, dmsrc::PetscDM, dmdest::PetscDM )

    @chk ccall(
               (:DMCopyDMKSP, $petsc_library),
               PetscErrorCode,
               (CDM, CDM),
               dmsrc, dmdest,
              )


	return nothing
end 

"""
	DMKSPSetComputeOperators(petsclib::PetscLibType,dm::PetscDM, func::KSPComputeOperatorsFn, ctx::Cvoid) 
set `KSP` matrix evaluation function

Not Collective

Input Parameters:
- `dm`   - `DM` to be used with `KSP`
- `func` - matrix evaluation function,  for calling sequence see `KSPComputeOperatorsFn`
- `ctx`  - context for matrix evaluation

Level: developer

-seealso: [](ch_ksp), `DMKSP`, `DM`, `KSP`, `DMKSPSetContext()`, `DMKSPGetComputeOperators()`, `KSPSetOperators()`, `KSPComputeOperatorsFn`

# External Links
$(_doc_external("Ksp/DMKSPSetComputeOperators"))
"""
function DMKSPSetComputeOperators(petsclib::PetscLibType, dm::PetscDM, func::KSPComputeOperatorsFn, ctx::Cvoid) end

@for_petsc function DMKSPSetComputeOperators(petsclib::$UnionPetscLib, dm::PetscDM, func::KSPComputeOperatorsFn, ctx::Cvoid )

    @chk ccall(
               (:DMKSPSetComputeOperators, $petsc_library),
               PetscErrorCode,
               (CDM, Ptr{KSPComputeOperatorsFn}, Ptr{Cvoid}),
               dm, func, ctx,
              )


	return nothing
end 

"""
	DMKSPGetComputeOperators(petsclib::PetscLibType,dm::PetscDM, func::KSPComputeOperatorsFn, ctx::Cvoid) 
get `KSP` matrix evaluation function

Not Collective

Input Parameter:
- `dm` - `DM` used with a `KSP`

Output Parameters:
- `func` - matrix evaluation function,  for calling sequence see `KSPComputeOperatorsFn`
- `ctx`  - context for matrix evaluation

Level: developer

-seealso: [](ch_ksp), `DMKSP`, `DM`, `KSP`, `DMKSPSetContext()`, `KSPSetComputeOperators()`, `DMKSPSetComputeOperators()`, `KSPComputeOperatorsFn`

# External Links
$(_doc_external("Ksp/DMKSPGetComputeOperators"))
"""
function DMKSPGetComputeOperators(petsclib::PetscLibType, dm::PetscDM, func::KSPComputeOperatorsFn, ctx::Cvoid) end

@for_petsc function DMKSPGetComputeOperators(petsclib::$UnionPetscLib, dm::PetscDM, func::KSPComputeOperatorsFn, ctx::Cvoid )

    @chk ccall(
               (:DMKSPGetComputeOperators, $petsc_library),
               PetscErrorCode,
               (CDM, KSPComputeOperatorsFn, Ptr{Cvoid}),
               dm, func, ctx,
              )


	return nothing
end 

"""
	DMKSPSetComputeRHS(petsclib::PetscLibType,dm::PetscDM, func::KSPComputeRHSFn, ctx::Cvoid) 
set `KSP` right

Not Collective

Input Parameters:
- `dm`   - `DM` used with a `KSP`
- `func` - right-hand side evaluation function,  for calling sequence see `KSPComputeRHSFn`
- `ctx`  - context for right-hand side evaluation

Level: developer

-seealso: [](ch_ksp), `DMKSP`, `DM`, `KSP`, `DMKSPSetContext()`, `DMKSPGetComputeRHS()`

# External Links
$(_doc_external("Ksp/DMKSPSetComputeRHS"))
"""
function DMKSPSetComputeRHS(petsclib::PetscLibType, dm::PetscDM, func::KSPComputeRHSFn, ctx::Cvoid) end

@for_petsc function DMKSPSetComputeRHS(petsclib::$UnionPetscLib, dm::PetscDM, func::KSPComputeRHSFn, ctx::Cvoid )

    @chk ccall(
               (:DMKSPSetComputeRHS, $petsc_library),
               PetscErrorCode,
               (CDM, Ptr{KSPComputeRHSFn}, Ptr{Cvoid}),
               dm, func, ctx,
              )


	return nothing
end 

"""
	DMKSPSetComputeInitialGuess(petsclib::PetscLibType,dm::PetscDM, func::KSPComputeInitialGuessFn, ctx::Cvoid) 
set `KSP` initial guess evaluation function

Not Collective

Input Parameters:
- `dm`   - `DM` to be used with `KSP`
- `func` - initial guess evaluation function, for calling sequence see `KSPComputeInitialGuessFn`
- `ctx`  - context for initial guess evaluation

Level: developer

-seealso: [](ch_ksp), `DMKSP`, `DM`, `KSP`, `DMKSPSetContext()`, `DMKSPGetComputeRHS()`, `KSPComputeInitialGuessFn`

# External Links
$(_doc_external("Ksp/DMKSPSetComputeInitialGuess"))
"""
function DMKSPSetComputeInitialGuess(petsclib::PetscLibType, dm::PetscDM, func::KSPComputeInitialGuessFn, ctx::Cvoid) end

@for_petsc function DMKSPSetComputeInitialGuess(petsclib::$UnionPetscLib, dm::PetscDM, func::KSPComputeInitialGuessFn, ctx::Cvoid )

    @chk ccall(
               (:DMKSPSetComputeInitialGuess, $petsc_library),
               PetscErrorCode,
               (CDM, Ptr{KSPComputeInitialGuessFn}, Ptr{Cvoid}),
               dm, func, ctx,
              )


	return nothing
end 

"""
	DMKSPGetComputeRHS(petsclib::PetscLibType,dm::PetscDM, func::KSPComputeRHSFn, ctx::Cvoid) 
get `KSP` right

Not Collective

Input Parameter:
- `dm` - `DM` to be used with `KSP`

Output Parameters:
- `func` - right-hand side evaluation function,  for calling sequence see `KSPComputeRHSFn`
- `ctx`  - context for right-hand side evaluation

Level: advanced

-seealso: [](ch_ksp), `DMKSP`, `DM`, `KSP`, `DMKSPSetContext()`, `KSPSetComputeRHS()`, `DMKSPSetComputeRHS()`, `KSPComputeRHSFn`

# External Links
$(_doc_external("Ksp/DMKSPGetComputeRHS"))
"""
function DMKSPGetComputeRHS(petsclib::PetscLibType, dm::PetscDM, func::KSPComputeRHSFn, ctx::Cvoid) end

@for_petsc function DMKSPGetComputeRHS(petsclib::$UnionPetscLib, dm::PetscDM, func::KSPComputeRHSFn, ctx::Cvoid )

    @chk ccall(
               (:DMKSPGetComputeRHS, $petsc_library),
               PetscErrorCode,
               (CDM, KSPComputeRHSFn, Ptr{Cvoid}),
               dm, func, ctx,
              )


	return nothing
end 

"""
	DMKSPGetComputeInitialGuess(petsclib::PetscLibType,dm::PetscDM, func::KSPComputeInitialGuessFn, ctx::Cvoid) 
get `KSP` initial guess evaluation function

Not Collective

Input Parameter:
- `dm` - `DM` used with a `KSP`

Output Parameters:
- `func` - initial guess evaluation function, for calling sequence see `KSPComputeInitialGuessFn`
- `ctx`  - context for right-hand side evaluation

Level: advanced

-seealso: [](ch_ksp), `DMKSP`, `DM`, `KSP`, `DMKSPSetContext()`, `KSPSetComputeRHS()`, `DMKSPSetComputeRHS()`, `KSPComputeInitialGuessFn`

# External Links
$(_doc_external("Ksp/DMKSPGetComputeInitialGuess"))
"""
function DMKSPGetComputeInitialGuess(petsclib::PetscLibType, dm::PetscDM, func::KSPComputeInitialGuessFn, ctx::Cvoid) end

@for_petsc function DMKSPGetComputeInitialGuess(petsclib::$UnionPetscLib, dm::PetscDM, func::KSPComputeInitialGuessFn, ctx::Cvoid )

    @chk ccall(
               (:DMKSPGetComputeInitialGuess, $petsc_library),
               PetscErrorCode,
               (CDM, KSPComputeInitialGuessFn, Ptr{Cvoid}),
               dm, func, ctx,
              )


	return nothing
end 

"""
	DMGlobalToLocalSolve(petsclib::PetscLibType,dm::PetscDM, x::PetscVec, y::PetscVec) 
Solve for the global vector that is mapped to a given local vector by `DMGlobalToLocalBegin()`/`DMGlobalToLocalEnd()` with mode
`INSERT_VALUES`.

Collective

Input Parameters:
- `dm` - The `DM` object
- `x`  - The local vector
- `y`  - The global vector: the input value of this variable is used as an initial guess

Output Parameter:
- `y` - The least-squares solution

Level: advanced

Note:
It is assumed that the sum of all the local vector sizes is greater than or equal to the global vector size, so the solution is
a least-squares solution.  It is also assumed that `DMLocalToGlobalBegin()`/`DMLocalToGlobalEnd()` with mode `ADD_VALUES` is the adjoint of the
global-to-local map, so that the least-squares solution may be found by the normal equations.

If the `DM` is of type `DMPLEX`, then `y` is the solution of  L^T * D * L * y = L^T * D * x , where D is a diagonal mask that is 1 for every point in
the union of the closures of the local cells and 0 otherwise.  This difference is only relevant if there are anchor points that are not in the
closure of any local cell (see `DMPlexGetAnchors()`/`DMPlexSetAnchors()`).

What is L?

If this solves for a global vector from a local vector why is not called `DMLocalToGlobalSolve()`?

See also: 
=== 
`DM`, `DMGlobalToLocalBegin()`, `DMGlobalToLocalEnd()`, `DMLocalToGlobalBegin()`, `DMLocalToGlobalEnd()`, `DMPlexGetAnchors()`, `DMPlexSetAnchors()`

# External Links
$(_doc_external("Dm/DMGlobalToLocalSolve"))
"""
function DMGlobalToLocalSolve(petsclib::PetscLibType, dm::PetscDM, x::PetscVec, y::PetscVec) end

@for_petsc function DMGlobalToLocalSolve(petsclib::$UnionPetscLib, dm::PetscDM, x::PetscVec, y::PetscVec )

    @chk ccall(
               (:DMGlobalToLocalSolve, $petsc_library),
               PetscErrorCode,
               (CDM, CVec, CVec),
               dm, x, y,
              )


	return nothing
end 

"""
	DMProjectField(petsclib::PetscLibType,dm::PetscDM, time::PetscReal, U::PetscVec, funcs::PetscPoCintFn, mode::InsertMode, X::PetscVec) 
This projects a given function of the input fields into the function space provided by a `DM`, putting the coefficients in a global vector.

Collective

Input Parameters:
- `dm`    - The `DM`
- `time`  - The time
- `U`     - The input field vector
- `funcs` - The functions to evaluate, one per field, see `PetscPointFn`
- `mode`  - The insertion mode for values

Output Parameter:
- `X` - The output vector

Level: advanced

Note:
There are three different `DM`s that potentially interact in this function. The output `dm`, specifies the layout of the values calculates by the function.
The input `DM`, attached to `U`, may be different. For example, you can input the solution over the full domain, but output over a piece of the boundary, or
a subdomain. You can also output a different number of fields than the input, with different discretizations. Last the auxiliary `DM`, attached to the
auxiliary field vector, which is attached to `dm`, can also be different. It can have a different topology, number of fields, and discretizations.

See also: 
=== 
`DM`, `PetscPointFn`, `DMProjectFieldLocal()`, `DMProjectFieldLabelLocal()`, `DMProjectFunction()`, `DMComputeL2Diff()`

# External Links
$(_doc_external("Dm/DMProjectField"))
"""
function DMProjectField(petsclib::PetscLibType, dm::PetscDM, time::PetscReal, U::PetscVec, funcs::PetscPoCintFn, mode::InsertMode, X::PetscVec) end

@for_petsc function DMProjectField(petsclib::$UnionPetscLib, dm::PetscDM, time::$PetscReal, U::PetscVec, funcs::PetscPoCintFn, mode::InsertMode, X::PetscVec )

    @chk ccall(
               (:DMProjectField, $petsc_library),
               PetscErrorCode,
               (CDM, $PetscReal, CVec, PetscPoCintFn, InsertMode, CVec),
               dm, time, U, funcs, mode, X,
              )


	return nothing
end 

"""
	DMAdaptInterpolator(petsclib::PetscLibType,dmc::PetscDM, dmf::PetscDM, In::PetscMat, smoother::PetscKSP, MF::PetscMat, MC::PetscMat, InAdapt::PetscMat, user::Cvoid) 

# External Links
$(_doc_external("Dm/DMAdaptInterpolator"))
"""
function DMAdaptInterpolator(petsclib::PetscLibType, dmc::PetscDM, dmf::PetscDM, In::PetscMat, smoother::PetscKSP, MF::PetscMat, MC::PetscMat, InAdapt::PetscMat, user::Cvoid) end

@for_petsc function DMAdaptInterpolator(petsclib::$UnionPetscLib, dmc::PetscDM, dmf::PetscDM, In::PetscMat, smoother::PetscKSP, MF::PetscMat, MC::PetscMat, InAdapt::PetscMat, user::Cvoid )
	InAdapt_ = Ref(InAdapt.ptr)

    @chk ccall(
               (:DMAdaptInterpolator, $petsc_library),
               PetscErrorCode,
               (CDM, CDM, CMat, CKSP, CMat, CMat, Ptr{CMat}, Ptr{Cvoid}),
               dmc, dmf, In, smoother, MF, MC, InAdapt_, user,
              )

	InAdapt.ptr = C_NULL

	return nothing
end 

"""
	DMCheckInterpolator(petsclib::PetscLibType,dmf::PetscDM, In::PetscMat, MC::PetscMat, MF::PetscMat, tol::PetscReal) 

# External Links
$(_doc_external("Dm/DMCheckInterpolator"))
"""
function DMCheckInterpolator(petsclib::PetscLibType, dmf::PetscDM, In::PetscMat, MC::PetscMat, MF::PetscMat, tol::PetscReal) end

@for_petsc function DMCheckInterpolator(petsclib::$UnionPetscLib, dmf::PetscDM, In::PetscMat, MC::PetscMat, MF::PetscMat, tol::$PetscReal )

    @chk ccall(
               (:DMCheckInterpolator, $petsc_library),
               PetscErrorCode,
               (CDM, CMat, CMat, CMat, $PetscReal),
               dmf, In, MC, MF, tol,
              )


	return nothing
end 

"""
	DMSwarmProjectFields(petsclib::PetscLibType,sw::PetscDM, dm::PetscDM, nfields::PetscInt, fieldnames::String, fields::Vector{PetscVec}, mode::ScatterMode) 
Project a set of swarm fields onto another `DM`

Collective

Input Parameters:
- `sw`         - the `DMSWARM`
- `dm`         - the `DM`, or `NULL` to use the cell `DM`
- `nfields`    - the number of swarm fields to project
- `fieldnames` - the textual names of the swarm fields to project
- `fields`     - an array of `Vec`'s of length nfields
- `mode`       - if `SCATTER_FORWARD` then map particles to the continuum, and if `SCATTER_REVERSE` map the continuum to particles

Level: beginner

See also: 
=== 
`DMSWARM`, `DMSwarmSetType()`, `DMSwarmSetCellDM()`, `DMSwarmType`

# External Links
$(_doc_external("Dm/DMSwarmProjectFields"))
"""
function DMSwarmProjectFields(petsclib::PetscLibType, sw::PetscDM, dm::PetscDM, nfields::PetscInt, fieldnames::String, fields::Vector{PetscVec}, mode::ScatterMode) end

@for_petsc function DMSwarmProjectFields(petsclib::$UnionPetscLib, sw::PetscDM, dm::PetscDM, nfields::$PetscInt, fieldnames::String, fields::Vector{PetscVec}, mode::ScatterMode )
	fieldnames_ = Ref(pointer(fieldnames))

    @chk ccall(
               (:DMSwarmProjectFields, $petsc_library),
               PetscErrorCode,
               (CDM, CDM, $PetscInt, Ptr{Ptr{Cchar}}, Ptr{CVec}, ScatterMode),
               sw, dm, nfields, fieldnames_, fields, mode,
              )


	return nothing
end 

"""
	DMSwarmProjectGradientFields(petsclib::PetscLibType,sw::PetscDM, dm::PetscDM, nfields::PetscInt, fieldnames::String, fields::Vector{PetscVec}, mode::ScatterMode) 

# External Links
$(_doc_external("Dm/DMSwarmProjectGradientFields"))
"""
function DMSwarmProjectGradientFields(petsclib::PetscLibType, sw::PetscDM, dm::PetscDM, nfields::PetscInt, fieldnames::String, fields::Vector{PetscVec}, mode::ScatterMode) end

@for_petsc function DMSwarmProjectGradientFields(petsclib::$UnionPetscLib, sw::PetscDM, dm::PetscDM, nfields::$PetscInt, fieldnames::String, fields::Vector{PetscVec}, mode::ScatterMode )
	fieldnames_ = Ref(pointer(fieldnames))

    @chk ccall(
               (:DMSwarmProjectGradientFields, $petsc_library),
               PetscErrorCode,
               (CDM, CDM, $PetscInt, Ptr{Ptr{Cchar}}, Ptr{CVec}, ScatterMode),
               sw, dm, nfields, fieldnames_, fields, mode,
              )


	return nothing
end 

"""
	DMSwarmRemap(petsclib::PetscLibType,sw::PetscDM) 
Project the swarm fields onto a new set of particles

Collective

Input Parameter:
- `sw` - The `DMSWARM` object

Level: beginner

See also: 
=== 
`DMSWARM`, `DMSwarmMigrate()`, `DMSwarmCrate()`

# External Links
$(_doc_external("Dm/DMSwarmRemap"))
"""
function DMSwarmRemap(petsclib::PetscLibType, sw::PetscDM) end

@for_petsc function DMSwarmRemap(petsclib::$UnionPetscLib, sw::PetscDM )

    @chk ccall(
               (:DMSwarmRemap, $petsc_library),
               PetscErrorCode,
               (CDM,),
               sw,
              )


	return nothing
end 

"""
	DMSetVI(petsclib::PetscLibType,dm::PetscDM, inactive::IS) 
Marks a `DM` as associated with a VI problem. This causes the interpolation/restriction operators to
be restricted to only those variables NOT associated with active constraints.

Logically Collective

Input Parameters:
- `dm`       - the `DM` object
- `inactive` - an `IS` indicating which points are currently not active

Level: intermediate

-seealso: [](ch_snes), `SNES`, `SNESVINEWTONRSLS`, `SNESVIGetInactiveSet()`

# External Links
$(_doc_external("Snes/DMSetVI"))
"""
function DMSetVI(petsclib::PetscLibType, dm::PetscDM, inactive::IS) end

@for_petsc function DMSetVI(petsclib::$UnionPetscLib, dm::PetscDM, inactive::IS )

    @chk ccall(
               (:DMSetVI, $petsc_library),
               PetscErrorCode,
               (CDM, IS),
               dm, inactive,
              )


	return nothing
end 

"""
	DMDestroyVI(petsclib::PetscLibType,dm::PetscDM) 

# External Links
$(_doc_external("Snes/DMDestroyVI"))
"""
function DMDestroyVI(petsclib::PetscLibType, dm::PetscDM) end

@for_petsc function DMDestroyVI(petsclib::$UnionPetscLib, dm::PetscDM )

    @chk ccall(
               (:DMDestroyVI, $petsc_library),
               PetscErrorCode,
               (CDM,),
               dm,
              )


	return nothing
end 

"""
	DMCopyDMSNES(petsclib::PetscLibType,dmsrc::PetscDM, dmdest::PetscDM) 
copies a `DMSNES` context to a new `DM`

Logically Collective

Input Parameters:
- `dmsrc`  - `DM` to obtain context from
- `dmdest` - `DM` to add context to

Level: developer

-seealso: [](ch_snes), `DMSNES`, `DMGetDMSNES()`, `SNESSetDM()`

# External Links
$(_doc_external("Snes/DMCopyDMSNES"))
"""
function DMCopyDMSNES(petsclib::PetscLibType, dmsrc::PetscDM, dmdest::PetscDM) end

@for_petsc function DMCopyDMSNES(petsclib::$UnionPetscLib, dmsrc::PetscDM, dmdest::PetscDM )

    @chk ccall(
               (:DMCopyDMSNES, $petsc_library),
               PetscErrorCode,
               (CDM, CDM),
               dmsrc, dmdest,
              )


	return nothing
end 

"""
	DMSNESSetFunction(petsclib::PetscLibType,dm::PetscDM, f::SNESFunctionFn, ctx::Cvoid) 
set `SNES` residual evaluation function

Not Collective

Input Parameters:
- `dm`  - DM to be used with `SNES`
- `f`   - residual evaluation function; see `SNESFunctionFn` for calling sequence
- `ctx` - context for residual evaluation

Level: developer

-seealso: [](ch_snes), `DMSNES`, `DMSNESSetContext()`, `SNESSetFunction()`, `DMSNESSetJacobian()`, `SNESFunctionFn`

# External Links
$(_doc_external("Snes/DMSNESSetFunction"))
"""
function DMSNESSetFunction(petsclib::PetscLibType, dm::PetscDM, f::SNESFunctionFn, ctx::Cvoid) end

@for_petsc function DMSNESSetFunction(petsclib::$UnionPetscLib, dm::PetscDM, f::SNESFunctionFn, ctx::Cvoid )

    @chk ccall(
               (:DMSNESSetFunction, $petsc_library),
               PetscErrorCode,
               (CDM, Ptr{SNESFunctionFn}, Ptr{Cvoid}),
               dm, f, ctx,
              )


	return nothing
end 

"""
	DMSNESSetFunctionContextDestroy(petsclib::PetscLibType,dm::PetscDM, f::PetscCtxDestroyFn) 
set `SNES` residual evaluation context destroy function

Not Collective

Input Parameters:
- `dm` - `DM` to be used with `SNES`
- `f`  - residual evaluation context destroy function, see `PetscCtxDestroyFn` for its calling sequence

Level: developer

-seealso: [](ch_snes), `DMSNES`, `DMSNESSetFunction()`, `SNESSetFunction()`, `PetscCtxDestroyFn`

# External Links
$(_doc_external("Snes/DMSNESSetFunctionContextDestroy"))
"""
function DMSNESSetFunctionContextDestroy(petsclib::PetscLibType, dm::PetscDM, f::PetscCtxDestroyFn) end

@for_petsc function DMSNESSetFunctionContextDestroy(petsclib::$UnionPetscLib, dm::PetscDM, f::PetscCtxDestroyFn )

    @chk ccall(
               (:DMSNESSetFunctionContextDestroy, $petsc_library),
               PetscErrorCode,
               (CDM, Ptr{PetscCtxDestroyFn}),
               dm, f,
              )


	return nothing
end 

"""
	DMSNESSetMFFunction(petsclib::PetscLibType,dm::PetscDM, func::SNESFunctionFn, ctx::Cvoid) 
set `SNES` residual evaluation function used in applying the matrix

Logically Collective

Input Parameters:
- `dm`   - `DM` to be used with `SNES`
- `func` - residual evaluation function; see `SNESFunctionFn` for calling sequence
- `ctx`  - optional function context

Level: developer

-seealso: [](ch_snes), `DMSNES`, `DMSNESSetContext()`, `SNESSetFunction()`, `DMSNESSetJacobian()`, `DMSNESSetFunction()`, `SNESFunctionFn`

# External Links
$(_doc_external("Snes/DMSNESSetMFFunction"))
"""
function DMSNESSetMFFunction(petsclib::PetscLibType, dm::PetscDM, func::SNESFunctionFn, ctx::Cvoid) end

@for_petsc function DMSNESSetMFFunction(petsclib::$UnionPetscLib, dm::PetscDM, func::SNESFunctionFn, ctx::Cvoid )

    @chk ccall(
               (:DMSNESSetMFFunction, $petsc_library),
               PetscErrorCode,
               (CDM, Ptr{SNESFunctionFn}, Ptr{Cvoid}),
               dm, func, ctx,
              )


	return nothing
end 

"""
	DMSNESGetFunction(petsclib::PetscLibType,dm::PetscDM, f::SNESFunctionFn, ctx::Cvoid) 
get `SNES` residual evaluation function from a `DMSNES` object

Not Collective

Input Parameter:
- `dm` - `DM` to be used with `SNES`

Output Parameters:
- `f`   - residual evaluation function; see `SNESFunctionFn` for calling sequence
- `ctx` - context for residual evaluation

Level: developer

-seealso: [](ch_snes), `DMSNES`, `DMSNESSetContext()`, `DMSNESSetFunction()`, `SNESSetFunction()`, `SNESFunctionFn`

# External Links
$(_doc_external("Snes/DMSNESGetFunction"))
"""
function DMSNESGetFunction(petsclib::PetscLibType, dm::PetscDM, f::SNESFunctionFn, ctx::Cvoid) end

@for_petsc function DMSNESGetFunction(petsclib::$UnionPetscLib, dm::PetscDM, f::SNESFunctionFn, ctx::Cvoid )

    @chk ccall(
               (:DMSNESGetFunction, $petsc_library),
               PetscErrorCode,
               (CDM, SNESFunctionFn, Cvoid),
               dm, f, ctx,
              )


	return nothing
end 

"""
	DMSNESSetObjective(petsclib::PetscLibType,dm::PetscDM, obj::SNESObjectiveFn, ctx::Cvoid) 
Sets the objective function minimized by some of the `SNES` linesearch methods into a `DMSNES` object, used instead of the 2

Not Collective

Input Parameters:
- `dm`  - `DM` to be used with `SNES`
- `obj` - objective evaluation routine; see `SNESObjectiveFn` for the calling sequence
- `ctx` - [optional] user-defined context for private data for the objective evaluation routine (may be `NULL`)

Level: developer

-seealso: [](ch_snes), `DMSNES`, `DMSNESSetContext()`, `SNESGetObjective()`, `DMSNESSetFunction()`, `SNESObjectiveFn`

# External Links
$(_doc_external("Snes/DMSNESSetObjective"))
"""
function DMSNESSetObjective(petsclib::PetscLibType, dm::PetscDM, obj::SNESObjectiveFn, ctx::Cvoid) end

@for_petsc function DMSNESSetObjective(petsclib::$UnionPetscLib, dm::PetscDM, obj::SNESObjectiveFn, ctx::Cvoid )

    @chk ccall(
               (:DMSNESSetObjective, $petsc_library),
               PetscErrorCode,
               (CDM, Ptr{SNESObjectiveFn}, Ptr{Cvoid}),
               dm, obj, ctx,
              )


	return nothing
end 

"""
	DMSNESGetObjective(petsclib::PetscLibType,dm::PetscDM, obj::SNESObjectiveFn, ctx::Cvoid) 
Returns the objective function set with `DMSNESSetObjective()`

Not Collective

Input Parameter:
- `dm` - `DM` to be used with `SNES`

Output Parameters:
- `obj` - objective evaluation routine (or `NULL`); see `SNESObjectiveFn` for the calling sequence
- `ctx` - the function context (or `NULL`)

Level: developer

-seealso: [](ch_snes), `DMSNES`, `DMSNESSetContext()`, `DMSNESSetObjective()`, `SNESSetFunction()`, `SNESObjectiveFn`

# External Links
$(_doc_external("Snes/DMSNESGetObjective"))
"""
function DMSNESGetObjective(petsclib::PetscLibType, dm::PetscDM, obj::SNESObjectiveFn, ctx::Cvoid) end

@for_petsc function DMSNESGetObjective(petsclib::$UnionPetscLib, dm::PetscDM, obj::SNESObjectiveFn, ctx::Cvoid )

    @chk ccall(
               (:DMSNESGetObjective, $petsc_library),
               PetscErrorCode,
               (CDM, SNESObjectiveFn, Cvoid),
               dm, obj, ctx,
              )


	return nothing
end 

"""
	DMSNESSetNGS(petsclib::PetscLibType,dm::PetscDM, f::external, ctx::Cvoid) 
set `SNES` Gauss

Not Collective

Input Parameters:
- `dm`  - `DM` to be used with `SNES`
- `f`   - relaxation function, see `SNESGSFunction`
- `ctx` - context for residual evaluation

Level: developer

-seealso: [](ch_snes), `DMSNES`, `DMSNESSetContext()`, `SNESSetFunction()`, `DMSNESSetJacobian()`, `DMSNESSetFunction()`, `SNESGSFunction`

# External Links
$(_doc_external("Snes/DMSNESSetNGS"))
"""
function DMSNESSetNGS(petsclib::PetscLibType, dm::PetscDM, f::external, ctx::Cvoid) end

@for_petsc function DMSNESSetNGS(petsclib::$UnionPetscLib, dm::PetscDM, f::external, ctx::Cvoid )

    @chk ccall(
               (:DMSNESSetNGS, $petsc_library),
               PetscErrorCode,
               (CDM, external, Ptr{Cvoid}),
               dm, f, ctx,
              )


	return nothing
end 

"""
	DMSNESSetJacobian(petsclib::PetscLibType,dm::PetscDM, J::SNESJacobianFn, ctx::Cvoid) 
set `SNES` Jacobian evaluation function into a `DMSNES` object

Not Collective

Input Parameters:
- `dm`  - `DM` to be used with `SNES`
- `J`   - Jacobian evaluation function, see `SNESJacobianFn`
- `ctx` - context for Jacobian evaluation

Level: developer

-seealso: [](ch_snes), `DMSNES`, `DMSNESSetContext()`, `SNESSetFunction()`, `DMSNESGetJacobian()`, `SNESSetJacobian()`, `SNESJacobianFn`

# External Links
$(_doc_external("Snes/DMSNESSetJacobian"))
"""
function DMSNESSetJacobian(petsclib::PetscLibType, dm::PetscDM, J::SNESJacobianFn, ctx::Cvoid) end

@for_petsc function DMSNESSetJacobian(petsclib::$UnionPetscLib, dm::PetscDM, J::SNESJacobianFn, ctx::Cvoid )

    @chk ccall(
               (:DMSNESSetJacobian, $petsc_library),
               PetscErrorCode,
               (CDM, Ptr{SNESJacobianFn}, Ptr{Cvoid}),
               dm, J, ctx,
              )


	return nothing
end 

"""
	DMSNESSetJacobianContextDestroy(petsclib::PetscLibType,dm::PetscDM, f::PetscCtxDestroyFn) 
set `SNES` Jacobian evaluation context destroy function into a `DMSNES` object

Not Collective

Input Parameters:
- `dm` - `DM` to be used with `SNES`
- `f`  - Jacobian evaluation context destroy function, see `PetscCtxDestroyFn` for its calling sequence

Level: developer

-seealso: [](ch_snes), `DMSNES`, `DMSNESSetJacobian()`

# External Links
$(_doc_external("Snes/DMSNESSetJacobianContextDestroy"))
"""
function DMSNESSetJacobianContextDestroy(petsclib::PetscLibType, dm::PetscDM, f::PetscCtxDestroyFn) end

@for_petsc function DMSNESSetJacobianContextDestroy(petsclib::$UnionPetscLib, dm::PetscDM, f::PetscCtxDestroyFn )

    @chk ccall(
               (:DMSNESSetJacobianContextDestroy, $petsc_library),
               PetscErrorCode,
               (CDM, Ptr{PetscCtxDestroyFn}),
               dm, f,
              )


	return nothing
end 

"""
	DMSNESGetJacobian(petsclib::PetscLibType,dm::PetscDM, J::SNESJacobianFn, ctx::Cvoid) 
get `SNES` Jacobian evaluation function from a `DMSNES` object

Not Collective

Input Parameter:
- `dm` - `DM` to be used with `SNES`

Output Parameters:
- `J`   - Jacobian evaluation function; for all calling sequence see `SNESJacobianFn`
- `ctx` - context for residual evaluation

Level: developer

-seealso: [](ch_snes), `DMSNES`, `DMSNESSetContext()`, `SNESSetFunction()`, `DMSNESSetJacobian()`, `SNESJacobianFn`

# External Links
$(_doc_external("Snes/DMSNESGetJacobian"))
"""
function DMSNESGetJacobian(petsclib::PetscLibType, dm::PetscDM, J::SNESJacobianFn, ctx::Cvoid) end

@for_petsc function DMSNESGetJacobian(petsclib::$UnionPetscLib, dm::PetscDM, J::SNESJacobianFn, ctx::Cvoid )

    @chk ccall(
               (:DMSNESGetJacobian, $petsc_library),
               PetscErrorCode,
               (CDM, SNESJacobianFn, Cvoid),
               dm, J, ctx,
              )


	return nothing
end 

"""
	DMSNESSetPicard(petsclib::PetscLibType,dm::PetscDM, b::SNESFunctionFn, J::SNESJacobianFn, ctx::Cvoid) 
set SNES Picard iteration matrix and RHS evaluation functions into a `DMSNES` object

Not Collective

Input Parameters:
- `dm`  - `DM` to be used with `SNES`
- `b`   - RHS evaluation function; see `SNESFunctionFn` for calling sequence
- `J`   - Picard matrix evaluation function; see `SNESJacobianFn` for calling sequence
- `ctx` - context for residual and matrix evaluation

Level: developer

-seealso: [](ch_snes), `DMSNES`, `SNESSetPicard()`, `DMSNESSetFunction()`, `DMSNESSetJacobian()`, `SNESFunctionFn`, `SNESJacobianFn`

# External Links
$(_doc_external("Snes/DMSNESSetPicard"))
"""
function DMSNESSetPicard(petsclib::PetscLibType, dm::PetscDM, b::SNESFunctionFn, J::SNESJacobianFn, ctx::Cvoid) end

@for_petsc function DMSNESSetPicard(petsclib::$UnionPetscLib, dm::PetscDM, b::SNESFunctionFn, J::SNESJacobianFn, ctx::Cvoid )

    @chk ccall(
               (:DMSNESSetPicard, $petsc_library),
               PetscErrorCode,
               (CDM, Ptr{SNESFunctionFn}, Ptr{SNESJacobianFn}, Ptr{Cvoid}),
               dm, b, J, ctx,
              )


	return nothing
end 

"""
	DMSNESGetPicard(petsclib::PetscLibType,dm::PetscDM, b::SNESFunctionFn, J::SNESJacobianFn, ctx::Cvoid) 
get `SNES` Picard iteration evaluation functions from a `DMSNES` object

Not Collective

Input Parameter:
- `dm` - `DM` to be used with `SNES`

Output Parameters:
- `b`   - RHS evaluation function; see `SNESFunctionFn` for calling sequence
- `J`   - Jacobian evaluation function; see `SNESJacobianFn` for calling sequence
- `ctx` - context for residual and matrix evaluation

Level: developer

-seealso: [](ch_snes), `DMSNES`, `DMSNESSetContext()`, `SNESSetFunction()`, `DMSNESSetJacobian()`, `SNESFunctionFn`, `SNESJacobianFn`

# External Links
$(_doc_external("Snes/DMSNESGetPicard"))
"""
function DMSNESGetPicard(petsclib::PetscLibType, dm::PetscDM, b::SNESFunctionFn, J::SNESJacobianFn, ctx::Cvoid) end

@for_petsc function DMSNESGetPicard(petsclib::$UnionPetscLib, dm::PetscDM, b::SNESFunctionFn, J::SNESJacobianFn, ctx::Cvoid )

    @chk ccall(
               (:DMSNESGetPicard, $petsc_library),
               PetscErrorCode,
               (CDM, SNESFunctionFn, SNESJacobianFn, Cvoid),
               dm, b, J, ctx,
              )


	return nothing
end 

"""
	DMSNESSetObjectiveLocal(petsclib::PetscLibType,dm::PetscDM, func::external, ctx::Cvoid) 
set a local objective evaluation function. This function is called with local vector
containing the local vector information PLUS ghost point information. It should compute a result for all local
elements and `DMSNES` will automatically accumulate the overlapping values.

Logically Collective

Input Parameters:
- `dm`   - `DM` to associate callback with
- `func` - local objective evaluation
- `ctx`  - optional context for local residual evaluation

Level: advanced

-seealso: `DMSNESSetFunctionLocal()`, `DMSNESSetJacobianLocal()`

# External Links
$(_doc_external("Snes/DMSNESSetObjectiveLocal"))
"""
function DMSNESSetObjectiveLocal(petsclib::PetscLibType, dm::PetscDM, func::external, ctx::Cvoid) end

@for_petsc function DMSNESSetObjectiveLocal(petsclib::$UnionPetscLib, dm::PetscDM, func::external, ctx::Cvoid )

    @chk ccall(
               (:DMSNESSetObjectiveLocal, $petsc_library),
               PetscErrorCode,
               (CDM, external, Ptr{Cvoid}),
               dm, func, ctx,
              )


	return nothing
end 

"""
	DMSNESSetFunctionLocal(petsclib::PetscLibType,dm::PetscDM, func::external, ctx::Cvoid) 
set a local residual evaluation function. This function is called with local vector
containing the local vector information PLUS ghost point information. It should compute a result for all local
elements and `DMSNES` will automatically accumulate the overlapping values.

Logically Collective

Input Parameters:
- `dm`   - `DM` to associate callback with
- `func` - local residual evaluation
- `ctx`  - optional context for local residual evaluation

Calling sequence of `func`:
- `dm`  - `DM` for the function
- `x`   - vector to state at which to evaluate residual
- `f`   - vector to hold the function evaluation
- `ctx` - optional context passed above

Level: advanced

-seealso: [](ch_snes), `DMSNESSetFunction()`, `DMSNESSetJacobianLocal()`

# External Links
$(_doc_external("Snes/DMSNESSetFunctionLocal"))
"""
function DMSNESSetFunctionLocal(petsclib::PetscLibType, dm::PetscDM, func::external, ctx::Cvoid) end

@for_petsc function DMSNESSetFunctionLocal(petsclib::$UnionPetscLib, dm::PetscDM, func::external, ctx::Cvoid )

    @chk ccall(
               (:DMSNESSetFunctionLocal, $petsc_library),
               PetscErrorCode,
               (CDM, external, Ptr{Cvoid}),
               dm, func, ctx,
              )


	return nothing
end 

"""
	DMSNESSetBoundaryLocal(petsclib::PetscLibType,dm::PetscDM, func::external, ctx::Cvoid) 
set a function to insert, for example, essential boundary conditions into a ghosted solution vector

Logically Collective

Input Parameters:
- `dm`   - `DM` to associate callback with
- `func` - local boundary value evaluation
- `ctx`  - optional context for local boundary value evaluation

Calling sequence of `func`:
- `dm`  - the `DM` context
- `X`   - ghosted solution vector, appropriate locations (such as essential boundary condition nodes) should be filled
- `ctx` - option context passed in `DMSNESSetBoundaryLocal()`

Level: advanced

-seealso: [](ch_snes), `DMSNESSetObjectiveLocal()`, `DMSNESSetFunctionLocal()`, `DMSNESSetJacobianLocal()`

# External Links
$(_doc_external("Snes/DMSNESSetBoundaryLocal"))
"""
function DMSNESSetBoundaryLocal(petsclib::PetscLibType, dm::PetscDM, func::external, ctx::Cvoid) end

@for_petsc function DMSNESSetBoundaryLocal(petsclib::$UnionPetscLib, dm::PetscDM, func::external, ctx::Cvoid )

    @chk ccall(
               (:DMSNESSetBoundaryLocal, $petsc_library),
               PetscErrorCode,
               (CDM, external, Ptr{Cvoid}),
               dm, func, ctx,
              )


	return nothing
end 

"""
	DMSNESSetJacobianLocal(petsclib::PetscLibType,dm::PetscDM, func::external, ctx::Cvoid) 
set a local Jacobian evaluation function

Logically Collective

Input Parameters:
- `dm`   - `DM` to associate callback with
- `func` - local Jacobian evaluation
- `ctx`  - optional context for local Jacobian evaluation

Calling sequence of `func`:
- `dm`  - the `DM` context
- `X`   - current solution vector (ghosted or not?)
- `J`   - the Jacobian
- `Jp`  - approximate Jacobian used to compute the preconditioner, often `J`
- `ctx` - a user provided context

Level: advanced

-seealso: [](ch_snes), `DMSNESSetObjectiveLocal()`, `DMSNESSetFunctionLocal()`, `DMSNESSetBoundaryLocal()`

# External Links
$(_doc_external("Snes/DMSNESSetJacobianLocal"))
"""
function DMSNESSetJacobianLocal(petsclib::PetscLibType, dm::PetscDM, func::external, ctx::Cvoid) end

@for_petsc function DMSNESSetJacobianLocal(petsclib::$UnionPetscLib, dm::PetscDM, func::external, ctx::Cvoid )

    @chk ccall(
               (:DMSNESSetJacobianLocal, $petsc_library),
               PetscErrorCode,
               (CDM, external, Ptr{Cvoid}),
               dm, func, ctx,
              )


	return nothing
end 

"""
	DMDASNESSetFunctionLocal(petsclib::PetscLibType,dm::PetscDM, imode::InsertMode, func::external, ctx::Cvoid) 
set a local residual evaluation function for use with `DMDA`

Logically Collective

Input Parameters:
- `dm`    - `DM` to associate callback with
- `imode` - `INSERT_VALUES` if local function computes owned part, `ADD_VALUES` if it contributes to ghosted part
- `func`  - local residual evaluation
- `ctx`   - optional context for local residual evaluation

Calling sequence of `func`:
- `info` - `DMDALocalInfo` defining the subdomain to evaluate the residual on
- `x`    - dimensional pointer to state at which to evaluate residual (e.g. PetscScalar *x or **x or ***x)
- `f`    - dimensional pointer to residual, write the residual here (e.g. PetscScalar *f or **f or ***f)
- `ctx`  - optional context passed above

Level: beginner

-seealso: [](ch_snes), `DMDA`, `DMDASNESSetJacobianLocal()`, `DMSNESSetFunction()`, `DMDACreate1d()`, `DMDACreate2d()`, `DMDACreate3d()`

# External Links
$(_doc_external("Snes/DMDASNESSetFunctionLocal"))
"""
function DMDASNESSetFunctionLocal(petsclib::PetscLibType, dm::PetscDM, imode::InsertMode, func::external, ctx::Cvoid) end

@for_petsc function DMDASNESSetFunctionLocal(petsclib::$UnionPetscLib, dm::PetscDM, imode::InsertMode, func::external, ctx::Cvoid )

    @chk ccall(
               (:DMDASNESSetFunctionLocal, $petsc_library),
               PetscErrorCode,
               (CDM, InsertMode, external, Ptr{Cvoid}),
               dm, imode, func, ctx,
              )


	return nothing
end 

"""
	DMDASNESSetFunctionLocalVec(petsclib::PetscLibType,dm::PetscDM, imode::InsertMode, func::external, ctx::Cvoid) 
set a local residual evaluation function that operates on a local vector for `DMDA`

Logically Collective

Input Parameters:
- `dm`    - `DM` to associate callback with
- `imode` - `INSERT_VALUES` if local function computes owned part, `ADD_VALUES` if it contributes to ghosted part
- `func`  - local residual evaluation
- `ctx`   - optional context for local residual evaluation

Calling sequence of `func`:
- `info` - `DMDALocalInfo` defining the subdomain to evaluate the residual on
- `x`    - state vector at which to evaluate residual
- `f`    - residual vector
- `ctx`  - optional context passed above

Level: beginner

-seealso: [](ch_snes), `DMDA`, `DMDASNESSetFunctionLocal()`, `DMDASNESSetJacobianLocalVec()`, `DMSNESSetFunction()`, `DMDACreate1d()`, `DMDACreate2d()`, `DMDACreate3d()`

# External Links
$(_doc_external("Snes/DMDASNESSetFunctionLocalVec"))
"""
function DMDASNESSetFunctionLocalVec(petsclib::PetscLibType, dm::PetscDM, imode::InsertMode, func::external, ctx::Cvoid) end

@for_petsc function DMDASNESSetFunctionLocalVec(petsclib::$UnionPetscLib, dm::PetscDM, imode::InsertMode, func::external, ctx::Cvoid )

    @chk ccall(
               (:DMDASNESSetFunctionLocalVec, $petsc_library),
               PetscErrorCode,
               (CDM, InsertMode, external, Ptr{Cvoid}),
               dm, imode, func, ctx,
              )


	return nothing
end 

"""
	DMDASNESSetJacobianLocal(petsclib::PetscLibType,dm::PetscDM, func::external, ctx::Cvoid) 
set a local Jacobian evaluation function for use with `DMDA`

Logically Collective

Input Parameters:
- `dm`   - `DM` to associate callback with
- `func` - local Jacobian evaluation function
- `ctx`  - optional context for local Jacobian evaluation

Calling sequence of `func`:
- `info` - `DMDALocalInfo` defining the subdomain to evaluate the Jacobian at
- `x`    - dimensional pointer to state at which to evaluate Jacobian (e.g. PetscScalar *x or **x or ***x)
- `J`    - `Mat` object for the Jacobian
- `M`    - `Mat` object used to compute the preconditioner often `J`
- `ctx`  - optional context passed above

Level: beginner

-seealso: [](ch_snes), `DMDA`, `DMDASNESSetFunctionLocal()`, `DMSNESSetJacobian()`, `DMDACreate1d()`, `DMDACreate2d()`, `DMDACreate3d()`

# External Links
$(_doc_external("Snes/DMDASNESSetJacobianLocal"))
"""
function DMDASNESSetJacobianLocal(petsclib::PetscLibType, dm::PetscDM, func::external, ctx::Cvoid) end

@for_petsc function DMDASNESSetJacobianLocal(petsclib::$UnionPetscLib, dm::PetscDM, func::external, ctx::Cvoid )

    @chk ccall(
               (:DMDASNESSetJacobianLocal, $petsc_library),
               PetscErrorCode,
               (CDM, external, Ptr{Cvoid}),
               dm, func, ctx,
              )


	return nothing
end 

"""
	DMDASNESSetJacobianLocalVec(petsclib::PetscLibType,dm::PetscDM, func::external, ctx::Cvoid) 
set a local Jacobian evaluation function that operates on a local vector with `DMDA`

Logically Collective

Input Parameters:
- `dm`   - `DM` to associate callback with
- `func` - local Jacobian evaluation
- `ctx`  - optional context for local Jacobian evaluation

Calling sequence of `func`:
- `info` - `DMDALocalInfo` defining the subdomain to evaluate the Jacobian at
- `x`    - state vector at which to evaluate Jacobian
- `J`    - the Jacobian
- `M`    - approximate Jacobian from which the preconditioner will be computed, often `J`
- `ctx`  - optional context passed above

Level: beginner

-seealso: [](ch_snes), `DMDA`, `DMDASNESSetJacobianLocal()`, `DMDASNESSetFunctionLocalVec()`, `DMSNESSetJacobian()`, `DMDACreate1d()`, `DMDACreate2d()`, `DMDACreate3d()`

# External Links
$(_doc_external("Snes/DMDASNESSetJacobianLocalVec"))
"""
function DMDASNESSetJacobianLocalVec(petsclib::PetscLibType, dm::PetscDM, func::external, ctx::Cvoid) end

@for_petsc function DMDASNESSetJacobianLocalVec(petsclib::$UnionPetscLib, dm::PetscDM, func::external, ctx::Cvoid )

    @chk ccall(
               (:DMDASNESSetJacobianLocalVec, $petsc_library),
               PetscErrorCode,
               (CDM, external, Ptr{Cvoid}),
               dm, func, ctx,
              )


	return nothing
end 

"""
	DMDASNESSetObjectiveLocal(petsclib::PetscLibType,dm::PetscDM, func::external, ctx::Cvoid) 
set a local residual evaluation function to used with a `DMDA`

Logically Collective

Input Parameters:
- `dm`   - `DM` to associate callback with
- `func` - local objective evaluation, see `DMDASNESSetObjectiveLocal` for the calling sequence
- `ctx`  - optional context for local residual evaluation

Calling sequence of `func`:
- `info` - `DMDALocalInfo` defining the subdomain to evaluate the Jacobian at
- `x`    - dimensional pointer to state at which to evaluate the objective (e.g. PetscScalar *x or **x or ***x)
- `obj`  - returned objective value for the local subdomain
- `ctx`  - optional context passed above

Level: beginner

-seealso: [](ch_snes), `DMDA`, `DMSNESSetFunction()`, `DMDASNESSetJacobianLocal()`, `DMDACreate1d()`, `DMDACreate2d()`, `DMDACreate3d()`, `DMDASNESObjectiveFn`

# External Links
$(_doc_external("Snes/DMDASNESSetObjectiveLocal"))
"""
function DMDASNESSetObjectiveLocal(petsclib::PetscLibType, dm::PetscDM, func::external, ctx::Cvoid) end

@for_petsc function DMDASNESSetObjectiveLocal(petsclib::$UnionPetscLib, dm::PetscDM, func::external, ctx::Cvoid )

    @chk ccall(
               (:DMDASNESSetObjectiveLocal, $petsc_library),
               PetscErrorCode,
               (CDM, external, Ptr{Cvoid}),
               dm, func, ctx,
              )


	return nothing
end 

"""
	DMDASNESSetObjectiveLocalVec(petsclib::PetscLibType,dm::PetscDM, func::external, ctx::Cvoid) 
set a local residual evaluation function that operates on a local vector with `DMDA`

Logically Collective

Input Parameters:
- `dm`   - `DM` to associate callback with
- `func` - local objective evaluation, see `DMDASNESSetObjectiveLocalVec` for the calling sequence
- `ctx`  - optional context for local residual evaluation

Calling sequence of `func`:
- `info` - `DMDALocalInfo` defining the subdomain to evaluate the Jacobian at
- `x`    - state vector at which to evaluate the objective
- `obj`  - returned objective value for the local subdomain
- `ctx`  - optional context passed above

Level: beginner

-seealso: [](ch_snes), `DMDA`, `DMDASNESSetObjectiveLocal()`, `DMSNESSetFunction()`, `DMDASNESSetJacobianLocalVec()`, `DMDACreate1d()`, `DMDACreate2d()`, `DMDACreate3d()`, `DMDASNESObjectiveVecFn`

# External Links
$(_doc_external("Snes/DMDASNESSetObjectiveLocalVec"))
"""
function DMDASNESSetObjectiveLocalVec(petsclib::PetscLibType, dm::PetscDM, func::external, ctx::Cvoid) end

@for_petsc function DMDASNESSetObjectiveLocalVec(petsclib::$UnionPetscLib, dm::PetscDM, func::external, ctx::Cvoid )

    @chk ccall(
               (:DMDASNESSetObjectiveLocalVec, $petsc_library),
               PetscErrorCode,
               (CDM, external, Ptr{Cvoid}),
               dm, func, ctx,
              )


	return nothing
end 

"""
	DMDASNESSetPicardLocal(petsclib::PetscLibType,dm::PetscDM, imode::InsertMode, func::external, jac::external, ctx::Cvoid) 
set a local right

Logically Collective

Input Parameters:
- `dm`    - `DM` to associate callback with
- `imode` - `INSERT_VALUES` if local function computes owned part, `ADD_VALUES` if it contributes to ghosted part
- `func`  - local residual evaluation
- `jac`   - function to compute Jacobian
- `ctx`   - optional context for local residual evaluation

Calling sequence of `func`:
- `info` - defines the subdomain to evaluate the residual on
- `x`    - dimensional pointer to state at which to evaluate residual
- `f`    - dimensional pointer to residual, write the residual here
- `ctx`  - optional context passed above

Calling sequence of `jac`:
- `info` - defines the subdomain to evaluate the residual on
- `x`    - dimensional pointer to state at which to evaluate residual
- `jac`  - the Jacobian
- `Jp`   - approximation to the Jacobian used to compute the preconditioner, often `J`
- `ctx`  - optional context passed above

Level: beginner

-seealso: [](ch_snes), `SNES`, `DMDA`, `DMSNESSetFunction()`, `DMDASNESSetJacobian()`, `DMDACreate1d()`, `DMDACreate2d()`, `DMDACreate3d()`

# External Links
$(_doc_external("Snes/DMDASNESSetPicardLocal"))
"""
function DMDASNESSetPicardLocal(petsclib::PetscLibType, dm::PetscDM, imode::InsertMode, func::external, jac::external, ctx::Cvoid) end

@for_petsc function DMDASNESSetPicardLocal(petsclib::$UnionPetscLib, dm::PetscDM, imode::InsertMode, func::external, jac::external, ctx::Cvoid )

    @chk ccall(
               (:DMDASNESSetPicardLocal, $petsc_library),
               PetscErrorCode,
               (CDM, InsertMode, external, external, Ptr{Cvoid}),
               dm, imode, func, jac, ctx,
              )


	return nothing
end 

"""
	obj::PetscReal = DMPlexSNESComputeObjectiveFEM(petsclib::PetscLibType,dm::PetscDM, X::PetscVec, user::Cvoid) 
Sums the local objectives from the local input X using pointwise functions specified by the user

Input Parameters:
- `dm`   - The mesh
- `X`    - Local solution
- `user` - The user context

Output Parameter:
- `obj` - Local objective value

Level: developer

-seealso: `DM`, `DMPlexSNESComputeResidualFEM()`

# External Links
$(_doc_external("Snes/DMPlexSNESComputeObjectiveFEM"))
"""
function DMPlexSNESComputeObjectiveFEM(petsclib::PetscLibType, dm::PetscDM, X::PetscVec, user::Cvoid) end

@for_petsc function DMPlexSNESComputeObjectiveFEM(petsclib::$UnionPetscLib, dm::PetscDM, X::PetscVec, user::Cvoid )
	obj_ = Ref{$PetscReal}()

    @chk ccall(
               (:DMPlexSNESComputeObjectiveFEM, $petsc_library),
               PetscErrorCode,
               (CDM, CVec, Ptr{$PetscReal}, Ptr{Cvoid}),
               dm, X, obj_, user,
              )

	obj = obj_[]

	return obj
end 

"""
	DMPlexSNESComputeResidualFEM(petsclib::PetscLibType,dm::PetscDM, X::PetscVec, F::PetscVec, user::Cvoid) 
Sums the local residual into vector `F` from the local input `X` using pointwise functions specified by the user

Input Parameters:
- `dm`   - The mesh
- `X`    - Local solution
- `user` - The user context

Output Parameter:
- `F` - Local output vector

Level: developer

-seealso: [](ch_snes), `DM`, `DMPLEX`, `DMSNESComputeJacobianAction()`

# External Links
$(_doc_external("Snes/DMPlexSNESComputeResidualFEM"))
"""
function DMPlexSNESComputeResidualFEM(petsclib::PetscLibType, dm::PetscDM, X::PetscVec, F::PetscVec, user::Cvoid) end

@for_petsc function DMPlexSNESComputeResidualFEM(petsclib::$UnionPetscLib, dm::PetscDM, X::PetscVec, F::PetscVec, user::Cvoid )

    @chk ccall(
               (:DMPlexSNESComputeResidualFEM, $petsc_library),
               PetscErrorCode,
               (CDM, CVec, CVec, Ptr{Cvoid}),
               dm, X, F, user,
              )


	return nothing
end 

"""
	DMPlexSNESComputeResidualDS(petsclib::PetscLibType,dm::PetscDM, X::PetscVec, F::PetscVec, user::Cvoid) 
Sums the local residual into vector `F` from the local input `X` using all pointwise functions with unique keys in the `PetscDS`

Input Parameters:
- `dm`   - The mesh
- `X`    - Local solution
- `user` - The user context

Output Parameter:
- `F` - Local output vector

Level: developer

-seealso: [](ch_snes), `DM`, `DMPLEX`, `DMPlexComputeJacobianAction()`

# External Links
$(_doc_external("Snes/DMPlexSNESComputeResidualDS"))
"""
function DMPlexSNESComputeResidualDS(petsclib::PetscLibType, dm::PetscDM, X::PetscVec, F::PetscVec, user::Cvoid) end

@for_petsc function DMPlexSNESComputeResidualDS(petsclib::$UnionPetscLib, dm::PetscDM, X::PetscVec, F::PetscVec, user::Cvoid )

    @chk ccall(
               (:DMPlexSNESComputeResidualDS, $petsc_library),
               PetscErrorCode,
               (CDM, CVec, CVec, Ptr{Cvoid}),
               dm, X, F, user,
              )


	return nothing
end 

"""
	DMPlexSNESComputeBoundaryFEM(petsclib::PetscLibType,dm::PetscDM, X::PetscVec, user::Cvoid) 
Form the boundary values for the local input `X`

Input Parameters:
- `dm`   - The mesh
- `user` - The user context

Output Parameter:
- `X` - Local solution

Level: developer

-seealso: [](ch_snes), `DM`, `DMPLEX`, `DMPlexComputeJacobianAction()`

# External Links
$(_doc_external("Snes/DMPlexSNESComputeBoundaryFEM"))
"""
function DMPlexSNESComputeBoundaryFEM(petsclib::PetscLibType, dm::PetscDM, X::PetscVec, user::Cvoid) end

@for_petsc function DMPlexSNESComputeBoundaryFEM(petsclib::$UnionPetscLib, dm::PetscDM, X::PetscVec, user::Cvoid )

    @chk ccall(
               (:DMPlexSNESComputeBoundaryFEM, $petsc_library),
               PetscErrorCode,
               (CDM, CVec, Ptr{Cvoid}),
               dm, X, user,
              )


	return nothing
end 

"""
	DMSNESComputeJacobianAction(petsclib::PetscLibType,dm::PetscDM, X::PetscVec, Y::PetscVec, F::PetscVec, user::Cvoid) 
Compute the action of the Jacobian J(`X`) on `Y`

Input Parameters:
- `dm`   - The `DM`
- `X`    - Local solution vector
- `Y`    - Local input vector
- `user` - The user context

Output Parameter:
- `F` - local output vector

Level: developer

-seealso: [](ch_snes), `DM`, `DMSNESCreateJacobianMF()`, `DMPlexSNESComputeResidualFEM()`

# External Links
$(_doc_external("Snes/DMSNESComputeJacobianAction"))
"""
function DMSNESComputeJacobianAction(petsclib::PetscLibType, dm::PetscDM, X::PetscVec, Y::PetscVec, F::PetscVec, user::Cvoid) end

@for_petsc function DMSNESComputeJacobianAction(petsclib::$UnionPetscLib, dm::PetscDM, X::PetscVec, Y::PetscVec, F::PetscVec, user::Cvoid )

    @chk ccall(
               (:DMSNESComputeJacobianAction, $petsc_library),
               PetscErrorCode,
               (CDM, CVec, CVec, CVec, Ptr{Cvoid}),
               dm, X, Y, F, user,
              )


	return nothing
end 

"""
	DMPlexSNESComputeJacobianFEM(petsclib::PetscLibType,dm::PetscDM, X::PetscVec, Jac::PetscMat, JacP::PetscMat, user::Cvoid) 
Form the local portion of the Jacobian matrix `Jac` at the local solution `X` using pointwise functions specified by the user.

Input Parameters:
- `dm`   - The `DM`
- `X`    - Local input vector
- `user` - The user context

Output Parameters:
- `Jac`  - Jacobian matrix
- `JacP` - approximate Jacobian from which the preconditioner will be built, often `Jac`

Level: developer

-seealso: [](ch_snes), `DMPLEX`, `Mat`

# External Links
$(_doc_external("Snes/DMPlexSNESComputeJacobianFEM"))
"""
function DMPlexSNESComputeJacobianFEM(petsclib::PetscLibType, dm::PetscDM, X::PetscVec, Jac::PetscMat, JacP::PetscMat, user::Cvoid) end

@for_petsc function DMPlexSNESComputeJacobianFEM(petsclib::$UnionPetscLib, dm::PetscDM, X::PetscVec, Jac::PetscMat, JacP::PetscMat, user::Cvoid )

    @chk ccall(
               (:DMPlexSNESComputeJacobianFEM, $petsc_library),
               PetscErrorCode,
               (CDM, CVec, CMat, CMat, Ptr{Cvoid}),
               dm, X, Jac, JacP, user,
              )


	return nothing
end 

"""
	J::PetscMat = DMSNESCreateJacobianMF(petsclib::PetscLibType,dm::PetscDM, X::PetscVec, user::Cvoid) 
Create a `Mat` which computes the action of the Jacobian matrix

Collective

Input Parameters:
- `dm`   - The `DM`
- `X`    - The evaluation point for the Jacobian
- `user` - A user context, or `NULL`

Output Parameter:
- `J` - The `Mat`

Level: advanced

-seealso: [](ch_snes), `DM`, `SNES`, `DMSNESComputeJacobianAction()`

# External Links
$(_doc_external("Snes/DMSNESCreateJacobianMF"))
"""
function DMSNESCreateJacobianMF(petsclib::PetscLibType, dm::PetscDM, X::PetscVec, user::Cvoid) end

@for_petsc function DMSNESCreateJacobianMF(petsclib::$UnionPetscLib, dm::PetscDM, X::PetscVec, user::Cvoid )
	J_ = Ref{CMat}()

    @chk ccall(
               (:DMSNESCreateJacobianMF, $petsc_library),
               PetscErrorCode,
               (CDM, CVec, Ptr{Cvoid}, Ptr{CMat}),
               dm, X, user, J_,
              )

	J = PetscMat(J_[], petsclib)

	return J
end 

"""
	DMPlexSetSNESLocalFEM(petsclib::PetscLibType,dm::PetscDM, use_obj::PetscBool, ctx::Cvoid) 
Use `DMPLEX`'s internal FEM routines to compute `SNES` boundary values, objective, residual, and Jacobian.

Input Parameters:
- `dm`      - The `DM` object
- `use_obj` - Use the objective function callback
- `ctx`     - The user context that will be passed to pointwise evaluation routines

Level: developer

-seealso: [](ch_snes),`DMPLEX`, `SNES`, `PetscDSAddBoundary()`, `PetscDSSetObjective()`, `PetscDSSetResidual()`, `PetscDSSetJacobian()`

# External Links
$(_doc_external("Snes/DMPlexSetSNESLocalFEM"))
"""
function DMPlexSetSNESLocalFEM(petsclib::PetscLibType, dm::PetscDM, use_obj::PetscBool, ctx::Cvoid) end

@for_petsc function DMPlexSetSNESLocalFEM(petsclib::$UnionPetscLib, dm::PetscDM, use_obj::PetscBool, ctx::Cvoid )

    @chk ccall(
               (:DMPlexSetSNESLocalFEM, $petsc_library),
               PetscErrorCode,
               (CDM, PetscBool, Ptr{Cvoid}),
               dm, use_obj, ctx,
              )


	return nothing
end 

"""
	error::Vector{PetscReal} = DMSNESCheckDiscretization(petsclib::PetscLibType,snes::PetscSNES, dm::PetscDM, t::PetscReal, u::PetscVec, tol::PetscReal) 
Check the discretization error of the exact solution

Input Parameters:
- `snes` - the `SNES` object
- `dm`   - the `DM`
- `t`    - the time
- `u`    - a `DM` vector
- `tol`  - A tolerance for the check, or -1 to print the results instead

Output Parameter:
- `error` - An array which holds the discretization error in each field, or `NULL`

Level: developer

-seealso: [](ch_snes), `PetscDSSetExactSolution()`, `DNSNESCheckFromOptions()`, `DMSNESCheckResidual()`, `DMSNESCheckJacobian()`

# External Links
$(_doc_external("Snes/DMSNESCheckDiscretization"))
"""
function DMSNESCheckDiscretization(petsclib::PetscLibType, snes::PetscSNES, dm::PetscDM, t::PetscReal, u::PetscVec, tol::PetscReal) end

@for_petsc function DMSNESCheckDiscretization(petsclib::$UnionPetscLib, snes::PetscSNES, dm::PetscDM, t::$PetscReal, u::PetscVec, tol::$PetscReal )
	error = Vector{$PetscReal}(undef, ni);  # CHECK SIZE!!

    @chk ccall(
               (:DMSNESCheckDiscretization, $petsc_library),
               PetscErrorCode,
               (CSNES, CDM, $PetscReal, CVec, $PetscReal, Ptr{$PetscReal}),
               snes, dm, t, u, tol, error,
              )


	return error
end 

"""
	residual::PetscReal = DMSNESCheckResidual(petsclib::PetscLibType,snes::PetscSNES, dm::PetscDM, u::PetscVec, tol::PetscReal) 
Check the residual of the exact solution

Input Parameters:
- `snes` - the `SNES` object
- `dm`   - the `DM`
- `u`    - a `DM` vector
- `tol`  - A tolerance for the check, or -1 to print the results instead

Output Parameter:
- `residual` - The residual norm of the exact solution, or `NULL`

Level: developer

-seealso: [](ch_snes), `DNSNESCheckFromOptions()`, `DMSNESCheckDiscretization()`, `DMSNESCheckJacobian()`

# External Links
$(_doc_external("Snes/DMSNESCheckResidual"))
"""
function DMSNESCheckResidual(petsclib::PetscLibType, snes::PetscSNES, dm::PetscDM, u::PetscVec, tol::PetscReal) end

@for_petsc function DMSNESCheckResidual(petsclib::$UnionPetscLib, snes::PetscSNES, dm::PetscDM, u::PetscVec, tol::$PetscReal )
	residual_ = Ref{$PetscReal}()

    @chk ccall(
               (:DMSNESCheckResidual, $petsc_library),
               PetscErrorCode,
               (CSNES, CDM, CVec, $PetscReal, Ptr{$PetscReal}),
               snes, dm, u, tol, residual_,
              )

	residual = residual_[]

	return residual
end 

"""
	isLinear::PetscBool,convRate::PetscReal = DMSNESCheckJacobian(petsclib::PetscLibType,snes::PetscSNES, dm::PetscDM, u::PetscVec, tol::PetscReal) 
Check the Jacobian of the exact solution against the residual using the Taylor Test

Input Parameters:
- `snes` - the `SNES` object
- `dm`   - the `DM`
- `u`    - a `DM` vector
- `tol`  - A tolerance for the check, or -1 to print the results instead

Output Parameters:
- `isLinear` - Flag indicaing that the function looks linear, or `NULL`
- `convRate` - The rate of convergence of the linear model, or `NULL`

Level: developer

-seealso: [](ch_snes), `DNSNESCheckFromOptions()`, `DMSNESCheckDiscretization()`, `DMSNESCheckResidual()`

# External Links
$(_doc_external("Snes/DMSNESCheckJacobian"))
"""
function DMSNESCheckJacobian(petsclib::PetscLibType, snes::PetscSNES, dm::PetscDM, u::PetscVec, tol::PetscReal) end

@for_petsc function DMSNESCheckJacobian(petsclib::$UnionPetscLib, snes::PetscSNES, dm::PetscDM, u::PetscVec, tol::$PetscReal )
	isLinear_ = Ref{PetscBool}()
	convRate_ = Ref{$PetscReal}()

    @chk ccall(
               (:DMSNESCheckJacobian, $petsc_library),
               PetscErrorCode,
               (CSNES, CDM, CVec, $PetscReal, Ptr{PetscBool}, Ptr{$PetscReal}),
               snes, dm, u, tol, isLinear_, convRate_,
              )

	isLinear = isLinear_[]
	convRate = convRate_[]

	return isLinear,convRate
end 

"""
	DMSNESCheckFromOptions(petsclib::PetscLibType,snes::PetscSNES, u::PetscVec) 
Check the residual and Jacobian functions using the exact solution by outputting some diagnostic information

Input Parameters:
- `snes` - the `SNES` object
- `u`    - representative `SNES` vector

Level: developer

-seealso: [](ch_snes), `SNES`, `DM`

# External Links
$(_doc_external("Snes/DMSNESCheckFromOptions"))
"""
function DMSNESCheckFromOptions(petsclib::PetscLibType, snes::PetscSNES, u::PetscVec) end

@for_petsc function DMSNESCheckFromOptions(petsclib::$UnionPetscLib, snes::PetscSNES, u::PetscVec )

    @chk ccall(
               (:DMSNESCheckFromOptions, $petsc_library),
               PetscErrorCode,
               (CSNES, CVec),
               snes, u,
              )


	return nothing
end 

"""
	DMPlexSetSNESVariableBounds(petsclib::PetscLibType,dm::PetscDM, snes::PetscSNES) 
Compute upper and lower bounds for the solution using pointsie functions from the `PetscDS`

Collective

Input Parameters:
- `dm`   - The `DM` object
- `snes` - the `SNES` object

Level: intermediate

-seealso: `SNESVISetVariableBounds()`, `SNESVI`, [](ch_snes), `DM`

# External Links
$(_doc_external("Snes/DMPlexSetSNESVariableBounds"))
"""
function DMPlexSetSNESVariableBounds(petsclib::PetscLibType, dm::PetscDM, snes::PetscSNES) end

@for_petsc function DMPlexSetSNESVariableBounds(petsclib::$UnionPetscLib, dm::PetscDM, snes::PetscSNES )

    @chk ccall(
               (:DMPlexSetSNESVariableBounds, $petsc_library),
               PetscErrorCode,
               (CDM, CSNES),
               dm, snes,
              )


	return nothing
end 

"""
	DMPlexSNESComputeResidualCEED(petsclib::PetscLibType,dm::PetscDM, locX::PetscVec, locF::PetscVec, user::Cvoid) 

# External Links
$(_doc_external("Snes/DMPlexSNESComputeResidualCEED"))
"""
function DMPlexSNESComputeResidualCEED(petsclib::PetscLibType, dm::PetscDM, locX::PetscVec, locF::PetscVec, user::Cvoid) end

@for_petsc function DMPlexSNESComputeResidualCEED(petsclib::$UnionPetscLib, dm::PetscDM, locX::PetscVec, locF::PetscVec, user::Cvoid )

    @chk ccall(
               (:DMPlexSNESComputeResidualCEED, $petsc_library),
               PetscErrorCode,
               (CDM, CVec, CVec, Ptr{Cvoid}),
               dm, locX, locF, user,
              )


	return nothing
end 

"""
	ctx::DMInterpolationInfo = DMInterpolationCreate(petsclib::PetscLibType,comm::MPI_Comm) 
Creates a `DMInterpolationInfo` context

Collective

Input Parameter:
- `comm` - the communicator

Output Parameter:
- `ctx` - the context

Level: beginner

Developer Note:
The naming is incorrect, either the object should be named `DMInterpolation` or all the routines should begin with `DMInterpolationInfo`

See also: 
=== 
`DM`, `DMInterpolationInfo`, `DMInterpolationEvaluate()`, `DMInterpolationAddPoints()`, `DMInterpolationDestroy()`

# External Links
$(_doc_external("Dm/DMInterpolationCreate"))
"""
function DMInterpolationCreate(petsclib::PetscLibType, comm::MPI_Comm) end

@for_petsc function DMInterpolationCreate(petsclib::$UnionPetscLib, comm::MPI_Comm )
	ctx_ = Ref{DMInterpolationInfo}()

    @chk ccall(
               (:DMInterpolationCreate, $petsc_library),
               PetscErrorCode,
               (MPI_Comm, Ptr{DMInterpolationInfo}),
               comm, ctx_,
              )

	ctx = ctx_[]

	return ctx
end 

"""
	DMInterpolationSetDim(petsclib::PetscLibType,ctx::DMInterpolationInfo, dim::PetscInt) 
Sets the spatial dimension for the interpolation context

Not Collective

Input Parameters:
- `ctx` - the context
- `dim` - the spatial dimension

Level: intermediate

See also: 
=== 
`DM`, `DMInterpolationInfo`, `DMInterpolationGetDim()`, `DMInterpolationEvaluate()`, `DMInterpolationAddPoints()`

# External Links
$(_doc_external("Dm/DMInterpolationSetDim"))
"""
function DMInterpolationSetDim(petsclib::PetscLibType, ctx::DMInterpolationInfo, dim::PetscInt) end

@for_petsc function DMInterpolationSetDim(petsclib::$UnionPetscLib, ctx::DMInterpolationInfo, dim::$PetscInt )

    @chk ccall(
               (:DMInterpolationSetDim, $petsc_library),
               PetscErrorCode,
               (DMInterpolationInfo, $PetscInt),
               ctx, dim,
              )


	return nothing
end 

"""
	dim::PetscInt = DMInterpolationGetDim(petsclib::PetscLibType,ctx::DMInterpolationInfo) 
Gets the spatial dimension for the interpolation context

Not Collective

Input Parameter:
- `ctx` - the context

Output Parameter:
- `dim` - the spatial dimension

Level: intermediate

See also: 
=== 
`DM`, `DMInterpolationInfo`, `DMInterpolationSetDim()`, `DMInterpolationEvaluate()`, `DMInterpolationAddPoints()`

# External Links
$(_doc_external("Dm/DMInterpolationGetDim"))
"""
function DMInterpolationGetDim(petsclib::PetscLibType, ctx::DMInterpolationInfo) end

@for_petsc function DMInterpolationGetDim(petsclib::$UnionPetscLib, ctx::DMInterpolationInfo )
	dim_ = Ref{$PetscInt}()

    @chk ccall(
               (:DMInterpolationGetDim, $petsc_library),
               PetscErrorCode,
               (DMInterpolationInfo, Ptr{$PetscInt}),
               ctx, dim_,
              )

	dim = dim_[]

	return dim
end 

"""
	DMInterpolationSetDof(petsclib::PetscLibType,ctx::DMInterpolationInfo, dof::PetscInt) 
Sets the number of fields interpolated at a point for the interpolation context

Not Collective

Input Parameters:
- `ctx` - the context
- `dof` - the number of fields

Level: intermediate

See also: 
=== 
`DM`, `DMInterpolationInfo`, `DMInterpolationGetDof()`, `DMInterpolationEvaluate()`, `DMInterpolationAddPoints()`

# External Links
$(_doc_external("Dm/DMInterpolationSetDof"))
"""
function DMInterpolationSetDof(petsclib::PetscLibType, ctx::DMInterpolationInfo, dof::PetscInt) end

@for_petsc function DMInterpolationSetDof(petsclib::$UnionPetscLib, ctx::DMInterpolationInfo, dof::$PetscInt )

    @chk ccall(
               (:DMInterpolationSetDof, $petsc_library),
               PetscErrorCode,
               (DMInterpolationInfo, $PetscInt),
               ctx, dof,
              )


	return nothing
end 

"""
	dof::PetscInt = DMInterpolationGetDof(petsclib::PetscLibType,ctx::DMInterpolationInfo) 
Gets the number of fields interpolated at a point for the interpolation context

Not Collective

Input Parameter:
- `ctx` - the context

Output Parameter:
- `dof` - the number of fields

Level: intermediate

See also: 
=== 
`DM`, `DMInterpolationInfo`, `DMInterpolationSetDof()`, `DMInterpolationEvaluate()`, `DMInterpolationAddPoints()`

# External Links
$(_doc_external("Dm/DMInterpolationGetDof"))
"""
function DMInterpolationGetDof(petsclib::PetscLibType, ctx::DMInterpolationInfo) end

@for_petsc function DMInterpolationGetDof(petsclib::$UnionPetscLib, ctx::DMInterpolationInfo )
	dof_ = Ref{$PetscInt}()

    @chk ccall(
               (:DMInterpolationGetDof, $petsc_library),
               PetscErrorCode,
               (DMInterpolationInfo, Ptr{$PetscInt}),
               ctx, dof_,
              )

	dof = dof_[]

	return dof
end 

"""
	DMInterpolationAddPoints(petsclib::PetscLibType,ctx::DMInterpolationInfo, n::PetscInt, points::Vector{PetscReal}) 
Add points at which we will interpolate the fields

Not Collective

Input Parameters:
- `ctx`    - the context
- `n`      - the number of points
- `points` - the coordinates for each point, an array of size `n` * dim

Level: intermediate

Note:
The input coordinate information is copied into the object.

See also: 
=== 
`DM`, `DMInterpolationInfo`, `DMInterpolationSetDim()`, `DMInterpolationEvaluate()`, `DMInterpolationCreate()`

# External Links
$(_doc_external("Dm/DMInterpolationAddPoints"))
"""
function DMInterpolationAddPoints(petsclib::PetscLibType, ctx::DMInterpolationInfo, n::PetscInt, points::Vector{PetscReal}) end

@for_petsc function DMInterpolationAddPoints(petsclib::$UnionPetscLib, ctx::DMInterpolationInfo, n::$PetscInt, points::Vector{$PetscReal} )

    @chk ccall(
               (:DMInterpolationAddPoints, $petsc_library),
               PetscErrorCode,
               (DMInterpolationInfo, $PetscInt, Ptr{$PetscReal}),
               ctx, n, points,
              )


	return nothing
end 

"""
	DMInterpolationSetUp(petsclib::PetscLibType,ctx::DMInterpolationInfo, dm::PetscDM, redundantPoints::PetscBool, ignoreOutsideDomain::PetscBool) 
Compute spatial indices for point location during interpolation

Collective

Input Parameters:
- `ctx`                 - the context
- `dm`                  - the `DM` for the function space used for interpolation
- `redundantPoints`     - If `PETSC_TRUE`, all processes are passing in the same array of points. Otherwise, points need to be communicated among processes.
- `ignoreOutsideDomain` - If `PETSC_TRUE`, ignore points outside the domain, otherwise return an error

Level: intermediate

See also: 
=== 
`DM`, `DMInterpolationInfo`, `DMInterpolationEvaluate()`, `DMInterpolationAddPoints()`, `DMInterpolationCreate()`

# External Links
$(_doc_external("Dm/DMInterpolationSetUp"))
"""
function DMInterpolationSetUp(petsclib::PetscLibType, ctx::DMInterpolationInfo, dm::PetscDM, redundantPoints::PetscBool, ignoreOutsideDomain::PetscBool) end

@for_petsc function DMInterpolationSetUp(petsclib::$UnionPetscLib, ctx::DMInterpolationInfo, dm::PetscDM, redundantPoints::PetscBool, ignoreOutsideDomain::PetscBool )

    @chk ccall(
               (:DMInterpolationSetUp, $petsc_library),
               PetscErrorCode,
               (DMInterpolationInfo, CDM, PetscBool, PetscBool),
               ctx, dm, redundantPoints, ignoreOutsideDomain,
              )


	return nothing
end 

"""
	DMInterpolationGetCoordinates(petsclib::PetscLibType,ctx::DMInterpolationInfo, coordinates::PetscVec) 
Gets a `Vec` with the coordinates of each interpolation point

Collective

Input Parameter:
- `ctx` - the context

Output Parameter:
- `coordinates` - the coordinates of interpolation points

Level: intermediate

Note:
The local vector entries correspond to interpolation points lying on this process, according to the associated `DM`.
This is a borrowed vector that the user should not destroy.

See also: 
=== 
`DM`, `DMInterpolationInfo`, `DMInterpolationEvaluate()`, `DMInterpolationAddPoints()`, `DMInterpolationCreate()`

# External Links
$(_doc_external("Dm/DMInterpolationGetCoordinates"))
"""
function DMInterpolationGetCoordinates(petsclib::PetscLibType, ctx::DMInterpolationInfo, coordinates::PetscVec) end

@for_petsc function DMInterpolationGetCoordinates(petsclib::$UnionPetscLib, ctx::DMInterpolationInfo, coordinates::PetscVec )
	coordinates_ = Ref(coordinates.ptr)

    @chk ccall(
               (:DMInterpolationGetCoordinates, $petsc_library),
               PetscErrorCode,
               (DMInterpolationInfo, Ptr{CVec}),
               ctx, coordinates_,
              )

	coordinates.ptr = C_NULL

	return nothing
end 

"""
	DMInterpolationGetVector(petsclib::PetscLibType,ctx::DMInterpolationInfo, v::PetscVec) 
Gets a `Vec` which can hold all the interpolated field values

Collective

Input Parameter:
- `ctx` - the context

Output Parameter:
- `v` - a vector capable of holding the interpolated field values

Level: intermediate

Note:
This vector should be returned using `DMInterpolationRestoreVector()`.

See also: 
=== 
`DM`, `DMInterpolationInfo`, `DMInterpolationRestoreVector()`, `DMInterpolationEvaluate()`, `DMInterpolationAddPoints()`, `DMInterpolationCreate()`

# External Links
$(_doc_external("Dm/DMInterpolationGetVector"))
"""
function DMInterpolationGetVector(petsclib::PetscLibType, ctx::DMInterpolationInfo, v::PetscVec) end

@for_petsc function DMInterpolationGetVector(petsclib::$UnionPetscLib, ctx::DMInterpolationInfo, v::PetscVec )
	v_ = Ref(v.ptr)

    @chk ccall(
               (:DMInterpolationGetVector, $petsc_library),
               PetscErrorCode,
               (DMInterpolationInfo, Ptr{CVec}),
               ctx, v_,
              )

	v.ptr = C_NULL

	return nothing
end 

"""
	DMInterpolationRestoreVector(petsclib::PetscLibType,ctx::DMInterpolationInfo, v::PetscVec) 
Returns a `Vec` which can hold all the interpolated field values

Collective

Input Parameters:
- `ctx` - the context
- `v`   - a vector capable of holding the interpolated field values

Level: intermediate

See also: 
=== 
`DM`, `DMInterpolationInfo`, `DMInterpolationGetVector()`, `DMInterpolationEvaluate()`, `DMInterpolationAddPoints()`, `DMInterpolationCreate()`

# External Links
$(_doc_external("Dm/DMInterpolationRestoreVector"))
"""
function DMInterpolationRestoreVector(petsclib::PetscLibType, ctx::DMInterpolationInfo, v::PetscVec) end

@for_petsc function DMInterpolationRestoreVector(petsclib::$UnionPetscLib, ctx::DMInterpolationInfo, v::PetscVec )
	v_ = Ref(v.ptr)

    @chk ccall(
               (:DMInterpolationRestoreVector, $petsc_library),
               PetscErrorCode,
               (DMInterpolationInfo, Ptr{CVec}),
               ctx, v_,
              )

	v.ptr = C_NULL

	return nothing
end 

"""
	DMInterpolationEvaluate(petsclib::PetscLibType,ctx::DMInterpolationInfo, dm::PetscDM, x::PetscVec, v::PetscVec) 
Using the input from `dm` and `x`, calculates interpolated field values at the interpolation points.

Input Parameters:
- `ctx` - The `DMInterpolationInfo` context obtained with `DMInterpolationCreate()`
- `dm`  - The `DM`
- `x`   - The local vector containing the field to be interpolated, can be created with `DMCreateGlobalVector()`

Output Parameter:
- `v` - The vector containing the interpolated values, obtained with `DMInterpolationGetVector()`

Level: beginner

See also: 
=== 
`DM`, `DMInterpolationInfo`, `DMInterpolationGetVector()`, `DMInterpolationAddPoints()`, `DMInterpolationCreate()`, `DMInterpolationGetCoordinates()`

# External Links
$(_doc_external("Dm/DMInterpolationEvaluate"))
"""
function DMInterpolationEvaluate(petsclib::PetscLibType, ctx::DMInterpolationInfo, dm::PetscDM, x::PetscVec, v::PetscVec) end

@for_petsc function DMInterpolationEvaluate(petsclib::$UnionPetscLib, ctx::DMInterpolationInfo, dm::PetscDM, x::PetscVec, v::PetscVec )

    @chk ccall(
               (:DMInterpolationEvaluate, $petsc_library),
               PetscErrorCode,
               (DMInterpolationInfo, CDM, CVec, CVec),
               ctx, dm, x, v,
              )


	return nothing
end 

"""
	DMInterpolationDestroy(petsclib::PetscLibType,ctx::DMInterpolationInfo) 
Destroys a `DMInterpolationInfo` context

Collective

Input Parameter:
- `ctx` - the context

Level: beginner

See also: 
=== 
`DM`, `DMInterpolationInfo`, `DMInterpolationEvaluate()`, `DMInterpolationAddPoints()`, `DMInterpolationCreate()`

# External Links
$(_doc_external("Dm/DMInterpolationDestroy"))
"""
function DMInterpolationDestroy(petsclib::PetscLibType, ctx::DMInterpolationInfo) end

@for_petsc function DMInterpolationDestroy(petsclib::$UnionPetscLib, ctx::DMInterpolationInfo )

    @chk ccall(
               (:DMInterpolationDestroy, $petsc_library),
               PetscErrorCode,
               (Ptr{DMInterpolationInfo},),
               ctx,
              )


	return nothing
end 

"""
	is::IS,subdm::PetscDM = DMCreateSectionSubDM(petsclib::PetscLibType,dm::PetscDM, numFields::PetscInt, fields::Vector{PetscInt}, numComps::Vector{PetscInt}, comps::Vector{PetscInt}) 
Returns an `IS` and `subDM` containing a `PetscSection` that encapsulates a subproblem defined by a subset of the fields in a `PetscSection` in the `DM`.

Not Collective

Input Parameters:
- `dm`        - The `DM` object
- `numFields` - The number of fields to incorporate into `subdm`
- `fields`    - The field numbers of the selected fields
- `numComps`  - The number of components from each field to incorporate into `subdm`, or PETSC_DECIDE for all components
- `comps`     - The component numbers of the selected fields (omitted for PTESC_DECIDE fields)

Output Parameters:
- `is`    - The global indices for the subproblem or `NULL`
- `subdm` - The `DM` for the subproblem, which must already have be cloned from `dm` or `NULL`

Level: intermediate

-seealso: `DMCreateSubDM()`, `DMGetLocalSection()`, `DMPlexSetMigrationSF()`, `DMView()`

# External Links
$(_doc_external("Dm/DMCreateSectionSubDM"))
"""
function DMCreateSectionSubDM(petsclib::PetscLibType, dm::PetscDM, numFields::PetscInt, fields::Vector{PetscInt}, numComps::Vector{PetscInt}, comps::Vector{PetscInt}) end

@for_petsc function DMCreateSectionSubDM(petsclib::$UnionPetscLib, dm::PetscDM, numFields::$PetscInt, fields::Vector{$PetscInt}, numComps::Vector{$PetscInt}, comps::Vector{$PetscInt} )
	is_ = Ref{IS}()
	subdm_ = Ref{CDM}()

    @chk ccall(
               (:DMCreateSectionSubDM, $petsc_library),
               PetscErrorCode,
               (CDM, $PetscInt, Ptr{$PetscInt}, Ptr{$PetscInt}, Ptr{$PetscInt}, Ptr{IS}, Ptr{CDM}),
               dm, numFields, fields, numComps, comps, is_, subdm_,
              )

	is = is_[]
	subdm = PetscDM(subdm_[], petsclib)

	return is,subdm
end 

"""
	is::Vector{IS},superdm::PetscDM = DMCreateSectionSuperDM(petsclib::PetscLibType,dms::Vector{PetscDM}, len::PetscInt) 
Returns an arrays of `IS` and a `DM` containing a `PetscSection` that encapsulates a superproblem defined by the array of `DM` and their `PetscSection`

Not Collective

Input Parameters:
- `dms` - The `DM` objects, the must all have the same topology; for example obtained with `DMClone()`
- `len` - The number of `DM` in `dms`

Output Parameters:
- `is`      - The global indices for the subproblem, or `NULL`
- `superdm` - The `DM` for the superproblem, which must already have be cloned and contain the same topology as the `dms`

Level: intermediate

-seealso: `DMCreateSuperDM()`, `DMGetLocalSection()`, `DMPlexSetMigrationSF()`, `DMView()`

# External Links
$(_doc_external("Dm/DMCreateSectionSuperDM"))
"""
function DMCreateSectionSuperDM(petsclib::PetscLibType, dms::Vector{PetscDM}, len::PetscInt) end

@for_petsc function DMCreateSectionSuperDM(petsclib::$UnionPetscLib, dms::Vector{PetscDM}, len::$PetscInt )
	is_ = Ref{Ptr{IS}}()
	superdm_ = Ref{CDM}()

    @chk ccall(
               (:DMCreateSectionSuperDM, $petsc_library),
               PetscErrorCode,
               (Ptr{CDM}, $PetscInt, Ptr{Ptr{IS}}, Ptr{CDM}),
               dms, len, is_, superdm_,
              )

	is = unsafe_wrap(Array, is_[], VecGetLocalSize(petsclib, x); own = false)
	superdm = PetscDM(superdm_[], petsclib)

	return is,superdm
end 

"""
	dm::PetscDM = DMCreate(petsclib::PetscLibType,comm::MPI_Comm) 
Creates an empty `DM` object. `DM`s are the abstract objects in PETSc that mediate between meshes and discretizations and the
algebraic solvers, time integrators, and optimization algorithms in PETSc.

Collective

Input Parameter:
- `comm` - The communicator for the `DM` object

Output Parameter:
- `dm` - The `DM` object

Level: beginner

Notes:
See `DMType` for a brief summary of available `DM`.

The type must then be set with `DMSetType()`. If you never call `DMSetType()` it will generate an
error when you try to use the `dm`.

`DM` is an orphan initialism or orphan acronym, the letters have no meaning and never did.

See also: 
=== 
`DM`, `DMSetType()`, `DMType`, `DMDACreate()`, `DMDA`, `DMSLICED`, `DMCOMPOSITE`, `DMPLEX`, `DMMOAB`, `DMNETWORK`

# External Links
$(_doc_external("Dm/DMCreate"))
"""
function DMCreate(petsclib::PetscLibType, comm::MPI_Comm) end

@for_petsc function DMCreate(petsclib::$UnionPetscLib, comm::MPI_Comm )
	dm_ = Ref{CDM}()

    @chk ccall(
               (:DMCreate, $petsc_library),
               PetscErrorCode,
               (MPI_Comm, Ptr{CDM}),
               comm, dm_,
              )

	dm = PetscDM(dm_[], petsclib)

	return dm
end 

"""
	DMClone(petsclib::PetscLibType,dm::PetscDM, newdm::PetscDM) 
Creates a `DM` object with the same topology as the original.

Collective

Input Parameter:
- `dm` - The original `DM` object

Output Parameter:
- `newdm` - The new `DM` object

Level: beginner

Notes:
For some `DM` implementations this is a shallow clone, the result of which may share (reference counted) information with its parent. For example,
`DMClone()` applied to a `DMPLEX` object will result in a new `DMPLEX` that shares the topology with the original `DMPLEX`. It does not
share the `PetscSection` of the original `DM`.

The clone is considered set up if the original has been set up.

Use `DMConvert()` for a general way to create new `DM` from a given `DM`

See also: 
=== 
`DM`, `DMDestroy()`, `DMCreate()`, `DMSetType()`, `DMSetLocalSection()`, `DMSetGlobalSection()`, `DMPLEX`, `DMConvert()`

# External Links
$(_doc_external("Dm/DMClone"))
"""
function DMClone(petsclib::PetscLibType, dm::PetscDM, newdm::PetscDM) end

@for_petsc function DMClone(petsclib::$UnionPetscLib, dm::PetscDM, newdm::PetscDM )
	newdm_ = Ref(newdm.ptr)

    @chk ccall(
               (:DMClone, $petsc_library),
               PetscErrorCode,
               (CDM, Ptr{CDM}),
               dm, newdm_,
              )

	newdm.ptr = C_NULL

	return nothing
end 

"""
	DMSetVecType(petsclib::PetscLibType,dm::PetscDM, ctype::VecType) 
Sets the type of vector to be created with `DMCreateLocalVector()` and `DMCreateGlobalVector()`

Logically Collective

Input Parameters:
- `dm`    - initial distributed array
- `ctype` - the vector type, for example `VECSTANDARD`, `VECCUDA`, or `VECVIENNACL`

Options Database Key:
- `-dm_vec_type ctype` - the type of vector to create

Level: intermediate

See also: 
=== 
`DM`, `DMCreate()`, `DMDestroy()`, `DMDAInterpolationType`, `VecType`, `DMGetVecType()`, `DMSetMatType()`, `DMGetMatType()`,
`VECSTANDARD`, `VECCUDA`, `VECVIENNACL`, `DMCreateLocalVector()`, `DMCreateGlobalVector()`

# External Links
$(_doc_external("Dm/DMSetVecType"))
"""
function DMSetVecType(petsclib::PetscLibType, dm::PetscDM, ctype::VecType) end

@for_petsc function DMSetVecType(petsclib::$UnionPetscLib, dm::PetscDM, ctype::VecType )

    @chk ccall(
               (:DMSetVecType, $petsc_library),
               PetscErrorCode,
               (CDM, VecType),
               dm, ctype,
              )


	return nothing
end 

"""
	ctype::VecType = DMGetVecType(petsclib::PetscLibType,da::PetscDM) 
Gets the type of vector created with `DMCreateLocalVector()` and `DMCreateGlobalVector()`

Logically Collective

Input Parameter:
- `da` - initial distributed array

Output Parameter:
- `ctype` - the vector type

Level: intermediate

See also: 
=== 
`DM`, `DMCreate()`, `DMDestroy()`, `DMDAInterpolationType`, `VecType`, `DMSetMatType()`, `DMGetMatType()`, `DMSetVecType()`

# External Links
$(_doc_external("Dm/DMGetVecType"))
"""
function DMGetVecType(petsclib::PetscLibType, da::PetscDM) end

@for_petsc function DMGetVecType(petsclib::$UnionPetscLib, da::PetscDM )
	ctype_ = Ref{VecType}()

    @chk ccall(
               (:DMGetVecType, $petsc_library),
               PetscErrorCode,
               (CDM, Ptr{VecType}),
               da, ctype_,
              )

	ctype = unsafe_string(ctype_[])

	return ctype
end 

"""
	DMSetISColoringType(petsclib::PetscLibType,dm::PetscDM, ctype::ISColoringType) 
Sets the type of coloring, `IS_COLORING_GLOBAL` or `IS_COLORING_LOCAL` that is created by the `DM`

Logically Collective

Input Parameters:
- `dm`    - the `DM` context
- `ctype` - the matrix type

Options Database Key:
- `-dm_is_coloring_type` - global or local

Level: intermediate

See also: 
=== 
`DM`, `DMDACreate1d()`, `DMDACreate2d()`, `DMDACreate3d()`, `DMCreateMatrix()`, `DMCreateMassMatrix()`, `DMSetMatrixPreallocateOnly()`, `MatType`, `DMGetMatType()`,
`DMGetISColoringType()`, `ISColoringType`, `IS_COLORING_GLOBAL`, `IS_COLORING_LOCAL`

# External Links
$(_doc_external("Dm/DMSetISColoringType"))
"""
function DMSetISColoringType(petsclib::PetscLibType, dm::PetscDM, ctype::ISColoringType) end

@for_petsc function DMSetISColoringType(petsclib::$UnionPetscLib, dm::PetscDM, ctype::ISColoringType )

    @chk ccall(
               (:DMSetISColoringType, $petsc_library),
               PetscErrorCode,
               (CDM, ISColoringType),
               dm, ctype,
              )


	return nothing
end 

"""
	ctype::ISColoringType = DMGetISColoringType(petsclib::PetscLibType,dm::PetscDM) 
Gets the type of coloring, `IS_COLORING_GLOBAL` or `IS_COLORING_LOCAL` that is created by the `DM`

Logically Collective

Input Parameter:
- `dm` - the `DM` context

Output Parameter:
- `ctype` - the matrix type

Options Database Key:
- `-dm_is_coloring_type` - global or local

Level: intermediate

See also: 
=== 
`DM`, `DMDACreate1d()`, `DMDACreate2d()`, `DMDACreate3d()`, `DMCreateMatrix()`, `DMCreateMassMatrix()`, `DMSetMatrixPreallocateOnly()`, `MatType`, `DMGetMatType()`,
`ISColoringType`, `IS_COLORING_GLOBAL`, `IS_COLORING_LOCAL`

# External Links
$(_doc_external("Dm/DMGetISColoringType"))
"""
function DMGetISColoringType(petsclib::PetscLibType, dm::PetscDM) end

@for_petsc function DMGetISColoringType(petsclib::$UnionPetscLib, dm::PetscDM )
	ctype_ = Ref{ISColoringType}()

    @chk ccall(
               (:DMGetISColoringType, $petsc_library),
               PetscErrorCode,
               (CDM, Ptr{ISColoringType}),
               dm, ctype_,
              )

	ctype = unsafe_string(ctype_[])

	return ctype
end 

"""
	DMSetMatType(petsclib::PetscLibType,dm::PetscDM, ctype::MatType) 
Sets the type of matrix created with `DMCreateMatrix()`

Logically Collective

Input Parameters:
- `dm`    - the `DM` context
- `ctype` - the matrix type, for example `MATMPIAIJ`

Options Database Key:
- `-dm_mat_type ctype` - the type of the matrix to create, for example mpiaij

Level: intermediate

See also: 
=== 
`DM`, `MatType`, `DMDACreate1d()`, `DMDACreate2d()`, `DMDACreate3d()`, `DMCreateMatrix()`, `DMCreateMassMatrix()`, `DMSetMatrixPreallocateOnly()`, `DMGetMatType()`, `DMCreateGlobalVector()`, `DMCreateLocalVector()`

# External Links
$(_doc_external("Dm/DMSetMatType"))
"""
function DMSetMatType(petsclib::PetscLibType, dm::PetscDM, ctype::MatType) end

@for_petsc function DMSetMatType(petsclib::$UnionPetscLib, dm::PetscDM, ctype::MatType )

    @chk ccall(
               (:DMSetMatType, $petsc_library),
               PetscErrorCode,
               (CDM, MatType),
               dm, ctype,
              )


	return nothing
end 

"""
	ctype::MatType = DMGetMatType(petsclib::PetscLibType,dm::PetscDM) 
Gets the type of matrix that would be created with `DMCreateMatrix()`

Logically Collective

Input Parameter:
- `dm` - the `DM` context

Output Parameter:
- `ctype` - the matrix type

Level: intermediate

See also: 
=== 
`DM`, `DMDACreate1d()`, `DMDACreate2d()`, `DMDACreate3d()`, `DMCreateMatrix()`, `DMCreateMassMatrix()`, `DMSetMatrixPreallocateOnly()`, `MatType`, `DMSetMatType()`

# External Links
$(_doc_external("Dm/DMGetMatType"))
"""
function DMGetMatType(petsclib::PetscLibType, dm::PetscDM) end

@for_petsc function DMGetMatType(petsclib::$UnionPetscLib, dm::PetscDM )
	ctype_ = Ref{MatType}()

    @chk ccall(
               (:DMGetMatType, $petsc_library),
               PetscErrorCode,
               (CDM, Ptr{MatType}),
               dm, ctype_,
              )

	ctype = unsafe_string(ctype_[])

	return ctype
end 

"""
	DMSetOptionsPrefix(petsclib::PetscLibType,dm::PetscDM, prefix::String) 
Sets the prefix prepended to all option names when searching through the options database

Logically Collective

Input Parameters:
- `dm`     - the `DM` context
- `prefix` - the prefix to prepend

Level: advanced

Note:
A hyphen (-) must NOT be given at the beginning of the prefix name.
The first character of all runtime options is AUTOMATICALLY the hyphen.

See also: 
=== 
`DM`, `PetscObjectSetOptionsPrefix()`, `DMSetFromOptions()`

# External Links
$(_doc_external("Dm/DMSetOptionsPrefix"))
"""
function DMSetOptionsPrefix(petsclib::PetscLibType, dm::PetscDM, prefix::String) end

@for_petsc function DMSetOptionsPrefix(petsclib::$UnionPetscLib, dm::PetscDM, prefix::String )

    @chk ccall(
               (:DMSetOptionsPrefix, $petsc_library),
               PetscErrorCode,
               (CDM, Ptr{Cchar}),
               dm, prefix,
              )


	return nothing
end 

"""
	DMAppendOptionsPrefix(petsclib::PetscLibType,dm::PetscDM, prefix::String) 
Appends an additional string to an already existing prefix used for searching for
`DM` options in the options database.

Logically Collective

Input Parameters:
- `dm`     - the `DM` context
- `prefix` - the string to append to the current prefix

Level: advanced

Note:
If the `DM` does not currently have an options prefix then this value is used alone as the prefix as if `DMSetOptionsPrefix()` had been called.
A hyphen (-) must NOT be given at the beginning of the prefix name.
The first character of all runtime options is AUTOMATICALLY the hyphen.

See also: 
=== 
`DM`, `DMSetOptionsPrefix()`, `DMGetOptionsPrefix()`, `PetscObjectAppendOptionsPrefix()`, `DMSetFromOptions()`

# External Links
$(_doc_external("Dm/DMAppendOptionsPrefix"))
"""
function DMAppendOptionsPrefix(petsclib::PetscLibType, dm::PetscDM, prefix::String) end

@for_petsc function DMAppendOptionsPrefix(petsclib::$UnionPetscLib, dm::PetscDM, prefix::String )

    @chk ccall(
               (:DMAppendOptionsPrefix, $petsc_library),
               PetscErrorCode,
               (CDM, Ptr{Cchar}),
               dm, prefix,
              )


	return nothing
end 

"""
	DMGetOptionsPrefix(petsclib::PetscLibType,dm::PetscDM, prefix::String) 
Gets the prefix used for searching for all
DM options in the options database.

Not Collective

Input Parameter:
- `dm` - the `DM` context

Output Parameter:
- `prefix` - pointer to the prefix string used is returned

Level: advanced

See also: 
=== 
`DM`, `DMSetOptionsPrefix()`, `DMAppendOptionsPrefix()`, `DMSetFromOptions()`

# External Links
$(_doc_external("Dm/DMGetOptionsPrefix"))
"""
function DMGetOptionsPrefix(petsclib::PetscLibType, dm::PetscDM, prefix::String) end

@for_petsc function DMGetOptionsPrefix(petsclib::$UnionPetscLib, dm::PetscDM, prefix::String )
	prefix_ = Ref(pointer(prefix))

    @chk ccall(
               (:DMGetOptionsPrefix, $petsc_library),
               PetscErrorCode,
               (CDM, Ptr{Ptr{Cchar}}),
               dm, prefix_,
              )


	return nothing
end 

"""
	DMDestroy(petsclib::PetscLibType,dm::PetscDM) 
Destroys a `DM`.

Collective

Input Parameter:
- `dm` - the `DM` object to destroy

Level: developer

See also: 
=== 
`DM`, `DMCreate()`, `DMType`, `DMSetType()`, `DMView()`, `DMCreateGlobalVector()`, `DMCreateInterpolation()`, `DMCreateColoring()`, `DMCreateMatrix()`

# External Links
$(_doc_external("Dm/DMDestroy"))
"""
function DMDestroy(petsclib::PetscLibType, dm::PetscDM) end

@for_petsc function DMDestroy(petsclib::$UnionPetscLib, dm::PetscDM )
	dm_ = Ref(dm.ptr)

    @chk ccall(
               (:DMDestroy, $petsc_library),
               PetscErrorCode,
               (Ptr{CDM},),
               dm_,
              )

	dm.ptr = C_NULL

	return nothing
end 

"""
	DMSetUp(petsclib::PetscLibType,dm::PetscDM) 
sets up the data structures inside a `DM` object

Collective

Input Parameter:
- `dm` - the `DM` object to setup

Level: intermediate

Note:
This is usually called after various parameter setting operations and `DMSetFromOptions()` are called on the `DM`

See also: 
=== 
`DM`, `DMCreate()`, `DMSetType()`, `DMView()`, `DMCreateGlobalVector()`, `DMCreateInterpolation()`, `DMCreateColoring()`, `DMCreateMatrix()`

# External Links
$(_doc_external("Dm/DMSetUp"))
"""
function DMSetUp(petsclib::PetscLibType, dm::PetscDM) end

@for_petsc function DMSetUp(petsclib::$UnionPetscLib, dm::PetscDM )

    @chk ccall(
               (:DMSetUp, $petsc_library),
               PetscErrorCode,
               (CDM,),
               dm,
              )


	return nothing
end 

"""
	DMSetFromOptions(petsclib::PetscLibType,dm::PetscDM) 
sets parameters in a `DM` from the options database

Collective

Input Parameter:
- `dm` - the `DM` object to set options for

Options Database Keys:
- `-dm_preallocate_only`                               - Only preallocate the matrix for `DMCreateMatrix()` and `DMCreateMassMatrix()`, but do not fill it with zeros
- `-dm_vec_type <type>`                                - type of vector to create inside `DM`
- `-dm_mat_type <type>`                                - type of matrix to create inside `DM`
- `-dm_is_coloring_type`                               - <global or local>
- `-dm_bind_below <n>`                                 - bind (force execution on CPU) for `Vec` and `Mat` objects with local size (number of vector entries or matrix rows) below n; currently only supported for `DMDA`
- `-dm_plex_option_phases <ph0_, ph1_, ...>`           - List of prefixes for option processing phases
- `-dm_plex_filename <str>`                            - File containing a mesh
- `-dm_plex_boundary_filename <str>`                   - File containing a mesh boundary
- `-dm_plex_name <str>`                                - Name of the mesh in the file
- `-dm_plex_shape <shape>`                             - The domain shape, such as `BOX`, `SPHERE`, etc.
- `-dm_plex_cell <ct>`                                 - Cell shape
- `-dm_plex_reference_cell_domain <bool>`              - Use a reference cell domain
- `-dm_plex_dim <dim>`                                 - Set the topological dimension
- `-dm_plex_simplex <bool>`                            - `PETSC_TRUE` for simplex elements, `PETSC_FALSE` for tensor elements
- `-dm_plex_interpolate <bool>`                        - `PETSC_TRUE` turns on topological interpolation (creating edges and faces)
- `-dm_plex_orient <bool>`                             - `PETSC_TRUE` turns on topological orientation (flipping edges and faces)
- `-dm_plex_scale <sc>`                                - Scale factor for mesh coordinates
- `-dm_coord_remap <bool>`                             - Map coordinates using a function
- `-dm_plex_coordinate_dim <dim>`                      - Change the coordinate dimension of a mesh (usually given with cdm_ prefix)
- `-dm_coord_map <mapname>`                            - Select a builtin coordinate map
- `-dm_coord_map_params <p0,p1,p2,...>`                - Set coordinate mapping parameters
- `-dm_plex_box_faces <m,n,p>`                         - Number of faces along each dimension
- `-dm_plex_box_lower <x,y,z>`                         - Specify lower-left-bottom coordinates for the box
- `-dm_plex_box_upper <x,y,z>`                         - Specify upper-right-top coordinates for the box
- `-dm_plex_box_bd <bx,by,bz>`                         - Specify the `DMBoundaryType` for each direction
- `-dm_plex_sphere_radius <r>`                         - The sphere radius
- `-dm_plex_ball_radius <r>`                           - Radius of the ball
- `-dm_plex_cylinder_bd <bz>`                          - Boundary type in the z direction
- `-dm_plex_cylinder_num_wedges <n>`                   - Number of wedges around the cylinder
- `-dm_plex_reorder <order>`                           - Reorder the mesh using the specified algorithm
- `-dm_refine_pre <n>`                                 - The number of refinements before distribution
- `-dm_refine_uniform_pre <bool>`                      - Flag for uniform refinement before distribution
- `-dm_refine_volume_limit_pre <v>`                    - The maximum cell volume after refinement before distribution
- `-dm_refine <n>`                                     - The number of refinements after distribution
- `-dm_extrude <l>`                                    - Activate extrusion and specify the number of layers to extrude
- `-dm_plex_save_transform <bool>`                     - Save the `DMPlexTransform` that produced this mesh
- `-dm_plex_transform_extrude_thickness <t>`           - The total thickness of extruded layers
- `-dm_plex_transform_extrude_use_tensor <bool>`       - Use tensor cells when extruding
- `-dm_plex_transform_extrude_symmetric <bool>`        - Extrude layers symmetrically about the surface
- `-dm_plex_transform_extrude_normal <n0,...,nd>`      - Specify the extrusion direction
- `-dm_plex_transform_extrude_thicknesses <t0,...,tl>` - Specify thickness of each layer
- `-dm_plex_create_fv_ghost_cells`                     - Flag to create finite volume ghost cells on the boundary
- `-dm_plex_fv_ghost_cells_label <name>`               - Label name for ghost cells boundary
- `-dm_distribute <bool>`                              - Flag to redistribute a mesh among processes
- `-dm_distribute_overlap <n>`                         - The size of the overlap halo
- `-dm_plex_adj_cone <bool>`                           - Set adjacency direction
- `-dm_plex_adj_closure <bool>`                        - Set adjacency size
- `-dm_plex_use_ceed <bool>`                           - Use LibCEED as the FEM backend
- `-dm_plex_check_symmetry`                            - Check that the adjacency information in the mesh is symmetric - `DMPlexCheckSymmetry()`
- `-dm_plex_check_skeleton`                            - Check that each cell has the correct number of vertices (only for homogeneous simplex or tensor meshes) - `DMPlexCheckSkeleton()`
- `-dm_plex_check_faces`                               - Check that the faces of each cell give a vertex order this is consistent with what we expect from the cell type - `DMPlexCheckFaces()`
- `-dm_plex_check_geometry`                            - Check that cells have positive volume - `DMPlexCheckGeometry()`
- `-dm_plex_check_pointsf`                             - Check some necessary conditions for `PointSF` - `DMPlexCheckPointSF()`
- `-dm_plex_check_interface_cones`                     - Check points on inter-partition interfaces have conforming order of cone points - `DMPlexCheckInterfaceCones()`
- `-dm_plex_check_all`                                 - Perform all the checks above

Level: intermediate

Note:
For some `DMType` such as `DMDA` this cannot be called after `DMSetUp()` has been called.

See also: 
=== 
`DM`, `DMView()`, `DMCreateGlobalVector()`, `DMCreateInterpolation()`, `DMCreateColoring()`, `DMCreateMatrix()`,
`DMPlexCheckSymmetry()`, `DMPlexCheckSkeleton()`, `DMPlexCheckFaces()`, `DMPlexCheckGeometry()`, `DMPlexCheckPointSF()`, `DMPlexCheckInterfaceCones()`,
`DMSetOptionsPrefix()`, `DMType`, `DMPLEX`, `DMDA`, `DMSetUp()`

# External Links
$(_doc_external("Dm/DMSetFromOptions"))
"""
function DMSetFromOptions(petsclib::PetscLibType, dm::PetscDM) end

@for_petsc function DMSetFromOptions(petsclib::$UnionPetscLib, dm::PetscDM )

    @chk ccall(
               (:DMSetFromOptions, $petsc_library),
               PetscErrorCode,
               (CDM,),
               dm,
              )


	return nothing
end 

"""
	DMViewFromOptions(petsclib::PetscLibType,dm::PetscDM, obj::PetscObject, name::String) 
View a `DM` in a particular way based on a request in the options database

Collective

Input Parameters:
- `dm`   - the `DM` object
- `obj`  - optional object that provides the prefix for the options database (if `NULL` then the prefix in `obj` is used)
- `name` - option string that is used to activate viewing

Level: intermediate

Note:
See `PetscObjectViewFromOptions()` for a list of values that can be provided in the options database to determine how the `DM` is viewed

See also: 
=== 
`DM`, `DMView()`, `PetscObjectViewFromOptions()`, `DMCreate()`

# External Links
$(_doc_external("Dm/DMViewFromOptions"))
"""
function DMViewFromOptions(petsclib::PetscLibType, dm::PetscDM, obj::PetscObject, name::String) end

@for_petsc function DMViewFromOptions(petsclib::$UnionPetscLib, dm::PetscDM, obj::PetscObject, name::String )

    @chk ccall(
               (:DMViewFromOptions, $petsc_library),
               PetscErrorCode,
               (CDM, PetscObject, Ptr{Cchar}),
               dm, obj, name,
              )


	return nothing
end 

"""
	DMView(petsclib::PetscLibType,dm::PetscDM, v::PetscViewer) 
Views a `DM`. Depending on the `PetscViewer` and its `PetscViewerFormat` it may print some ASCII information about the `DM` to the screen or a file or
save the `DM` in a binary file to be loaded later or create a visualization of the `DM`

Collective

Input Parameters:
- `dm` - the `DM` object to view
- `v`  - the viewer

Options Database Keys:
- `-view_pyvista_warp <f>`                 - Warps the mesh by the active scalar with factor f
- `-view_pyvista_clip <xl,xu,yl,yu,zl,zu>` - Defines the clipping box
- `-dm_view_draw_line_color <int>`         - Specify the X-window color for cell borders
- `-dm_view_draw_cell_color <int>`         - Specify the X-window color for cells
- `-dm_view_draw_affine <bool>`            - Flag to ignore high-order edges

Level: beginner

Notes:

`PetscViewer` = `PETSCVIEWERHDF5` i.e. HDF5 format can be used with `PETSC_VIEWER_HDF5_PETSC` as the `PetscViewerFormat` to save multiple `DMPLEX`
meshes in a single HDF5 file. This in turn requires one to name the `DMPLEX` object with `PetscObjectSetName()`
before saving it with `DMView()` and before loading it with `DMLoad()` for identification of the mesh object.

`PetscViewer` = `PETSCVIEWEREXODUSII` i.e. ExodusII format assumes that element blocks (mapped to "Cell sets" labels)
consists of sequentially numbered cells.

If `dm` has been distributed, only the part of the `DM` on MPI rank 0 (including "ghost" cells and vertices) will be written.

Only TRI, TET, QUAD, and HEX cells are supported in ExodusII.

`DMPLEX` only represents geometry while most post-processing software expect that a mesh also provides information on the discretization space. This function assumes that the file represents Lagrange finite elements of order 1 or 2.
The order of the mesh shall be set using `PetscViewerExodusIISetOrder()`

Variable names can be set and queried using `PetscViewerExodusII[Set/Get][Nodal/Zonal]VariableNames[s]`.

See also: 
=== 
`DM`, `PetscViewer`, `PetscViewerFormat`, `PetscViewerSetFormat()`, `DMDestroy()`, `DMCreateGlobalVector()`, `DMCreateInterpolation()`, `DMCreateColoring()`, `DMCreateMatrix()`, `DMCreateMassMatrix()`, `DMLoad()`, `PetscObjectSetName()`

# External Links
$(_doc_external("Dm/DMView"))
"""
function DMView(petsclib::PetscLibType, dm::PetscDM, v::PetscViewer) end

@for_petsc function DMView(petsclib::$UnionPetscLib, dm::PetscDM, v::PetscViewer )

    @chk ccall(
               (:DMView, $petsc_library),
               PetscErrorCode,
               (CDM, PetscViewer),
               dm, v,
              )


	return nothing
end 

"""
	vec::PetscVec = DMCreateGlobalVector(petsclib::PetscLibType,dm::PetscDM) 
Creates a global vector from a `DM` object. A global vector is a parallel vector that has no duplicate values shared between MPI ranks,
that is it has no ghost locations.

Collective

Input Parameter:
- `dm` - the `DM` object

Output Parameter:
- `vec` - the global vector

Level: beginner

See also: 
=== 
`DM`, `Vec`, `DMCreateLocalVector()`, `DMGetGlobalVector()`, `DMDestroy()`, `DMView()`, `DMCreateInterpolation()`, `DMCreateColoring()`, `DMCreateMatrix()`,
`DMGlobalToLocalBegin()`, `DMGlobalToLocalEnd()`

# External Links
$(_doc_external("Dm/DMCreateGlobalVector"))
"""
function DMCreateGlobalVector(petsclib::PetscLibType, dm::PetscDM) end

@for_petsc function DMCreateGlobalVector(petsclib::$UnionPetscLib, dm::PetscDM )
	vec_ = Ref{CVec}()

    @chk ccall(
               (:DMCreateGlobalVector, $petsc_library),
               PetscErrorCode,
               (CDM, Ptr{CVec}),
               dm, vec_,
              )

	vec = PetscVec(vec_[], petsclib)

	return vec
end 

"""
	vec::PetscVec = DMCreateLocalVector(petsclib::PetscLibType,dm::PetscDM) 
Creates a local vector from a `DM` object.

Not Collective

Input Parameter:
- `dm` - the `DM` object

Output Parameter:
- `vec` - the local vector

Level: beginner

Note:
A local vector usually has ghost locations that contain values that are owned by different MPI ranks. A global vector has no ghost locations.

See also: 
=== 
`DM`, `Vec`, `DMCreateGlobalVector()`, `DMGetLocalVector()`, `DMDestroy()`, `DMView()`, `DMCreateInterpolation()`, `DMCreateColoring()`, `DMCreateMatrix()`
`DMGlobalToLocalBegin()`, `DMGlobalToLocalEnd()`

# External Links
$(_doc_external("Dm/DMCreateLocalVector"))
"""
function DMCreateLocalVector(petsclib::PetscLibType, dm::PetscDM) end

@for_petsc function DMCreateLocalVector(petsclib::$UnionPetscLib, dm::PetscDM )
	vec_ = Ref{CVec}()

    @chk ccall(
               (:DMCreateLocalVector, $petsc_library),
               PetscErrorCode,
               (CDM, Ptr{CVec}),
               dm, vec_,
              )

	vec = PetscVec(vec_[], petsclib)

	return vec
end 

"""
	DMGetLocalToGlobalMapping(petsclib::PetscLibType,dm::PetscDM, ltog::ISLocalToGlobalMapping) 
Accesses the local

Collective

Input Parameter:
- `dm` - the `DM` that provides the mapping

Output Parameter:
- `ltog` - the mapping

Level: advanced

Notes:
The global to local mapping allows one to set values into the global vector or matrix using `VecSetValuesLocal()` and `MatSetValuesLocal()`

Vectors obtained with  `DMCreateGlobalVector()` and matrices obtained with `DMCreateMatrix()` already contain the global mapping so you do
need to use this function with those objects.

This mapping can then be used by `VecSetLocalToGlobalMapping()` or `MatSetLocalToGlobalMapping()`.

See also: 
=== 
`DM`, `DMCreateLocalVector()`, `DMCreateGlobalVector()`, `VecSetLocalToGlobalMapping()`, `MatSetLocalToGlobalMapping()`,
`DMCreateMatrix()`

# External Links
$(_doc_external("Dm/DMGetLocalToGlobalMapping"))
"""
function DMGetLocalToGlobalMapping(petsclib::PetscLibType, dm::PetscDM, ltog::ISLocalToGlobalMapping) end

@for_petsc function DMGetLocalToGlobalMapping(petsclib::$UnionPetscLib, dm::PetscDM, ltog::ISLocalToGlobalMapping )

    @chk ccall(
               (:DMGetLocalToGlobalMapping, $petsc_library),
               PetscErrorCode,
               (CDM, Ptr{ISLocalToGlobalMapping}),
               dm, ltog,
              )


	return nothing
end 

"""
	bs::PetscInt = DMGetBlockSize(petsclib::PetscLibType,dm::PetscDM) 
Gets the inherent block size associated with a `DM`

Not Collective

Input Parameter:
- `dm` - the `DM` with block structure

Output Parameter:
- `bs` - the block size, 1 implies no exploitable block structure

Level: intermediate

Notes:
This might be the number of degrees of freedom at each grid point for a structured grid.

Complex `DM` that represent multiphysics or staggered grids or mixed-methods do not generally have a single inherent block size, but
rather different locations in the vectors may have a different block size.

See also: 
=== 
`DM`, `ISCreateBlock()`, `VecSetBlockSize()`, `MatSetBlockSize()`, `DMGetLocalToGlobalMapping()`

# External Links
$(_doc_external("Dm/DMGetBlockSize"))
"""
function DMGetBlockSize(petsclib::PetscLibType, dm::PetscDM) end

@for_petsc function DMGetBlockSize(petsclib::$UnionPetscLib, dm::PetscDM )
	bs_ = Ref{$PetscInt}()

    @chk ccall(
               (:DMGetBlockSize, $petsc_library),
               PetscErrorCode,
               (CDM, Ptr{$PetscInt}),
               dm, bs_,
              )

	bs = bs_[]

	return bs
end 

"""
	mat::PetscMat,vec::PetscVec = DMCreateInterpolation(petsclib::PetscLibType,dmc::PetscDM, dmf::PetscDM) 
Gets the interpolation matrix between two `DM` objects. The resulting matrix map degrees of freedom in the vector obtained by
`DMCreateGlobalVector()` on the coarse `DM` to similar vectors on the fine grid `DM`.

Collective

Input Parameters:
- `dmc` - the `DM` object
- `dmf` - the second, finer `DM` object

Output Parameters:
- `mat` - the interpolation
- `vec` - the scaling (optional, pass `NULL` if not needed), see `DMCreateInterpolationScale()`

Level: developer

Notes:
For `DMDA` objects this only works for "uniform refinement", that is the refined mesh was obtained `DMRefine()` or the coarse mesh was obtained by
DMCoarsen(). The coordinates set into the `DMDA` are completely ignored in computing the interpolation.

For `DMDA` objects you can use this interpolation (more precisely the interpolation from the `DMGetCoordinateDM()`) to interpolate the mesh coordinate
vectors EXCEPT in the periodic case where it does not make sense since the coordinate vectors are not periodic.

See also: 
=== 
`DM`, `DMDestroy()`, `DMView()`, `DMCreateGlobalVector()`, `DMCreateColoring()`, `DMCreateMatrix()`, `DMCreateMassMatrix()`, `DMRefine()`, `DMCoarsen()`, `DMCreateRestriction()`, `DMCreateInterpolationScale()`

# External Links
$(_doc_external("Dm/DMCreateInterpolation"))
"""
function DMCreateInterpolation(petsclib::PetscLibType, dmc::PetscDM, dmf::PetscDM) end

@for_petsc function DMCreateInterpolation(petsclib::$UnionPetscLib, dmc::PetscDM, dmf::PetscDM )
	mat_ = Ref{CMat}()
	vec_ = Ref{CVec}()

    @chk ccall(
               (:DMCreateInterpolation, $petsc_library),
               PetscErrorCode,
               (CDM, CDM, Ptr{CMat}, Ptr{CVec}),
               dmc, dmf, mat_, vec_,
              )

	mat = PetscMat(mat_[], petsclib)
	vec = PetscVec(vec_[], petsclib)

	return mat,vec
end 

"""
	scale::PetscVec = DMCreateInterpolationScale(petsclib::PetscLibType,dac::PetscDM, daf::PetscDM, mat::PetscMat) 
Forms L = 1/(R*1) where 1 is the vector of all ones, and R is
the transpose of the interpolation between the `DM`.

Input Parameters:
- `dac` - `DM` that defines a coarse mesh
- `daf` - `DM` that defines a fine mesh
- `mat` - the restriction (or interpolation operator) from fine to coarse

Output Parameter:
- `scale` - the scaled vector

Level: advanced

Note:
xcoarse = diag(L)*R*xfine preserves scale and is thus suitable for state (versus residual)
restriction. In other words xcoarse is the coarse representation of xfine.

Developer Note:
If the fine-scale `DMDA` has the -dm_bind_below option set to true, then `DMCreateInterpolationScale()` calls `MatSetBindingPropagates()`
on the restriction/interpolation operator to set the bindingpropagates flag to true.

See also: 
=== 
`DM`, `MatRestrict()`, `MatInterpolate()`, `DMCreateInterpolation()`, `DMCreateRestriction()`, `DMCreateGlobalVector()`

# External Links
$(_doc_external("Dm/DMCreateInterpolationScale"))
"""
function DMCreateInterpolationScale(petsclib::PetscLibType, dac::PetscDM, daf::PetscDM, mat::PetscMat) end

@for_petsc function DMCreateInterpolationScale(petsclib::$UnionPetscLib, dac::PetscDM, daf::PetscDM, mat::PetscMat )
	scale_ = Ref{CVec}()

    @chk ccall(
               (:DMCreateInterpolationScale, $petsc_library),
               PetscErrorCode,
               (CDM, CDM, CMat, Ptr{CVec}),
               dac, daf, mat, scale_,
              )

	scale = PetscVec(scale_[], petsclib)

	return scale
end 

"""
	mat::PetscMat = DMCreateRestriction(petsclib::PetscLibType,dmc::PetscDM, dmf::PetscDM) 
Gets restriction matrix between two `DM` objects. The resulting matrix map degrees of freedom in the vector obtained by
`DMCreateGlobalVector()` on the fine `DM` to similar vectors on the coarse grid `DM`.

Collective

Input Parameters:
- `dmc` - the `DM` object
- `dmf` - the second, finer `DM` object

Output Parameter:
- `mat` - the restriction

Level: developer

Note:
This only works for `DMSTAG`. For many situations either the transpose of the operator obtained with `DMCreateInterpolation()` or that
matrix multiplied by the vector obtained with `DMCreateInterpolationScale()` provides the desired object.

See also: 
=== 
`DM`, `DMRestrict()`, `DMInterpolate()`, `DMDestroy()`, `DMView()`, `DMCreateGlobalVector()`, `DMCreateColoring()`, `DMCreateMatrix()`, `DMCreateMassMatrix()`, `DMRefine()`, `DMCoarsen()`, `DMCreateInterpolation()`

# External Links
$(_doc_external("Dm/DMCreateRestriction"))
"""
function DMCreateRestriction(petsclib::PetscLibType, dmc::PetscDM, dmf::PetscDM) end

@for_petsc function DMCreateRestriction(petsclib::$UnionPetscLib, dmc::PetscDM, dmf::PetscDM )
	mat_ = Ref{CMat}()

    @chk ccall(
               (:DMCreateRestriction, $petsc_library),
               PetscErrorCode,
               (CDM, CDM, Ptr{CMat}),
               dmc, dmf, mat_,
              )

	mat = PetscMat(mat_[], petsclib)

	return mat
end 

"""
	mat::PetscMat = DMCreateInjection(petsclib::PetscLibType,dac::PetscDM, daf::PetscDM) 
Gets injection matrix between two `DM` objects.

Collective

Input Parameters:
- `dac` - the `DM` object
- `daf` - the second, finer `DM` object

Output Parameter:
- `mat` - the injection

Level: developer

Notes:
This is an operator that applied to a vector obtained with `DMCreateGlobalVector()` on the
fine grid maps the values to a vector on the vector on the coarse `DM` by simply selecting
the values on the coarse grid points. This compares to the operator obtained by
`DMCreateRestriction()` or the transpose of the operator obtained by
`DMCreateInterpolation()` that uses a "local weighted average" of the values around the
coarse grid point as the coarse grid value.

For `DMDA` objects this only works for "uniform refinement", that is the refined mesh was obtained `DMRefine()` or the coarse mesh was obtained by
`DMCoarsen()`. The coordinates set into the `DMDA` are completely ignored in computing the injection.

See also: 
=== 
`DM`, `DMDestroy()`, `DMView()`, `DMCreateGlobalVector()`, `DMCreateColoring()`, `DMCreateMatrix()`, `DMCreateMassMatrix()`, `DMCreateInterpolation()`,
`DMCreateRestriction()`, `MatRestrict()`, `MatInterpolate()`

# External Links
$(_doc_external("Dm/DMCreateInjection"))
"""
function DMCreateInjection(petsclib::PetscLibType, dac::PetscDM, daf::PetscDM) end

@for_petsc function DMCreateInjection(petsclib::$UnionPetscLib, dac::PetscDM, daf::PetscDM )
	mat_ = Ref{CMat}()

    @chk ccall(
               (:DMCreateInjection, $petsc_library),
               PetscErrorCode,
               (CDM, CDM, Ptr{CMat}),
               dac, daf, mat_,
              )

	mat = PetscMat(mat_[], petsclib)

	return mat
end 

"""
	mat::PetscMat = DMCreateMassMatrix(petsclib::PetscLibType,dmc::PetscDM, dmf::PetscDM) 
Gets the mass matrix between two `DM` objects
Collective

Input Parameters:
- `dmc` - the target `DM` object
- `dmf` - the source `DM` object, can be `NULL`

Output Parameter:
- `mat` - the mass matrix

Level: developer

See also: 
=== 
`DM`, `DMCreateMassMatrixLumped()`, `DMCreateMatrix()`, `DMRefine()`, `DMCoarsen()`, `DMCreateRestriction()`, `DMCreateInterpolation()`, `DMCreateInjection()`

# External Links
$(_doc_external("Dm/DMCreateMassMatrix"))
"""
function DMCreateMassMatrix(petsclib::PetscLibType, dmc::PetscDM, dmf::PetscDM) end

@for_petsc function DMCreateMassMatrix(petsclib::$UnionPetscLib, dmc::PetscDM, dmf::PetscDM )
	mat_ = Ref{CMat}()

    @chk ccall(
               (:DMCreateMassMatrix, $petsc_library),
               PetscErrorCode,
               (CDM, CDM, Ptr{CMat}),
               dmc, dmf, mat_,
              )

	mat = PetscMat(mat_[], petsclib)

	return mat
end 

"""
	llm::PetscVec,lm::PetscVec = DMCreateMassMatrixLumped(petsclib::PetscLibType,dm::PetscDM) 
Gets the lumped mass matrix for a given `DM`

Collective

Input Parameter:
- `dm` - the `DM` object

Output Parameters:
- `llm` - the local lumped mass matrix, which is a diagonal matrix, represented as a vector
- `lm`  - the global lumped mass matrix, which is a diagonal matrix, represented as a vector

Level: developer

Note:
See `DMCreateMassMatrix()` for how to create the non-lumped version of the mass matrix.

See also: 
=== 
`DM`, `DMCreateMassMatrix()`, `DMCreateMatrix()`, `DMRefine()`, `DMCoarsen()`, `DMCreateRestriction()`, `DMCreateInterpolation()`, `DMCreateInjection()`

# External Links
$(_doc_external("Dm/DMCreateMassMatrixLumped"))
"""
function DMCreateMassMatrixLumped(petsclib::PetscLibType, dm::PetscDM) end

@for_petsc function DMCreateMassMatrixLumped(petsclib::$UnionPetscLib, dm::PetscDM )
	llm_ = Ref{CVec}()
	lm_ = Ref{CVec}()

    @chk ccall(
               (:DMCreateMassMatrixLumped, $petsc_library),
               PetscErrorCode,
               (CDM, Ptr{CVec}, Ptr{CVec}),
               dm, llm_, lm_,
              )

	llm = PetscVec(llm_[], petsclib)
	lm = PetscVec(lm_[], petsclib)

	return llm,lm
end 

"""
	mat::PetscMat = DMCreateGradientMatrix(petsclib::PetscLibType,dmc::PetscDM, dmf::PetscDM) 
Gets the gradient matrix between two `DM` objects
Collective

Input Parameters:
- `dmc` - the target `DM` object
- `dmf` - the source `DM` object, can be `NULL`

Output Parameter:
- `mat` - the gradient matrix

Level: developer

Notes:
For `DMPLEX` the finite element model for the `DM` must have been already provided.

See also: 
=== 
`DM`, `DMCreateMassMatrix()`, `DMCreateMassMatrixLumped()`, `DMCreateMatrix()`, `DMRefine()`, `DMCoarsen()`, `DMCreateRestriction()`, `DMCreateInterpolation()`, `DMCreateInjection()`

# External Links
$(_doc_external("Dm/DMCreateGradientMatrix"))
"""
function DMCreateGradientMatrix(petsclib::PetscLibType, dmc::PetscDM, dmf::PetscDM) end

@for_petsc function DMCreateGradientMatrix(petsclib::$UnionPetscLib, dmc::PetscDM, dmf::PetscDM )
	mat_ = Ref{CMat}()

    @chk ccall(
               (:DMCreateGradientMatrix, $petsc_library),
               PetscErrorCode,
               (CDM, CDM, Ptr{CMat}),
               dmc, dmf, mat_,
              )

	mat = PetscMat(mat_[], petsclib)

	return mat
end 

"""
	coloring::ISColoring = DMCreateColoring(petsclib::PetscLibType,dm::PetscDM, ctype::ISColoringType) 
Gets coloring of a graph associated with the `DM`. Often the graph represents the operator matrix associated with the discretization
of a PDE on the `DM`.

Collective

Input Parameters:
- `dm`    - the `DM` object
- `ctype` - `IS_COLORING_LOCAL` or `IS_COLORING_GLOBAL`

Output Parameter:
- `coloring` - the coloring

Level: developer

Notes:
Coloring of matrices can also be computed directly from the sparse matrix nonzero structure via the `MatColoring` object or from the mesh from which the
matrix comes from (what this function provides). In general using the mesh produces a more optimal coloring (fewer colors).

This produces a coloring with the distance of 2, see `MatSetColoringDistance()` which can be used for efficiently computing Jacobians with `MatFDColoringCreate()`
For `DMDA` in three dimensions with periodic boundary conditions the number of grid points in each dimension must be divisible by 2*stencil_width + 1,
otherwise an error will be generated.

See also: 
=== 
`DM`, `ISColoring`, `DMDestroy()`, `DMView()`, `DMCreateGlobalVector()`, `DMCreateInterpolation()`, `DMCreateMatrix()`, `DMCreateMassMatrix()`, `DMSetMatType()`, `MatColoring`, `MatFDColoringCreate()`

# External Links
$(_doc_external("Dm/DMCreateColoring"))
"""
function DMCreateColoring(petsclib::PetscLibType, dm::PetscDM, ctype::ISColoringType) end

@for_petsc function DMCreateColoring(petsclib::$UnionPetscLib, dm::PetscDM, ctype::ISColoringType )
	coloring_ = Ref{ISColoring}()

    @chk ccall(
               (:DMCreateColoring, $petsc_library),
               PetscErrorCode,
               (CDM, ISColoringType, Ptr{ISColoring}),
               dm, ctype, coloring_,
              )

	coloring = coloring_[]

	return coloring
end 

"""
	mat::PetscMat = DMCreateMatrix(petsclib::PetscLibType,dm::PetscDM) 
Gets an empty matrix for a `DM` that is most commonly used to store the Jacobian of a discrete PDE operator.

Collective

Input Parameter:
- `dm` - the `DM` object

Output Parameter:
- `mat` - the empty Jacobian

Options Database Key:
- `-dm_preallocate_only` - Only preallocate the matrix for `DMCreateMatrix()` and `DMCreateMassMatrix()`, but do not fill it with zeros

Level: beginner

Notes:
This properly preallocates the number of nonzeros in the sparse matrix so you
do not need to do it yourself.

By default it also sets the nonzero structure and puts in the zero entries. To prevent setting
the nonzero pattern call `DMSetMatrixPreallocateOnly()`

For `DMDA`, when you call `MatView()` on this matrix it is displayed using the global natural ordering, NOT in the ordering used
internally by PETSc.

For `DMDA`, in general it is easiest to use `MatSetValuesStencil()` or `MatSetValuesLocal()` to put values into the matrix because
`MatSetValues()` requires the indices for the global numbering for the `DMDA` which is complic`ated to compute

See also: 
=== 
`DM`, `DMDestroy()`, `DMView()`, `DMCreateGlobalVector()`, `DMCreateInterpolation()`, `DMSetMatType()`, `DMCreateMassMatrix()`

# External Links
$(_doc_external("Dm/DMCreateMatrix"))
"""
function DMCreateMatrix(petsclib::PetscLibType, dm::PetscDM) end

@for_petsc function DMCreateMatrix(petsclib::$UnionPetscLib, dm::PetscDM )
	mat_ = Ref{CMat}()

    @chk ccall(
               (:DMCreateMatrix, $petsc_library),
               PetscErrorCode,
               (CDM, Ptr{CMat}),
               dm, mat_,
              )

	mat = PetscMat(mat_[], petsclib)

	return mat
end 

"""
	DMSetMatrixPreallocateSkip(petsclib::PetscLibType,dm::PetscDM, skip::PetscBool) 
When `DMCreateMatrix()` is called the matrix sizes and
`ISLocalToGlobalMapping` will be properly set, but the data structures to store values in the
matrices will not be preallocated.

Logically Collective

Input Parameters:
- `dm`   - the `DM`
- `skip` - `PETSC_TRUE` to skip preallocation

Level: developer

Note:
This is most useful to reduce initialization costs when `MatSetPreallocationCOO()` and
`MatSetValuesCOO()` will be used.

See also: 
=== 
`DM`, `DMCreateMatrix()`, `DMSetMatrixStructureOnly()`, `DMSetMatrixPreallocateOnly()`

# External Links
$(_doc_external("Dm/DMSetMatrixPreallocateSkip"))
"""
function DMSetMatrixPreallocateSkip(petsclib::PetscLibType, dm::PetscDM, skip::PetscBool) end

@for_petsc function DMSetMatrixPreallocateSkip(petsclib::$UnionPetscLib, dm::PetscDM, skip::PetscBool )

    @chk ccall(
               (:DMSetMatrixPreallocateSkip, $petsc_library),
               PetscErrorCode,
               (CDM, PetscBool),
               dm, skip,
              )


	return nothing
end 

"""
	DMSetMatrixPreallocateOnly(petsclib::PetscLibType,dm::PetscDM, only::PetscBool) 
When `DMCreateMatrix()` is called the matrix will be properly
preallocated but the nonzero structure and zero values will not be set.

Logically Collective

Input Parameters:
- `dm`   - the `DM`
- `only` - `PETSC_TRUE` if only want preallocation

Options Database Key:
- `-dm_preallocate_only` - Only preallocate the matrix for `DMCreateMatrix()`, `DMCreateMassMatrix()`, but do not fill it with zeros

Level: developer

See also: 
=== 
`DM`, `DMCreateMatrix()`, `DMCreateMassMatrix()`, `DMSetMatrixStructureOnly()`, `DMSetMatrixPreallocateSkip()`

# External Links
$(_doc_external("Dm/DMSetMatrixPreallocateOnly"))
"""
function DMSetMatrixPreallocateOnly(petsclib::PetscLibType, dm::PetscDM, only::PetscBool) end

@for_petsc function DMSetMatrixPreallocateOnly(petsclib::$UnionPetscLib, dm::PetscDM, only::PetscBool )

    @chk ccall(
               (:DMSetMatrixPreallocateOnly, $petsc_library),
               PetscErrorCode,
               (CDM, PetscBool),
               dm, only,
              )


	return nothing
end 

"""
	DMSetMatrixStructureOnly(petsclib::PetscLibType,dm::PetscDM, only::PetscBool) 
When `DMCreateMatrix()` is called, the matrix nonzero structure will be created
but the array for numerical values will not be allocated.

Logically Collective

Input Parameters:
- `dm`   - the `DM`
- `only` - `PETSC_TRUE` if you only want matrix nonzero structure

Level: developer

See also: 
=== 
`DM`, `DMCreateMatrix()`, `DMSetMatrixPreallocateOnly()`, `DMSetMatrixPreallocateSkip()`

# External Links
$(_doc_external("Dm/DMSetMatrixStructureOnly"))
"""
function DMSetMatrixStructureOnly(petsclib::PetscLibType, dm::PetscDM, only::PetscBool) end

@for_petsc function DMSetMatrixStructureOnly(petsclib::$UnionPetscLib, dm::PetscDM, only::PetscBool )

    @chk ccall(
               (:DMSetMatrixStructureOnly, $petsc_library),
               PetscErrorCode,
               (CDM, PetscBool),
               dm, only,
              )


	return nothing
end 

"""
	DMSetBlockingType(petsclib::PetscLibType,dm::PetscDM, btype::DMBlockingType) 
set the blocking granularity to be used for variable block size `DMCreateMatrix()` is called

Logically Collective

Input Parameters:
- `dm`    - the `DM`
- `btype` - block by topological point or field node

Options Database Key:
- `-dm_blocking_type [topological_point, field_node]` - use topological point blocking or field node blocking

Level: advanced

See also: 
=== 
`DM`, `DMCreateMatrix()`, `MatSetVariableBlockSizes()`

# External Links
$(_doc_external("Dm/DMSetBlockingType"))
"""
function DMSetBlockingType(petsclib::PetscLibType, dm::PetscDM, btype::DMBlockingType) end

@for_petsc function DMSetBlockingType(petsclib::$UnionPetscLib, dm::PetscDM, btype::DMBlockingType )

    @chk ccall(
               (:DMSetBlockingType, $petsc_library),
               PetscErrorCode,
               (CDM, DMBlockingType),
               dm, btype,
              )


	return nothing
end 

"""
	btype::DMBlockingType = DMGetBlockingType(petsclib::PetscLibType,dm::PetscDM) 
get the blocking granularity to be used for variable block size `DMCreateMatrix()` is called

Not Collective

Input Parameter:
- `dm` - the `DM`

Output Parameter:
- `btype` - block by topological point or field node

Level: advanced

See also: 
=== 
`DM`, `DMCreateMatrix()`, `MatSetVariableBlockSizes()`

# External Links
$(_doc_external("Dm/DMGetBlockingType"))
"""
function DMGetBlockingType(petsclib::PetscLibType, dm::PetscDM) end

@for_petsc function DMGetBlockingType(petsclib::$UnionPetscLib, dm::PetscDM )
	btype_ = Ref{DMBlockingType}()

    @chk ccall(
               (:DMGetBlockingType, $petsc_library),
               PetscErrorCode,
               (CDM, Ptr{DMBlockingType}),
               dm, btype_,
              )

	btype = unsafe_string(btype_[])

	return btype
end 

"""
	DMSetNullSpaceConstructor(petsclib::PetscLibType,dm::PetscDM, field::PetscInt, nullsp::external) 
Provide a callback function which constructs the nullspace for a given field, defined with `DMAddField()`, when function spaces
are joined or split, such as in `DMCreateSubDM()`

Logically Collective; No Fortran Support

Input Parameters:
- `dm`     - The `DM`
- `field`  - The field number for the nullspace
- `nullsp` - A callback to create the nullspace

Calling sequence of `nullsp`:
- `dm`        - The present `DM`
- `origField` - The field number given above, in the original `DM`
- `field`     - The field number in dm
- `nullSpace` - The nullspace for the given field

Level: intermediate

See also: 
=== 
`DM`, `DMAddField()`, `DMGetNullSpaceConstructor()`, `DMSetNearNullSpaceConstructor()`, `DMGetNearNullSpaceConstructor()`, `DMCreateSubDM()`, `DMCreateSuperDM()`

# External Links
$(_doc_external("Dm/DMSetNullSpaceConstructor"))
"""
function DMSetNullSpaceConstructor(petsclib::PetscLibType, dm::PetscDM, field::PetscInt, nullsp::external) end

@for_petsc function DMSetNullSpaceConstructor(petsclib::$UnionPetscLib, dm::PetscDM, field::$PetscInt, nullsp::external )

    @chk ccall(
               (:DMSetNullSpaceConstructor, $petsc_library),
               PetscErrorCode,
               (CDM, $PetscInt, external),
               dm, field, nullsp,
              )


	return nothing
end 

"""
	DMSetNearNullSpaceConstructor(petsclib::PetscLibType,dm::PetscDM, field::PetscInt, nullsp::external) 
Provide a callback function which constructs the near

Logically Collective; No Fortran Support

Input Parameters:
- `dm`     - The `DM`
- `field`  - The field number for the nullspace
- `nullsp` - A callback to create the near-nullspace

Calling sequence of `nullsp`:
- `dm`        - The present `DM`
- `origField` - The field number given above, in the original `DM`
- `field`     - The field number in dm
- `nullSpace` - The nullspace for the given field

Level: intermediate

See also: 
=== 
`DM`, `DMAddField()`, `DMGetNearNullSpaceConstructor()`, `DMSetNullSpaceConstructor()`, `DMGetNullSpaceConstructor()`, `DMCreateSubDM()`, `DMCreateSuperDM()`,
`MatNullSpace`

# External Links
$(_doc_external("Dm/DMSetNearNullSpaceConstructor"))
"""
function DMSetNearNullSpaceConstructor(petsclib::PetscLibType, dm::PetscDM, field::PetscInt, nullsp::external) end

@for_petsc function DMSetNearNullSpaceConstructor(petsclib::$UnionPetscLib, dm::PetscDM, field::$PetscInt, nullsp::external )

    @chk ccall(
               (:DMSetNearNullSpaceConstructor, $petsc_library),
               PetscErrorCode,
               (CDM, $PetscInt, external),
               dm, field, nullsp,
              )


	return nothing
end 

"""
	numFields::PetscInt,fieldNames::Cchar,fields::Vector{IS} = DMCreateFieldIS(petsclib::PetscLibType,dm::PetscDM) 
Creates a set of `IS` objects with the global indices of dofs for each field defined with `DMAddField()`

Not Collective; No Fortran Support

Input Parameter:
- `dm` - the `DM` object

Output Parameters:
- `numFields`  - The number of fields (or `NULL` if not requested)
- `fieldNames` - The name of each field (or `NULL` if not requested)
- `fields`     - The global indices for each field (or `NULL` if not requested)

Level: intermediate

Note:
The user is responsible for freeing all requested arrays. In particular, every entry of `fieldNames` should be freed with
`PetscFree()`, every entry of `fields` should be destroyed with `ISDestroy()`, and both arrays should be freed with
`PetscFree()`.

Developer Note:
It is not clear why both this function and `DMCreateFieldDecomposition()` exist. Having two seems redundant and confusing. This function should
likely be removed.

See also: 
=== 
`DM`, `DMAddField()`, `DMGetField()`, `DMDestroy()`, `DMView()`, `DMCreateInterpolation()`, `DMCreateColoring()`, `DMCreateMatrix()`,
`DMCreateFieldDecomposition()`

# External Links
$(_doc_external("Dm/DMCreateFieldIS"))
"""
function DMCreateFieldIS(petsclib::PetscLibType, dm::PetscDM) end

@for_petsc function DMCreateFieldIS(petsclib::$UnionPetscLib, dm::PetscDM )
	numFields_ = Ref{$PetscInt}()
	fieldNames_ = Ref{Cchar}()
	fields_ = Ref{Ptr{IS}}()

    @chk ccall(
               (:DMCreateFieldIS, $petsc_library),
               PetscErrorCode,
               (CDM, Ptr{$PetscInt}, Cchar, Ptr{Ptr{IS}}),
               dm, numFields_, fieldNames_, fields_,
              )

	numFields = numFields_[]
	fieldNames = fieldNames_[]
	fields = unsafe_wrap(Array, fields_[], VecGetLocalSize(petsclib, x); own = false)

	return numFields,fieldNames,fields
end 

"""
	len::PetscInt,namelist::Cchar,islist::Vector{IS},dmlist::Vector{PetscDM} = DMCreateFieldDecomposition(petsclib::PetscLibType,dm::PetscDM) 
Returns a list of `IS` objects defining a decomposition of a problem into subproblems
corresponding to different fields.

Not Collective; No Fortran Support

Input Parameter:
- `dm` - the `DM` object

Output Parameters:
- `len`      - The number of fields (or `NULL` if not requested)
- `namelist` - The name for each field (or `NULL` if not requested)
- `islist`   - The global indices for each field (or `NULL` if not requested)
- `dmlist`   - The `DM`s for each field subproblem (or `NULL`, if not requested; if `NULL` is returned, no `DM`s are defined)

Level: intermediate

Notes:
Each `IS` contains the global indices of the dofs of the corresponding field, defined by
`DMAddField()`. The optional list of `DM`s define the `DM` for each subproblem.

The same as `DMCreateFieldIS()` but also returns a `DM` for each field.

The user is responsible for freeing all requested arrays. In particular, every entry of `namelist` should be freed with
`PetscFree()`, every entry of `islist` should be destroyed with `ISDestroy()`, every entry of `dmlist` should be destroyed with `DMDestroy()`,
and all of the arrays should be freed with `PetscFree()`.

Fortran Notes:
Use the declarations
-vb
character(80), pointer :: namelist(:)
IS, pointer :: islist(:)
DM, pointer :: dmlist(:)
-ve

`namelist` must be provided, `islist` may be `PETSC_NULL_IS_POINTER` and `dmlist` may be `PETSC_NULL_DM_POINTER`

Use `DMDestroyFieldDecomposition()` to free the returned objects

Developer Notes:
It is not clear why this function and `DMCreateFieldIS()` exist. Having two seems redundant and confusing.

Unlike  `DMRefine()`, `DMCoarsen()`, and `DMCreateDomainDecomposition()` this provides no mechanism to provide hooks that are called after the
decomposition is computed.

See also: 
=== 
`DM`, `DMAddField()`, `DMCreateFieldIS()`, `DMCreateSubDM()`, `DMCreateDomainDecomposition()`, `DMDestroy()`, `DMView()`, `DMCreateInterpolation()`, `DMCreateColoring()`, `DMCreateMatrix()`, `DMCreateMassMatrix()`, `DMRefine()`, `DMCoarsen()`

# External Links
$(_doc_external("Dm/DMCreateFieldDecomposition"))
"""
function DMCreateFieldDecomposition(petsclib::PetscLibType, dm::PetscDM) end

@for_petsc function DMCreateFieldDecomposition(petsclib::$UnionPetscLib, dm::PetscDM )
	len_ = Ref{$PetscInt}()
	namelist_ = Ref{Cchar}()
	islist_ = Ref{Ptr{IS}}()
	dmlist_ = Ref{Ptr{PetscDM}}()

    @chk ccall(
               (:DMCreateFieldDecomposition, $petsc_library),
               PetscErrorCode,
               (CDM, Ptr{$PetscInt}, Cchar, Ptr{Ptr{IS}}, Ptr{Ptr{CDM}}),
               dm, len_, namelist_, islist_, dmlist_,
              )

	len = len_[]
	namelist = namelist_[]
	islist = unsafe_wrap(Array, islist_[], VecGetLocalSize(petsclib, x); own = false)
	dmlist = unsafe_wrap(Array, dmlist_[], VecGetLocalSize(petsclib, x); own = false)

	return len,namelist,islist,dmlist
end 

"""
	is::IS,subdm::PetscDM = DMCreateSubDM(petsclib::PetscLibType,dm::PetscDM, numFields::PetscInt, fields::Vector{PetscInt}) 
Returns an `IS` and `DM` encapsulating a subproblem defined by the fields passed in.
The fields are defined by `DMCreateFieldIS()`.

Not collective

Input Parameters:
- `dm`        - The `DM` object
- `numFields` - The number of fields to select
- `fields`    - The field numbers of the selected fields

Output Parameters:
- `is`    - The global indices for all the degrees of freedom in the new sub `DM`, use `NULL` if not needed
- `subdm` - The `DM` for the subproblem, use `NULL` if not needed

Level: intermediate

Note:
You need to call `DMPlexSetMigrationSF()` on the original `DM` if you want the Global-To-Natural map to be automatically constructed

See also: 
=== 
`DM`, `DMCreateFieldIS()`, `DMCreateFieldDecomposition()`, `DMAddField()`, `DMCreateSuperDM()`, `IS`, `VecISCopy()`, `DMPlexSetMigrationSF()`, `DMDestroy()`, `DMView()`, `DMCreateInterpolation()`, `DMCreateColoring()`, `DMCreateMatrix()`, `DMCreateMassMatrix()`

# External Links
$(_doc_external("Dm/DMCreateSubDM"))
"""
function DMCreateSubDM(petsclib::PetscLibType, dm::PetscDM, numFields::PetscInt, fields::Vector{PetscInt}) end

@for_petsc function DMCreateSubDM(petsclib::$UnionPetscLib, dm::PetscDM, numFields::$PetscInt, fields::Vector{$PetscInt} )
	is_ = Ref{IS}()
	subdm_ = Ref{CDM}()

    @chk ccall(
               (:DMCreateSubDM, $petsc_library),
               PetscErrorCode,
               (CDM, $PetscInt, Ptr{$PetscInt}, Ptr{IS}, Ptr{CDM}),
               dm, numFields, fields, is_, subdm_,
              )

	is = is_[]
	subdm = PetscDM(subdm_[], petsclib)

	return is,subdm
end 

"""
	is::Vector{IS},superdm::PetscDM = DMCreateSuperDM(petsclib::PetscLibType,dms::Vector{PetscDM}, n::PetscInt) 
Returns an arrays of `IS` and a single `DM` encapsulating a superproblem defined by multiple `DM`s passed in.

Not collective

Input Parameters:
- `dms` - The `DM` objects
- `n`   - The number of `DM`s

Output Parameters:
- `is`      - The global indices for each of subproblem within the super `DM`, or `NULL`, its length is `n`
- `superdm` - The `DM` for the superproblem

Level: intermediate

Note:
You need to call `DMPlexSetMigrationSF()` on the original `DM` if you want the Global-To-Natural map to be automatically constructed

See also: 
=== 
`DM`, `DMCreateSubDM()`, `DMPlexSetMigrationSF()`, `DMDestroy()`, `DMView()`, `DMCreateInterpolation()`, `DMCreateColoring()`, `DMCreateMatrix()`, `DMCreateMassMatrix()`, `DMCreateFieldIS()`, `DMCreateDomainDecomposition()`

# External Links
$(_doc_external("Dm/DMCreateSuperDM"))
"""
function DMCreateSuperDM(petsclib::PetscLibType, dms::Vector{PetscDM}, n::PetscInt) end

@for_petsc function DMCreateSuperDM(petsclib::$UnionPetscLib, dms::Vector{PetscDM}, n::$PetscInt )
	is_ = Ref{Ptr{IS}}()
	superdm_ = Ref{CDM}()

    @chk ccall(
               (:DMCreateSuperDM, $petsc_library),
               PetscErrorCode,
               (Ptr{CDM}, $PetscInt, Ptr{Ptr{IS}}, Ptr{CDM}),
               dms, n, is_, superdm_,
              )

	is = unsafe_wrap(Array, is_[], VecGetLocalSize(petsclib, x); own = false)
	superdm = PetscDM(superdm_[], petsclib)

	return is,superdm
end 

"""
	n::PetscInt,namelist::Cchar,innerislist::Vector{IS},outerislist::Vector{IS},dmlist::Vector{PetscDM} = DMCreateDomainDecomposition(petsclib::PetscLibType,dm::PetscDM) 
Returns lists of `IS` objects defining a decomposition of a
problem into subproblems corresponding to restrictions to pairs of nested subdomains.

Not Collective

Input Parameter:
- `dm` - the `DM` object

Output Parameters:
- `n`           - The number of subproblems in the domain decomposition (or `NULL` if not requested), also the length of the four arrays below
- `namelist`    - The name for each subdomain (or `NULL` if not requested)
- `innerislist` - The global indices for each inner subdomain (or `NULL`, if not requested)
- `outerislist` - The global indices for each outer subdomain (or `NULL`, if not requested)
- `dmlist`      - The `DM`s for each subdomain subproblem (or `NULL`, if not requested; if `NULL` is returned, no `DM`s are defined)

Level: intermediate

Notes:
Each `IS` contains the global indices of the dofs of the corresponding subdomains with in the
dofs of the original `DM`. The inner subdomains conceptually define a nonoverlapping
covering, while outer subdomains can overlap.

The optional list of `DM`s define a `DM` for each subproblem.

The user is responsible for freeing all requested arrays. In particular, every entry of `namelist` should be freed with
`PetscFree()`, every entry of `innerislist` and `outerislist` should be destroyed with `ISDestroy()`, every entry of `dmlist` should be destroyed with `DMDestroy()`,
and all of the arrays should be freed with `PetscFree()`.

Developer Notes:
The `dmlist` is for the inner subdomains or the outer subdomains or all subdomains?

The names are inconsistent, the hooks use `DMSubDomainHook` which is nothing like `DMCreateDomainDecomposition()` while `DMRefineHook` is used for `DMRefine()`.

See also: 
=== 
`DM`, `DMCreateFieldDecomposition()`, `DMDestroy()`, `DMCreateDomainDecompositionScatters()`, `DMView()`, `DMCreateInterpolation()`,
`DMSubDomainHookAdd()`, `DMSubDomainHookRemove()`,`DMCreateColoring()`, `DMCreateMatrix()`, `DMCreateMassMatrix()`, `DMRefine()`, `DMCoarsen()`

# External Links
$(_doc_external("Dm/DMCreateDomainDecomposition"))
"""
function DMCreateDomainDecomposition(petsclib::PetscLibType, dm::PetscDM) end

@for_petsc function DMCreateDomainDecomposition(petsclib::$UnionPetscLib, dm::PetscDM )
	n_ = Ref{$PetscInt}()
	namelist_ = Ref{Cchar}()
	innerislist_ = Ref{Ptr{IS}}()
	outerislist_ = Ref{Ptr{IS}}()
	dmlist_ = Ref{Ptr{PetscDM}}()

    @chk ccall(
               (:DMCreateDomainDecomposition, $petsc_library),
               PetscErrorCode,
               (CDM, Ptr{$PetscInt}, Cchar, Ptr{Ptr{IS}}, Ptr{Ptr{IS}}, Ptr{Ptr{CDM}}),
               dm, n_, namelist_, innerislist_, outerislist_, dmlist_,
              )

	n = n_[]
	namelist = namelist_[]
	innerislist = unsafe_wrap(Array, innerislist_[], VecGetLocalSize(petsclib, x); own = false)
	outerislist = unsafe_wrap(Array, outerislist_[], VecGetLocalSize(petsclib, x); own = false)
	dmlist = unsafe_wrap(Array, dmlist_[], VecGetLocalSize(petsclib, x); own = false)

	return n,namelist,innerislist,outerislist,dmlist
end 

"""
	iscat::Vector{VecScatter},oscat::Vector{VecScatter},gscat::Vector{VecScatter} = DMCreateDomainDecompositionScatters(petsclib::PetscLibType,dm::PetscDM, n::PetscInt, subdms::PetscDM) 
Returns scatters to the subdomain vectors from the global vector for subdomains created with
`DMCreateDomainDecomposition()`

Not Collective

Input Parameters:
- `dm`     - the `DM` object
- `n`      - the number of subdomains
- `subdms` - the local subdomains

Output Parameters:
- `iscat` - scatter from global vector to nonoverlapping global vector entries on subdomain
- `oscat` - scatter from global vector to overlapping global vector entries on subdomain
- `gscat` - scatter from global vector to local vector on subdomain (fills in ghosts)

Level: developer

Note:
This is an alternative to the iis and ois arguments in `DMCreateDomainDecomposition()` that allow for the solution
of general nonlinear problems with overlapping subdomain methods.  While merely having index sets that enable subsets
of the residual equations to be created is fine for linear problems, nonlinear problems require local assembly of
solution and residual data.

Developer Note:
Can the subdms input be anything or are they exactly the `DM` obtained from
`DMCreateDomainDecomposition()`?

See also: 
=== 
`DM`, `DMCreateDomainDecomposition()`, `DMDestroy()`, `DMView()`, `DMCreateInterpolation()`, `DMCreateColoring()`, `DMCreateMatrix()`, `DMCreateMassMatrix()`, `DMCreateFieldIS()`

# External Links
$(_doc_external("Dm/DMCreateDomainDecompositionScatters"))
"""
function DMCreateDomainDecompositionScatters(petsclib::PetscLibType, dm::PetscDM, n::PetscInt, subdms::PetscDM) end

@for_petsc function DMCreateDomainDecompositionScatters(petsclib::$UnionPetscLib, dm::PetscDM, n::$PetscInt, subdms::PetscDM )
	subdms_ = Ref(subdms.ptr)
	iscat_ = Ref{Ptr{VecScatter}}()
	oscat_ = Ref{Ptr{VecScatter}}()
	gscat_ = Ref{Ptr{VecScatter}}()

    @chk ccall(
               (:DMCreateDomainDecompositionScatters, $petsc_library),
               PetscErrorCode,
               (CDM, $PetscInt, Ptr{CDM}, Ptr{Ptr{VecScatter}}, Ptr{Ptr{VecScatter}}, Ptr{Ptr{VecScatter}}),
               dm, n, subdms_, iscat_, oscat_, gscat_,
              )

	subdms.ptr = C_NULL
	iscat = unsafe_wrap(Array, iscat_[], VecGetLocalSize(petsclib, x); own = false)
	oscat = unsafe_wrap(Array, oscat_[], VecGetLocalSize(petsclib, x); own = false)
	gscat = unsafe_wrap(Array, gscat_[], VecGetLocalSize(petsclib, x); own = false)

	return iscat,oscat,gscat
end 

"""
	DMRefine(petsclib::PetscLibType,dm::PetscDM, comm::MPI_Comm, dmf::PetscDM) 
Refines a `DM` object using a standard nonadaptive refinement of the underlying mesh

Collective

Input Parameters:
- `dm`   - the `DM` object
- `comm` - the communicator to contain the new `DM` object (or `MPI_COMM_NULL`)

Output Parameter:
- `dmf` - the refined `DM`, or `NULL`

Options Database Key:
- `-dm_plex_cell_refiner <strategy>` - chooses the refinement strategy, e.g. regular, tohex

Level: developer

Note:
If no refinement was done, the return value is `NULL`

See also: 
=== 
`DM`, `DMCoarsen()`, `DMDestroy()`, `DMView()`, `DMCreateGlobalVector()`, `DMCreateInterpolation()`, `DMCreateDomainDecomposition()`,
`DMRefineHookAdd()`, `DMRefineHookRemove()`

# External Links
$(_doc_external("Dm/DMRefine"))
"""
function DMRefine(petsclib::PetscLibType, dm::PetscDM, comm::MPI_Comm, dmf::PetscDM) end

@for_petsc function DMRefine(petsclib::$UnionPetscLib, dm::PetscDM, comm::MPI_Comm, dmf::PetscDM )
	dmf_ = Ref(dmf.ptr)

    @chk ccall(
               (:DMRefine, $petsc_library),
               PetscErrorCode,
               (CDM, MPI_Comm, Ptr{CDM}),
               dm, comm, dmf_,
              )

	dmf.ptr = C_NULL

	return nothing
end 

"""
	DMRefineHookAdd(petsclib::PetscLibType,coarse::PetscDM, refinehook::external, interphook::external, ctx::Cvoid) 
adds a callback to be run when interpolating a nonlinear problem to a finer grid

Logically Collective; No Fortran Support

Input Parameters:
- `coarse`     - `DM` on which to run a hook when interpolating to a finer level
- `refinehook` - function to run when setting up the finer level
- `interphook` - function to run to update data on finer levels (once per `SNESSolve()`)
- `ctx`        - [optional] user-defined context for provide data for the hooks (may be `NULL`)

Calling sequence of `refinehook`:
- `coarse` - coarse level `DM`
- `fine`   - fine level `DM` to interpolate problem to
- `ctx`    - optional user-defined function context

Calling sequence of `interphook`:
- `coarse` - coarse level `DM`
- `interp` - matrix interpolating a coarse-level solution to the finer grid
- `fine`   - fine level `DM` to update
- `ctx`    - optional user-defined function context

Level: advanced

Notes:
This function is only needed if auxiliary data that is attached to the `DM`s via, for example, `PetscObjectCompose()`, needs to be
passed to fine grids while grid sequencing.

The actual interpolation is done when `DMInterpolate()` is called.

If this function is called multiple times, the hooks will be run in the order they are added.

See also: 
=== 
`DM`, `DMCoarsenHookAdd()`, `DMInterpolate()`, `SNESFASGetInterpolation()`, `SNESFASGetInjection()`, `PetscObjectCompose()`, `PetscContainerCreate()`

# External Links
$(_doc_external("Dm/DMRefineHookAdd"))
"""
function DMRefineHookAdd(petsclib::PetscLibType, coarse::PetscDM, refinehook::external, interphook::external, ctx::Cvoid) end

@for_petsc function DMRefineHookAdd(petsclib::$UnionPetscLib, coarse::PetscDM, refinehook::external, interphook::external, ctx::Cvoid )

    @chk ccall(
               (:DMRefineHookAdd, $petsc_library),
               PetscErrorCode,
               (CDM, external, external, Ptr{Cvoid}),
               coarse, refinehook, interphook, ctx,
              )


	return nothing
end 

"""
	DMRefineHookRemove(petsclib::PetscLibType,coarse::PetscDM, refinehook::external, interphook::external, ctx::Cvoid) 
remove a callback from the list of hooks, that have been set with `DMRefineHookAdd()`, to be run when interpolating
a nonlinear problem to a finer grid

Logically Collective; No Fortran Support

Input Parameters:
- `coarse`     - the `DM` on which to run a hook when restricting to a coarser level
- `refinehook` - function to run when setting up a finer level
- `interphook` - function to run to update data on finer levels
- `ctx`        - [optional] user-defined context for provide data for the hooks (may be `NULL`)

Level: advanced

Note:
This function does nothing if the hook is not in the list.

See also: 
=== 
`DM`, `DMRefineHookAdd()`, `DMCoarsenHookRemove()`, `DMInterpolate()`, `SNESFASGetInterpolation()`, `SNESFASGetInjection()`, `PetscObjectCompose()`, `PetscContainerCreate()`

# External Links
$(_doc_external("Dm/DMRefineHookRemove"))
"""
function DMRefineHookRemove(petsclib::PetscLibType, coarse::PetscDM, refinehook::external, interphook::external, ctx::Cvoid) end

@for_petsc function DMRefineHookRemove(petsclib::$UnionPetscLib, coarse::PetscDM, refinehook::external, interphook::external, ctx::Cvoid )

    @chk ccall(
               (:DMRefineHookRemove, $petsc_library),
               PetscErrorCode,
               (CDM, external, external, Ptr{Cvoid}),
               coarse, refinehook, interphook, ctx,
              )


	return nothing
end 

"""
	DMInterpolate(petsclib::PetscLibType,coarse::PetscDM, interp::PetscMat, fine::PetscDM) 
interpolates user

Collective if any hooks are

Input Parameters:
- `coarse` - coarser `DM` to use as a base
- `interp` - interpolation matrix, apply using `MatInterpolate()`
- `fine`   - finer `DM` to update

Level: developer

Developer Note:
This routine is called `DMInterpolate()` while the hook is called `DMRefineHookAdd()`. It would be better to have an
an API with consistent terminology.

See also: 
=== 
`DM`, `DMRefineHookAdd()`, `MatInterpolate()`

# External Links
$(_doc_external("Dm/DMInterpolate"))
"""
function DMInterpolate(petsclib::PetscLibType, coarse::PetscDM, interp::PetscMat, fine::PetscDM) end

@for_petsc function DMInterpolate(petsclib::$UnionPetscLib, coarse::PetscDM, interp::PetscMat, fine::PetscDM )

    @chk ccall(
               (:DMInterpolate, $petsc_library),
               PetscErrorCode,
               (CDM, CMat, CDM),
               coarse, interp, fine,
              )


	return nothing
end 

"""
	DMInterpolateSolution(petsclib::PetscLibType,coarse::PetscDM, fine::PetscDM, interp::PetscMat, coarseSol::PetscVec, fineSol::PetscVec) 
Interpolates a solution from a coarse mesh to a fine mesh.

Collective

Input Parameters:
- `coarse`    - coarse `DM`
- `fine`      - fine `DM`
- `interp`    - (optional) the matrix computed by `DMCreateInterpolation()`.  Implementations may not need this, but if it
is available it can avoid some recomputation.  If it is provided, `MatInterpolate()` will be used if
the coarse `DM` does not have a specialized implementation.
- `coarseSol` - solution on the coarse mesh

Output Parameter:
- `fineSol` - the interpolation of coarseSol to the fine mesh

Level: developer

Note:
This function exists because the interpolation of a solution vector between meshes is not always a linear
map.  For example, if a boundary value problem has an inhomogeneous Dirichlet boundary condition that is compressed
out of the solution vector.  Or if interpolation is inherently a nonlinear operation, such as a method using
slope-limiting reconstruction.

Developer Note:
This doesn't just interpolate "solutions" so its API name is questionable.

See also: 
=== 
`DM`, `DMInterpolate()`, `DMCreateInterpolation()`

# External Links
$(_doc_external("Dm/DMInterpolateSolution"))
"""
function DMInterpolateSolution(petsclib::PetscLibType, coarse::PetscDM, fine::PetscDM, interp::PetscMat, coarseSol::PetscVec, fineSol::PetscVec) end

@for_petsc function DMInterpolateSolution(petsclib::$UnionPetscLib, coarse::PetscDM, fine::PetscDM, interp::PetscMat, coarseSol::PetscVec, fineSol::PetscVec )

    @chk ccall(
               (:DMInterpolateSolution, $petsc_library),
               PetscErrorCode,
               (CDM, CDM, CMat, CVec, CVec),
               coarse, fine, interp, coarseSol, fineSol,
              )


	return nothing
end 

"""
	level::PetscInt = DMGetRefineLevel(petsclib::PetscLibType,dm::PetscDM) 
Gets the number of refinements that have generated this `DM` from some initial `DM`.

Not Collective

Input Parameter:
- `dm` - the `DM` object

Output Parameter:
- `level` - number of refinements

Level: developer

Note:
This can be used, by example, to set the number of coarser levels associated with this `DM` for a multigrid solver.

See also: 
=== 
`DM`, `DMRefine()`, `DMCoarsen()`, `DMGetCoarsenLevel()`, `DMDestroy()`, `DMView()`, `DMCreateGlobalVector()`, `DMCreateInterpolation()`

# External Links
$(_doc_external("Dm/DMGetRefineLevel"))
"""
function DMGetRefineLevel(petsclib::PetscLibType, dm::PetscDM) end

@for_petsc function DMGetRefineLevel(petsclib::$UnionPetscLib, dm::PetscDM )
	level_ = Ref{$PetscInt}()

    @chk ccall(
               (:DMGetRefineLevel, $petsc_library),
               PetscErrorCode,
               (CDM, Ptr{$PetscInt}),
               dm, level_,
              )

	level = level_[]

	return level
end 

"""
	DMSetRefineLevel(petsclib::PetscLibType,dm::PetscDM, level::PetscInt) 
Sets the number of refinements that have generated this `DM`.

Not Collective

Input Parameters:
- `dm`    - the `DM` object
- `level` - number of refinements

Level: advanced

Notes:
This value is used by `PCMG` to determine how many multigrid levels to use

The values are usually set automatically by the process that is causing the refinements of an initial `DM` by calling this routine.

See also: 
=== 
`DM`, `DMGetRefineLevel()`, `DMCoarsen()`, `DMGetCoarsenLevel()`, `DMDestroy()`, `DMView()`, `DMCreateGlobalVector()`, `DMCreateInterpolation()`

# External Links
$(_doc_external("Dm/DMSetRefineLevel"))
"""
function DMSetRefineLevel(petsclib::PetscLibType, dm::PetscDM, level::PetscInt) end

@for_petsc function DMSetRefineLevel(petsclib::$UnionPetscLib, dm::PetscDM, level::$PetscInt )

    @chk ccall(
               (:DMSetRefineLevel, $petsc_library),
               PetscErrorCode,
               (CDM, $PetscInt),
               dm, level,
              )


	return nothing
end 

"""
	DMExtrude(petsclib::PetscLibType,dm::PetscDM, layers::PetscInt, dme::PetscDM) 
Extrude a `DM` object from a surface

Collective

Input Parameters:
- `dm`     - the `DM` object
- `layers` - the number of extruded cell layers

Output Parameter:
- `dme` - the extruded `DM`, or `NULL`

Level: developer

Note:
If no extrusion was done, the return value is `NULL`

See also: 
=== 
`DM`, `DMRefine()`, `DMCoarsen()`, `DMDestroy()`, `DMView()`, `DMCreateGlobalVector()`

# External Links
$(_doc_external("Dm/DMExtrude"))
"""
function DMExtrude(petsclib::PetscLibType, dm::PetscDM, layers::PetscInt, dme::PetscDM) end

@for_petsc function DMExtrude(petsclib::$UnionPetscLib, dm::PetscDM, layers::$PetscInt, dme::PetscDM )
	dme_ = Ref(dme.ptr)

    @chk ccall(
               (:DMExtrude, $petsc_library),
               PetscErrorCode,
               (CDM, $PetscInt, Ptr{CDM}),
               dm, layers, dme_,
              )

	dme.ptr = C_NULL

	return nothing
end 

"""
	flg::PetscBool = DMHasBasisTransform(petsclib::PetscLibType,dm::PetscDM) 
Whether the `DM` employs a basis transformation from functions in global vectors to functions in local vectors

Input Parameter:
- `dm` - The `DM`

Output Parameter:
- `flg` - `PETSC_TRUE` if a basis transformation should be done

Level: developer

See also: 
=== 
`DM`, `DMPlexGlobalToLocalBasis()`, `DMPlexLocalToGlobalBasis()`, `DMPlexCreateBasisRotation()`

# External Links
$(_doc_external("Dm/DMHasBasisTransform"))
"""
function DMHasBasisTransform(petsclib::PetscLibType, dm::PetscDM) end

@for_petsc function DMHasBasisTransform(petsclib::$UnionPetscLib, dm::PetscDM )
	flg_ = Ref{PetscBool}()

    @chk ccall(
               (:DMHasBasisTransform, $petsc_library),
               PetscErrorCode,
               (CDM, Ptr{PetscBool}),
               dm, flg_,
              )

	flg = flg_[]

	return flg
end 

"""
	DMCopyTransform(petsclib::PetscLibType,dm::PetscDM, newdm::PetscDM) 

# External Links
$(_doc_external("Dm/DMCopyTransform"))
"""
function DMCopyTransform(petsclib::PetscLibType, dm::PetscDM, newdm::PetscDM) end

@for_petsc function DMCopyTransform(petsclib::$UnionPetscLib, dm::PetscDM, newdm::PetscDM )

    @chk ccall(
               (:DMCopyTransform, $petsc_library),
               PetscErrorCode,
               (CDM, CDM),
               dm, newdm,
              )


	return nothing
end 

"""
	DMGlobalToLocalHookAdd(petsclib::PetscLibType,dm::PetscDM, beginhook::external, endhook::external, ctx::Cvoid) 
adds a callback to be run when `DMGlobalToLocal()` is called

Logically Collective

Input Parameters:
- `dm`        - the `DM`
- `beginhook` - function to run at the beginning of `DMGlobalToLocalBegin()`
- `endhook`   - function to run after `DMGlobalToLocalEnd()` has completed
- `ctx`       - [optional] user-defined context for provide data for the hooks (may be `NULL`)

Calling sequence of `beginhook`:
- `dm`   - global `DM`
- `g`    - global vector
- `mode` - mode
- `l`    - local vector
- `ctx`  - optional user-defined function context

Calling sequence of `endhook`:
- `dm`   - global `DM`
- `g`    - global vector
- `mode` - mode
- `l`    - local vector
- `ctx`  - optional user-defined function context

Level: advanced

Note:
The hook may be used to provide, for example, values that represent boundary conditions in the local vectors that do not exist on the global vector.

See also: 
=== 
`DM`, `DMGlobalToLocal()`, `DMRefineHookAdd()`, `SNESFASGetInterpolation()`, `SNESFASGetInjection()`, `PetscObjectCompose()`, `PetscContainerCreate()`

# External Links
$(_doc_external("Dm/DMGlobalToLocalHookAdd"))
"""
function DMGlobalToLocalHookAdd(petsclib::PetscLibType, dm::PetscDM, beginhook::external, endhook::external, ctx::Cvoid) end

@for_petsc function DMGlobalToLocalHookAdd(petsclib::$UnionPetscLib, dm::PetscDM, beginhook::external, endhook::external, ctx::Cvoid )

    @chk ccall(
               (:DMGlobalToLocalHookAdd, $petsc_library),
               PetscErrorCode,
               (CDM, external, external, Ptr{Cvoid}),
               dm, beginhook, endhook, ctx,
              )


	return nothing
end 

"""
	DMGlobalToLocal(petsclib::PetscLibType,dm::PetscDM, g::PetscVec, mode::InsertMode, l::PetscVec) 
update local vectors from global vector

Neighbor-wise Collective

Input Parameters:
- `dm`   - the `DM` object
- `g`    - the global vector
- `mode` - `INSERT_VALUES` or `ADD_VALUES`
- `l`    - the local vector

Level: beginner

Notes:
The communication involved in this update can be overlapped with computation by instead using
`DMGlobalToLocalBegin()` and `DMGlobalToLocalEnd()`.

`DMGlobalToLocalHookAdd()` may be used to provide additional operations that are performed during the update process.

See also: 
=== 
`DM`, `DMGlobalToLocalHookAdd()`, `DMCoarsen()`, `DMDestroy()`, `DMView()`, `DMCreateGlobalVector()`, `DMCreateInterpolation()`,
`DMGlobalToLocalEnd()`, `DMLocalToGlobalBegin()`, `DMLocalToGlobal()`, `DMLocalToGlobalEnd()`,
`DMGlobalToLocalBegin()` `DMGlobalToLocalEnd()`

# External Links
$(_doc_external("Dm/DMGlobalToLocal"))
"""
function DMGlobalToLocal(petsclib::PetscLibType, dm::PetscDM, g::PetscVec, mode::InsertMode, l::PetscVec) end

@for_petsc function DMGlobalToLocal(petsclib::$UnionPetscLib, dm::PetscDM, g::PetscVec, mode::InsertMode, l::PetscVec )

    @chk ccall(
               (:DMGlobalToLocal, $petsc_library),
               PetscErrorCode,
               (CDM, CVec, InsertMode, CVec),
               dm, g, mode, l,
              )


	return nothing
end 

"""
	DMGlobalToLocalBegin(petsclib::PetscLibType,dm::PetscDM, g::PetscVec, mode::InsertMode, l::PetscVec) 
Begins updating local vectors from global vector

Neighbor-wise Collective

Input Parameters:
- `dm`   - the `DM` object
- `g`    - the global vector
- `mode` - `INSERT_VALUES` or `ADD_VALUES`
- `l`    - the local vector

Level: intermediate

Notes:
The operation is completed with `DMGlobalToLocalEnd()`

One can perform local computations between the `DMGlobalToLocalBegin()` and  `DMGlobalToLocalEnd()` to overlap communication and computation

`DMGlobalToLocal()` is a short form of  `DMGlobalToLocalBegin()` and  `DMGlobalToLocalEnd()`

`DMGlobalToLocalHookAdd()` may be used to provide additional operations that are performed during the update process.

See also: 
=== 
`DM`, `DMCoarsen()`, `DMDestroy()`, `DMView()`, `DMCreateGlobalVector()`, `DMCreateInterpolation()`, `DMGlobalToLocal()`, `DMGlobalToLocalEnd()`, `DMLocalToGlobalBegin()`, `DMLocalToGlobal()`, `DMLocalToGlobalEnd()`

# External Links
$(_doc_external("Dm/DMGlobalToLocalBegin"))
"""
function DMGlobalToLocalBegin(petsclib::PetscLibType, dm::PetscDM, g::PetscVec, mode::InsertMode, l::PetscVec) end

@for_petsc function DMGlobalToLocalBegin(petsclib::$UnionPetscLib, dm::PetscDM, g::PetscVec, mode::InsertMode, l::PetscVec )

    @chk ccall(
               (:DMGlobalToLocalBegin, $petsc_library),
               PetscErrorCode,
               (CDM, CVec, InsertMode, CVec),
               dm, g, mode, l,
              )


	return nothing
end 

"""
	DMGlobalToLocalEnd(petsclib::PetscLibType,dm::PetscDM, g::PetscVec, mode::InsertMode, l::PetscVec) 
Ends updating local vectors from global vector

Neighbor-wise Collective

Input Parameters:
- `dm`   - the `DM` object
- `g`    - the global vector
- `mode` - `INSERT_VALUES` or `ADD_VALUES`
- `l`    - the local vector

Level: intermediate

Note:
See `DMGlobalToLocalBegin()` for details.

See also: 
=== 
`DM`, `DMCoarsen()`, `DMDestroy()`, `DMView()`, `DMCreateGlobalVector()`, `DMCreateInterpolation()`, `DMGlobalToLocal()`, `DMLocalToGlobalBegin()`, `DMLocalToGlobal()`, `DMLocalToGlobalEnd()`

# External Links
$(_doc_external("Dm/DMGlobalToLocalEnd"))
"""
function DMGlobalToLocalEnd(petsclib::PetscLibType, dm::PetscDM, g::PetscVec, mode::InsertMode, l::PetscVec) end

@for_petsc function DMGlobalToLocalEnd(petsclib::$UnionPetscLib, dm::PetscDM, g::PetscVec, mode::InsertMode, l::PetscVec )

    @chk ccall(
               (:DMGlobalToLocalEnd, $petsc_library),
               PetscErrorCode,
               (CDM, CVec, InsertMode, CVec),
               dm, g, mode, l,
              )


	return nothing
end 

"""
	DMLocalToGlobalHookAdd(petsclib::PetscLibType,dm::PetscDM, beginhook::external, endhook::external, ctx::Cvoid) 
adds a callback to be run when a local to global is called

Logically Collective

Input Parameters:
- `dm`        - the `DM`
- `beginhook` - function to run at the beginning of `DMLocalToGlobalBegin()`
- `endhook`   - function to run after `DMLocalToGlobalEnd()` has completed
- `ctx`       - [optional] user-defined context for provide data for the hooks (may be `NULL`)

Calling sequence of `beginhook`:
- `global` - global `DM`
- `l`      - local vector
- `mode`   - mode
- `g`      - global vector
- `ctx`    - optional user-defined function context

Calling sequence of `endhook`:
- `global` - global `DM`
- `l`      - local vector
- `mode`   - mode
- `g`      - global vector
- `ctx`    - optional user-defined function context

Level: advanced

See also: 
=== 
`DM`, `DMLocalToGlobal()`, `DMRefineHookAdd()`, `DMGlobalToLocalHookAdd()`, `SNESFASGetInterpolation()`, `SNESFASGetInjection()`, `PetscObjectCompose()`, `PetscContainerCreate()`

# External Links
$(_doc_external("Dm/DMLocalToGlobalHookAdd"))
"""
function DMLocalToGlobalHookAdd(petsclib::PetscLibType, dm::PetscDM, beginhook::external, endhook::external, ctx::Cvoid) end

@for_petsc function DMLocalToGlobalHookAdd(petsclib::$UnionPetscLib, dm::PetscDM, beginhook::external, endhook::external, ctx::Cvoid )

    @chk ccall(
               (:DMLocalToGlobalHookAdd, $petsc_library),
               PetscErrorCode,
               (CDM, external, external, Ptr{Cvoid}),
               dm, beginhook, endhook, ctx,
              )


	return nothing
end 

"""
	DMLocalToGlobal(petsclib::PetscLibType,dm::PetscDM, l::PetscVec, mode::InsertMode, g::PetscVec) 
updates global vectors from local vectors

Neighbor-wise Collective

Input Parameters:
- `dm`   - the `DM` object
- `l`    - the local vector
- `mode` - if `INSERT_VALUES` then no parallel communication is used, if `ADD_VALUES` then all ghost points from the same base point accumulate into that base point.
- `g`    - the global vector

Level: beginner

Notes:
The communication involved in this update can be overlapped with computation by using
`DMLocalToGlobalBegin()` and `DMLocalToGlobalEnd()`.

In the `ADD_VALUES` case you normally would zero the receiving vector before beginning this operation.

`INSERT_VALUES` is not supported for `DMDA`; in that case simply compute the values directly into a global vector instead of a local one.

Use `DMLocalToGlobalHookAdd()` to add additional operations that are performed on the data during the update process

See also: 
=== 
`DM`, `DMLocalToGlobalBegin()`, `DMLocalToGlobalEnd()`, `DMCoarsen()`, `DMDestroy()`, `DMView()`, `DMCreateGlobalVector()`, `DMCreateInterpolation()`, `DMGlobalToLocal()`, `DMGlobalToLocalEnd()`, `DMGlobalToLocalBegin()`, `DMLocalToGlobalHookAdd()`, `DMGlobaToLocallHookAdd()`

# External Links
$(_doc_external("Dm/DMLocalToGlobal"))
"""
function DMLocalToGlobal(petsclib::PetscLibType, dm::PetscDM, l::PetscVec, mode::InsertMode, g::PetscVec) end

@for_petsc function DMLocalToGlobal(petsclib::$UnionPetscLib, dm::PetscDM, l::PetscVec, mode::InsertMode, g::PetscVec )

    @chk ccall(
               (:DMLocalToGlobal, $petsc_library),
               PetscErrorCode,
               (CDM, CVec, InsertMode, CVec),
               dm, l, mode, g,
              )


	return nothing
end 

"""
	DMLocalToGlobalBegin(petsclib::PetscLibType,dm::PetscDM, l::PetscVec, mode::InsertMode, g::PetscVec) 
begins updating global vectors from local vectors

Neighbor-wise Collective

Input Parameters:
- `dm`   - the `DM` object
- `l`    - the local vector
- `mode` - if `INSERT_VALUES` then no parallel communication is used, if `ADD_VALUES` then all ghost points from the same base point accumulate into that base point.
- `g`    - the global vector

Level: intermediate

Notes:
In the `ADD_VALUES` case you normally would zero the receiving vector before beginning this operation.

`INSERT_VALUES is` not supported for `DMDA`, in that case simply compute the values directly into a global vector instead of a local one.

Use `DMLocalToGlobalEnd()` to complete the communication process.

`DMLocalToGlobal()` is a short form of  `DMLocalToGlobalBegin()` and  `DMLocalToGlobalEnd()`

`DMLocalToGlobalHookAdd()` may be used to provide additional operations that are performed during the update process.

See also: 
=== 
`DM`, `DMLocalToGlobal()`, `DMLocalToGlobalEnd()`, `DMCoarsen()`, `DMDestroy()`, `DMView()`, `DMCreateGlobalVector()`, `DMCreateInterpolation()`, `DMGlobalToLocal()`, `DMGlobalToLocalEnd()`, `DMGlobalToLocalBegin()`

# External Links
$(_doc_external("Dm/DMLocalToGlobalBegin"))
"""
function DMLocalToGlobalBegin(petsclib::PetscLibType, dm::PetscDM, l::PetscVec, mode::InsertMode, g::PetscVec) end

@for_petsc function DMLocalToGlobalBegin(petsclib::$UnionPetscLib, dm::PetscDM, l::PetscVec, mode::InsertMode, g::PetscVec )

    @chk ccall(
               (:DMLocalToGlobalBegin, $petsc_library),
               PetscErrorCode,
               (CDM, CVec, InsertMode, CVec),
               dm, l, mode, g,
              )


	return nothing
end 

"""
	DMLocalToGlobalEnd(petsclib::PetscLibType,dm::PetscDM, l::PetscVec, mode::InsertMode, g::PetscVec) 
updates global vectors from local vectors

Neighbor-wise Collective

Input Parameters:
- `dm`   - the `DM` object
- `l`    - the local vector
- `mode` - `INSERT_VALUES` or `ADD_VALUES`
- `g`    - the global vector

Level: intermediate

Note:
See `DMLocalToGlobalBegin()` for full details

See also: 
=== 
`DM`, `DMLocalToGlobalBegin()`, `DMCoarsen()`, `DMDestroy()`, `DMView()`, `DMCreateGlobalVector()`, `DMCreateInterpolation()`, `DMGlobalToLocalEnd()`

# External Links
$(_doc_external("Dm/DMLocalToGlobalEnd"))
"""
function DMLocalToGlobalEnd(petsclib::PetscLibType, dm::PetscDM, l::PetscVec, mode::InsertMode, g::PetscVec) end

@for_petsc function DMLocalToGlobalEnd(petsclib::$UnionPetscLib, dm::PetscDM, l::PetscVec, mode::InsertMode, g::PetscVec )

    @chk ccall(
               (:DMLocalToGlobalEnd, $petsc_library),
               PetscErrorCode,
               (CDM, CVec, InsertMode, CVec),
               dm, l, mode, g,
              )


	return nothing
end 

"""
	DMLocalToLocalBegin(petsclib::PetscLibType,dm::PetscDM, g::PetscVec, mode::InsertMode, l::PetscVec) 
Begins the process of mapping values from a local vector (that include
ghost points that contain irrelevant values) to another local vector where the ghost points
in the second are set correctly from values on other MPI ranks.

Neighbor-wise Collective

Input Parameters:
- `dm`   - the `DM` object
- `g`    - the original local vector
- `mode` - one of `INSERT_VALUES` or `ADD_VALUES`

Output Parameter:
- `l` - the local vector with correct ghost values

Level: intermediate

Note:
Must be followed by `DMLocalToLocalEnd()`.

See also: 
=== 
`DM`, `DMLocalToLocalEnd()`, `DMCoarsen()`, `DMDestroy()`, `DMView()`, `DMCreateLocalVector()`, `DMCreateGlobalVector()`, `DMCreateInterpolation()`, `DMGlobalToLocalEnd()`, `DMLocalToGlobalBegin()`

# External Links
$(_doc_external("Dm/DMLocalToLocalBegin"))
"""
function DMLocalToLocalBegin(petsclib::PetscLibType, dm::PetscDM, g::PetscVec, mode::InsertMode, l::PetscVec) end

@for_petsc function DMLocalToLocalBegin(petsclib::$UnionPetscLib, dm::PetscDM, g::PetscVec, mode::InsertMode, l::PetscVec )

    @chk ccall(
               (:DMLocalToLocalBegin, $petsc_library),
               PetscErrorCode,
               (CDM, CVec, InsertMode, CVec),
               dm, g, mode, l,
              )


	return nothing
end 

"""
	DMLocalToLocalEnd(petsclib::PetscLibType,dm::PetscDM, g::PetscVec, mode::InsertMode, l::PetscVec) 
Maps from a local vector to another local vector where the ghost
points in the second are set correctly. Must be preceded by `DMLocalToLocalBegin()`.

Neighbor-wise Collective

Input Parameters:
- `dm`   - the `DM` object
- `g`    - the original local vector
- `mode` - one of `INSERT_VALUES` or `ADD_VALUES`

Output Parameter:
- `l` - the local vector with correct ghost values

Level: intermediate

See also: 
=== 
`DM`, `DMLocalToLocalBegin()`, `DMCoarsen()`, `DMDestroy()`, `DMView()`, `DMCreateLocalVector()`, `DMCreateGlobalVector()`, `DMCreateInterpolation()`, `DMGlobalToLocalEnd()`, `DMLocalToGlobalBegin()`

# External Links
$(_doc_external("Dm/DMLocalToLocalEnd"))
"""
function DMLocalToLocalEnd(petsclib::PetscLibType, dm::PetscDM, g::PetscVec, mode::InsertMode, l::PetscVec) end

@for_petsc function DMLocalToLocalEnd(petsclib::$UnionPetscLib, dm::PetscDM, g::PetscVec, mode::InsertMode, l::PetscVec )

    @chk ccall(
               (:DMLocalToLocalEnd, $petsc_library),
               PetscErrorCode,
               (CDM, CVec, InsertMode, CVec),
               dm, g, mode, l,
              )


	return nothing
end 

"""
	DMCoarsen(petsclib::PetscLibType,dm::PetscDM, comm::MPI_Comm, dmc::PetscDM) 
Coarsens a `DM` object using a standard, non

Collective

Input Parameters:
- `dm`   - the `DM` object
- `comm` - the communicator to contain the new `DM` object (or `MPI_COMM_NULL`)

Output Parameter:
- `dmc` - the coarsened `DM`

Level: developer

See also: 
=== 
`DM`, `DMRefine()`, `DMDestroy()`, `DMView()`, `DMCreateGlobalVector()`, `DMCreateInterpolation()`, `DMCreateDomainDecomposition()`,
`DMCoarsenHookAdd()`, `DMCoarsenHookRemove()`

# External Links
$(_doc_external("Dm/DMCoarsen"))
"""
function DMCoarsen(petsclib::PetscLibType, dm::PetscDM, comm::MPI_Comm, dmc::PetscDM) end

@for_petsc function DMCoarsen(petsclib::$UnionPetscLib, dm::PetscDM, comm::MPI_Comm, dmc::PetscDM )
	dmc_ = Ref(dmc.ptr)

    @chk ccall(
               (:DMCoarsen, $petsc_library),
               PetscErrorCode,
               (CDM, MPI_Comm, Ptr{CDM}),
               dm, comm, dmc_,
              )

	dmc.ptr = C_NULL

	return nothing
end 

"""
	DMCoarsenHookAdd(petsclib::PetscLibType,fine::PetscDM, coarsenhook::external, restricthook::external, ctx::Cvoid) 
adds a callback to be run when restricting a nonlinear problem to the coarse grid

Logically Collective; No Fortran Support

Input Parameters:
- `fine`         - `DM` on which to run a hook when restricting to a coarser level
- `coarsenhook`  - function to run when setting up a coarser level
- `restricthook` - function to run to update data on coarser levels (called once per `SNESSolve()`)
- `ctx`          - [optional] user-defined context for provide data for the hooks (may be `NULL`)

Calling sequence of `coarsenhook`:
- `fine`   - fine level `DM`
- `coarse` - coarse level `DM` to restrict problem to
- `ctx`    - optional user-defined function context

Calling sequence of `restricthook`:
- `fine`      - fine level `DM`
- `mrestrict` - matrix restricting a fine-level solution to the coarse grid, usually the transpose of the interpolation
- `rscale`    - scaling vector for restriction
- `inject`    - matrix restricting by injection
- `coarse`    - coarse level DM to update
- `ctx`       - optional user-defined function context

Level: advanced

Notes:
This function is only needed if auxiliary data, attached to the `DM` with `PetscObjectCompose()`, needs to be set up or passed from the fine `DM` to the coarse `DM`.

If this function is called multiple times, the hooks will be run in the order they are added.

In order to compose with nonlinear preconditioning without duplicating storage, the hook should be implemented to
extract the finest level information from its context (instead of from the `SNES`).

The hooks are automatically called by `DMRestrict()`

See also: 
=== 
`DM`, `DMCoarsenHookRemove()`, `DMRefineHookAdd()`, `SNESFASGetInterpolation()`, `SNESFASGetInjection()`, `PetscObjectCompose()`, `PetscContainerCreate()`

# External Links
$(_doc_external("Dm/DMCoarsenHookAdd"))
"""
function DMCoarsenHookAdd(petsclib::PetscLibType, fine::PetscDM, coarsenhook::external, restricthook::external, ctx::Cvoid) end

@for_petsc function DMCoarsenHookAdd(petsclib::$UnionPetscLib, fine::PetscDM, coarsenhook::external, restricthook::external, ctx::Cvoid )

    @chk ccall(
               (:DMCoarsenHookAdd, $petsc_library),
               PetscErrorCode,
               (CDM, external, external, Ptr{Cvoid}),
               fine, coarsenhook, restricthook, ctx,
              )


	return nothing
end 

"""
	DMCoarsenHookRemove(petsclib::PetscLibType,fine::PetscDM, coarsenhook::external, restricthook::external, ctx::Cvoid) 
remove a callback set with `DMCoarsenHookAdd()`

Logically Collective; No Fortran Support

Input Parameters:
- `fine`         - `DM` on which to run a hook when restricting to a coarser level
- `coarsenhook`  - function to run when setting up a coarser level
- `restricthook` - function to run to update data on coarser levels
- `ctx`          - [optional] user-defined context for provide data for the hooks (may be `NULL`)

Level: advanced

Notes:
This function does nothing if the `coarsenhook` is not in the list.

See `DMCoarsenHookAdd()` for the calling sequence of `coarsenhook` and `restricthook`

See also: 
=== 
`DM`, `DMCoarsenHookAdd()`, `DMRefineHookAdd()`, `SNESFASGetInterpolation()`, `SNESFASGetInjection()`, `PetscObjectCompose()`, `PetscContainerCreate()`

# External Links
$(_doc_external("Dm/DMCoarsenHookRemove"))
"""
function DMCoarsenHookRemove(petsclib::PetscLibType, fine::PetscDM, coarsenhook::external, restricthook::external, ctx::Cvoid) end

@for_petsc function DMCoarsenHookRemove(petsclib::$UnionPetscLib, fine::PetscDM, coarsenhook::external, restricthook::external, ctx::Cvoid )

    @chk ccall(
               (:DMCoarsenHookRemove, $petsc_library),
               PetscErrorCode,
               (CDM, external, external, Ptr{Cvoid}),
               fine, coarsenhook, restricthook, ctx,
              )


	return nothing
end 

"""
	DMRestrict(petsclib::PetscLibType,fine::PetscDM, restrct::PetscMat, rscale::PetscVec, inject::PetscMat, coarse::PetscDM) 
restricts user

Collective if any hooks are

Input Parameters:
- `fine`    - finer `DM` from which the data is obtained
- `restrct` - restriction matrix, apply using `MatRestrict()`, usually the transpose of the interpolation
- `rscale`  - scaling vector for restriction
- `inject`  - injection matrix, also use `MatRestrict()`
- `coarse`  - coarser `DM` to update

Level: developer

Developer Note:
Though this routine is called `DMRestrict()` the hooks are added with `DMCoarsenHookAdd()`, a consistent terminology would be better

See also: 
=== 
`DM`, `DMCoarsenHookAdd()`, `MatRestrict()`, `DMInterpolate()`, `DMRefineHookAdd()`

# External Links
$(_doc_external("Dm/DMRestrict"))
"""
function DMRestrict(petsclib::PetscLibType, fine::PetscDM, restrct::PetscMat, rscale::PetscVec, inject::PetscMat, coarse::PetscDM) end

@for_petsc function DMRestrict(petsclib::$UnionPetscLib, fine::PetscDM, restrct::PetscMat, rscale::PetscVec, inject::PetscMat, coarse::PetscDM )

    @chk ccall(
               (:DMRestrict, $petsc_library),
               PetscErrorCode,
               (CDM, CMat, CVec, CMat, CDM),
               fine, restrct, rscale, inject, coarse,
              )


	return nothing
end 

"""
	DMSubDomainHookAdd(petsclib::PetscLibType,global_::PetscDM, ddhook::external, restricthook::external, ctx::Cvoid) 
adds a callback to be run when restricting a problem to subdomain `DM`s with `DMCreateDomainDecomposition()`

Logically Collective; No Fortran Support

Input Parameters:
- `global_`       - global `DM`
- `ddhook`       - function to run to pass data to the decomposition `DM` upon its creation
- `restricthook` - function to run to update data on block solve (at the beginning of the block solve)
- `ctx`          - [optional] user-defined context for provide data for the hooks (may be `NULL`)

Calling sequence of `ddhook`:
- `global` - global `DM`
- `block`  - subdomain `DM`
- `ctx`    - optional user-defined function context

Calling sequence of `restricthook`:
- `global` - global `DM`
- `out`    - scatter to the outer (with ghost and overlap points) sub vector
- `in`     - scatter to sub vector values only owned locally
- `block`  - subdomain `DM`
- `ctx`    - optional user-defined function context

Level: advanced

Notes:
This function can be used if auxiliary data needs to be set up on subdomain `DM`s.

If this function is called multiple times, the hooks will be run in the order they are added.

In order to compose with nonlinear preconditioning without duplicating storage, the hook should be implemented to
extract the global information from its context (instead of from the `SNES`).

Developer Note:
It is unclear what "block solve" means within the definition of `restricthook`

See also: 
=== 
`DM`, `DMSubDomainHookRemove()`, `DMRefineHookAdd()`, `SNESFASGetInterpolation()`, `SNESFASGetInjection()`, `PetscObjectCompose()`, `PetscContainerCreate()`, `DMCreateDomainDecomposition()`

# External Links
$(_doc_external("Dm/DMSubDomainHookAdd"))
"""
function DMSubDomainHookAdd(petsclib::PetscLibType, global_::PetscDM, ddhook::external, restricthook::external, ctx::Cvoid) end

@for_petsc function DMSubDomainHookAdd(petsclib::$UnionPetscLib, global_::PetscDM, ddhook::external, restricthook::external, ctx::Cvoid )

    @chk ccall(
               (:DMSubDomainHookAdd, $petsc_library),
               PetscErrorCode,
               (CDM, external, external, Ptr{Cvoid}),
               global_, ddhook, restricthook, ctx,
              )


	return nothing
end 

"""
	DMSubDomainHookRemove(petsclib::PetscLibType,global_::PetscDM, ddhook::external, restricthook::external, ctx::Cvoid) 
remove a callback from the list to be run when restricting a problem to subdomain `DM`s with `DMCreateDomainDecomposition()`

Logically Collective; No Fortran Support

Input Parameters:
- `global`       - global `DM`
- `ddhook`       - function to run to pass data to the decomposition `DM` upon its creation
- `restricthook` - function to run to update data on block solve (at the beginning of the block solve)
- `ctx`          - [optional] user-defined context for provide data for the hooks (may be `NULL`)

Level: advanced

Note:
See `DMSubDomainHookAdd()` for the calling sequences of `ddhook` and `restricthook`

See also: 
=== 
`DM`, `DMSubDomainHookAdd()`, `SNESFASGetInterpolation()`, `SNESFASGetInjection()`, `PetscObjectCompose()`, `PetscContainerCreate()`,
`DMCreateDomainDecomposition()`

# External Links
$(_doc_external("Dm/DMSubDomainHookRemove"))
"""
function DMSubDomainHookRemove(petsclib::PetscLibType, global_::PetscDM, ddhook::external, restricthook::external, ctx::Cvoid) end

@for_petsc function DMSubDomainHookRemove(petsclib::$UnionPetscLib, global_::PetscDM, ddhook::external, restricthook::external, ctx::Cvoid )

    @chk ccall(
               (:DMSubDomainHookRemove, $petsc_library),
               PetscErrorCode,
               (CDM, external, external, Ptr{Cvoid}),
               global_, ddhook, restricthook, ctx,
              )


	return nothing
end 

"""
	DMSubDomainRestrict(petsclib::PetscLibType,global_::PetscDM, oscatter::VecScatter, gscatter::VecScatter, subdm::PetscDM) 
restricts user

Collective if any hooks are

Input Parameters:
- `global`   - The global `DM` to use as a base
- `oscatter` - The scatter from domain global vector filling subdomain global vector with overlap
- `gscatter` - The scatter from domain global vector filling subdomain local vector with ghosts
- `subdm`    - The subdomain `DM` to update

Level: developer

See also: 
=== 
`DM`, `DMCoarsenHookAdd()`, `MatRestrict()`, `DMCreateDomainDecomposition()`

# External Links
$(_doc_external("Dm/DMSubDomainRestrict"))
"""
function DMSubDomainRestrict(petsclib::PetscLibType, global_::PetscDM, oscatter::VecScatter, gscatter::VecScatter, subdm::PetscDM) end

@for_petsc function DMSubDomainRestrict(petsclib::$UnionPetscLib, global_::PetscDM, oscatter::VecScatter, gscatter::VecScatter, subdm::PetscDM )

    @chk ccall(
               (:DMSubDomainRestrict, $petsc_library),
               PetscErrorCode,
               (CDM, VecScatter, VecScatter, CDM),
               global_, oscatter, gscatter, subdm,
              )


	return nothing
end 

"""
	level::PetscInt = DMGetCoarsenLevel(petsclib::PetscLibType,dm::PetscDM) 
Gets the number of coarsenings that have generated this `DM`.

Not Collective

Input Parameter:
- `dm` - the `DM` object

Output Parameter:
- `level` - number of coarsenings

Level: developer

See also: 
=== 
`DM`, `DMCoarsen()`, `DMSetCoarsenLevel()`, `DMGetRefineLevel()`, `DMDestroy()`, `DMView()`, `DMCreateGlobalVector()`, `DMCreateInterpolation()`

# External Links
$(_doc_external("Dm/DMGetCoarsenLevel"))
"""
function DMGetCoarsenLevel(petsclib::PetscLibType, dm::PetscDM) end

@for_petsc function DMGetCoarsenLevel(petsclib::$UnionPetscLib, dm::PetscDM )
	level_ = Ref{$PetscInt}()

    @chk ccall(
               (:DMGetCoarsenLevel, $petsc_library),
               PetscErrorCode,
               (CDM, Ptr{$PetscInt}),
               dm, level_,
              )

	level = level_[]

	return level
end 

"""
	DMSetCoarsenLevel(petsclib::PetscLibType,dm::PetscDM, level::PetscInt) 
Sets the number of coarsenings that have generated this `DM`.

Collective

Input Parameters:
- `dm`    - the `DM` object
- `level` - number of coarsenings

Level: developer

Note:
This is rarely used directly, the information is automatically set when a `DM` is created with `DMCoarsen()`

See also: 
=== 
`DM`, `DMCoarsen()`, `DMGetCoarsenLevel()`, `DMGetRefineLevel()`, `DMDestroy()`, `DMView()`, `DMCreateGlobalVector()`, `DMCreateInterpolation()`

# External Links
$(_doc_external("Dm/DMSetCoarsenLevel"))
"""
function DMSetCoarsenLevel(petsclib::PetscLibType, dm::PetscDM, level::PetscInt) end

@for_petsc function DMSetCoarsenLevel(petsclib::$UnionPetscLib, dm::PetscDM, level::$PetscInt )

    @chk ccall(
               (:DMSetCoarsenLevel, $petsc_library),
               PetscErrorCode,
               (CDM, $PetscInt),
               dm, level,
              )


	return nothing
end 

"""
	DMRefineHierarchy(petsclib::PetscLibType,dm::PetscDM, nlevels::PetscInt, dmf::Vector{PetscDM}) 
Refines a `DM` object, all levels at once

Collective

Input Parameters:
- `dm`      - the `DM` object
- `nlevels` - the number of levels of refinement

Output Parameter:
- `dmf` - the refined `DM` hierarchy

Level: developer

See also: 
=== 
`DM`, `DMCoarsen()`, `DMCoarsenHierarchy()`, `DMDestroy()`, `DMView()`, `DMCreateGlobalVector()`, `DMCreateInterpolation()`

# External Links
$(_doc_external("Dm/DMRefineHierarchy"))
"""
function DMRefineHierarchy(petsclib::PetscLibType, dm::PetscDM, nlevels::PetscInt, dmf::Vector{PetscDM}) end

@for_petsc function DMRefineHierarchy(petsclib::$UnionPetscLib, dm::PetscDM, nlevels::$PetscInt, dmf::Vector{PetscDM} )

    @chk ccall(
               (:DMRefineHierarchy, $petsc_library),
               PetscErrorCode,
               (CDM, $PetscInt, Ptr{CDM}),
               dm, nlevels, dmf,
              )


	return nothing
end 

"""
	DMCoarsenHierarchy(petsclib::PetscLibType,dm::PetscDM, nlevels::PetscInt, dmc::Vector{PetscDM}) 
Coarsens a `DM` object, all levels at once

Collective

Input Parameters:
- `dm`      - the `DM` object
- `nlevels` - the number of levels of coarsening

Output Parameter:
- `dmc` - the coarsened `DM` hierarchy

Level: developer

See also: 
=== 
`DM`, `DMCoarsen()`, `DMRefineHierarchy()`, `DMDestroy()`, `DMView()`, `DMCreateGlobalVector()`, `DMCreateInterpolation()`

# External Links
$(_doc_external("Dm/DMCoarsenHierarchy"))
"""
function DMCoarsenHierarchy(petsclib::PetscLibType, dm::PetscDM, nlevels::PetscInt, dmc::Vector{PetscDM}) end

@for_petsc function DMCoarsenHierarchy(petsclib::$UnionPetscLib, dm::PetscDM, nlevels::$PetscInt, dmc::Vector{PetscDM} )

    @chk ccall(
               (:DMCoarsenHierarchy, $petsc_library),
               PetscErrorCode,
               (CDM, $PetscInt, Ptr{CDM}),
               dm, nlevels, dmc,
              )


	return nothing
end 

"""
	DMSetApplicationContextDestroy(petsclib::PetscLibType,dm::PetscDM, destroy::PetscCtxDestroyFn) 
Sets a user function that will be called to destroy the application context when the `DM` is destroyed

Logically Collective if the function is collective

Input Parameters:
- `dm`      - the `DM` object
- `destroy` - the destroy function, see `PetscCtxDestroyFn` for the calling sequence

Level: intermediate

See also: 
=== 
`DM`, `DMSetApplicationContext()`, `DMView()`, `DMCreateGlobalVector()`, `DMCreateInterpolation()`, `DMCreateColoring()`, `DMCreateMatrix()`, `DMCreateMassMatrix()`,
`DMGetApplicationContext()`, `PetscCtxDestroyFn`

# External Links
$(_doc_external("Dm/DMSetApplicationContextDestroy"))
"""
function DMSetApplicationContextDestroy(petsclib::PetscLibType, dm::PetscDM, destroy::PetscCtxDestroyFn) end

@for_petsc function DMSetApplicationContextDestroy(petsclib::$UnionPetscLib, dm::PetscDM, destroy::PetscCtxDestroyFn )

    @chk ccall(
               (:DMSetApplicationContextDestroy, $petsc_library),
               PetscErrorCode,
               (CDM, Ptr{PetscCtxDestroyFn}),
               dm, destroy,
              )


	return nothing
end 

"""
	DMSetApplicationContext(petsclib::PetscLibType,dm::PetscDM, ctx::Cvoid) 
Set a user context into a `DM` object

Not Collective

Input Parameters:
- `dm`  - the `DM` object
- `ctx` - the user context

Level: intermediate

Note:
A user context is a way to pass problem specific information that is accessible whenever the `DM` is available
In a multilevel solver, the user context is shared by all the `DM` in the hierarchy; it is thus not advisable
to store objects that represent discretized quantities inside the context.

Fortran Note:
This only works when `ctx` is a Fortran derived type (it cannot be a `PetscObject`), we recommend writing a Fortran interface definition for this
function that tells the Fortran compiler the derived data type that is passed in as the `ctx` argument. See `DMGetApplicationContext()` for
an example.

See also: 
=== 
`DM`, `DMGetApplicationContext()`, `DMView()`, `DMCreateGlobalVector()`, `DMCreateInterpolation()`, `DMCreateColoring()`, `DMCreateMatrix()`, `DMCreateMassMatrix()`

# External Links
$(_doc_external("Dm/DMSetApplicationContext"))
"""
function DMSetApplicationContext(petsclib::PetscLibType, dm::PetscDM, ctx::Cvoid) end

@for_petsc function DMSetApplicationContext(petsclib::$UnionPetscLib, dm::PetscDM, ctx::Cvoid )

    @chk ccall(
               (:DMSetApplicationContext, $petsc_library),
               PetscErrorCode,
               (CDM, Ptr{Cvoid}),
               dm, ctx,
              )


	return nothing
end 

"""
	DMGetApplicationContext(petsclib::PetscLibType,dm::PetscDM, ctx::PeCtx) 
Gets a user context from a `DM` object provided with `DMSetApplicationContext()`

Not Collective

Input Parameter:
- `dm` - the `DM` object

Output Parameter:
- `ctx` - a pointer to the user context

Level: intermediate

Note:
A user context is a way to pass problem specific information that is accessible whenever the `DM` is available

Fortran Notes:
This only works when the context is a Fortran derived type (it cannot be a `PetscObject`) and you **must** write a Fortran interface definition for this
function that tells the Fortran compiler the derived data type that is returned as the `ctx` argument. For example,
-vb
Interface DMGetApplicationContext
Subroutine DMGetApplicationContext(dm,ctx,ierr)
#include <petsc/finclude/petscdm.h>
use petscdm
DM dm
type(tUsertype), pointer :: ctx
PetscErrorCode ierr
End Subroutine
End Interface DMGetApplicationContext
-ve

The prototype for `ctx` must be
-vb
type(tUsertype), pointer :: ctx
-ve

See also: 
=== 
`DM`, `DMView()`, `DMCreateGlobalVector()`, `DMCreateInterpolation()`, `DMCreateColoring()`, `DMCreateMatrix()`, `DMCreateMassMatrix()`

# External Links
$(_doc_external("Dm/DMGetApplicationContext"))
"""
function DMGetApplicationContext(petsclib::PetscLibType, dm::PetscDM, ctx::PeCtx) end

@for_petsc function DMGetApplicationContext(petsclib::$UnionPetscLib, dm::PetscDM, ctx::PeCtx )

    @chk ccall(
               (:DMGetApplicationContext, $petsc_library),
               PetscErrorCode,
               (CDM, PeCtx),
               dm, ctx,
              )


	return nothing
end 

"""
	DMSetVariableBounds(petsclib::PetscLibType,dm::PetscDM, f::external) 
sets a function to compute the lower and upper bound vectors for `SNESVI`.

Logically Collective

Input Parameters:
- `dm` - the DM object
- `f`  - the function that computes variable bounds used by `SNESVI` (use `NULL` to cancel a previous function that was set)

Level: intermediate

Developer Note:
Should be called `DMSetComputeVIBounds()` or something similar

See also: 
=== 
`DM`, `DMComputeVariableBounds()`, `DMHasVariableBounds()`, `DMView()`, `DMCreateGlobalVector()`, `DMCreateInterpolation()`, `DMCreateColoring()`, `DMCreateMatrix()`, `DMCreateMassMatrix()`, `DMGetApplicationContext()`,
`DMSetJacobian()`

# External Links
$(_doc_external("Dm/DMSetVariableBounds"))
"""
function DMSetVariableBounds(petsclib::PetscLibType, dm::PetscDM, f::external) end

@for_petsc function DMSetVariableBounds(petsclib::$UnionPetscLib, dm::PetscDM, f::external )

    @chk ccall(
               (:DMSetVariableBounds, $petsc_library),
               PetscErrorCode,
               (CDM, external),
               dm, f,
              )


	return nothing
end 

"""
	flg::PetscBool = DMHasVariableBounds(petsclib::PetscLibType,dm::PetscDM) 
does the `DM` object have a variable bounds function?

Not Collective

Input Parameter:
- `dm` - the `DM` object to destroy

Output Parameter:
- `flg` - `PETSC_TRUE` if the variable bounds function exists

Level: developer

See also: 
=== 
`DM`, `DMComputeVariableBounds()`, `DMView()`, `DMCreateGlobalVector()`, `DMCreateInterpolation()`, `DMCreateColoring()`, `DMCreateMatrix()`, `DMCreateMassMatrix()`, `DMGetApplicationContext()`

# External Links
$(_doc_external("Dm/DMHasVariableBounds"))
"""
function DMHasVariableBounds(petsclib::PetscLibType, dm::PetscDM) end

@for_petsc function DMHasVariableBounds(petsclib::$UnionPetscLib, dm::PetscDM )
	flg_ = Ref{PetscBool}()

    @chk ccall(
               (:DMHasVariableBounds, $petsc_library),
               PetscErrorCode,
               (CDM, Ptr{PetscBool}),
               dm, flg_,
              )

	flg = flg_[]

	return flg
end 

"""
	DMComputeVariableBounds(petsclib::PetscLibType,dm::PetscDM, xl::PetscVec, xu::PetscVec) 
compute variable bounds used by `SNESVI`.

Logically Collective

Input Parameter:
- `dm` - the `DM` object

Output Parameters:
- `xl` - lower bound
- `xu` - upper bound

Level: advanced

Note:
This is generally not called by users. It calls the function provided by the user with DMSetVariableBounds()

See also: 
=== 
`DM`, `DMHasVariableBounds()`, `DMView()`, `DMCreateGlobalVector()`, `DMCreateInterpolation()`, `DMCreateColoring()`, `DMCreateMatrix()`, `DMCreateMassMatrix()`, `DMGetApplicationContext()`

# External Links
$(_doc_external("Dm/DMComputeVariableBounds"))
"""
function DMComputeVariableBounds(petsclib::PetscLibType, dm::PetscDM, xl::PetscVec, xu::PetscVec) end

@for_petsc function DMComputeVariableBounds(petsclib::$UnionPetscLib, dm::PetscDM, xl::PetscVec, xu::PetscVec )

    @chk ccall(
               (:DMComputeVariableBounds, $petsc_library),
               PetscErrorCode,
               (CDM, CVec, CVec),
               dm, xl, xu,
              )


	return nothing
end 

"""
	flg::PetscBool = DMHasColoring(petsclib::PetscLibType,dm::PetscDM) 
does the `DM` object have a method of providing a coloring?

Not Collective

Input Parameter:
- `dm` - the DM object

Output Parameter:
- `flg` - `PETSC_TRUE` if the `DM` has facilities for `DMCreateColoring()`.

Level: developer

See also: 
=== 
`DM`, `DMCreateColoring()`

# External Links
$(_doc_external("Dm/DMHasColoring"))
"""
function DMHasColoring(petsclib::PetscLibType, dm::PetscDM) end

@for_petsc function DMHasColoring(petsclib::$UnionPetscLib, dm::PetscDM )
	flg_ = Ref{PetscBool}()

    @chk ccall(
               (:DMHasColoring, $petsc_library),
               PetscErrorCode,
               (CDM, Ptr{PetscBool}),
               dm, flg_,
              )

	flg = flg_[]

	return flg
end 

"""
	flg::PetscBool = DMHasCreateRestriction(petsclib::PetscLibType,dm::PetscDM) 
does the `DM` object have a method of providing a restriction?

Not Collective

Input Parameter:
- `dm` - the `DM` object

Output Parameter:
- `flg` - `PETSC_TRUE` if the `DM` has facilities for `DMCreateRestriction()`.

Level: developer

See also: 
=== 
`DM`, `DMCreateRestriction()`, `DMHasCreateInterpolation()`, `DMHasCreateInjection()`

# External Links
$(_doc_external("Dm/DMHasCreateRestriction"))
"""
function DMHasCreateRestriction(petsclib::PetscLibType, dm::PetscDM) end

@for_petsc function DMHasCreateRestriction(petsclib::$UnionPetscLib, dm::PetscDM )
	flg_ = Ref{PetscBool}()

    @chk ccall(
               (:DMHasCreateRestriction, $petsc_library),
               PetscErrorCode,
               (CDM, Ptr{PetscBool}),
               dm, flg_,
              )

	flg = flg_[]

	return flg
end 

"""
	flg::PetscBool = DMHasCreateInjection(petsclib::PetscLibType,dm::PetscDM) 
does the `DM` object have a method of providing an injection?

Not Collective

Input Parameter:
- `dm` - the `DM` object

Output Parameter:
- `flg` - `PETSC_TRUE` if the `DM` has facilities for `DMCreateInjection()`.

Level: developer

See also: 
=== 
`DM`, `DMCreateInjection()`, `DMHasCreateRestriction()`, `DMHasCreateInterpolation()`

# External Links
$(_doc_external("Dm/DMHasCreateInjection"))
"""
function DMHasCreateInjection(petsclib::PetscLibType, dm::PetscDM) end

@for_petsc function DMHasCreateInjection(petsclib::$UnionPetscLib, dm::PetscDM )
	flg_ = Ref{PetscBool}()

    @chk ccall(
               (:DMHasCreateInjection, $petsc_library),
               PetscErrorCode,
               (CDM, Ptr{PetscBool}),
               dm, flg_,
              )

	flg = flg_[]

	return flg
end 

"""
	DMSetType(petsclib::PetscLibType,dm::PetscDM, method::DMType) 
Builds a `DM`, for a particular `DM` implementation.

Collective

Input Parameters:
- `dm`     - The `DM` object
- `method` - The name of the `DMType`, for example `DMDA`, `DMPLEX`

Options Database Key:
- `-dm_type <type>` - Sets the `DM` type; use -help for a list of available types

Level: intermediate

Note:
Of the `DM` is constructed by directly calling a function to construct a particular `DM`, for example, `DMDACreate2d()` or `DMPlexCreateBoxMesh()`

See also: 
=== 
`DM`, `DMType`, `DMDA`, `DMPLEX`, `DMGetType()`, `DMCreate()`, `DMDACreate2d()`

# External Links
$(_doc_external("Dm/DMSetType"))
"""
function DMSetType(petsclib::PetscLibType, dm::PetscDM, method::DMType) end

@for_petsc function DMSetType(petsclib::$UnionPetscLib, dm::PetscDM, method::DMType )

    @chk ccall(
               (:DMSetType, $petsc_library),
               PetscErrorCode,
               (CDM, DMType),
               dm, method,
              )


	return nothing
end 

"""
	type::DMType = DMGetType(petsclib::PetscLibType,dm::PetscDM) 
Gets the `DM` type name (as a string) from the `DM`.

Not Collective

Input Parameter:
- `dm` - The `DM`

Output Parameter:
- `type` - The `DMType` name

Level: intermediate

See also: 
=== 
`DM`, `DMType`, `DMDA`, `DMPLEX`, `DMSetType()`, `DMCreate()`

# External Links
$(_doc_external("Dm/DMGetType"))
"""
function DMGetType(petsclib::PetscLibType, dm::PetscDM) end

@for_petsc function DMGetType(petsclib::$UnionPetscLib, dm::PetscDM )
	type_ = Ref{DMType}()

    @chk ccall(
               (:DMGetType, $petsc_library),
               PetscErrorCode,
               (CDM, Ptr{DMType}),
               dm, type_,
              )

	type = unsafe_string(type_[])

	return type
end 

"""
	DMConvert(petsclib::PetscLibType,dm::PetscDM, newtype::DMType, M::PetscDM) 
Converts a `DM` to another `DM`, either of the same or different type.

Collective

Input Parameters:
- `dm`      - the `DM`
- `newtype` - new `DM` type (use "same" for the same type)

Output Parameter:
- `M` - pointer to new `DM`

Level: intermediate

Note:
Cannot be used to convert a sequential `DM` to a parallel or a parallel to sequential,
the MPI communicator of the generated `DM` is always the same as the communicator
of the input `DM`.

See also: 
=== 
`DM`, `DMSetType()`, `DMCreate()`, `DMClone()`

# External Links
$(_doc_external("Dm/DMConvert"))
"""
function DMConvert(petsclib::PetscLibType, dm::PetscDM, newtype::DMType, M::PetscDM) end

@for_petsc function DMConvert(petsclib::$UnionPetscLib, dm::PetscDM, newtype::DMType, M::PetscDM )
	M_ = Ref(M.ptr)

    @chk ccall(
               (:DMConvert, $petsc_library),
               PetscErrorCode,
               (CDM, DMType, Ptr{CDM}),
               dm, newtype, M_,
              )

	M.ptr = C_NULL

	return nothing
end 

"""
	DMRegister(petsclib::PetscLibType,sname::String, fnc::external) 
Adds a new `DM` type implementation

Not Collective, No Fortran Support

Input Parameters:
- `sname`    - The name of a new user-defined creation routine
- `function` - The creation routine itself

Level: advanced

Note:
`DMRegister()` may be called multiple times to add several user-defined `DM`s

Example Usage:
-vb
DMRegister("my_da", MyDMCreate);
-ve

Then, your `DM` type can be chosen with the procedural interface via
-vb
DMCreate(MPI_Comm, DM *);
DMSetType(DM,"my_da");
-ve
or at runtime via the option
-vb
-da_type my_da
-ve

See also: 
=== 
`DM`, `DMType`, `DMSetType()`, `DMRegisterAll()`, `DMRegisterDestroy()`

# External Links
$(_doc_external("Dm/DMRegister"))
"""
function DMRegister(petsclib::PetscLibType, sname::String, fnc::external) end

@for_petsc function DMRegister(petsclib::$UnionPetscLib, sname::String, fnc::external )

    @chk ccall(
               (:DMRegister, $petsc_library),
               PetscErrorCode,
               (Ptr{Cchar}, external),
               sname, fnc,
              )


	return nothing
end 

"""
	DMLoad(petsclib::PetscLibType,newdm::PetscDM, viewer::PetscViewer) 
Loads a DM that has been stored in binary  with `DMView()`.

Collective

Input Parameters:
- `newdm`  - the newly loaded `DM`, this needs to have been created with `DMCreate()` or
some related function before a call to `DMLoad()`.
- `viewer` - binary file viewer, obtained from `PetscViewerBinaryOpen()` or
`PETSCVIEWERHDF5` file viewer, obtained from `PetscViewerHDF5Open()`

Level: intermediate

Notes:
The type is determined by the data in the file, any type set into the DM before this call is ignored.

Using `PETSCVIEWERHDF5` type with `PETSC_VIEWER_HDF5_PETSC` format, one can save multiple `DMPLEX`
meshes in a single HDF5 file. This in turn requires one to name the `DMPLEX` object with `PetscObjectSetName()`
before saving it with `DMView()` and before loading it with `DMLoad()` for identification of the mesh object.

See also: 
=== 
`DM`, `PetscViewerBinaryOpen()`, `DMView()`, `MatLoad()`, `VecLoad()`

# External Links
$(_doc_external("Dm/DMLoad"))
"""
function DMLoad(petsclib::PetscLibType, newdm::PetscDM, viewer::PetscViewer) end

@for_petsc function DMLoad(petsclib::$UnionPetscLib, newdm::PetscDM, viewer::PetscViewer )

    @chk ccall(
               (:DMLoad, $petsc_library),
               PetscErrorCode,
               (CDM, PetscViewer),
               newdm, viewer,
              )


	return nothing
end 

"""
	DMPrintCellIndices(petsclib::PetscLibType,c::PetscInt, name::String, len::PetscInt, x::Vector{PetscInt}) 

# External Links
$(_doc_external("Dm/DMPrintCellIndices"))
"""
function DMPrintCellIndices(petsclib::PetscLibType, c::PetscInt, name::String, len::PetscInt, x::Vector{PetscInt}) end

@for_petsc function DMPrintCellIndices(petsclib::$UnionPetscLib, c::$PetscInt, name::String, len::$PetscInt, x::Vector{$PetscInt} )

    @chk ccall(
               (:DMPrintCellIndices, $petsc_library),
               PetscErrorCode,
               ($PetscInt, Ptr{Cchar}, $PetscInt, Ptr{$PetscInt}),
               c, name, len, x,
              )


	return nothing
end 

"""
	DMPrintCellVector(petsclib::PetscLibType,c::PetscInt, name::String, len::PetscInt, x::Vector{PetscScalar}) 

# External Links
$(_doc_external("Dm/DMPrintCellVector"))
"""
function DMPrintCellVector(petsclib::PetscLibType, c::PetscInt, name::String, len::PetscInt, x::Vector{PetscScalar}) end

@for_petsc function DMPrintCellVector(petsclib::$UnionPetscLib, c::$PetscInt, name::String, len::$PetscInt, x::Vector{$PetscScalar} )

    @chk ccall(
               (:DMPrintCellVector, $petsc_library),
               PetscErrorCode,
               ($PetscInt, Ptr{Cchar}, $PetscInt, Ptr{$PetscScalar}),
               c, name, len, x,
              )


	return nothing
end 

"""
	DMPrintCellVectorReal(petsclib::PetscLibType,c::PetscInt, name::String, len::PetscInt, x::Vector{PetscReal}) 

# External Links
$(_doc_external("Dm/DMPrintCellVectorReal"))
"""
function DMPrintCellVectorReal(petsclib::PetscLibType, c::PetscInt, name::String, len::PetscInt, x::Vector{PetscReal}) end

@for_petsc function DMPrintCellVectorReal(petsclib::$UnionPetscLib, c::$PetscInt, name::String, len::$PetscInt, x::Vector{$PetscReal} )

    @chk ccall(
               (:DMPrintCellVectorReal, $petsc_library),
               PetscErrorCode,
               ($PetscInt, Ptr{Cchar}, $PetscInt, Ptr{$PetscReal}),
               c, name, len, x,
              )


	return nothing
end 

"""
	DMPrintCellMatrix(petsclib::PetscLibType,c::PetscInt, name::String, rows::PetscInt, cols::PetscInt, A::Vector{PetscScalar}) 

# External Links
$(_doc_external("Dm/DMPrintCellMatrix"))
"""
function DMPrintCellMatrix(petsclib::PetscLibType, c::PetscInt, name::String, rows::PetscInt, cols::PetscInt, A::Vector{PetscScalar}) end

@for_petsc function DMPrintCellMatrix(petsclib::$UnionPetscLib, c::$PetscInt, name::String, rows::$PetscInt, cols::$PetscInt, A::Vector{$PetscScalar} )

    @chk ccall(
               (:DMPrintCellMatrix, $petsc_library),
               PetscErrorCode,
               ($PetscInt, Ptr{Cchar}, $PetscInt, $PetscInt, Ptr{$PetscScalar}),
               c, name, rows, cols, A,
              )


	return nothing
end 

"""
	DMPrintLocalVec(petsclib::PetscLibType,dm::PetscDM, name::String, tol::PetscReal, X::PetscVec) 

# External Links
$(_doc_external("Dm/DMPrintLocalVec"))
"""
function DMPrintLocalVec(petsclib::PetscLibType, dm::PetscDM, name::String, tol::PetscReal, X::PetscVec) end

@for_petsc function DMPrintLocalVec(petsclib::$UnionPetscLib, dm::PetscDM, name::String, tol::$PetscReal, X::PetscVec )

    @chk ccall(
               (:DMPrintLocalVec, $petsc_library),
               PetscErrorCode,
               (CDM, Ptr{Cchar}, $PetscReal, CVec),
               dm, name, tol, X,
              )


	return nothing
end 

"""
	DMGetLocalSection(petsclib::PetscLibType,dm::PetscDM, section::PetscSection) 
Get the `PetscSection` encoding the local data layout for the `DM`.

Input Parameter:
- `dm` - The `DM`

Output Parameter:
- `section` - The `PetscSection`

Options Database Key:
- `-dm_petscsection_view` - View the section created by the `DM`

Level: intermediate

Note:
This gets a borrowed reference, so the user should not destroy this `PetscSection`.

See also: 
=== 
`DM`, `DMSetLocalSection()`, `DMGetGlobalSection()`

# External Links
$(_doc_external("Dm/DMGetLocalSection"))
"""
function DMGetLocalSection(petsclib::PetscLibType, dm::PetscDM, section::PetscSection) end

@for_petsc function DMGetLocalSection(petsclib::$UnionPetscLib, dm::PetscDM, section::PetscSection )

    @chk ccall(
               (:DMGetLocalSection, $petsc_library),
               PetscErrorCode,
               (CDM, Ptr{PetscSection}),
               dm, section,
              )


	return nothing
end 

"""
	DMSetLocalSection(petsclib::PetscLibType,dm::PetscDM, section::PetscSection) 
Set the `PetscSection` encoding the local data layout for the `DM`.

Input Parameters:
- `dm`      - The `DM`
- `section` - The `PetscSection`

Level: intermediate

Note:
Any existing Section will be destroyed

See also: 
=== 
`DM`, `PetscSection`, `DMGetLocalSection()`, `DMSetGlobalSection()`

# External Links
$(_doc_external("Dm/DMSetLocalSection"))
"""
function DMSetLocalSection(petsclib::PetscLibType, dm::PetscDM, section::PetscSection) end

@for_petsc function DMSetLocalSection(petsclib::$UnionPetscLib, dm::PetscDM, section::PetscSection )

    @chk ccall(
               (:DMSetLocalSection, $petsc_library),
               PetscErrorCode,
               (CDM, PetscSection),
               dm, section,
              )


	return nothing
end 

"""
	perm::IS,blockStarts::PetscBT = DMCreateSectionPermutation(petsclib::PetscLibType,dm::PetscDM) 
Create a permutation of the `PetscSection` chart and optionally a block structure.

Input Parameter:
- `dm` - The `DM`

Output Parameters:
- `perm`        - A permutation of the mesh points in the chart
- `blockStarts` - A high bit is set for the point that begins every block, or `NULL` for default blocking

Level: developer

See also: 
=== 
`DM`, `PetscSection`, `DMGetLocalSection()`, `DMGetGlobalSection()`

# External Links
$(_doc_external("Dm/DMCreateSectionPermutation"))
"""
function DMCreateSectionPermutation(petsclib::PetscLibType, dm::PetscDM) end

@for_petsc function DMCreateSectionPermutation(petsclib::$UnionPetscLib, dm::PetscDM )
	perm_ = Ref{IS}()
	blockStarts_ = Ref{PetscBT}()

    @chk ccall(
               (:DMCreateSectionPermutation, $petsc_library),
               PetscErrorCode,
               (CDM, Ptr{IS}, Ptr{PetscBT}),
               dm, perm_, blockStarts_,
              )

	perm = perm_[]
	blockStarts = blockStarts_[]

	return perm,blockStarts
end 

"""
	DMGetDefaultConstraints(petsclib::PetscLibType,dm::PetscDM, section::PetscSection, mat::PetscMat, bias::PetscVec) 
Get the `PetscSection` and `Mat` that specify the local constraint interpolation. See `DMSetDefaultConstraints()` for a description of the purpose of constraint interpolation.

not Collective

Input Parameter:
- `dm` - The `DM`

Output Parameters:
- `section` - The `PetscSection` describing the range of the constraint matrix: relates rows of the constraint matrix to dofs of the default section.  Returns `NULL` if there are no local constraints.
- `mat`     - The `Mat` that interpolates local constraints: its width should be the layout size of the default section.  Returns `NULL` if there are no local constraints.
- `bias`    - Vector containing bias to be added to constrained dofs

Level: advanced

Note:
This gets borrowed references, so the user should not destroy the `PetscSection`, `Mat`, or `Vec`.

See also: 
=== 
`DM`, `DMSetDefaultConstraints()`

# External Links
$(_doc_external("Dm/DMGetDefaultConstraints"))
"""
function DMGetDefaultConstraints(petsclib::PetscLibType, dm::PetscDM, section::PetscSection, mat::PetscMat, bias::PetscVec) end

@for_petsc function DMGetDefaultConstraints(petsclib::$UnionPetscLib, dm::PetscDM, section::PetscSection, mat::PetscMat, bias::PetscVec )
	mat_ = Ref(mat.ptr)
	bias_ = Ref(bias.ptr)

    @chk ccall(
               (:DMGetDefaultConstraints, $petsc_library),
               PetscErrorCode,
               (CDM, Ptr{PetscSection}, Ptr{CMat}, Ptr{CVec}),
               dm, section, mat_, bias_,
              )

	mat.ptr = C_NULL
	bias.ptr = C_NULL

	return nothing
end 

"""
	DMSetDefaultConstraints(petsclib::PetscLibType,dm::PetscDM, section::PetscSection, mat::PetscMat, bias::PetscVec) 
Set the `PetscSection` and `Mat` that specify the local constraint interpolation.

Collective

Input Parameters:
- `dm`      - The `DM`
- `section` - The `PetscSection` describing the range of the constraint matrix: relates rows of the constraint matrix to dofs of the default section.  Must have a local communicator (`PETSC_COMM_SELF` or derivative).
- `mat`     - The `Mat` that interpolates local constraints: its width should be the layout size of the default section:  `NULL` indicates no constraints.  Must have a local communicator (`PETSC_COMM_SELF` or derivative).
- `bias`    - A bias vector to be added to constrained values in the local vector.  `NULL` indicates no bias.  Must have a local communicator (`PETSC_COMM_SELF` or derivative).

Level: advanced

Notes:
If a constraint matrix is specified, then it is applied during `DMGlobalToLocalEnd()` when mode is `INSERT_VALUES`, `INSERT_BC_VALUES`, or `INSERT_ALL_VALUES`.  Without a constraint matrix, the local vector l returned by `DMGlobalToLocalEnd()` contains values that have been scattered from a global vector without modification; with a constraint matrix A, l is modified by computing c = A * l + bias, l[s[i]] = c[i], where the scatter s is defined by the `PetscSection` returned by `DMGetDefaultConstraints()`.

If a constraint matrix is specified, then its adjoint is applied during `DMLocalToGlobalBegin()` when mode is `ADD_VALUES`, `ADD_BC_VALUES`, or `ADD_ALL_VALUES`.  Without a constraint matrix, the local vector l is accumulated into a global vector without modification; with a constraint matrix A, l is first modified by computing c[i] = l[s[i]], l[s[i]] = 0, l = l + A'*c, which is the adjoint of the operation described above.  Any bias, if specified, is ignored when accumulating.

This increments the references of the `PetscSection`, `Mat`, and `Vec`, so they user can destroy them.

See also: 
=== 
`DM`, `DMGetDefaultConstraints()`

# External Links
$(_doc_external("Dm/DMSetDefaultConstraints"))
"""
function DMSetDefaultConstraints(petsclib::PetscLibType, dm::PetscDM, section::PetscSection, mat::PetscMat, bias::PetscVec) end

@for_petsc function DMSetDefaultConstraints(petsclib::$UnionPetscLib, dm::PetscDM, section::PetscSection, mat::PetscMat, bias::PetscVec )

    @chk ccall(
               (:DMSetDefaultConstraints, $petsc_library),
               PetscErrorCode,
               (CDM, PetscSection, CMat, CVec),
               dm, section, mat, bias,
              )


	return nothing
end 

"""
	DMGetGlobalSection(petsclib::PetscLibType,dm::PetscDM, section::PetscSection) 
Get the `PetscSection` encoding the global data layout for the `DM`.

Collective

Input Parameter:
- `dm` - The `DM`

Output Parameter:
- `section` - The `PetscSection`

Level: intermediate

Note:
This gets a borrowed reference, so the user should not destroy this `PetscSection`.

See also: 
=== 
`DM`, `DMSetLocalSection()`, `DMGetLocalSection()`

# External Links
$(_doc_external("Dm/DMGetGlobalSection"))
"""
function DMGetGlobalSection(petsclib::PetscLibType, dm::PetscDM, section::PetscSection) end

@for_petsc function DMGetGlobalSection(petsclib::$UnionPetscLib, dm::PetscDM, section::PetscSection )

    @chk ccall(
               (:DMGetGlobalSection, $petsc_library),
               PetscErrorCode,
               (CDM, Ptr{PetscSection}),
               dm, section,
              )


	return nothing
end 

"""
	DMSetGlobalSection(petsclib::PetscLibType,dm::PetscDM, section::PetscSection) 
Set the `PetscSection` encoding the global data layout for the `DM`.

Input Parameters:
- `dm`      - The `DM`
- `section` - The PetscSection, or `NULL`

Level: intermediate

Note:
Any existing `PetscSection` will be destroyed

See also: 
=== 
`DM`, `DMGetGlobalSection()`, `DMSetLocalSection()`

# External Links
$(_doc_external("Dm/DMSetGlobalSection"))
"""
function DMSetGlobalSection(petsclib::PetscLibType, dm::PetscDM, section::PetscSection) end

@for_petsc function DMSetGlobalSection(petsclib::$UnionPetscLib, dm::PetscDM, section::PetscSection )

    @chk ccall(
               (:DMSetGlobalSection, $petsc_library),
               PetscErrorCode,
               (CDM, PetscSection),
               dm, section,
              )


	return nothing
end 

"""
	DMGetSectionSF(petsclib::PetscLibType,dm::PetscDM, sf::PetscSF) 
Get the `PetscSF` encoding the parallel dof overlap for the `DM`. If it has not been set,
it is created from the default `PetscSection` layouts in the `DM`.

Input Parameter:
- `dm` - The `DM`

Output Parameter:
- `sf` - The `PetscSF`

Level: intermediate

Note:
This gets a borrowed reference, so the user should not destroy this `PetscSF`.

See also: 
=== 
`DM`, `DMSetSectionSF()`, `DMCreateSectionSF()`

# External Links
$(_doc_external("Dm/DMGetSectionSF"))
"""
function DMGetSectionSF(petsclib::PetscLibType, dm::PetscDM, sf::PetscSF) end

@for_petsc function DMGetSectionSF(petsclib::$UnionPetscLib, dm::PetscDM, sf::PetscSF )

    @chk ccall(
               (:DMGetSectionSF, $petsc_library),
               PetscErrorCode,
               (CDM, Ptr{PetscSF}),
               dm, sf,
              )


	return nothing
end 

"""
	DMSetSectionSF(petsclib::PetscLibType,dm::PetscDM, sf::PetscSF) 
Set the `PetscSF` encoding the parallel dof overlap for the `DM`

Input Parameters:
- `dm` - The `DM`
- `sf` - The `PetscSF`

Level: intermediate

Note:
Any previous `PetscSF` is destroyed

See also: 
=== 
`DM`, `DMGetSectionSF()`, `DMCreateSectionSF()`

# External Links
$(_doc_external("Dm/DMSetSectionSF"))
"""
function DMSetSectionSF(petsclib::PetscLibType, dm::PetscDM, sf::PetscSF) end

@for_petsc function DMSetSectionSF(petsclib::$UnionPetscLib, dm::PetscDM, sf::PetscSF )

    @chk ccall(
               (:DMSetSectionSF, $petsc_library),
               PetscErrorCode,
               (CDM, PetscSF),
               dm, sf,
              )


	return nothing
end 

"""
	DMCreateSectionSF(petsclib::PetscLibType,dm::PetscDM, locSection::PetscSection, globalSection::PetscSection) 
Create the `PetscSF` encoding the parallel dof overlap for the `DM` based upon the `PetscSection`s
describing the data layout.

Input Parameters:
- `dm`            - The `DM`
- `localSection`  - `PetscSection` describing the local data layout
- `globalSection` - `PetscSection` describing the global data layout

Level: developer

Note:
One usually uses `DMGetSectionSF()` to obtain the `PetscSF`

Developer Note:
Since this routine has for arguments the two sections from the `DM` and puts the resulting `PetscSF`
directly into the `DM`, perhaps this function should not take the local and global sections as
input and should just obtain them from the `DM`? Plus PETSc creation functions return the thing
they create, this returns nothing

See also: 
=== 
`DM`, `DMGetSectionSF()`, `DMSetSectionSF()`, `DMGetLocalSection()`, `DMGetGlobalSection()`

# External Links
$(_doc_external("Dm/DMCreateSectionSF"))
"""
function DMCreateSectionSF(petsclib::PetscLibType, dm::PetscDM, locSection::PetscSection, globalSection::PetscSection) end

@for_petsc function DMCreateSectionSF(petsclib::$UnionPetscLib, dm::PetscDM, locSection::PetscSection, globalSection::PetscSection )

    @chk ccall(
               (:DMCreateSectionSF, $petsc_library),
               PetscErrorCode,
               (CDM, PetscSection, PetscSection),
               dm, locSection, globalSection,
              )


	return nothing
end 

"""
	DMGetPointSF(petsclib::PetscLibType,dm::PetscDM, sf::PetscSF) 
Get the `PetscSF` encoding the parallel section point overlap for the `DM`.

Not collective but the resulting `PetscSF` is collective

Input Parameter:
- `dm` - The `DM`

Output Parameter:
- `sf` - The `PetscSF`

Level: intermediate

Note:
This gets a borrowed reference, so the user should not destroy this `PetscSF`.

See also: 
=== 
`DM`, `DMSetPointSF()`, `DMGetSectionSF()`, `DMSetSectionSF()`, `DMCreateSectionSF()`

# External Links
$(_doc_external("Dm/DMGetPointSF"))
"""
function DMGetPointSF(petsclib::PetscLibType, dm::PetscDM, sf::PetscSF) end

@for_petsc function DMGetPointSF(petsclib::$UnionPetscLib, dm::PetscDM, sf::PetscSF )

    @chk ccall(
               (:DMGetPointSF, $petsc_library),
               PetscErrorCode,
               (CDM, Ptr{PetscSF}),
               dm, sf,
              )


	return nothing
end 

"""
	DMSetPointSF(petsclib::PetscLibType,dm::PetscDM, sf::PetscSF) 
Set the `PetscSF` encoding the parallel section point overlap for the `DM`.

Collective

Input Parameters:
- `dm` - The `DM`
- `sf` - The `PetscSF`

Level: intermediate

See also: 
=== 
`DM`, `DMGetPointSF()`, `DMGetSectionSF()`, `DMSetSectionSF()`, `DMCreateSectionSF()`

# External Links
$(_doc_external("Dm/DMSetPointSF"))
"""
function DMSetPointSF(petsclib::PetscLibType, dm::PetscDM, sf::PetscSF) end

@for_petsc function DMSetPointSF(petsclib::$UnionPetscLib, dm::PetscDM, sf::PetscSF )

    @chk ccall(
               (:DMSetPointSF, $petsc_library),
               PetscErrorCode,
               (CDM, PetscSF),
               dm, sf,
              )


	return nothing
end 

"""
	DMGetNaturalSF(petsclib::PetscLibType,dm::PetscDM, sf::PetscSF) 
Get the `PetscSF` encoding the map back to the original mesh ordering

Input Parameter:
- `dm` - The `DM`

Output Parameter:
- `sf` - The `PetscSF`

Level: intermediate

Note:
This gets a borrowed reference, so the user should not destroy this `PetscSF`.

See also: 
=== 
`DM`, `DMSetNaturalSF()`, `DMSetUseNatural()`, `DMGetUseNatural()`, `DMPlexCreateGlobalToNaturalSF()`, `DMPlexDistribute()`

# External Links
$(_doc_external("Dm/DMGetNaturalSF"))
"""
function DMGetNaturalSF(petsclib::PetscLibType, dm::PetscDM, sf::PetscSF) end

@for_petsc function DMGetNaturalSF(petsclib::$UnionPetscLib, dm::PetscDM, sf::PetscSF )

    @chk ccall(
               (:DMGetNaturalSF, $petsc_library),
               PetscErrorCode,
               (CDM, Ptr{PetscSF}),
               dm, sf,
              )


	return nothing
end 

"""
	DMSetNaturalSF(petsclib::PetscLibType,dm::PetscDM, sf::PetscSF) 
Set the PetscSF encoding the map back to the original mesh ordering

Input Parameters:
- `dm` - The DM
- `sf` - The PetscSF

Level: intermediate

See also: 
=== 
`DM`, `DMGetNaturalSF()`, `DMSetUseNatural()`, `DMGetUseNatural()`, `DMPlexCreateGlobalToNaturalSF()`, `DMPlexDistribute()`

# External Links
$(_doc_external("Dm/DMSetNaturalSF"))
"""
function DMSetNaturalSF(petsclib::PetscLibType, dm::PetscDM, sf::PetscSF) end

@for_petsc function DMSetNaturalSF(petsclib::$UnionPetscLib, dm::PetscDM, sf::PetscSF )

    @chk ccall(
               (:DMSetNaturalSF, $petsc_library),
               PetscErrorCode,
               (CDM, PetscSF),
               dm, sf,
              )


	return nothing
end 

"""
	DMClearFields(petsclib::PetscLibType,dm::PetscDM) 
Remove all fields from the `DM`

Logically Collective

Input Parameter:
- `dm` - The `DM`

Level: intermediate

See also: 
=== 
`DM`, `DMGetNumFields()`, `DMSetNumFields()`, `DMSetField()`

# External Links
$(_doc_external("Dm/DMClearFields"))
"""
function DMClearFields(petsclib::PetscLibType, dm::PetscDM) end

@for_petsc function DMClearFields(petsclib::$UnionPetscLib, dm::PetscDM )

    @chk ccall(
               (:DMClearFields, $petsc_library),
               PetscErrorCode,
               (CDM,),
               dm,
              )


	return nothing
end 

"""
	numFields::PetscInt = DMGetNumFields(petsclib::PetscLibType,dm::PetscDM) 
Get the number of fields in the `DM`

Not Collective

Input Parameter:
- `dm` - The `DM`

Output Parameter:
- `numFields` - The number of fields

Level: intermediate

See also: 
=== 
`DM`, `DMSetNumFields()`, `DMSetField()`

# External Links
$(_doc_external("Dm/DMGetNumFields"))
"""
function DMGetNumFields(petsclib::PetscLibType, dm::PetscDM) end

@for_petsc function DMGetNumFields(petsclib::$UnionPetscLib, dm::PetscDM )
	numFields_ = Ref{$PetscInt}()

    @chk ccall(
               (:DMGetNumFields, $petsc_library),
               PetscErrorCode,
               (CDM, Ptr{$PetscInt}),
               dm, numFields_,
              )

	numFields = numFields_[]

	return numFields
end 

"""
	DMSetNumFields(petsclib::PetscLibType,dm::PetscDM, numFields::PetscInt) 
Set the number of fields in the `DM`

Logically Collective

Input Parameters:
- `dm`        - The `DM`
- `numFields` - The number of fields

Level: intermediate

See also: 
=== 
`DM`, `DMGetNumFields()`, `DMSetField()`

# External Links
$(_doc_external("Dm/DMSetNumFields"))
"""
function DMSetNumFields(petsclib::PetscLibType, dm::PetscDM, numFields::PetscInt) end

@for_petsc function DMSetNumFields(petsclib::$UnionPetscLib, dm::PetscDM, numFields::$PetscInt )

    @chk ccall(
               (:DMSetNumFields, $petsc_library),
               PetscErrorCode,
               (CDM, $PetscInt),
               dm, numFields,
              )


	return nothing
end 

"""
	DMGetField(petsclib::PetscLibType,dm::PetscDM, f::PetscInt, label::DMLabel, disc::PetscObject) 
Return the `DMLabel` and discretization object for a given `DM` field

Not Collective

Input Parameters:
- `dm` - The `DM`
- `f`  - The field number

Output Parameters:
- `label` - The label indicating the support of the field, or `NULL` for the entire mesh (pass in `NULL` if not needed)
- `disc`  - The discretization object (pass in `NULL` if not needed)

Level: intermediate

See also: 
=== 
`DM`, `DMAddField()`, `DMSetField()`

# External Links
$(_doc_external("Dm/DMGetField"))
"""
function DMGetField(petsclib::PetscLibType, dm::PetscDM, f::PetscInt, label::DMLabel, disc::PetscObject) end

@for_petsc function DMGetField(petsclib::$UnionPetscLib, dm::PetscDM, f::$PetscInt, label::DMLabel, disc::PetscObject )

    @chk ccall(
               (:DMGetField, $petsc_library),
               PetscErrorCode,
               (CDM, $PetscInt, Ptr{DMLabel}, Ptr{PetscObject}),
               dm, f, label, disc,
              )


	return nothing
end 

"""
	DMSetField(petsclib::PetscLibType,dm::PetscDM, f::PetscInt, label::DMLabel, disc::PetscObject) 
Set the discretization object for a given `DM` field. Usually one would call `DMAddField()` which automatically handles
the field numbering.

Logically Collective

Input Parameters:
- `dm`    - The `DM`
- `f`     - The field number
- `label` - The label indicating the support of the field, or `NULL` for the entire mesh
- `disc`  - The discretization object

Level: intermediate

See also: 
=== 
`DM`, `DMAddField()`, `DMGetField()`

# External Links
$(_doc_external("Dm/DMSetField"))
"""
function DMSetField(petsclib::PetscLibType, dm::PetscDM, f::PetscInt, label::DMLabel, disc::PetscObject) end

@for_petsc function DMSetField(petsclib::$UnionPetscLib, dm::PetscDM, f::$PetscInt, label::DMLabel, disc::PetscObject )

    @chk ccall(
               (:DMSetField, $petsc_library),
               PetscErrorCode,
               (CDM, $PetscInt, DMLabel, PetscObject),
               dm, f, label, disc,
              )


	return nothing
end 

"""
	DMAddField(petsclib::PetscLibType,dm::PetscDM, label::DMLabel, disc::PetscObject) 
Add a field to a `DM` object. A field is a function space defined by of a set of discretization points (geometric entities)
and a discretization object that defines the function space associated with those points.

Logically Collective

Input Parameters:
- `dm`    - The `DM`
- `label` - The label indicating the support of the field, or `NULL` for the entire mesh
- `disc`  - The discretization object

Level: intermediate

Notes:
The label already exists or will be added to the `DM` with `DMSetLabel()`.

For example, a piecewise continuous pressure field can be defined by coefficients at the cell centers of a mesh and piecewise constant functions
within each cell. Thus a specific function in the space is defined by the combination of a `Vec` containing the coefficients, a `DM` defining the
geometry entities, a `DMLabel` indicating a subset of those geometric entities, and a discretization object, such as a `PetscFE`.

Fortran Note:
Use the argument `PetscObjectCast(disc)` as the second argument

See also: 
=== 
`DM`, `DMSetLabel()`, `DMSetField()`, `DMGetField()`, `PetscFE`

# External Links
$(_doc_external("Dm/DMAddField"))
"""
function DMAddField(petsclib::PetscLibType, dm::PetscDM, label::DMLabel, disc::PetscObject) end

@for_petsc function DMAddField(petsclib::$UnionPetscLib, dm::PetscDM, label::DMLabel, disc::PetscObject )

    @chk ccall(
               (:DMAddField, $petsc_library),
               PetscErrorCode,
               (CDM, DMLabel, PetscObject),
               dm, label, disc,
              )


	return nothing
end 

"""
	DMSetFieldAvoidTensor(petsclib::PetscLibType,dm::PetscDM, f::PetscInt, avoidTensor::PetscBool) 
Set flag to avoid defining the field on tensor cells

Logically Collective

Input Parameters:
- `dm`          - The `DM`
- `f`           - The field index
- `avoidTensor` - `PETSC_TRUE` to skip defining the field on tensor cells

Level: intermediate

See also: 
=== 
`DM`, `DMGetFieldAvoidTensor()`, `DMSetField()`, `DMGetField()`

# External Links
$(_doc_external("Dm/DMSetFieldAvoidTensor"))
"""
function DMSetFieldAvoidTensor(petsclib::PetscLibType, dm::PetscDM, f::PetscInt, avoidTensor::PetscBool) end

@for_petsc function DMSetFieldAvoidTensor(petsclib::$UnionPetscLib, dm::PetscDM, f::$PetscInt, avoidTensor::PetscBool )

    @chk ccall(
               (:DMSetFieldAvoidTensor, $petsc_library),
               PetscErrorCode,
               (CDM, $PetscInt, PetscBool),
               dm, f, avoidTensor,
              )


	return nothing
end 

"""
	avoidTensor::PetscBool = DMGetFieldAvoidTensor(petsclib::PetscLibType,dm::PetscDM, f::PetscInt) 
Get flag to avoid defining the field on tensor cells

Not Collective

Input Parameters:
- `dm` - The `DM`
- `f`  - The field index

Output Parameter:
- `avoidTensor` - The flag to avoid defining the field on tensor cells

Level: intermediate

See also: 
=== 
`DM`, `DMAddField()`, `DMSetField()`, `DMGetField()`, `DMSetFieldAvoidTensor()`

# External Links
$(_doc_external("Dm/DMGetFieldAvoidTensor"))
"""
function DMGetFieldAvoidTensor(petsclib::PetscLibType, dm::PetscDM, f::PetscInt) end

@for_petsc function DMGetFieldAvoidTensor(petsclib::$UnionPetscLib, dm::PetscDM, f::$PetscInt )
	avoidTensor_ = Ref{PetscBool}()

    @chk ccall(
               (:DMGetFieldAvoidTensor, $petsc_library),
               PetscErrorCode,
               (CDM, $PetscInt, Ptr{PetscBool}),
               dm, f, avoidTensor_,
              )

	avoidTensor = avoidTensor_[]

	return avoidTensor
end 

"""
	DMCopyFields(petsclib::PetscLibType,dm::PetscDM, minDegree::PetscInt, maxDegree::PetscInt, newdm::PetscDM) 
Copy the discretizations for the `DM` into another `DM`

Collective

Input Parameters:
- `dm`        - The `DM`
- `minDegree` - Minimum degree for a discretization, or `PETSC_DETERMINE` for no limit
- `maxDegree` - Maximum degree for a discretization, or `PETSC_DETERMINE` for no limit

Output Parameter:
- `newdm` - The `DM`

Level: advanced

See also: 
=== 
`DM`, `DMGetField()`, `DMSetField()`, `DMAddField()`, `DMCopyDS()`, `DMGetDS()`, `DMGetCellDS()`

# External Links
$(_doc_external("Dm/DMCopyFields"))
"""
function DMCopyFields(petsclib::PetscLibType, dm::PetscDM, minDegree::PetscInt, maxDegree::PetscInt, newdm::PetscDM) end

@for_petsc function DMCopyFields(petsclib::$UnionPetscLib, dm::PetscDM, minDegree::$PetscInt, maxDegree::$PetscInt, newdm::PetscDM )

    @chk ccall(
               (:DMCopyFields, $petsc_library),
               PetscErrorCode,
               (CDM, $PetscInt, $PetscInt, CDM),
               dm, minDegree, maxDegree, newdm,
              )


	return nothing
end 

"""
	useCone::PetscBool,useClosure::PetscBool = DMGetAdjacency(petsclib::PetscLibType,dm::PetscDM, f::PetscInt) 
Returns the flags for determining variable influence

Not Collective

Input Parameters:
- `dm` - The `DM` object
- `f`  - The field number, or `PETSC_DEFAULT` for the default adjacency

Output Parameters:
- `useCone`    - Flag for variable influence starting with the cone operation
- `useClosure` - Flag for variable influence using transitive closure

Level: developer

Notes:
-v
FEM:   Two points p and q are adjacent if q in closure(star(p)),   useCone = PETSC_FALSE, useClosure = PETSC_TRUE
FVM:   Two points p and q are adjacent if q in support(p+cone(p)), useCone = PETSC_TRUE,  useClosure = PETSC_FALSE
FVM++: Two points p and q are adjacent if q in star(closure(p)),   useCone = PETSC_TRUE,  useClosure = PETSC_TRUE
-ve
Further explanation can be found in the User's Manual Section on the Influence of Variables on One Another.

See also: 
=== 
`DM`, `DMSetAdjacency()`, `DMGetField()`, `DMSetField()`

# External Links
$(_doc_external("Dm/DMGetAdjacency"))
"""
function DMGetAdjacency(petsclib::PetscLibType, dm::PetscDM, f::PetscInt) end

@for_petsc function DMGetAdjacency(petsclib::$UnionPetscLib, dm::PetscDM, f::$PetscInt )
	useCone_ = Ref{PetscBool}()
	useClosure_ = Ref{PetscBool}()

    @chk ccall(
               (:DMGetAdjacency, $petsc_library),
               PetscErrorCode,
               (CDM, $PetscInt, Ptr{PetscBool}, Ptr{PetscBool}),
               dm, f, useCone_, useClosure_,
              )

	useCone = useCone_[]
	useClosure = useClosure_[]

	return useCone,useClosure
end 

"""
	DMSetAdjacency(petsclib::PetscLibType,dm::PetscDM, f::PetscInt, useCone::PetscBool, useClosure::PetscBool) 
Set the flags for determining variable influence

Not Collective

Input Parameters:
- `dm`         - The `DM` object
- `f`          - The field number
- `useCone`    - Flag for variable influence starting with the cone operation
- `useClosure` - Flag for variable influence using transitive closure

Level: developer

See also: 
=== 
`DM`, `DMGetAdjacency()`, `DMGetField()`, `DMSetField()`

# External Links
$(_doc_external("Dm/DMSetAdjacency"))
"""
function DMSetAdjacency(petsclib::PetscLibType, dm::PetscDM, f::PetscInt, useCone::PetscBool, useClosure::PetscBool) end

@for_petsc function DMSetAdjacency(petsclib::$UnionPetscLib, dm::PetscDM, f::$PetscInt, useCone::PetscBool, useClosure::PetscBool )

    @chk ccall(
               (:DMSetAdjacency, $petsc_library),
               PetscErrorCode,
               (CDM, $PetscInt, PetscBool, PetscBool),
               dm, f, useCone, useClosure,
              )


	return nothing
end 

"""
	useCone::PetscBool,useClosure::PetscBool = DMGetBasicAdjacency(petsclib::PetscLibType,dm::PetscDM) 
Returns the flags for determining variable influence, using either the default or field 0 if it is defined

Not collective

Input Parameter:
- `dm` - The `DM` object

Output Parameters:
- `useCone`    - Flag for variable influence starting with the cone operation
- `useClosure` - Flag for variable influence using transitive closure

Level: developer

Notes:
-vb
FEM:   Two points p and q are adjacent if q in closure(star(p)),   useCone = PETSC_FALSE, useClosure = PETSC_TRUE
FVM:   Two points p and q are adjacent if q in support(p+cone(p)), useCone = PETSC_TRUE,  useClosure = PETSC_FALSE
FVM++: Two points p and q are adjacent if q in star(closure(p)),   useCone = PETSC_TRUE,  useClosure = PETSC_TRUE
-ve

See also: 
=== 
`DM`, `DMSetBasicAdjacency()`, `DMGetField()`, `DMSetField()`

# External Links
$(_doc_external("Dm/DMGetBasicAdjacency"))
"""
function DMGetBasicAdjacency(petsclib::PetscLibType, dm::PetscDM) end

@for_petsc function DMGetBasicAdjacency(petsclib::$UnionPetscLib, dm::PetscDM )
	useCone_ = Ref{PetscBool}()
	useClosure_ = Ref{PetscBool}()

    @chk ccall(
               (:DMGetBasicAdjacency, $petsc_library),
               PetscErrorCode,
               (CDM, Ptr{PetscBool}, Ptr{PetscBool}),
               dm, useCone_, useClosure_,
              )

	useCone = useCone_[]
	useClosure = useClosure_[]

	return useCone,useClosure
end 

"""
	DMSetBasicAdjacency(petsclib::PetscLibType,dm::PetscDM, useCone::PetscBool, useClosure::PetscBool) 
Set the flags for determining variable influence, using either the default or field 0 if it is defined

Not Collective

Input Parameters:
- `dm`         - The `DM` object
- `useCone`    - Flag for variable influence starting with the cone operation
- `useClosure` - Flag for variable influence using transitive closure

Level: developer

Notes:
-vb
FEM:   Two points p and q are adjacent if q in closure(star(p)),   useCone = PETSC_FALSE, useClosure = PETSC_TRUE
FVM:   Two points p and q are adjacent if q in support(p+cone(p)), useCone = PETSC_TRUE,  useClosure = PETSC_FALSE
FVM++: Two points p and q are adjacent if q in star(closure(p)),   useCone = PETSC_TRUE,  useClosure = PETSC_TRUE
-ve

See also: 
=== 
`DM`, `DMGetBasicAdjacency()`, `DMGetField()`, `DMSetField()`

# External Links
$(_doc_external("Dm/DMSetBasicAdjacency"))
"""
function DMSetBasicAdjacency(petsclib::PetscLibType, dm::PetscDM, useCone::PetscBool, useClosure::PetscBool) end

@for_petsc function DMSetBasicAdjacency(petsclib::$UnionPetscLib, dm::PetscDM, useCone::PetscBool, useClosure::PetscBool )

    @chk ccall(
               (:DMSetBasicAdjacency, $petsc_library),
               PetscErrorCode,
               (CDM, PetscBool, PetscBool),
               dm, useCone, useClosure,
              )


	return nothing
end 

"""
	Nds::PetscInt = DMGetNumDS(petsclib::PetscLibType,dm::PetscDM) 
Get the number of discrete systems in the `DM`

Not Collective

Input Parameter:
- `dm` - The `DM`

Output Parameter:
- `Nds` - The number of `PetscDS` objects

Level: intermediate

See also: 
=== 
`DM`, `DMGetDS()`, `DMGetCellDS()`

# External Links
$(_doc_external("Dm/DMGetNumDS"))
"""
function DMGetNumDS(petsclib::PetscLibType, dm::PetscDM) end

@for_petsc function DMGetNumDS(petsclib::$UnionPetscLib, dm::PetscDM )
	Nds_ = Ref{$PetscInt}()

    @chk ccall(
               (:DMGetNumDS, $petsc_library),
               PetscErrorCode,
               (CDM, Ptr{$PetscInt}),
               dm, Nds_,
              )

	Nds = Nds_[]

	return Nds
end 

"""
	DMClearDS(petsclib::PetscLibType,dm::PetscDM) 
Remove all discrete systems from the `DM`

Logically Collective

Input Parameter:
- `dm` - The `DM`

Level: intermediate

See also: 
=== 
`DM`, `DMGetNumDS()`, `DMGetDS()`, `DMSetField()`

# External Links
$(_doc_external("Dm/DMClearDS"))
"""
function DMClearDS(petsclib::PetscLibType, dm::PetscDM) end

@for_petsc function DMClearDS(petsclib::$UnionPetscLib, dm::PetscDM )

    @chk ccall(
               (:DMClearDS, $petsc_library),
               PetscErrorCode,
               (CDM,),
               dm,
              )


	return nothing
end 

"""
	DMGetDS(petsclib::PetscLibType,dm::PetscDM, ds::PetscDS) 
Get the default `PetscDS`

Not Collective

Input Parameter:
- `dm` - The `DM`

Output Parameter:
- `ds` - The default `PetscDS`

Level: intermediate

Note:
The `ds` is owned by the `dm` and should not be destroyed directly.

See also: 
=== 
`DM`, `DMGetCellDS()`, `DMGetRegionDS()`

# External Links
$(_doc_external("Dm/DMGetDS"))
"""
function DMGetDS(petsclib::PetscLibType, dm::PetscDM, ds::PetscDS) end

@for_petsc function DMGetDS(petsclib::$UnionPetscLib, dm::PetscDM, ds::PetscDS )

    @chk ccall(
               (:DMGetDS, $petsc_library),
               PetscErrorCode,
               (CDM, Ptr{PetscDS}),
               dm, ds,
              )


	return nothing
end 

"""
	DMGetCellDS(petsclib::PetscLibType,dm::PetscDM, point::PetscInt, ds::PetscDS, dsIn::PetscDS) 
Get the `PetscDS` defined on a given cell

Not Collective

Input Parameters:
- `dm`    - The `DM`
- `point` - Cell for the `PetscDS`

Output Parameters:
- `ds`   - The `PetscDS` defined on the given cell
- `dsIn` - The `PetscDS` for input on the given cell, or `NULL` if the same ds

Level: developer

See also: 
=== 
`DM`, `DMGetDS()`, `DMSetRegionDS()`

# External Links
$(_doc_external("Dm/DMGetCellDS"))
"""
function DMGetCellDS(petsclib::PetscLibType, dm::PetscDM, point::PetscInt, ds::PetscDS, dsIn::PetscDS) end

@for_petsc function DMGetCellDS(petsclib::$UnionPetscLib, dm::PetscDM, point::$PetscInt, ds::PetscDS, dsIn::PetscDS )

    @chk ccall(
               (:DMGetCellDS, $petsc_library),
               PetscErrorCode,
               (CDM, $PetscInt, Ptr{PetscDS}, Ptr{PetscDS}),
               dm, point, ds, dsIn,
              )


	return nothing
end 

"""
	DMGetRegionDS(petsclib::PetscLibType,dm::PetscDM, label::DMLabel, fields::IS, ds::PetscDS, dsIn::PetscDS) 
Get the `PetscDS` for a given mesh region, defined by a `DMLabel`

Not Collective

Input Parameters:
- `dm`    - The `DM`
- `label` - The `DMLabel` defining the mesh region, or `NULL` for the entire mesh

Output Parameters:
- `fields` - The `IS` containing the `DM` field numbers for the fields in this `PetscDS`, or `NULL`
- `ds`     - The `PetscDS` defined on the given region, or `NULL`
- `dsIn`   - The `PetscDS` for input in the given region, or `NULL`

Level: advanced

Note:
If a non-`NULL` label is given, but there is no `PetscDS` on that specific label,
the `PetscDS` for the full domain (if present) is returned. Returns with
fields = `NULL` and ds = `NULL` if there is no `PetscDS` for the full domain.

See also: 
=== 
`DM`, `DMGetRegionNumDS()`, `DMSetRegionDS()`, `DMGetDS()`, `DMGetCellDS()`

# External Links
$(_doc_external("Dm/DMGetRegionDS"))
"""
function DMGetRegionDS(petsclib::PetscLibType, dm::PetscDM, label::DMLabel, fields::IS, ds::PetscDS, dsIn::PetscDS) end

@for_petsc function DMGetRegionDS(petsclib::$UnionPetscLib, dm::PetscDM, label::DMLabel, fields::IS, ds::PetscDS, dsIn::PetscDS )

    @chk ccall(
               (:DMGetRegionDS, $petsc_library),
               PetscErrorCode,
               (CDM, DMLabel, Ptr{IS}, Ptr{PetscDS}, Ptr{PetscDS}),
               dm, label, fields, ds, dsIn,
              )


	return nothing
end 

"""
	DMSetRegionDS(petsclib::PetscLibType,dm::PetscDM, label::DMLabel, fields::IS, ds::PetscDS, dsIn::PetscDS) 
Set the `PetscDS` for a given mesh region, defined by a `DMLabel`

Collective

Input Parameters:
- `dm`     - The `DM`
- `label`  - The `DMLabel` defining the mesh region, or `NULL` for the entire mesh
- `fields` - The `IS` containing the `DM` field numbers for the fields in this `PetscDS`, or `NULL` for all fields
- `ds`     - The `PetscDS` defined on the given region
- `dsIn`   - The `PetscDS` for input on the given cell, or `NULL` if it is the same `PetscDS`

Level: advanced

Note:
If the label has a `PetscDS` defined, it will be replaced. Otherwise, it will be added to the `DM`. If the `PetscDS` is replaced,
the fields argument is ignored.

See also: 
=== 
`DM`, `DMGetRegionDS()`, `DMSetRegionNumDS()`, `DMGetDS()`, `DMGetCellDS()`

# External Links
$(_doc_external("Dm/DMSetRegionDS"))
"""
function DMSetRegionDS(petsclib::PetscLibType, dm::PetscDM, label::DMLabel, fields::IS, ds::PetscDS, dsIn::PetscDS) end

@for_petsc function DMSetRegionDS(petsclib::$UnionPetscLib, dm::PetscDM, label::DMLabel, fields::IS, ds::PetscDS, dsIn::PetscDS )

    @chk ccall(
               (:DMSetRegionDS, $petsc_library),
               PetscErrorCode,
               (CDM, DMLabel, IS, PetscDS, PetscDS),
               dm, label, fields, ds, dsIn,
              )


	return nothing
end 

"""
	DMGetRegionNumDS(petsclib::PetscLibType,dm::PetscDM, num::PetscInt, label::DMLabel, fields::IS, ds::PetscDS, dsIn::PetscDS) 
Get the `PetscDS` for a given mesh region, defined by the region number

Not Collective

Input Parameters:
- `dm`  - The `DM`
- `num` - The region number, in [0, Nds)

Output Parameters:
- `label`  - The region label, or `NULL`
- `fields` - The `IS` containing the `DM` field numbers for the fields in this `PetscDS`, or `NULL`
- `ds`     - The `PetscDS` defined on the given region, or `NULL`
- `dsIn`   - The `PetscDS` for input in the given region, or `NULL`

Level: advanced

See also: 
=== 
`DM`, `DMGetRegionDS()`, `DMSetRegionDS()`, `DMGetDS()`, `DMGetCellDS()`

# External Links
$(_doc_external("Dm/DMGetRegionNumDS"))
"""
function DMGetRegionNumDS(petsclib::PetscLibType, dm::PetscDM, num::PetscInt, label::DMLabel, fields::IS, ds::PetscDS, dsIn::PetscDS) end

@for_petsc function DMGetRegionNumDS(petsclib::$UnionPetscLib, dm::PetscDM, num::$PetscInt, label::DMLabel, fields::IS, ds::PetscDS, dsIn::PetscDS )

    @chk ccall(
               (:DMGetRegionNumDS, $petsc_library),
               PetscErrorCode,
               (CDM, $PetscInt, Ptr{DMLabel}, Ptr{IS}, Ptr{PetscDS}, Ptr{PetscDS}),
               dm, num, label, fields, ds, dsIn,
              )


	return nothing
end 

"""
	DMSetRegionNumDS(petsclib::PetscLibType,dm::PetscDM, num::PetscInt, label::DMLabel, fields::IS, ds::PetscDS, dsIn::PetscDS) 
Set the `PetscDS` for a given mesh region, defined by the region number

Not Collective

Input Parameters:
- `dm`     - The `DM`
- `num`    - The region number, in [0, Nds)
- `label`  - The region label, or `NULL`
- `fields` - The `IS` containing the `DM` field numbers for the fields in this `PetscDS`, or `NULL` to prevent setting
- `ds`     - The `PetscDS` defined on the given region, or `NULL` to prevent setting
- `dsIn`   - The `PetscDS` for input on the given cell, or `NULL` if it is the same `PetscDS`

Level: advanced

See also: 
=== 
`DM`, `DMGetRegionDS()`, `DMSetRegionDS()`, `DMGetDS()`, `DMGetCellDS()`

# External Links
$(_doc_external("Dm/DMSetRegionNumDS"))
"""
function DMSetRegionNumDS(petsclib::PetscLibType, dm::PetscDM, num::PetscInt, label::DMLabel, fields::IS, ds::PetscDS, dsIn::PetscDS) end

@for_petsc function DMSetRegionNumDS(petsclib::$UnionPetscLib, dm::PetscDM, num::$PetscInt, label::DMLabel, fields::IS, ds::PetscDS, dsIn::PetscDS )

    @chk ccall(
               (:DMSetRegionNumDS, $petsc_library),
               PetscErrorCode,
               (CDM, $PetscInt, DMLabel, IS, PetscDS, PetscDS),
               dm, num, label, fields, ds, dsIn,
              )


	return nothing
end 

"""
	num::PetscInt = DMFindRegionNum(petsclib::PetscLibType,dm::PetscDM, ds::PetscDS) 
Find the region number for a given `PetscDS`, or

Not Collective

Input Parameters:
- `dm` - The `DM`
- `ds` - The `PetscDS` defined on the given region

Output Parameter:
- `num` - The region number, in [0, Nds), or -1 if not found

Level: advanced

See also: 
=== 
`DM`, `DMGetRegionNumDS()`, `DMGetRegionDS()`, `DMSetRegionDS()`, `DMGetDS()`, `DMGetCellDS()`

# External Links
$(_doc_external("Dm/DMFindRegionNum"))
"""
function DMFindRegionNum(petsclib::PetscLibType, dm::PetscDM, ds::PetscDS) end

@for_petsc function DMFindRegionNum(petsclib::$UnionPetscLib, dm::PetscDM, ds::PetscDS )
	num_ = Ref{$PetscInt}()

    @chk ccall(
               (:DMFindRegionNum, $petsc_library),
               PetscErrorCode,
               (CDM, PetscDS, Ptr{$PetscInt}),
               dm, ds, num_,
              )

	num = num_[]

	return num
end 

"""
	fem::PetscFE = DMCreateFEDefault(petsclib::PetscLibType,dm::PetscDM, Nc::PetscInt, prefix::String, qorder::PetscInt) 
Create a `PetscFE` based on the celltype for the mesh

Not Collective

Input Parameters:
- `dm`     - The `DM`
- `Nc`     - The number of components for the field
- `prefix` - The options prefix for the output `PetscFE`, or `NULL`
- `qorder` - The quadrature order or `PETSC_DETERMINE` to use `PetscSpace` polynomial degree

Output Parameter:
- `fem` - The `PetscFE`

Level: intermediate

Note:
This is a convenience method that just calls `PetscFECreateByCell()` underneath.

See also: 
=== 
`DM`, `PetscFECreateByCell()`, `DMAddField()`, `DMCreateDS()`, `DMGetCellDS()`, `DMGetRegionDS()`

# External Links
$(_doc_external("Dm/DMCreateFEDefault"))
"""
function DMCreateFEDefault(petsclib::PetscLibType, dm::PetscDM, Nc::PetscInt, prefix::String, qorder::PetscInt) end

@for_petsc function DMCreateFEDefault(petsclib::$UnionPetscLib, dm::PetscDM, Nc::$PetscInt, prefix::String, qorder::$PetscInt )
	fem_ = Ref{PetscFE}()

    @chk ccall(
               (:DMCreateFEDefault, $petsc_library),
               PetscErrorCode,
               (CDM, $PetscInt, Ptr{Cchar}, $PetscInt, Ptr{PetscFE}),
               dm, Nc, prefix, qorder, fem_,
              )

	fem = fem_[]

	return fem
end 

"""
	DMCreateDS(petsclib::PetscLibType,dm::PetscDM) 
Create the discrete systems for the `DM` based upon the fields added to the `DM`

Collective

Input Parameter:
- `dm` - The `DM`

Options Database Key:
- `-dm_petscds_view` - View all the `PetscDS` objects in this `DM`

Level: intermediate

Developer Note:
The name of this function is wrong. Create functions always return the created object as one of the arguments.

See also: 
=== 
`DM`, `DMSetField`, `DMAddField()`, `DMGetDS()`, `DMGetCellDS()`, `DMGetRegionDS()`, `DMSetRegionDS()`

# External Links
$(_doc_external("Dm/DMCreateDS"))
"""
function DMCreateDS(petsclib::PetscLibType, dm::PetscDM) end

@for_petsc function DMCreateDS(petsclib::$UnionPetscLib, dm::PetscDM )

    @chk ccall(
               (:DMCreateDS, $petsc_library),
               PetscErrorCode,
               (CDM,),
               dm,
              )


	return nothing
end 

"""
	DMUseTensorOrder(petsclib::PetscLibType,dm::PetscDM, tensor::PetscBool) 
Use a tensor product closure ordering for the default section

Input Parameters:
- `dm`     - The DM
- `tensor` - Flag for tensor order

Level: developer

-seealso: `DMPlexSetClosurePermutationTensor()`, `PetscSectionResetClosurePermutation()`

# External Links
$(_doc_external("Dm/DMUseTensorOrder"))
"""
function DMUseTensorOrder(petsclib::PetscLibType, dm::PetscDM, tensor::PetscBool) end

@for_petsc function DMUseTensorOrder(petsclib::$UnionPetscLib, dm::PetscDM, tensor::PetscBool )

    @chk ccall(
               (:DMUseTensorOrder, $petsc_library),
               PetscErrorCode,
               (CDM, PetscBool),
               dm, tensor,
              )


	return nothing
end 

"""
	DMComputeExactSolution(petsclib::PetscLibType,dm::PetscDM, time::PetscReal, u::PetscVec, u_t::PetscVec) 
Compute the exact solution for a given `DM`, using the `PetscDS` information.

Collective

Input Parameters:
- `dm`   - The `DM`
- `time` - The time

Output Parameters:
- `u`   - The vector will be filled with exact solution values, or `NULL`
- `u_t` - The vector will be filled with the time derivative of exact solution values, or `NULL`

Level: developer

Note:
The user must call `PetscDSSetExactSolution()` before using this routine

See also: 
=== 
`DM`, `PetscDSSetExactSolution()`

# External Links
$(_doc_external("Dm/DMComputeExactSolution"))
"""
function DMComputeExactSolution(petsclib::PetscLibType, dm::PetscDM, time::PetscReal, u::PetscVec, u_t::PetscVec) end

@for_petsc function DMComputeExactSolution(petsclib::$UnionPetscLib, dm::PetscDM, time::$PetscReal, u::PetscVec, u_t::PetscVec )

    @chk ccall(
               (:DMComputeExactSolution, $petsc_library),
               PetscErrorCode,
               (CDM, $PetscReal, CVec, CVec),
               dm, time, u, u_t,
              )


	return nothing
end 

"""
	DMCopyDS(petsclib::PetscLibType,dm::PetscDM, minDegree::PetscInt, maxDegree::PetscInt, newdm::PetscDM) 
Copy the discrete systems for the `DM` into another `DM`

Collective

Input Parameters:
- `dm`        - The `DM`
- `minDegree` - Minimum degree for a discretization, or `PETSC_DETERMINE` for no limit
- `maxDegree` - Maximum degree for a discretization, or `PETSC_DETERMINE` for no limit

Output Parameter:
- `newdm` - The `DM`

Level: advanced

See also: 
=== 
`DM`, `DMCopyFields()`, `DMAddField()`, `DMGetDS()`, `DMGetCellDS()`, `DMGetRegionDS()`, `DMSetRegionDS()`

# External Links
$(_doc_external("Dm/DMCopyDS"))
"""
function DMCopyDS(petsclib::PetscLibType, dm::PetscDM, minDegree::PetscInt, maxDegree::PetscInt, newdm::PetscDM) end

@for_petsc function DMCopyDS(petsclib::$UnionPetscLib, dm::PetscDM, minDegree::$PetscInt, maxDegree::$PetscInt, newdm::PetscDM )

    @chk ccall(
               (:DMCopyDS, $petsc_library),
               PetscErrorCode,
               (CDM, $PetscInt, $PetscInt, CDM),
               dm, minDegree, maxDegree, newdm,
              )


	return nothing
end 

"""
	DMCopyDisc(petsclib::PetscLibType,dm::PetscDM, newdm::PetscDM) 
Copy the fields and discrete systems for the `DM` into another `DM`

Collective

Input Parameter:
- `dm` - The `DM`

Output Parameter:
- `newdm` - The `DM`

Level: advanced

Developer Note:
Really ugly name, nothing in PETSc is called a `Disc` plus it is an ugly abbreviation

See also: 
=== 
`DM`, `DMCopyFields()`, `DMCopyDS()`

# External Links
$(_doc_external("Dm/DMCopyDisc"))
"""
function DMCopyDisc(petsclib::PetscLibType, dm::PetscDM, newdm::PetscDM) end

@for_petsc function DMCopyDisc(petsclib::$UnionPetscLib, dm::PetscDM, newdm::PetscDM )

    @chk ccall(
               (:DMCopyDisc, $petsc_library),
               PetscErrorCode,
               (CDM, CDM),
               dm, newdm,
              )


	return nothing
end 

"""
	dim::PetscInt = DMGetDimension(petsclib::PetscLibType,dm::PetscDM) 
Return the topological dimension of the `DM`

Not Collective

Input Parameter:
- `dm` - The `DM`

Output Parameter:
- `dim` - The topological dimension

Level: beginner

See also: 
=== 
`DM`, `DMSetDimension()`, `DMCreate()`

# External Links
$(_doc_external("Dm/DMGetDimension"))
"""
function DMGetDimension(petsclib::PetscLibType, dm::PetscDM) end

@for_petsc function DMGetDimension(petsclib::$UnionPetscLib, dm::PetscDM )
	dim_ = Ref{$PetscInt}()

    @chk ccall(
               (:DMGetDimension, $petsc_library),
               PetscErrorCode,
               (CDM, Ptr{$PetscInt}),
               dm, dim_,
              )

	dim = dim_[]

	return dim
end 

"""
	DMSetDimension(petsclib::PetscLibType,dm::PetscDM, dim::PetscInt) 
Set the topological dimension of the `DM`

Collective

Input Parameters:
- `dm`  - The `DM`
- `dim` - The topological dimension

Level: beginner

See also: 
=== 
`DM`, `DMGetDimension()`, `DMCreate()`

# External Links
$(_doc_external("Dm/DMSetDimension"))
"""
function DMSetDimension(petsclib::PetscLibType, dm::PetscDM, dim::PetscInt) end

@for_petsc function DMSetDimension(petsclib::$UnionPetscLib, dm::PetscDM, dim::$PetscInt )

    @chk ccall(
               (:DMSetDimension, $petsc_library),
               PetscErrorCode,
               (CDM, $PetscInt),
               dm, dim,
              )


	return nothing
end 

"""
	pStart::PetscInt,pEnd::PetscInt = DMGetDimPoints(petsclib::PetscLibType,dm::PetscDM, dim::PetscInt) 
Get the half

Collective

Input Parameters:
- `dm`  - the `DM`
- `dim` - the dimension

Output Parameters:
- `pStart` - The first point of the given dimension
- `pEnd`   - The first point following points of the given dimension

Level: intermediate

Note:
The points are vertices in the Hasse diagram encoding the topology. This is explained in
https://arxiv.org/abs/0908.4427. If no points exist of this dimension in the storage scheme,
then the interval is empty.

See also: 
=== 
`DM`, `DMPLEX`, `DMPlexGetDepthStratum()`, `DMPlexGetHeightStratum()`

# External Links
$(_doc_external("Dm/DMGetDimPoints"))
"""
function DMGetDimPoints(petsclib::PetscLibType, dm::PetscDM, dim::PetscInt) end

@for_petsc function DMGetDimPoints(petsclib::$UnionPetscLib, dm::PetscDM, dim::$PetscInt )
	pStart_ = Ref{$PetscInt}()
	pEnd_ = Ref{$PetscInt}()

    @chk ccall(
               (:DMGetDimPoints, $petsc_library),
               PetscErrorCode,
               (CDM, $PetscInt, Ptr{$PetscInt}, Ptr{$PetscInt}),
               dm, dim, pStart_, pEnd_,
              )

	pStart = pStart_[]
	pEnd = pEnd_[]

	return pStart,pEnd
end 

"""
	DMGetOutputDM(petsclib::PetscLibType,dm::PetscDM, odm::PetscDM) 
Retrieve the `DM` associated with the layout for output

Collective

Input Parameter:
- `dm` - The original `DM`

Output Parameter:
- `odm` - The `DM` which provides the layout for output

Level: intermediate

Note:
In some situations the vector obtained with `DMCreateGlobalVector()` excludes points for degrees of freedom that are associated with fixed (Dirichelet) boundary
conditions since the algebraic solver does not solve for those variables. The output `DM` includes these excluded points and its global vector contains the
locations for those dof so that they can be output to a file or other viewer along with the unconstrained dof.

See also: 
=== 
`DM`, `VecView()`, `DMGetGlobalSection()`, `DMCreateGlobalVector()`, `PetscSectionHasConstraints()`, `DMSetGlobalSection()`

# External Links
$(_doc_external("Dm/DMGetOutputDM"))
"""
function DMGetOutputDM(petsclib::PetscLibType, dm::PetscDM, odm::PetscDM) end

@for_petsc function DMGetOutputDM(petsclib::$UnionPetscLib, dm::PetscDM, odm::PetscDM )
	odm_ = Ref(odm.ptr)

    @chk ccall(
               (:DMGetOutputDM, $petsc_library),
               PetscErrorCode,
               (CDM, Ptr{CDM}),
               dm, odm_,
              )

	odm.ptr = C_NULL

	return nothing
end 

"""
	num::PetscInt,val::PetscReal = DMGetOutputSequenceNumber(petsclib::PetscLibType,dm::PetscDM) 
Retrieve the sequence number/value for output

Input Parameter:
- `dm` - The original `DM`

Output Parameters:
- `num` - The output sequence number
- `val` - The output sequence value

Level: intermediate

Note:
This is intended for output that should appear in sequence, for instance
a set of timesteps in an `PETSCVIEWERHDF5` file, or a set of realizations of a stochastic system.

Developer Note:
The `DM` serves as a convenient place to store the current iteration value. The iteration is not
not directly related to the `DM`.

See also: 
=== 
`DM`, `VecView()`

# External Links
$(_doc_external("Dm/DMGetOutputSequenceNumber"))
"""
function DMGetOutputSequenceNumber(petsclib::PetscLibType, dm::PetscDM) end

@for_petsc function DMGetOutputSequenceNumber(petsclib::$UnionPetscLib, dm::PetscDM )
	num_ = Ref{$PetscInt}()
	val_ = Ref{$PetscReal}()

    @chk ccall(
               (:DMGetOutputSequenceNumber, $petsc_library),
               PetscErrorCode,
               (CDM, Ptr{$PetscInt}, Ptr{$PetscReal}),
               dm, num_, val_,
              )

	num = num_[]
	val = val_[]

	return num,val
end 

"""
	DMSetOutputSequenceNumber(petsclib::PetscLibType,dm::PetscDM, num::PetscInt, val::PetscReal) 
Set the sequence number/value for output

Input Parameters:
- `dm`  - The original `DM`
- `num` - The output sequence number
- `val` - The output sequence value

Level: intermediate

Note:
This is intended for output that should appear in sequence, for instance
a set of timesteps in an `PETSCVIEWERHDF5` file, or a set of realizations of a stochastic system.

See also: 
=== 
`DM`, `VecView()`

# External Links
$(_doc_external("Dm/DMSetOutputSequenceNumber"))
"""
function DMSetOutputSequenceNumber(petsclib::PetscLibType, dm::PetscDM, num::PetscInt, val::PetscReal) end

@for_petsc function DMSetOutputSequenceNumber(petsclib::$UnionPetscLib, dm::PetscDM, num::$PetscInt, val::$PetscReal )

    @chk ccall(
               (:DMSetOutputSequenceNumber, $petsc_library),
               PetscErrorCode,
               (CDM, $PetscInt, $PetscReal),
               dm, num, val,
              )


	return nothing
end 

"""
	val::PetscReal = DMOutputSequenceLoad(petsclib::PetscLibType,dm::PetscDM, viewer::PetscViewer, name::String, num::PetscInt) 
Retrieve the sequence value from a `PetscViewer`

Input Parameters:
- `dm`     - The original `DM`
- `viewer` - The `PetscViewer` to get it from
- `name`   - The sequence name
- `num`    - The output sequence number

Output Parameter:
- `val` - The output sequence value

Level: intermediate

Note:
This is intended for output that should appear in sequence, for instance
a set of timesteps in an `PETSCVIEWERHDF5` file, or a set of realizations of a stochastic system.

Developer Note:
It is unclear at the user API level why a `DM` is needed as input

See also: 
=== 
`DM`, `DMGetOutputSequenceNumber()`, `DMSetOutputSequenceNumber()`, `VecView()`

# External Links
$(_doc_external("Dm/DMOutputSequenceLoad"))
"""
function DMOutputSequenceLoad(petsclib::PetscLibType, dm::PetscDM, viewer::PetscViewer, name::String, num::PetscInt) end

@for_petsc function DMOutputSequenceLoad(petsclib::$UnionPetscLib, dm::PetscDM, viewer::PetscViewer, name::String, num::$PetscInt )
	val_ = Ref{$PetscReal}()

    @chk ccall(
               (:DMOutputSequenceLoad, $petsc_library),
               PetscErrorCode,
               (CDM, PetscViewer, Ptr{Cchar}, $PetscInt, Ptr{$PetscReal}),
               dm, viewer, name, num, val_,
              )

	val = val_[]

	return val
end 

"""
	len::PetscInt = DMGetOutputSequenceLength(petsclib::PetscLibType,dm::PetscDM, viewer::PetscViewer, name::String) 
Retrieve the number of sequence values from a `PetscViewer`

Input Parameters:
- `dm`     - The original `DM`
- `viewer` - The `PetscViewer` to get it from
- `name`   - The sequence name

Output Parameter:
- `len` - The length of the output sequence

Level: intermediate

Note:
This is intended for output that should appear in sequence, for instance
a set of timesteps in an `PETSCVIEWERHDF5` file, or a set of realizations of a stochastic system.

Developer Note:
It is unclear at the user API level why a `DM` is needed as input

See also: 
=== 
`DM`, `DMGetOutputSequenceNumber()`, `DMSetOutputSequenceNumber()`, `VecView()`

# External Links
$(_doc_external("Dm/DMGetOutputSequenceLength"))
"""
function DMGetOutputSequenceLength(petsclib::PetscLibType, dm::PetscDM, viewer::PetscViewer, name::String) end

@for_petsc function DMGetOutputSequenceLength(petsclib::$UnionPetscLib, dm::PetscDM, viewer::PetscViewer, name::String )
	len_ = Ref{$PetscInt}()

    @chk ccall(
               (:DMGetOutputSequenceLength, $petsc_library),
               PetscErrorCode,
               (CDM, PetscViewer, Ptr{Cchar}, Ptr{$PetscInt}),
               dm, viewer, name, len_,
              )

	len = len_[]

	return len
end 

"""
	useNatural::PetscBool = DMGetUseNatural(petsclib::PetscLibType,dm::PetscDM) 
Get the flag for creating a mapping to the natural order when a `DM` is (re)distributed in parallel

Not Collective

Input Parameter:
- `dm` - The `DM`

Output Parameter:
- `useNatural` - `PETSC_TRUE` to build the mapping to a natural order during distribution

Level: beginner

See also: 
=== 
`DM`, `DMSetUseNatural()`, `DMCreate()`

# External Links
$(_doc_external("Dm/DMGetUseNatural"))
"""
function DMGetUseNatural(petsclib::PetscLibType, dm::PetscDM) end

@for_petsc function DMGetUseNatural(petsclib::$UnionPetscLib, dm::PetscDM )
	useNatural_ = Ref{PetscBool}()

    @chk ccall(
               (:DMGetUseNatural, $petsc_library),
               PetscErrorCode,
               (CDM, Ptr{PetscBool}),
               dm, useNatural_,
              )

	useNatural = useNatural_[]

	return useNatural
end 

"""
	DMSetUseNatural(petsclib::PetscLibType,dm::PetscDM, useNatural::PetscBool) 
Set the flag for creating a mapping to the natural order when a `DM` is (re)distributed in parallel

Collective

Input Parameters:
- `dm`         - The `DM`
- `useNatural` - `PETSC_TRUE` to build the mapping to a natural order during distribution

Level: beginner

Note:
This also causes the map to be build after `DMCreateSubDM()` and `DMCreateSuperDM()`

See also: 
=== 
`DM`, `DMGetUseNatural()`, `DMCreate()`, `DMPlexDistribute()`, `DMCreateSubDM()`, `DMCreateSuperDM()`

# External Links
$(_doc_external("Dm/DMSetUseNatural"))
"""
function DMSetUseNatural(petsclib::PetscLibType, dm::PetscDM, useNatural::PetscBool) end

@for_petsc function DMSetUseNatural(petsclib::$UnionPetscLib, dm::PetscDM, useNatural::PetscBool )

    @chk ccall(
               (:DMSetUseNatural, $petsc_library),
               PetscErrorCode,
               (CDM, PetscBool),
               dm, useNatural,
              )


	return nothing
end 

"""
	DMCreateLabel(petsclib::PetscLibType,dm::PetscDM, name::String) 
Create a label of the given name if it does not already exist in the `DM`

Not Collective

Input Parameters:
- `dm`   - The `DM` object
- `name` - The label name

Level: intermediate

See also: 
=== 
`DM`, `DMLabelCreate()`, `DMHasLabel()`, `DMGetLabelValue()`, `DMSetLabelValue()`, `DMGetStratumIS()`

# External Links
$(_doc_external("Dm/DMCreateLabel"))
"""
function DMCreateLabel(petsclib::PetscLibType, dm::PetscDM, name::String) end

@for_petsc function DMCreateLabel(petsclib::$UnionPetscLib, dm::PetscDM, name::String )

    @chk ccall(
               (:DMCreateLabel, $petsc_library),
               PetscErrorCode,
               (CDM, Ptr{Cchar}),
               dm, name,
              )


	return nothing
end 

"""
	DMCreateLabelAtIndex(petsclib::PetscLibType,dm::PetscDM, l::PetscInt, name::String) 
Create a label of the given name at the given index. If it already exists in the `DM`, move it to this index.

Not Collective

Input Parameters:
- `dm`   - The `DM` object
- `l`    - The index for the label
- `name` - The label name

Level: intermediate

See also: 
=== 
`DM`, `DMCreateLabel()`, `DMLabelCreate()`, `DMHasLabel()`, `DMGetLabelValue()`, `DMSetLabelValue()`, `DMGetStratumIS()`

# External Links
$(_doc_external("Dm/DMCreateLabelAtIndex"))
"""
function DMCreateLabelAtIndex(petsclib::PetscLibType, dm::PetscDM, l::PetscInt, name::String) end

@for_petsc function DMCreateLabelAtIndex(petsclib::$UnionPetscLib, dm::PetscDM, l::$PetscInt, name::String )

    @chk ccall(
               (:DMCreateLabelAtIndex, $petsc_library),
               PetscErrorCode,
               (CDM, $PetscInt, Ptr{Cchar}),
               dm, l, name,
              )


	return nothing
end 

"""
	value::PetscInt = DMGetLabelValue(petsclib::PetscLibType,dm::PetscDM, name::String, point::PetscInt) 
Get the value in a `DMLabel` for the given point, with

Not Collective

Input Parameters:
- `dm`    - The `DM` object
- `name`  - The label name
- `point` - The mesh point

Output Parameter:
- `value` - The label value for this point, or -1 if the point is not in the label

Level: beginner

See also: 
=== 
`DM`, `DMLabelGetValue()`, `DMSetLabelValue()`, `DMGetStratumIS()`

# External Links
$(_doc_external("Dm/DMGetLabelValue"))
"""
function DMGetLabelValue(petsclib::PetscLibType, dm::PetscDM, name::String, point::PetscInt) end

@for_petsc function DMGetLabelValue(petsclib::$UnionPetscLib, dm::PetscDM, name::String, point::$PetscInt )
	value_ = Ref{$PetscInt}()

    @chk ccall(
               (:DMGetLabelValue, $petsc_library),
               PetscErrorCode,
               (CDM, Ptr{Cchar}, $PetscInt, Ptr{$PetscInt}),
               dm, name, point, value_,
              )

	value = value_[]

	return value
end 

"""
	DMSetLabelValue(petsclib::PetscLibType,dm::PetscDM, name::String, point::PetscInt, value::PetscInt) 
Add a point to a `DMLabel` with given value

Not Collective

Input Parameters:
- `dm`    - The `DM` object
- `name`  - The label name
- `point` - The mesh point
- `value` - The label value for this point

Output Parameter:

Level: beginner

See also: 
=== 
`DM`, `DMLabelSetValue()`, `DMGetStratumIS()`, `DMClearLabelValue()`

# External Links
$(_doc_external("Dm/DMSetLabelValue"))
"""
function DMSetLabelValue(petsclib::PetscLibType, dm::PetscDM, name::String, point::PetscInt, value::PetscInt) end

@for_petsc function DMSetLabelValue(petsclib::$UnionPetscLib, dm::PetscDM, name::String, point::$PetscInt, value::$PetscInt )

    @chk ccall(
               (:DMSetLabelValue, $petsc_library),
               PetscErrorCode,
               (CDM, Ptr{Cchar}, $PetscInt, $PetscInt),
               dm, name, point, value,
              )


	return nothing
end 

"""
	DMClearLabelValue(petsclib::PetscLibType,dm::PetscDM, name::String, point::PetscInt, value::PetscInt) 
Remove a point from a `DMLabel` with given value

Not Collective

Input Parameters:
- `dm`    - The `DM` object
- `name`  - The label name
- `point` - The mesh point
- `value` - The label value for this point

Level: beginner

See also: 
=== 
`DM`, `DMLabelClearValue()`, `DMSetLabelValue()`, `DMGetStratumIS()`

# External Links
$(_doc_external("Dm/DMClearLabelValue"))
"""
function DMClearLabelValue(petsclib::PetscLibType, dm::PetscDM, name::String, point::PetscInt, value::PetscInt) end

@for_petsc function DMClearLabelValue(petsclib::$UnionPetscLib, dm::PetscDM, name::String, point::$PetscInt, value::$PetscInt )

    @chk ccall(
               (:DMClearLabelValue, $petsc_library),
               PetscErrorCode,
               (CDM, Ptr{Cchar}, $PetscInt, $PetscInt),
               dm, name, point, value,
              )


	return nothing
end 

"""
	size::PetscInt = DMGetLabelSize(petsclib::PetscLibType,dm::PetscDM, name::String) 
Get the value of `DMLabelGetNumValues()` of a `DMLabel` in the `DM`

Not Collective

Input Parameters:
- `dm`   - The `DM` object
- `name` - The label name

Output Parameter:
- `size` - The number of different integer ids, or 0 if the label does not exist

Level: beginner

Developer Note:
This should be renamed to something like `DMGetLabelNumValues()` or removed.

See also: 
=== 
`DM`, `DMLabelGetNumValues()`, `DMSetLabelValue()`, `DMGetLabel()`

# External Links
$(_doc_external("Dm/DMGetLabelSize"))
"""
function DMGetLabelSize(petsclib::PetscLibType, dm::PetscDM, name::String) end

@for_petsc function DMGetLabelSize(petsclib::$UnionPetscLib, dm::PetscDM, name::String )
	size_ = Ref{$PetscInt}()

    @chk ccall(
               (:DMGetLabelSize, $petsc_library),
               PetscErrorCode,
               (CDM, Ptr{Cchar}, Ptr{$PetscInt}),
               dm, name, size_,
              )

	size = size_[]

	return size
end 

"""
	DMGetLabelIdIS(petsclib::PetscLibType,dm::PetscDM, name::String, ids::IS) 
Get the `DMLabelGetValueIS()` from a `DMLabel` in the `DM`

Not Collective

Input Parameters:
- `dm`   - The `DM` object
- `name` - The label name

Output Parameter:
- `ids` - The integer ids, or `NULL` if the label does not exist

Level: beginner

See also: 
=== 
`DM`, `DMLabelGetValueIS()`, `DMGetLabelSize()`

# External Links
$(_doc_external("Dm/DMGetLabelIdIS"))
"""
function DMGetLabelIdIS(petsclib::PetscLibType, dm::PetscDM, name::String, ids::IS) end

@for_petsc function DMGetLabelIdIS(petsclib::$UnionPetscLib, dm::PetscDM, name::String, ids::IS )

    @chk ccall(
               (:DMGetLabelIdIS, $petsc_library),
               PetscErrorCode,
               (CDM, Ptr{Cchar}, Ptr{IS}),
               dm, name, ids,
              )


	return nothing
end 

"""
	size::PetscInt = DMGetStratumSize(petsclib::PetscLibType,dm::PetscDM, name::String, value::PetscInt) 
Get the number of points in a label stratum

Not Collective

Input Parameters:
- `dm`    - The `DM` object
- `name`  - The label name of the stratum
- `value` - The stratum value

Output Parameter:
- `size` - The number of points, also called the stratum size

Level: beginner

See also: 
=== 
`DM`, `DMLabelGetStratumSize()`, `DMGetLabelSize()`, `DMGetLabelIds()`

# External Links
$(_doc_external("Dm/DMGetStratumSize"))
"""
function DMGetStratumSize(petsclib::PetscLibType, dm::PetscDM, name::String, value::PetscInt) end

@for_petsc function DMGetStratumSize(petsclib::$UnionPetscLib, dm::PetscDM, name::String, value::$PetscInt )
	size_ = Ref{$PetscInt}()

    @chk ccall(
               (:DMGetStratumSize, $petsc_library),
               PetscErrorCode,
               (CDM, Ptr{Cchar}, $PetscInt, Ptr{$PetscInt}),
               dm, name, value, size_,
              )

	size = size_[]

	return size
end 

"""
	DMGetStratumIS(petsclib::PetscLibType,dm::PetscDM, name::String, value::PetscInt, points::IS) 
Get the points in a label stratum

Not Collective

Input Parameters:
- `dm`    - The `DM` object
- `name`  - The label name
- `value` - The stratum value

Output Parameter:
- `points` - The stratum points, or `NULL` if the label does not exist or does not have that value

Level: beginner

See also: 
=== 
`DM`, `DMLabelGetStratumIS()`, `DMGetStratumSize()`

# External Links
$(_doc_external("Dm/DMGetStratumIS"))
"""
function DMGetStratumIS(petsclib::PetscLibType, dm::PetscDM, name::String, value::PetscInt, points::IS) end

@for_petsc function DMGetStratumIS(petsclib::$UnionPetscLib, dm::PetscDM, name::String, value::$PetscInt, points::IS )

    @chk ccall(
               (:DMGetStratumIS, $petsc_library),
               PetscErrorCode,
               (CDM, Ptr{Cchar}, $PetscInt, Ptr{IS}),
               dm, name, value, points,
              )


	return nothing
end 

"""
	DMSetStratumIS(petsclib::PetscLibType,dm::PetscDM, name::String, value::PetscInt, points::IS) 
Set the points in a label stratum

Not Collective

Input Parameters:
- `dm`     - The `DM` object
- `name`   - The label name
- `value`  - The stratum value
- `points` - The stratum points

Level: beginner

See also: 
=== 
`DM`, `DMLabel`, `DMClearLabelStratum()`, `DMLabelClearStratum()`, `DMLabelSetStratumIS()`, `DMGetStratumSize()`

# External Links
$(_doc_external("Dm/DMSetStratumIS"))
"""
function DMSetStratumIS(petsclib::PetscLibType, dm::PetscDM, name::String, value::PetscInt, points::IS) end

@for_petsc function DMSetStratumIS(petsclib::$UnionPetscLib, dm::PetscDM, name::String, value::$PetscInt, points::IS )

    @chk ccall(
               (:DMSetStratumIS, $petsc_library),
               PetscErrorCode,
               (CDM, Ptr{Cchar}, $PetscInt, IS),
               dm, name, value, points,
              )


	return nothing
end 

"""
	DMClearLabelStratum(petsclib::PetscLibType,dm::PetscDM, name::String, value::PetscInt) 
Remove all points from a stratum from a `DMLabel`

Not Collective

Input Parameters:
- `dm`    - The `DM` object
- `name`  - The label name
- `value` - The label value for this point

Output Parameter:

Level: beginner

See also: 
=== 
`DM`, `DMLabel`, `DMLabelClearStratum()`, `DMSetLabelValue()`, `DMGetStratumIS()`, `DMClearLabelValue()`

# External Links
$(_doc_external("Dm/DMClearLabelStratum"))
"""
function DMClearLabelStratum(petsclib::PetscLibType, dm::PetscDM, name::String, value::PetscInt) end

@for_petsc function DMClearLabelStratum(petsclib::$UnionPetscLib, dm::PetscDM, name::String, value::$PetscInt )

    @chk ccall(
               (:DMClearLabelStratum, $petsc_library),
               PetscErrorCode,
               (CDM, Ptr{Cchar}, $PetscInt),
               dm, name, value,
              )


	return nothing
end 

"""
	numLabels::PetscInt = DMGetNumLabels(petsclib::PetscLibType,dm::PetscDM) 
Return the number of labels defined by on the `DM`

Not Collective

Input Parameter:
- `dm` - The `DM` object

Output Parameter:
- `numLabels` - the number of Labels

Level: intermediate

See also: 
=== 
`DM`, `DMLabel`, `DMGetLabelByNum()`, `DMGetLabelName()`, `DMGetLabelValue()`, `DMSetLabelValue()`, `DMGetStratumIS()`

# External Links
$(_doc_external("Dm/DMGetNumLabels"))
"""
function DMGetNumLabels(petsclib::PetscLibType, dm::PetscDM) end

@for_petsc function DMGetNumLabels(petsclib::$UnionPetscLib, dm::PetscDM )
	numLabels_ = Ref{$PetscInt}()

    @chk ccall(
               (:DMGetNumLabels, $petsc_library),
               PetscErrorCode,
               (CDM, Ptr{$PetscInt}),
               dm, numLabels_,
              )

	numLabels = numLabels_[]

	return numLabels
end 

"""
	DMGetLabelName(petsclib::PetscLibType,dm::PetscDM, n::PetscInt, name::String) 
Return the name of nth label

Not Collective

Input Parameters:
- `dm` - The `DM` object
- `n`  - the label number

Output Parameter:
- `name` - the label name

Level: intermediate

Developer Note:
Some of the functions that appropriate on labels using their number have the suffix ByNum, others do not.

See also: 
=== 
`DM`, `DMLabel`, `DMGetLabelByNum()`, `DMGetLabel()`, `DMGetLabelValue()`, `DMSetLabelValue()`, `DMGetStratumIS()`

# External Links
$(_doc_external("Dm/DMGetLabelName"))
"""
function DMGetLabelName(petsclib::PetscLibType, dm::PetscDM, n::PetscInt, name::String) end

@for_petsc function DMGetLabelName(petsclib::$UnionPetscLib, dm::PetscDM, n::$PetscInt, name::String )
	name_ = Ref(pointer(name))

    @chk ccall(
               (:DMGetLabelName, $petsc_library),
               PetscErrorCode,
               (CDM, $PetscInt, Ptr{Ptr{Cchar}}),
               dm, n, name_,
              )


	return nothing
end 

"""
	hasLabel::PetscBool = DMHasLabel(petsclib::PetscLibType,dm::PetscDM, name::String) 
Determine whether the `DM` has a label of a given name

Not Collective

Input Parameters:
- `dm`   - The `DM` object
- `name` - The label name

Output Parameter:
- `hasLabel` - `PETSC_TRUE` if the label is present

Level: intermediate

See also: 
=== 
`DM`, `DMLabel`, `DMGetLabel()`, `DMGetLabelByNum()`, `DMCreateLabel()`, `DMGetLabelValue()`, `DMSetLabelValue()`, `DMGetStratumIS()`

# External Links
$(_doc_external("Dm/DMHasLabel"))
"""
function DMHasLabel(petsclib::PetscLibType, dm::PetscDM, name::String) end

@for_petsc function DMHasLabel(petsclib::$UnionPetscLib, dm::PetscDM, name::String )
	hasLabel_ = Ref{PetscBool}()

    @chk ccall(
               (:DMHasLabel, $petsc_library),
               PetscErrorCode,
               (CDM, Ptr{Cchar}, Ptr{PetscBool}),
               dm, name, hasLabel_,
              )

	hasLabel = hasLabel_[]

	return hasLabel
end 

"""
	DMGetLabel(petsclib::PetscLibType,dm::PetscDM, name::String, label::DMLabel) 
Return the label of a given name, or `NULL`, from a `DM`

Not Collective

Input Parameters:
- `dm`   - The `DM` object
- `name` - The label name

Output Parameter:
- `label` - The `DMLabel`, or `NULL` if the label is absent

Default labels in a `DMPLEX`:
- `"depth"`       - Holds the depth (co-dimension) of each mesh point
- `"celltype"`    - Holds the topological type of each cell
- `"ghost"`       - If the DM is distributed with overlap, this marks the cells and faces in the overlap
- `"Cell Sets"`   - Mirrors the cell sets defined by GMsh and ExodusII
- `"Face Sets"`   - Mirrors the face sets defined by GMsh and ExodusII
- `"Vertex Sets"` - Mirrors the vertex sets defined by GMsh

Level: intermediate

See also: 
=== 
`DM`, `DMLabel`, `DMHasLabel()`, `DMGetLabelByNum()`, `DMAddLabel()`, `DMCreateLabel()`, `DMPlexGetDepthLabel()`, `DMPlexGetCellType()`

# External Links
$(_doc_external("Dm/DMGetLabel"))
"""
function DMGetLabel(petsclib::PetscLibType, dm::PetscDM, name::String, label::DMLabel) end

@for_petsc function DMGetLabel(petsclib::$UnionPetscLib, dm::PetscDM, name::String, label::DMLabel )

    @chk ccall(
               (:DMGetLabel, $petsc_library),
               PetscErrorCode,
               (CDM, Ptr{Cchar}, Ptr{DMLabel}),
               dm, name, label,
              )


	return nothing
end 

"""
	DMGetLabelByNum(petsclib::PetscLibType,dm::PetscDM, n::PetscInt, label::DMLabel) 
Return the nth label on a `DM`

Not Collective

Input Parameters:
- `dm` - The `DM` object
- `n`  - the label number

Output Parameter:
- `label` - the label

Level: intermediate

See also: 
=== 
`DM`, `DMLabel`, `DMAddLabel()`, `DMGetLabelValue()`, `DMSetLabelValue()`, `DMGetStratumIS()`

# External Links
$(_doc_external("Dm/DMGetLabelByNum"))
"""
function DMGetLabelByNum(petsclib::PetscLibType, dm::PetscDM, n::PetscInt, label::DMLabel) end

@for_petsc function DMGetLabelByNum(petsclib::$UnionPetscLib, dm::PetscDM, n::$PetscInt, label::DMLabel )

    @chk ccall(
               (:DMGetLabelByNum, $petsc_library),
               PetscErrorCode,
               (CDM, $PetscInt, Ptr{DMLabel}),
               dm, n, label,
              )


	return nothing
end 

"""
	DMAddLabel(petsclib::PetscLibType,dm::PetscDM, label::DMLabel) 
Add the label to this `DM`

Not Collective

Input Parameters:
- `dm`    - The `DM` object
- `label` - The `DMLabel`

Level: developer

See also: 
=== 
`DM`, `DMLabel`, `DMCreateLabel()`, `DMHasLabel()`, `DMGetLabelValue()`, `DMSetLabelValue()`, `DMGetStratumIS()`

# External Links
$(_doc_external("Dm/DMAddLabel"))
"""
function DMAddLabel(petsclib::PetscLibType, dm::PetscDM, label::DMLabel) end

@for_petsc function DMAddLabel(petsclib::$UnionPetscLib, dm::PetscDM, label::DMLabel )

    @chk ccall(
               (:DMAddLabel, $petsc_library),
               PetscErrorCode,
               (CDM, DMLabel),
               dm, label,
              )


	return nothing
end 

"""
	DMSetLabel(petsclib::PetscLibType,dm::PetscDM, label::DMLabel) 
Replaces the label of a given name, or ignores it if the name is not present

Not Collective

Input Parameters:
- `dm`    - The `DM` object
- `label` - The `DMLabel`, having the same name, to substitute

Default labels in a `DMPLEX`:
- `"depth"`       - Holds the depth (co-dimension) of each mesh point
- `"celltype"`    - Holds the topological type of each cell
- `"ghost"`       - If the DM is distributed with overlap, this marks the cells and faces in the overlap
- `"Cell Sets"`   - Mirrors the cell sets defined by GMsh and ExodusII
- `"Face Sets"`   - Mirrors the face sets defined by GMsh and ExodusII
- `"Vertex Sets"` - Mirrors the vertex sets defined by GMsh

Level: intermediate

See also: 
=== 
`DM`, `DMLabel`, `DMCreateLabel()`, `DMHasLabel()`, `DMPlexGetDepthLabel()`, `DMPlexGetCellType()`

# External Links
$(_doc_external("Dm/DMSetLabel"))
"""
function DMSetLabel(petsclib::PetscLibType, dm::PetscDM, label::DMLabel) end

@for_petsc function DMSetLabel(petsclib::$UnionPetscLib, dm::PetscDM, label::DMLabel )

    @chk ccall(
               (:DMSetLabel, $petsc_library),
               PetscErrorCode,
               (CDM, DMLabel),
               dm, label,
              )


	return nothing
end 

"""
	DMRemoveLabel(petsclib::PetscLibType,dm::PetscDM, name::String, label::DMLabel) 
Remove the label given by name from this `DM`

Not Collective

Input Parameters:
- `dm`   - The `DM` object
- `name` - The label name

Output Parameter:
- `label` - The `DMLabel`, or `NULL` if the label is absent. Pass in `NULL` to call `DMLabelDestroy()` on the label, otherwise the
caller is responsible for calling `DMLabelDestroy()`.

Level: developer

See also: 
=== 
`DM`, `DMLabel`, `DMCreateLabel()`, `DMHasLabel()`, `DMGetLabel()`, `DMGetLabelValue()`, `DMSetLabelValue()`, `DMLabelDestroy()`, `DMRemoveLabelBySelf()`

# External Links
$(_doc_external("Dm/DMRemoveLabel"))
"""
function DMRemoveLabel(petsclib::PetscLibType, dm::PetscDM, name::String, label::DMLabel) end

@for_petsc function DMRemoveLabel(petsclib::$UnionPetscLib, dm::PetscDM, name::String, label::DMLabel )

    @chk ccall(
               (:DMRemoveLabel, $petsc_library),
               PetscErrorCode,
               (CDM, Ptr{Cchar}, Ptr{DMLabel}),
               dm, name, label,
              )


	return nothing
end 

"""
	DMRemoveLabelBySelf(petsclib::PetscLibType,dm::PetscDM, label::DMLabel, failNotFound::PetscBool) 
Remove the label from this `DM`

Not Collective

Input Parameters:
- `dm`           - The `DM` object
- `label`        - The `DMLabel` to be removed from the `DM`
- `failNotFound` - Should it fail if the label is not found in the `DM`?

Level: developer

Note:
Only exactly the same instance is removed if found, name match is ignored.
If the `DM` has an exclusive reference to the label, the label gets destroyed and
*label nullified.

See also: 
=== 
`DM`, `DMLabel`, `DMCreateLabel()`, `DMHasLabel()`, `DMGetLabel()` `DMGetLabelValue()`, `DMSetLabelValue()`, `DMLabelDestroy()`, `DMRemoveLabel()`

# External Links
$(_doc_external("Dm/DMRemoveLabelBySelf"))
"""
function DMRemoveLabelBySelf(petsclib::PetscLibType, dm::PetscDM, label::DMLabel, failNotFound::PetscBool) end

@for_petsc function DMRemoveLabelBySelf(petsclib::$UnionPetscLib, dm::PetscDM, label::DMLabel, failNotFound::PetscBool )

    @chk ccall(
               (:DMRemoveLabelBySelf, $petsc_library),
               PetscErrorCode,
               (CDM, Ptr{DMLabel}, PetscBool),
               dm, label, failNotFound,
              )


	return nothing
end 

"""
	output::PetscBool = DMGetLabelOutput(petsclib::PetscLibType,dm::PetscDM, name::String) 
Get the output flag for a given label

Not Collective

Input Parameters:
- `dm`   - The `DM` object
- `name` - The label name

Output Parameter:
- `output` - The flag for output

Level: developer

See also: 
=== 
`DM`, `DMLabel`, `DMSetLabelOutput()`, `DMCreateLabel()`, `DMHasLabel()`, `DMGetLabelValue()`, `DMSetLabelValue()`, `DMGetStratumIS()`

# External Links
$(_doc_external("Dm/DMGetLabelOutput"))
"""
function DMGetLabelOutput(petsclib::PetscLibType, dm::PetscDM, name::String) end

@for_petsc function DMGetLabelOutput(petsclib::$UnionPetscLib, dm::PetscDM, name::String )
	output_ = Ref{PetscBool}()

    @chk ccall(
               (:DMGetLabelOutput, $petsc_library),
               PetscErrorCode,
               (CDM, Ptr{Cchar}, Ptr{PetscBool}),
               dm, name, output_,
              )

	output = output_[]

	return output
end 

"""
	DMSetLabelOutput(petsclib::PetscLibType,dm::PetscDM, name::String, output::PetscBool) 
Set if a given label should be saved to a `PetscViewer` in calls to `DMView()`

Not Collective

Input Parameters:
- `dm`     - The `DM` object
- `name`   - The label name
- `output` - `PETSC_TRUE` to save the label to the viewer

Level: developer

See also: 
=== 
`DM`, `DMLabel`, `DMGetOutputFlag()`, `DMGetLabelOutput()`, `DMCreateLabel()`, `DMHasLabel()`, `DMGetLabelValue()`, `DMSetLabelValue()`, `DMGetStratumIS()`

# External Links
$(_doc_external("Dm/DMSetLabelOutput"))
"""
function DMSetLabelOutput(petsclib::PetscLibType, dm::PetscDM, name::String, output::PetscBool) end

@for_petsc function DMSetLabelOutput(petsclib::$UnionPetscLib, dm::PetscDM, name::String, output::PetscBool )

    @chk ccall(
               (:DMSetLabelOutput, $petsc_library),
               PetscErrorCode,
               (CDM, Ptr{Cchar}, PetscBool),
               dm, name, output,
              )


	return nothing
end 

"""
	DMCopyLabels(petsclib::PetscLibType,dmA::PetscDM, dmB::PetscDM, mode::PetscCopyMode, all::PetscBool, emode::DMCopyLabelsMode) 
Copy labels from one `DM` mesh to another `DM` with a superset of the points

Collective

Input Parameters:
- `dmA`   - The `DM` object with initial labels
- `dmB`   - The `DM` object to which labels are copied
- `mode`  - Copy labels by pointers (`PETSC_OWN_POINTER`) or duplicate them (`PETSC_COPY_VALUES`)
- `all`   - Copy all labels including "depth", "dim", and "celltype" (`PETSC_TRUE`) which are otherwise ignored (`PETSC_FALSE`)
- `emode` - How to behave when a `DMLabel` in the source and destination `DM`s with the same name is encountered (see `DMCopyLabelsMode`)

Level: intermediate

Note:
This is typically used when interpolating or otherwise adding to a mesh, or testing.

See also: 
=== 
`DM`, `DMLabel`, `DMAddLabel()`, `DMCopyLabelsMode`

# External Links
$(_doc_external("Dm/DMCopyLabels"))
"""
function DMCopyLabels(petsclib::PetscLibType, dmA::PetscDM, dmB::PetscDM, mode::PetscCopyMode, all::PetscBool, emode::DMCopyLabelsMode) end

@for_petsc function DMCopyLabels(petsclib::$UnionPetscLib, dmA::PetscDM, dmB::PetscDM, mode::PetscCopyMode, all::PetscBool, emode::DMCopyLabelsMode )

    @chk ccall(
               (:DMCopyLabels, $petsc_library),
               PetscErrorCode,
               (CDM, CDM, PetscCopyMode, PetscBool, DMCopyLabelsMode),
               dmA, dmB, mode, all, emode,
              )


	return nothing
end 

"""
	equal::PetscBool = DMCompareLabels(petsclib::PetscLibType,dm0::PetscDM, dm1::PetscDM, message::String) 
Compare labels between two `DM` objects

Collective; No Fortran Support

Input Parameters:
- `dm0` - First `DM` object
- `dm1` - Second `DM` object

Output Parameters:
- `equal`   - (Optional) Flag whether labels of `dm0` and `dm1` are the same
- `message` - (Optional) Message describing the difference, or `NULL` if there is no difference

Level: intermediate

Notes:
The output flag equal will be the same on all processes.

If equal is passed as `NULL` and difference is found, an error is thrown on all processes.

Make sure to pass equal is `NULL` on all processes or none of them.

The output message is set independently on each rank.

message must be freed with `PetscFree()`

If message is passed as `NULL` and a difference is found, the difference description is printed to `stderr` in synchronized manner.

Make sure to pass message as `NULL` on all processes or no processes.

Labels are matched by name. If the number of labels and their names are equal,
`DMLabelCompare()` is used to compare each pair of labels with the same name.

Developer Note:
Cannot automatically generate the Fortran stub because `message` must be freed with `PetscFree()`

See also: 
=== 
`DM`, `DMLabel`, `DMAddLabel()`, `DMCopyLabelsMode`, `DMLabelCompare()`

# External Links
$(_doc_external("Dm/DMCompareLabels"))
"""
function DMCompareLabels(petsclib::PetscLibType, dm0::PetscDM, dm1::PetscDM, message::String) end

@for_petsc function DMCompareLabels(petsclib::$UnionPetscLib, dm0::PetscDM, dm1::PetscDM, message::String )
	equal_ = Ref{PetscBool}()
	message_ = Ref(pointer(message))

    @chk ccall(
               (:DMCompareLabels, $petsc_library),
               PetscErrorCode,
               (CDM, CDM, Ptr{PetscBool}, Ptr{Ptr{Cchar}}),
               dm0, dm1, equal_, message_,
              )

	equal = equal_[]

	return equal
end 

"""
	DMGetCoarseDM(petsclib::PetscLibType,dm::PetscDM, cdm::PetscDM) 
Get the coarse `DM`from which this `DM` was obtained by refinement

Not Collective

Input Parameter:
- `dm` - The `DM` object

Output Parameter:
- `cdm` - The coarse `DM`

Level: intermediate

See also: 
=== 
`DM`, `DMSetCoarseDM()`, `DMCoarsen()`

# External Links
$(_doc_external("Dm/DMGetCoarseDM"))
"""
function DMGetCoarseDM(petsclib::PetscLibType, dm::PetscDM, cdm::PetscDM) end

@for_petsc function DMGetCoarseDM(petsclib::$UnionPetscLib, dm::PetscDM, cdm::PetscDM )
	cdm_ = Ref(cdm.ptr)

    @chk ccall(
               (:DMGetCoarseDM, $petsc_library),
               PetscErrorCode,
               (CDM, Ptr{CDM}),
               dm, cdm_,
              )

	cdm.ptr = C_NULL

	return nothing
end 

"""
	DMSetCoarseDM(petsclib::PetscLibType,dm::PetscDM, cdm::PetscDM) 
Set the coarse `DM` from which this `DM` was obtained by refinement

Input Parameters:
- `dm`  - The `DM` object
- `cdm` - The coarse `DM`

Level: intermediate

Note:
Normally this is set automatically by `DMRefine()`

See also: 
=== 
`DM`, `DMGetCoarseDM()`, `DMCoarsen()`, `DMSetRefine()`, `DMSetFineDM()`

# External Links
$(_doc_external("Dm/DMSetCoarseDM"))
"""
function DMSetCoarseDM(petsclib::PetscLibType, dm::PetscDM, cdm::PetscDM) end

@for_petsc function DMSetCoarseDM(petsclib::$UnionPetscLib, dm::PetscDM, cdm::PetscDM )

    @chk ccall(
               (:DMSetCoarseDM, $petsc_library),
               PetscErrorCode,
               (CDM, CDM),
               dm, cdm,
              )


	return nothing
end 

"""
	DMGetFineDM(petsclib::PetscLibType,dm::PetscDM, fdm::PetscDM) 
Get the fine mesh from which this `DM` was obtained by coarsening

Input Parameter:
- `dm` - The `DM` object

Output Parameter:
- `fdm` - The fine `DM`

Level: intermediate

See also: 
=== 
`DM`, `DMSetFineDM()`, `DMCoarsen()`, `DMRefine()`

# External Links
$(_doc_external("Dm/DMGetFineDM"))
"""
function DMGetFineDM(petsclib::PetscLibType, dm::PetscDM, fdm::PetscDM) end

@for_petsc function DMGetFineDM(petsclib::$UnionPetscLib, dm::PetscDM, fdm::PetscDM )
	fdm_ = Ref(fdm.ptr)

    @chk ccall(
               (:DMGetFineDM, $petsc_library),
               PetscErrorCode,
               (CDM, Ptr{CDM}),
               dm, fdm_,
              )

	fdm.ptr = C_NULL

	return nothing
end 

"""
	DMSetFineDM(petsclib::PetscLibType,dm::PetscDM, fdm::PetscDM) 
Set the fine mesh from which this was obtained by coarsening

Input Parameters:
- `dm`  - The `DM` object
- `fdm` - The fine `DM`

Level: developer

Note:
Normally this is set automatically by `DMCoarsen()`

See also: 
=== 
`DM`, `DMGetFineDM()`, `DMCoarsen()`, `DMRefine()`

# External Links
$(_doc_external("Dm/DMSetFineDM"))
"""
function DMSetFineDM(petsclib::PetscLibType, dm::PetscDM, fdm::PetscDM) end

@for_petsc function DMSetFineDM(petsclib::$UnionPetscLib, dm::PetscDM, fdm::PetscDM )

    @chk ccall(
               (:DMSetFineDM, $petsc_library),
               PetscErrorCode,
               (CDM, CDM),
               dm, fdm,
              )


	return nothing
end 

"""
	bd::PetscInt = DMAddBoundary(petsclib::PetscLibType,dm::PetscDM, type::DMBoundaryConditionType, name::String, label::DMLabel, Nv::PetscInt, values::Vector{PetscInt}, field::PetscInt, Nc::PetscInt, comps::Vector{PetscInt}, bcFunc::PetscVoidFn, bcFunc_t::PetscVoidFn, ctx::Cvoid) 
Add a boundary condition, for a single field, to a model represented by a `DM`

Collective

Input Parameters:
- `dm`       - The `DM`, with a `PetscDS` that matches the problem being constrained
- `type`     - The type of condition, e.g. `DM_BC_ESSENTIAL_ANALYTIC`, `DM_BC_ESSENTIAL_FIELD` (Dirichlet), or `DM_BC_NATURAL` (Neumann)
- `name`     - The BC name
- `label`    - The label defining constrained points
- `Nv`       - The number of `DMLabel` values for constrained points
- `values`   - An array of values for constrained points
- `field`    - The field to constrain
- `Nc`       - The number of constrained field components (0 will constrain all components)
- `comps`    - An array of constrained component numbers
- `bcFunc`   - A pointwise function giving boundary values
- `bcFunc_t` - A pointwise function giving the time derivative of the boundary values, or `NULL`
- `ctx`      - An optional user context for bcFunc

Output Parameter:
- `bd` - (Optional) Boundary number

Options Database Keys:
- `-bc_<boundary name> <num>`      - Overrides the boundary ids
- `-bc_<boundary name>_comp <num>` - Overrides the boundary components

Level: intermediate

Notes:
If the `DM` is of type `DMPLEX` and the field is of type `PetscFE`, then this function completes the label using `DMPlexLabelComplete()`.

Both bcFunc and bcFunc_t will depend on the boundary condition type. If the type if `DM_BC_ESSENTIAL`, then the calling sequence is:
-vb
void bcFunc(PetscInt dim, PetscReal time, const PetscReal x[], PetscInt Nc, PetscScalar bcval[])
-ve

If the type is `DM_BC_ESSENTIAL_FIELD` or other _FIELD value, then the calling sequence is:

-vb
void bcFunc(PetscInt dim, PetscInt Nf, PetscInt NfAux,
const PetscInt uOff[], const PetscInt uOff_x[], const PetscScalar u[], const PetscScalar u_t[], const PetscScalar u_x[],
const PetscInt aOff[], const PetscInt aOff_x[], const PetscScalar a[], const PetscScalar a_t[], const PetscScalar a_x[],
PetscReal time, const PetscReal x[], PetscScalar bcval[])
-ve
- `dim` - the spatial dimension
- `Nf` - the number of fields
- `uOff` - the offset into u[] and u_t[] for each field
- `uOff_x` - the offset into u_x[] for each field
- `u` - each field evaluated at the current point
- `u_t` - the time derivative of each field evaluated at the current point
- `u_x` - the gradient of each field evaluated at the current point
- `aOff` - the offset into a[] and a_t[] for each auxiliary field
- `aOff_x` - the offset into a_x[] for each auxiliary field
- `a` - each auxiliary field evaluated at the current point
- `a_t` - the time derivative of each auxiliary field evaluated at the current point
- `a_x` - the gradient of auxiliary each field evaluated at the current point
- `t` - current time
- `x` - coordinates of the current point
- `numConstants` - number of constant parameters
- `constants` - constant parameters
- `bcval` - output values at the current point

See also: 
=== 
`DM`, `DSGetBoundary()`, `PetscDSAddBoundary()`

# External Links
$(_doc_external("Dm/DMAddBoundary"))
"""
function DMAddBoundary(petsclib::PetscLibType, dm::PetscDM, type::DMBoundaryConditionType, name::String, label::DMLabel, Nv::PetscInt, values::Vector{PetscInt}, field::PetscInt, Nc::PetscInt, comps::Vector{PetscInt}, bcFunc::PetscVoidFn, bcFunc_t::PetscVoidFn, ctx::Cvoid) end

@for_petsc function DMAddBoundary(petsclib::$UnionPetscLib, dm::PetscDM, type::DMBoundaryConditionType, name::String, label::DMLabel, Nv::$PetscInt, values::Vector{$PetscInt}, field::$PetscInt, Nc::$PetscInt, comps::Vector{$PetscInt}, bcFunc::PetscVoidFn, bcFunc_t::PetscVoidFn, ctx::Cvoid )
	bd_ = Ref{$PetscInt}()

    @chk ccall(
               (:DMAddBoundary, $petsc_library),
               PetscErrorCode,
               (CDM, DMBoundaryConditionType, Ptr{Cchar}, DMLabel, $PetscInt, Ptr{$PetscInt}, $PetscInt, $PetscInt, Ptr{$PetscInt}, Ptr{PetscVoidFn}, Ptr{PetscVoidFn}, Ptr{Cvoid}, Ptr{$PetscInt}),
               dm, type, name, label, Nv, values, field, Nc, comps, bcFunc, bcFunc_t, ctx, bd_,
              )

	bd = bd_[]

	return bd
end 

"""
	isBd::PetscBool = DMIsBoundaryPoint(petsclib::PetscLibType,dm::PetscDM, point::PetscInt) 

# External Links
$(_doc_external("Dm/DMIsBoundaryPoint"))
"""
function DMIsBoundaryPoint(petsclib::PetscLibType, dm::PetscDM, point::PetscInt) end

@for_petsc function DMIsBoundaryPoint(petsclib::$UnionPetscLib, dm::PetscDM, point::$PetscInt )
	isBd_ = Ref{PetscBool}()

    @chk ccall(
               (:DMIsBoundaryPoint, $petsc_library),
               PetscErrorCode,
               (CDM, $PetscInt, Ptr{PetscBool}),
               dm, point, isBd_,
              )

	isBd = isBd_[]

	return isBd
end 

"""
	hasBound::PetscBool = DMHasBound(petsclib::PetscLibType,dm::PetscDM) 
Determine whether a bound condition was specified

Logically collective

Input Parameter:
- `dm` - The `DM`, with a `PetscDS` that matches the problem being constrained

Output Parameter:
- `hasBound` - Flag indicating if a bound condition was specified

Level: intermediate

See also: 
=== 
`DM`, `DSAddBoundary()`, `PetscDSAddBoundary()`

# External Links
$(_doc_external("Dm/DMHasBound"))
"""
function DMHasBound(petsclib::PetscLibType, dm::PetscDM) end

@for_petsc function DMHasBound(petsclib::$UnionPetscLib, dm::PetscDM )
	hasBound_ = Ref{PetscBool}()

    @chk ccall(
               (:DMHasBound, $petsc_library),
               PetscErrorCode,
               (CDM, Ptr{PetscBool}),
               dm, hasBound_,
              )

	hasBound = hasBound_[]

	return hasBound
end 

#=
"""
	DMProjectFieldLocal(petsclib::PetscLibType,dm::PetscDM, time::PetscReal, locU::PetscVec, ::Cvoid(funcs) 
This projects the given function of the input fields into the function space provided by the `DM`, putting the coefficients in a local vector.

Not Collective

Input Parameters:
- `dm`     - The `DM`
- `time`   - The time
- `localU` - The input field vector; may be `NULL` if projection is defined purely by coordinates
- `funcs`  - The functions to evaluate, one per field
- `mode`   - The insertion mode for values

Output Parameter:
- `localX` - The output vector

Calling sequence of `funcs`:
- `dim`          - The spatial dimension
- `Nf`           - The number of input fields
- `NfAux`        - The number of input auxiliary fields
- `uOff`         - The offset of each field in u[]
- `uOff_x`       - The offset of each field in u_x[]
- `u`            - The field values at this point in space
- `u_t`          - The field time derivative at this point in space (or `NULL`)
- `u_x`          - The field derivatives at this point in space
- `aOff`         - The offset of each auxiliary field in u[]
- `aOff_x`       - The offset of each auxiliary field in u_x[]
- `a`            - The auxiliary field values at this point in space
- `a_t`          - The auxiliary field time derivative at this point in space (or `NULL`)
- `a_x`          - The auxiliary field derivatives at this point in space
- `t`            - The current time
- `x`            - The coordinates of this point
- `numConstants` - The number of constants
- `constants`    - The value of each constant
- `f`            - The value of the function at this point in space

Level: intermediate

Note:
There are three different `DM`s that potentially interact in this function. The output `DM`, dm, specifies the layout of the values calculates by funcs.
The input `DM`, attached to U, may be different. For example, you can input the solution over the full domain, but output over a piece of the boundary, or
a subdomain. You can also output a different number of fields than the input, with different discretizations. Last the auxiliary `DM`, attached to the
auxiliary field vector, which is attached to dm, can also be different. It can have a different topology, number of fields, and discretizations.

Developer Notes:
This API is specific to only particular usage of `DM`

The notes need to provide some information about what has to be provided to the `DM` to be able to perform the computation.

See also: 
=== 
`DM`, `DMProjectField()`, `DMProjectFieldLabelLocal()`,
`DMProjectFunction()`, `DMComputeL2Diff()`

# External Links
$(_doc_external("Dm/DMProjectFieldLocal"))
"""
function DMProjectFieldLocal(petsclib::PetscLibType, dm::PetscDM, time::PetscReal, locU::PetscVec, ::Cvoid(funcs) end

@for_petsc function DMProjectFieldLocal(petsclib::$UnionPetscLib, dm::PetscDM, time::$PetscReal, locU::PetscVec, ::Cvoid(funcs )

    @chk ccall(
               (:DMProjectFieldLocal, $petsc_library),
               PetscErrorCode,
               (CDM, $PetscReal, CVec, Cvoid(funcs),
               dm, time, locU, ,
              )


	return nothing
end 


"""
	DMProjectFieldLabelLocal(petsclib::PetscLibType,dm::PetscDM, time::PetscReal, label::DMLabel, numIds::PetscInt, ids::Vector{PetscInt}, Nc::PetscInt, comps::Vector{PetscInt}, locU::PetscVec, ::Cvoid(funcs) 
This projects the given function of the input fields into the function space provided, putting the coefficients in a local vector, calculating only over the portion of the domain specified by the label.

Not Collective

Input Parameters:
- `dm`     - The `DM`
- `time`   - The time
- `label`  - The `DMLabel` marking the portion of the domain to output
- `numIds` - The number of label ids to use
- `ids`    - The label ids to use for marking
- `Nc`     - The number of components to set in the output, or `PETSC_DETERMINE` for all components
- `comps`  - The components to set in the output, or `NULL` for all components
- `localU` - The input field vector
- `funcs`  - The functions to evaluate, one per field
- `mode`   - The insertion mode for values

Output Parameter:
- `localX` - The output vector

Calling sequence of `funcs`:
- `dim`          - The spatial dimension
- `Nf`           - The number of input fields
- `NfAux`        - The number of input auxiliary fields
- `uOff`         - The offset of each field in u[]
- `uOff_x`       - The offset of each field in u_x[]
- `u`            - The field values at this point in space
- `u_t`          - The field time derivative at this point in space (or `NULL`)
- `u_x`          - The field derivatives at this point in space
- `aOff`         - The offset of each auxiliary field in u[]
- `aOff_x`       - The offset of each auxiliary field in u_x[]
- `a`            - The auxiliary field values at this point in space
- `a_t`          - The auxiliary field time derivative at this point in space (or `NULL`)
- `a_x`          - The auxiliary field derivatives at this point in space
- `t`            - The current time
- `x`            - The coordinates of this point
- `numConstants` - The number of constants
- `constants`    - The value of each constant
- `f`            - The value of the function at this point in space

Level: intermediate

Note:
There are three different `DM`s that potentially interact in this function. The output `DM`, dm, specifies the layout of the values calculates by funcs.
The input `DM`, attached to localU, may be different. For example, you can input the solution over the full domain, but output over a piece of the boundary, or
a subdomain. You can also output a different number of fields than the input, with different discretizations. Last the auxiliary `DM`, attached to the
auxiliary field vector, which is attached to dm, can also be different. It can have a different topology, number of fields, and discretizations.

Developer Notes:
This API is specific to only particular usage of `DM`

The notes need to provide some information about what has to be provided to the `DM` to be able to perform the computation.

See also: 
=== 
`DM`, `DMProjectField()`, `DMProjectFieldLabel()`, `DMProjectFunction()`, `DMComputeL2Diff()`

# External Links
$(_doc_external("Dm/DMProjectFieldLabelLocal"))
"""
function DMProjectFieldLabelLocal(petsclib::PetscLibType, dm::PetscDM, time::PetscReal, label::DMLabel, numIds::PetscInt, ids::Vector{PetscInt}, Nc::PetscInt, comps::Vector{PetscInt}, locU::PetscVec, ::Cvoid(funcs) end

@for_petsc function DMProjectFieldLabelLocal(petsclib::$UnionPetscLib, dm::PetscDM, time::$PetscReal, label::DMLabel, numIds::$PetscInt, ids::Vector{$PetscInt}, Nc::$PetscInt, comps::Vector{$PetscInt}, locU::PetscVec, ::Cvoid(funcs )

    @chk ccall(
               (:DMProjectFieldLabelLocal, $petsc_library),
               PetscErrorCode,
               (CDM, $PetscReal, DMLabel, $PetscInt, Ptr{$PetscInt}, $PetscInt, Ptr{$PetscInt}, CVec, Cvoid(funcs),
               dm, time, label, numIds, ids, Nc, comps, locU, ,
              )


	return nothing
end 

"""
	DMProjectFieldLabel(petsclib::PetscLibType,dm::PetscDM, time::PetscReal, label::DMLabel, numIds::PetscInt, ids::Vector{PetscInt}, Nc::PetscInt, comps::Vector{PetscInt}, U::PetscVec, ::Cvoid(funcs) 
This projects the given function of the input fields into the function space provided, putting the coefficients in a global vector, calculating only over the portion of the domain specified by the label.

Not Collective

Input Parameters:
- `dm`     - The `DM`
- `time`   - The time
- `label`  - The `DMLabel` marking the portion of the domain to output
- `numIds` - The number of label ids to use
- `ids`    - The label ids to use for marking
- `Nc`     - The number of components to set in the output, or `PETSC_DETERMINE` for all components
- `comps`  - The components to set in the output, or `NULL` for all components
- `U`      - The input field vector
- `funcs`  - The functions to evaluate, one per field
- `mode`   - The insertion mode for values

Output Parameter:
- `X` - The output vector

Calling sequence of `funcs`:
- `dim`          - The spatial dimension
- `Nf`           - The number of input fields
- `NfAux`        - The number of input auxiliary fields
- `uOff`         - The offset of each field in u[]
- `uOff_x`       - The offset of each field in u_x[]
- `u`            - The field values at this point in space
- `u_t`          - The field time derivative at this point in space (or `NULL`)
- `u_x`          - The field derivatives at this point in space
- `aOff`         - The offset of each auxiliary field in u[]
- `aOff_x`       - The offset of each auxiliary field in u_x[]
- `a`            - The auxiliary field values at this point in space
- `a_t`          - The auxiliary field time derivative at this point in space (or `NULL`)
- `a_x`          - The auxiliary field derivatives at this point in space
- `t`            - The current time
- `x`            - The coordinates of this point
- `numConstants` - The number of constants
- `constants`    - The value of each constant
- `f`            - The value of the function at this point in space

Level: intermediate

Note:
There are three different `DM`s that potentially interact in this function. The output `DM`, dm, specifies the layout of the values calculates by funcs.
The input `DM`, attached to U, may be different. For example, you can input the solution over the full domain, but output over a piece of the boundary, or
a subdomain. You can also output a different number of fields than the input, with different discretizations. Last the auxiliary `DM`, attached to the
auxiliary field vector, which is attached to dm, can also be different. It can have a different topology, number of fields, and discretizations.

Developer Notes:
This API is specific to only particular usage of `DM`

The notes need to provide some information about what has to be provided to the `DM` to be able to perform the computation.

See also: 
=== 
`DM`, `DMProjectField()`, `DMProjectFieldLabelLocal()`, `DMProjectFunction()`, `DMComputeL2Diff()`

# External Links
$(_doc_external("Dm/DMProjectFieldLabel"))
"""
function DMProjectFieldLabel(petsclib::PetscLibType, dm::PetscDM, time::PetscReal, label::DMLabel, numIds::PetscInt, ids::Vector{PetscInt}, Nc::PetscInt, comps::Vector{PetscInt}, U::PetscVec, ::Cvoid(funcs) end

@for_petsc function DMProjectFieldLabel(petsclib::$UnionPetscLib, dm::PetscDM, time::$PetscReal, label::DMLabel, numIds::$PetscInt, ids::Vector{$PetscInt}, Nc::$PetscInt, comps::Vector{$PetscInt}, U::PetscVec, ::Cvoid(funcs )

    @chk ccall(
               (:DMProjectFieldLabel, $petsc_library),
               PetscErrorCode,
               (CDM, $PetscReal, DMLabel, $PetscInt, Ptr{$PetscInt}, $PetscInt, Ptr{$PetscInt}, CVec, Cvoid(funcs),
               dm, time, label, numIds, ids, Nc, comps, U, ,
              )


	return nothing
end 

"""
	DMProjectBdFieldLabelLocal(petsclib::PetscLibType,dm::PetscDM, time::PetscReal, label::DMLabel, numIds::PetscInt, ids::Vector{PetscInt}, Nc::PetscInt, comps::Vector{PetscInt}, locU::PetscVec, ::Cvoid(funcs) 
This projects the given function of the input fields into the function space provided, putting the coefficients in a local vector, calculating only over the portion of the domain boundary specified by the label.

Not Collective

Input Parameters:
- `dm`     - The `DM`
- `time`   - The time
- `label`  - The `DMLabel` marking the portion of the domain boundary to output
- `numIds` - The number of label ids to use
- `ids`    - The label ids to use for marking
- `Nc`     - The number of components to set in the output, or `PETSC_DETERMINE` for all components
- `comps`  - The components to set in the output, or `NULL` for all components
- `localU` - The input field vector
- `funcs`  - The functions to evaluate, one per field
- `mode`   - The insertion mode for values

Output Parameter:
- `localX` - The output vector

Calling sequence of `funcs`:
- `dim`          - The spatial dimension
- `Nf`           - The number of input fields
- `NfAux`        - The number of input auxiliary fields
- `uOff`         - The offset of each field in u[]
- `uOff_x`       - The offset of each field in u_x[]
- `u`            - The field values at this point in space
- `u_t`          - The field time derivative at this point in space (or `NULL`)
- `u_x`          - The field derivatives at this point in space
- `aOff`         - The offset of each auxiliary field in u[]
- `aOff_x`       - The offset of each auxiliary field in u_x[]
- `a`            - The auxiliary field values at this point in space
- `a_t`          - The auxiliary field time derivative at this point in space (or `NULL`)
- `a_x`          - The auxiliary field derivatives at this point in space
- `t`            - The current time
- `x`            - The coordinates of this point
- `n`            - The face normal
- `numConstants` - The number of constants
- `constants`    - The value of each constant
- `f`            - The value of the function at this point in space

Level: intermediate

Note:
There are three different `DM`s that potentially interact in this function. The output `DM`, dm, specifies the layout of the values calculates by funcs.
The input `DM`, attached to U, may be different. For example, you can input the solution over the full domain, but output over a piece of the boundary, or
a subdomain. You can also output a different number of fields than the input, with different discretizations. Last the auxiliary `DM`, attached to the
auxiliary field vector, which is attached to dm, can also be different. It can have a different topology, number of fields, and discretizations.

Developer Notes:
This API is specific to only particular usage of `DM`

The notes need to provide some information about what has to be provided to the `DM` to be able to perform the computation.

See also: 
=== 
`DM`, `DMProjectField()`, `DMProjectFieldLabelLocal()`, `DMProjectFunction()`, `DMComputeL2Diff()`

# External Links
$(_doc_external("Dm/DMProjectBdFieldLabelLocal"))
"""
function DMProjectBdFieldLabelLocal(petsclib::PetscLibType, dm::PetscDM, time::PetscReal, label::DMLabel, numIds::PetscInt, ids::Vector{PetscInt}, Nc::PetscInt, comps::Vector{PetscInt}, locU::PetscVec, ::Cvoid(funcs) end

@for_petsc function DMProjectBdFieldLabelLocal(petsclib::$UnionPetscLib, dm::PetscDM, time::$PetscReal, label::DMLabel, numIds::$PetscInt, ids::Vector{$PetscInt}, Nc::$PetscInt, comps::Vector{$PetscInt}, locU::PetscVec, ::Cvoid(funcs )

    @chk ccall(
               (:DMProjectBdFieldLabelLocal, $petsc_library),
               PetscErrorCode,
               (CDM, $PetscReal, DMLabel, $PetscInt, Ptr{$PetscInt}, $PetscInt, Ptr{$PetscInt}, CVec, Cvoid(funcs),
               dm, time, label, numIds, ids, Nc, comps, locU, ,
              )


	return nothing
end 
=#

"""
	nranks::PetscInt = DMGetNeighbors(petsclib::PetscLibType,dm::PetscDM, ranks::Vector{PetscMPIInt}) 
Gets an array containing the MPI ranks of all the processes neighbors

Not Collective

Input Parameter:
- `dm` - The `DM`

Output Parameters:
- `nranks` - the number of neighbours
- `ranks`  - the neighbors ranks

Level: beginner

Note:
Do not free the array, it is freed when the `DM` is destroyed.

See also: 
=== 
`DM`, `DMDAGetNeighbors()`, `PetscSFGetRootRanks()`

# External Links
$(_doc_external("Dm/DMGetNeighbors"))
"""
function DMGetNeighbors(petsclib::PetscLibType, dm::PetscDM, ranks::Vector{PetscMPIInt}) end

@for_petsc function DMGetNeighbors(petsclib::$UnionPetscLib, dm::PetscDM, ranks::Vector{PetscMPIInt} )
	nranks_ = Ref{$PetscInt}()
	ranks_ = Ref(pointer(ranks))

    @chk ccall(
               (:DMGetNeighbors, $petsc_library),
               PetscErrorCode,
               (CDM, Ptr{$PetscInt}, Ptr{Ptr{PetscMPIInt}}),
               dm, nranks_, ranks_,
              )

	nranks = nranks_[]

	return nranks
end 

"""
	compatible::PetscBool,set::PetscBool = DMGetCompatibility(petsclib::PetscLibType,dm1::PetscDM, dm2::PetscDM) 
determine if two `DM`s are compatible

Collective

Input Parameters:
- `dm1` - the first `DM`
- `dm2` - the second `DM`

Output Parameters:
- `compatible` - whether or not the two `DM`s are compatible
- `set`        - whether or not the compatible value was actually determined and set

Level: advanced

Notes:
Two `DM`s are deemed compatible if they represent the same parallel decomposition
of the same topology. This implies that the section (field data) on one
"makes sense" with respect to the topology and parallel decomposition of the other.
Loosely speaking, compatible `DM`s represent the same domain and parallel
decomposition, but hold different data.

Typically, one would confirm compatibility if intending to simultaneously iterate
over a pair of vectors obtained from different `DM`s.

For example, two `DMDA` objects are compatible if they have the same local
and global sizes and the same stencil width. They can have different numbers
of degrees of freedom per node. Thus, one could use the node numbering from
either `DM` in bounds for a loop over vectors derived from either `DM`.

Consider the operation of summing data living on a 2-dof `DMDA` to data living
on a 1-dof `DMDA`, which should be compatible, as in the following snippet.
-vb
-..
PetscCall(DMGetCompatibility(da1,da2,&compatible,&set));
if (set && compatible)  {
PetscCall(DMDAVecGetArrayDOF(da1,vec1,&arr1));
PetscCall(DMDAVecGetArrayDOF(da2,vec2,&arr2));
PetscCall(DMDAGetCorners(da1,&x,&y,NULL,&m,&n,NULL));
for (j=y; j<y+n; ++j) {
for (i=x; i<x+m, ++i) {
arr1[j][i][0] = arr2[j][i][0] + arr2[j][i][1];
}
}
PetscCall(DMDAVecRestoreArrayDOF(da1,vec1,&arr1));
PetscCall(DMDAVecRestoreArrayDOF(da2,vec2,&arr2));
} else {
SETERRQ(PetscObjectComm((PetscObject)da1,PETSC_ERR_ARG_INCOMP,"DMDA objects incompatible");
}
-..
-ve

Checking compatibility might be expensive for a given implementation of `DM`,
or might be impossible to unambiguously confirm or deny. For this reason,
this function may decline to determine compatibility, and hence users should
always check the "set" output parameter.

A `DM` is always compatible with itself.

In the current implementation, `DM`s which live on "unequal" communicators
(MPI_UNEQUAL in the terminology of MPI_Comm_compare()) are always deemed
incompatible.

This function is labeled "Collective," as information about all subdomains
is required on each rank. However, in `DM` implementations which store all this
information locally, this function may be merely "Logically Collective".

Developer Note:
Compatibility is assumed to be a symmetric concept; `DM` A is compatible with `DM` B
iff B is compatible with A. Thus, this function checks the implementations
of both dm and dmc (if they are of different types), attempting to determine
compatibility. It is left to `DM` implementers to ensure that symmetry is
preserved. The simplest way to do this is, when implementing type-specific
logic for this function, is to check for existing logic in the implementation
of other `DM` types and let *set = PETSC_FALSE if found.

See also: 
=== 
`DM`, `DMDACreateCompatibleDMDA()`, `DMStagCreateCompatibleDMStag()`

# External Links
$(_doc_external("Dm/DMGetCompatibility"))
"""
function DMGetCompatibility(petsclib::PetscLibType, dm1::PetscDM, dm2::PetscDM) end

@for_petsc function DMGetCompatibility(petsclib::$UnionPetscLib, dm1::PetscDM, dm2::PetscDM )
	compatible_ = Ref{PetscBool}()
	set_ = Ref{PetscBool}()

    @chk ccall(
               (:DMGetCompatibility, $petsc_library),
               PetscErrorCode,
               (CDM, CDM, Ptr{PetscBool}, Ptr{PetscBool}),
               dm1, dm2, compatible_, set_,
              )

	compatible = compatible_[]
	set = set_[]

	return compatible,set
end 

"""
	DMMonitorSet(petsclib::PetscLibType,dm::PetscDM, f::external, mctx::Cvoid, monitordestroy::PetscCtxDestroyFn) 
Sets an additional monitor function that is to be used after a solve to monitor discretization performance.

Logically Collective

Input Parameters:
- `dm`             - the `DM`
- `f`              - the monitor function
- `mctx`           - [optional] user-defined context for private data for the monitor routine (use `NULL` if no context is desired)
- `monitordestroy` - [optional] routine that frees monitor context (may be `NULL`), see `PetscCtxDestroyFn` for the calling sequence

Options Database Key:
- `-dm_monitor_cancel` - cancels all monitors that have been hardwired into a code by calls to `DMMonitorSet()`, but
does not cancel those set via the options database.

Level: intermediate

Note:
Several different monitoring routines may be set by calling
`DMMonitorSet()` multiple times or with `DMMonitorSetFromOptions()`; all will be called in the
order in which they were set.

Fortran Note:
Only a single monitor function can be set for each `DM` object

Developer Note:
This API has a generic name but seems specific to a very particular aspect of the use of `DM`

See also: 
=== 
`DM`, `DMMonitorCancel()`, `DMMonitorSetFromOptions()`, `DMMonitor()`, `PetscCtxDestroyFn`

# External Links
$(_doc_external("Dm/DMMonitorSet"))
"""
function DMMonitorSet(petsclib::PetscLibType, dm::PetscDM, f::external, mctx::Cvoid, monitordestroy::PetscCtxDestroyFn) end

@for_petsc function DMMonitorSet(petsclib::$UnionPetscLib, dm::PetscDM, f::external, mctx::Cvoid, monitordestroy::PetscCtxDestroyFn )

    @chk ccall(
               (:DMMonitorSet, $petsc_library),
               PetscErrorCode,
               (CDM, external, Ptr{Cvoid}, Ptr{PetscCtxDestroyFn}),
               dm, f, mctx, monitordestroy,
              )


	return nothing
end 

"""
	DMMonitorCancel(petsclib::PetscLibType,dm::PetscDM) 
Clears all the monitor functions for a `DM` object.

Logically Collective

Input Parameter:
- `dm` - the DM

Options Database Key:
- `-dm_monitor_cancel` - cancels all monitors that have been hardwired
into a code by calls to `DMonitorSet()`, but does not cancel those
set via the options database

Level: intermediate

Note:
There is no way to clear one specific monitor from a `DM` object.

See also: 
=== 
`DM`, `DMMonitorSet()`, `DMMonitorSetFromOptions()`, `DMMonitor()`

# External Links
$(_doc_external("Dm/DMMonitorCancel"))
"""
function DMMonitorCancel(petsclib::PetscLibType, dm::PetscDM) end

@for_petsc function DMMonitorCancel(petsclib::$UnionPetscLib, dm::PetscDM )

    @chk ccall(
               (:DMMonitorCancel, $petsc_library),
               PetscErrorCode,
               (CDM,),
               dm,
              )


	return nothing
end 

"""
	flg::PetscBool = DMMonitorSetFromOptions(petsclib::PetscLibType,dm::PetscDM, name::String, help::String, manual::String, monitor::external, monitorsetup::external) 
Sets a monitor function and viewer appropriate for the type indicated by the user

Collective

Input Parameters:
- `dm`           - `DM` object you wish to monitor
- `name`         - the monitor type one is seeking
- `help`         - message indicating what monitoring is done
- `manual`       - manual page for the monitor
- `monitor`      - the monitor function, this must use a `PetscViewerFormat` as its context
- `monitorsetup` - a function that is called once ONLY if the user selected this monitor that may set additional features of the `DM` or `PetscViewer` objects

Output Parameter:
- `flg` - Flag set if the monitor was created

Level: developer

See also: 
=== 
`DM`, `PetscOptionsCreateViewer()`, `PetscOptionsGetReal()`, `PetscOptionsHasName()`, `PetscOptionsGetString()`,
`PetscOptionsGetIntArray()`, `PetscOptionsGetRealArray()`, `PetscOptionsBool()`
`PetscOptionsInt()`, `PetscOptionsString()`, `PetscOptionsReal()`,
`PetscOptionsName()`, `PetscOptionsBegin()`, `PetscOptionsEnd()`, `PetscOptionsHeadBegin()`,
`PetscOptionsStringArray()`, `PetscOptionsRealArray()`, `PetscOptionsScalar()`,
`PetscOptionsBoolGroupBegin()`, `PetscOptionsBoolGroup()`, `PetscOptionsBoolGroupEnd()`,
`PetscOptionsFList()`, `PetscOptionsEList()`, `DMMonitor()`, `DMMonitorSet()`

# External Links
$(_doc_external("Dm/DMMonitorSetFromOptions"))
"""
function DMMonitorSetFromOptions(petsclib::PetscLibType, dm::PetscDM, name::String, help::String, manual::String, monitor::external, monitorsetup::external) end

@for_petsc function DMMonitorSetFromOptions(petsclib::$UnionPetscLib, dm::PetscDM, name::String, help::String, manual::String, monitor::external, monitorsetup::external )
	flg_ = Ref{PetscBool}()

    @chk ccall(
               (:DMMonitorSetFromOptions, $petsc_library),
               PetscErrorCode,
               (CDM, Ptr{Cchar}, Ptr{Cchar}, Ptr{Cchar}, external, external, Ptr{PetscBool}),
               dm, name, help, manual, monitor, monitorsetup, flg_,
              )

	flg = flg_[]

	return flg
end 

"""
	DMMonitor(petsclib::PetscLibType,dm::PetscDM) 
runs the user provided monitor routines, if they exist

Collective

Input Parameter:
- `dm` - The `DM`

Level: developer

Developer Note:
Note should indicate when during the life of the `DM` the monitor is run. It appears to be
related to the discretization process seems rather specialized since some `DM` have no
concept of discretization.

See also: 
=== 
`DM`, `DMMonitorSet()`, `DMMonitorSetFromOptions()`

# External Links
$(_doc_external("Dm/DMMonitor"))
"""
function DMMonitor(petsclib::PetscLibType, dm::PetscDM) end

@for_petsc function DMMonitor(petsclib::$UnionPetscLib, dm::PetscDM )

    @chk ccall(
               (:DMMonitor, $petsc_library),
               PetscErrorCode,
               (CDM,),
               dm,
              )


	return nothing
end 

"""
	DMComputeError(petsclib::PetscLibType,dm::PetscDM, sol::PetscVec, errors::Vector{PetscReal}, errorVec::PetscVec) 
Computes the error assuming the user has provided the exact solution functions

Collective

Input Parameters:
- `dm`  - The `DM`
- `sol` - The solution vector

Input/Output Parameter:
- `errors` - An array of length Nf, the number of fields, or `NULL` for no output; on output
contains the error in each field

Output Parameter:
- `errorVec` - A vector to hold the cellwise error (may be `NULL`)

Level: developer

Note:
The exact solutions come from the `PetscDS` object, and the time comes from `DMGetOutputSequenceNumber()`.

See also: 
=== 
`DM`, `DMMonitorSet()`, `DMGetRegionNumDS()`, `PetscDSGetExactSolution()`, `DMGetOutputSequenceNumber()`

# External Links
$(_doc_external("Dm/DMComputeError"))
"""
function DMComputeError(petsclib::PetscLibType, dm::PetscDM, sol::PetscVec, errors::Vector{PetscReal}, errorVec::PetscVec) end

@for_petsc function DMComputeError(petsclib::$UnionPetscLib, dm::PetscDM, sol::PetscVec, errors::Vector{$PetscReal}, errorVec::PetscVec )
	errorVec_ = Ref(errorVec.ptr)

    @chk ccall(
               (:DMComputeError, $petsc_library),
               PetscErrorCode,
               (CDM, CVec, Ptr{$PetscReal}, Ptr{CVec}),
               dm, sol, errors, errorVec_,
              )

	errorVec.ptr = C_NULL

	return nothing
end 

"""
	numAux::PetscInt = DMGetNumAuxiliaryVec(petsclib::PetscLibType,dm::PetscDM) 
Get the number of auxiliary vectors associated with this `DM`

Not Collective

Input Parameter:
- `dm` - The `DM`

Output Parameter:
- `numAux` - The number of auxiliary data vectors

Level: advanced

See also: 
=== 
`DM`, `DMClearAuxiliaryVec()`, `DMSetAuxiliaryVec()`, `DMGetAuxiliaryLabels()`, `DMGetAuxiliaryVec()`

# External Links
$(_doc_external("Dm/DMGetNumAuxiliaryVec"))
"""
function DMGetNumAuxiliaryVec(petsclib::PetscLibType, dm::PetscDM) end

@for_petsc function DMGetNumAuxiliaryVec(petsclib::$UnionPetscLib, dm::PetscDM )
	numAux_ = Ref{$PetscInt}()

    @chk ccall(
               (:DMGetNumAuxiliaryVec, $petsc_library),
               PetscErrorCode,
               (CDM, Ptr{$PetscInt}),
               dm, numAux_,
              )

	numAux = numAux_[]

	return numAux
end 

"""
	DMGetAuxiliaryVec(petsclib::PetscLibType,dm::PetscDM, label::DMLabel, value::PetscInt, part::PetscInt, aux::PetscVec) 
Get the auxiliary vector for region specified by the given label and value, and equation part

Not Collective

Input Parameters:
- `dm`    - The `DM`
- `label` - The `DMLabel`
- `value` - The label value indicating the region
- `part`  - The equation part, or 0 if unused

Output Parameter:
- `aux` - The `Vec` holding auxiliary field data

Level: advanced

Note:
If no auxiliary vector is found for this (label, value), (`NULL`, 0, 0) is checked as well.

See also: 
=== 
`DM`, `DMClearAuxiliaryVec()`, `DMSetAuxiliaryVec()`, `DMGetNumAuxiliaryVec()`, `DMGetAuxiliaryLabels()`

# External Links
$(_doc_external("Dm/DMGetAuxiliaryVec"))
"""
function DMGetAuxiliaryVec(petsclib::PetscLibType, dm::PetscDM, label::DMLabel, value::PetscInt, part::PetscInt, aux::PetscVec) end

@for_petsc function DMGetAuxiliaryVec(petsclib::$UnionPetscLib, dm::PetscDM, label::DMLabel, value::$PetscInt, part::$PetscInt, aux::PetscVec )
	aux_ = Ref(aux.ptr)

    @chk ccall(
               (:DMGetAuxiliaryVec, $petsc_library),
               PetscErrorCode,
               (CDM, DMLabel, $PetscInt, $PetscInt, Ptr{CVec}),
               dm, label, value, part, aux_,
              )

	aux.ptr = C_NULL

	return nothing
end 

"""
	DMSetAuxiliaryVec(petsclib::PetscLibType,dm::PetscDM, label::DMLabel, value::PetscInt, part::PetscInt, aux::PetscVec) 
Set an auxiliary vector for region specified by the given label and value, and equation part

Not Collective because auxiliary vectors are not parallel

Input Parameters:
- `dm`    - The `DM`
- `label` - The `DMLabel`
- `value` - The label value indicating the region
- `part`  - The equation part, or 0 if unused
- `aux`   - The `Vec` holding auxiliary field data

Level: advanced

See also: 
=== 
`DM`, `DMClearAuxiliaryVec()`, `DMGetAuxiliaryVec()`, `DMGetAuxiliaryLabels()`, `DMCopyAuxiliaryVec()`

# External Links
$(_doc_external("Dm/DMSetAuxiliaryVec"))
"""
function DMSetAuxiliaryVec(petsclib::PetscLibType, dm::PetscDM, label::DMLabel, value::PetscInt, part::PetscInt, aux::PetscVec) end

@for_petsc function DMSetAuxiliaryVec(petsclib::$UnionPetscLib, dm::PetscDM, label::DMLabel, value::$PetscInt, part::$PetscInt, aux::PetscVec )

    @chk ccall(
               (:DMSetAuxiliaryVec, $petsc_library),
               PetscErrorCode,
               (CDM, DMLabel, $PetscInt, $PetscInt, CVec),
               dm, label, value, part, aux,
              )


	return nothing
end 

"""
	values::Vector{PetscInt},parts::Vector{PetscInt} = DMGetAuxiliaryLabels(petsclib::PetscLibType,dm::PetscDM, labels::Vector{DMLabel}) 
Get the labels, values, and parts for all auxiliary vectors in this `DM`

Not Collective

Input Parameter:
- `dm` - The `DM`

Output Parameters:
- `labels` - The `DMLabel`s for each `Vec`
- `values` - The label values for each `Vec`
- `parts`  - The equation parts for each `Vec`

Level: advanced

Note:
The arrays passed in must be at least as large as `DMGetNumAuxiliaryVec()`.

See also: 
=== 
`DM`, `DMClearAuxiliaryVec()`, `DMGetNumAuxiliaryVec()`, `DMGetAuxiliaryVec()`, `DMSetAuxiliaryVec()`, `DMCopyAuxiliaryVec()`

# External Links
$(_doc_external("Dm/DMGetAuxiliaryLabels"))
"""
function DMGetAuxiliaryLabels(petsclib::PetscLibType, dm::PetscDM, labels::Vector{DMLabel}) end

@for_petsc function DMGetAuxiliaryLabels(petsclib::$UnionPetscLib, dm::PetscDM, labels::Vector{DMLabel} )
	values = Vector{$PetscInt}(undef, ni);  # CHECK SIZE!!
	parts = Vector{$PetscInt}(undef, ni);  # CHECK SIZE!!

    @chk ccall(
               (:DMGetAuxiliaryLabels, $petsc_library),
               PetscErrorCode,
               (CDM, Ptr{DMLabel}, Ptr{$PetscInt}, Ptr{$PetscInt}),
               dm, labels, values, parts,
              )


	return values,parts
end 

"""
	DMCopyAuxiliaryVec(petsclib::PetscLibType,dm::PetscDM, dmNew::PetscDM) 
Copy the auxiliary vector data on a `DM` to a new `DM`

Not Collective

Input Parameter:
- `dm` - The `DM`

Output Parameter:
- `dmNew` - The new `DM`, now with the same auxiliary data

Level: advanced

Note:
This is a shallow copy of the auxiliary vectors

See also: 
=== 
`DM`, `DMClearAuxiliaryVec()`, `DMGetNumAuxiliaryVec()`, `DMGetAuxiliaryVec()`, `DMSetAuxiliaryVec()`

# External Links
$(_doc_external("Dm/DMCopyAuxiliaryVec"))
"""
function DMCopyAuxiliaryVec(petsclib::PetscLibType, dm::PetscDM, dmNew::PetscDM) end

@for_petsc function DMCopyAuxiliaryVec(petsclib::$UnionPetscLib, dm::PetscDM, dmNew::PetscDM )

    @chk ccall(
               (:DMCopyAuxiliaryVec, $petsc_library),
               PetscErrorCode,
               (CDM, CDM),
               dm, dmNew,
              )


	return nothing
end 

"""
	DMClearAuxiliaryVec(petsclib::PetscLibType,dm::PetscDM) 
Destroys the auxiliary vector information and creates a new empty one

Not Collective

Input Parameter:
- `dm` - The `DM`

Level: advanced

See also: 
=== 
`DM`, `DMCopyAuxiliaryVec()`, `DMGetNumAuxiliaryVec()`, `DMGetAuxiliaryVec()`, `DMSetAuxiliaryVec()`

# External Links
$(_doc_external("Dm/DMClearAuxiliaryVec"))
"""
function DMClearAuxiliaryVec(petsclib::PetscLibType, dm::PetscDM) end

@for_petsc function DMClearAuxiliaryVec(petsclib::$UnionPetscLib, dm::PetscDM )

    @chk ccall(
               (:DMClearAuxiliaryVec, $petsc_library),
               PetscErrorCode,
               (CDM,),
               dm,
              )


	return nothing
end 

"""
	ornt::PetscInt,found::PetscBool = DMPolytopeMatchOrientation(petsclib::PetscLibType,ct::DMPolytopeType, sourceCone::Vector{PetscInt}, targetCone::Vector{PetscInt}) 
Determine an orientation (transformation) that takes the source face arrangement to the target face arrangement

Not Collective

Input Parameters:
- `ct`         - The `DMPolytopeType`
- `sourceCone` - The source arrangement of faces
- `targetCone` - The target arrangement of faces

Output Parameters:
- `ornt`  - The orientation (transformation) which will take the source arrangement to the target arrangement
- `found` - Flag indicating that a suitable orientation was found

Level: advanced

Note:
An arrangement is a face order combined with an orientation for each face

Each orientation (transformation) is labeled with an integer from negative `DMPolytopeTypeGetNumArrangements(ct)`/2 to `DMPolytopeTypeGetNumArrangements(ct)`/2
that labels each arrangement (face ordering plus orientation for each face).

See `DMPolytopeMatchVertexOrientation()` to find a new vertex orientation that takes the source vertex arrangement to the target vertex arrangement

See also: 
=== 
`DM`, `DMPolytopeGetOrientation()`, `DMPolytopeMatchVertexOrientation()`, `DMPolytopeGetVertexOrientation()`

# External Links
$(_doc_external("Dm/DMPolytopeMatchOrientation"))
"""
function DMPolytopeMatchOrientation(petsclib::PetscLibType, ct::DMPolytopeType, sourceCone::Vector{PetscInt}, targetCone::Vector{PetscInt}) end

@for_petsc function DMPolytopeMatchOrientation(petsclib::$UnionPetscLib, ct::DMPolytopeType, sourceCone::Vector{$PetscInt}, targetCone::Vector{$PetscInt} )
	ornt_ = Ref{$PetscInt}()
	found_ = Ref{PetscBool}()

    @chk ccall(
               (:DMPolytopeMatchOrientation, $petsc_library),
               PetscErrorCode,
               (DMPolytopeType, Ptr{$PetscInt}, Ptr{$PetscInt}, Ptr{$PetscInt}, Ptr{PetscBool}),
               ct, sourceCone, targetCone, ornt_, found_,
              )

	ornt = ornt_[]
	found = found_[]

	return ornt,found
end 

"""
	ornt::PetscInt = DMPolytopeGetOrientation(petsclib::PetscLibType,ct::DMPolytopeType, sourceCone::Vector{PetscInt}, targetCone::Vector{PetscInt}) 
Determine an orientation (transformation) that takes the source face arrangement to the target face arrangement

Not Collective

Input Parameters:
- `ct`         - The `DMPolytopeType`
- `sourceCone` - The source arrangement of faces
- `targetCone` - The target arrangement of faces

Output Parameter:
- `ornt` - The orientation (transformation) which will take the source arrangement to the target arrangement

Level: advanced

Note:
This function is the same as `DMPolytopeMatchOrientation()` except it will generate an error if no suitable orientation can be found.

Developer Note:
It is unclear why this function needs to exist since one can simply call `DMPolytopeMatchOrientation()` and error if none is found

See also: 
=== 
`DM`, `DMPolytopeType`, `DMPolytopeMatchOrientation()`, `DMPolytopeGetVertexOrientation()`, `DMPolytopeMatchVertexOrientation()`

# External Links
$(_doc_external("Dm/DMPolytopeGetOrientation"))
"""
function DMPolytopeGetOrientation(petsclib::PetscLibType, ct::DMPolytopeType, sourceCone::Vector{PetscInt}, targetCone::Vector{PetscInt}) end

@for_petsc function DMPolytopeGetOrientation(petsclib::$UnionPetscLib, ct::DMPolytopeType, sourceCone::Vector{$PetscInt}, targetCone::Vector{$PetscInt} )
	ornt_ = Ref{$PetscInt}()

    @chk ccall(
               (:DMPolytopeGetOrientation, $petsc_library),
               PetscErrorCode,
               (DMPolytopeType, Ptr{$PetscInt}, Ptr{$PetscInt}, Ptr{$PetscInt}),
               ct, sourceCone, targetCone, ornt_,
              )

	ornt = ornt_[]

	return ornt
end 

"""
	ornt::PetscInt,found::PetscBool = DMPolytopeMatchVertexOrientation(petsclib::PetscLibType,ct::DMPolytopeType, sourceVert::Vector{PetscInt}, targetVert::Vector{PetscInt}) 
Determine an orientation (transformation) that takes the source vertex arrangement to the target vertex arrangement

Not Collective

Input Parameters:
- `ct`         - The `DMPolytopeType`
- `sourceVert` - The source arrangement of vertices
- `targetVert` - The target arrangement of vertices

Output Parameters:
- `ornt`  - The orientation (transformation) which will take the source arrangement to the target arrangement
- `found` - Flag indicating that a suitable orientation was found

Level: advanced

Notes:
An arrangement is a vertex order

Each orientation (transformation) is labeled with an integer from negative `DMPolytopeTypeGetNumArrangements(ct)`/2 to `DMPolytopeTypeGetNumArrangements(ct)`/2
that labels each arrangement (vertex ordering).

See `DMPolytopeMatchOrientation()` to find a new face orientation that takes the source face arrangement to the target face arrangement

See also: 
=== 
`DM`, `DMPolytopeType`, `DMPolytopeGetOrientation()`, `DMPolytopeMatchOrientation()`, `DMPolytopeTypeGetNumVertices()`, `DMPolytopeTypeGetVertexArrangement()`

# External Links
$(_doc_external("Dm/DMPolytopeMatchVertexOrientation"))
"""
function DMPolytopeMatchVertexOrientation(petsclib::PetscLibType, ct::DMPolytopeType, sourceVert::Vector{PetscInt}, targetVert::Vector{PetscInt}) end

@for_petsc function DMPolytopeMatchVertexOrientation(petsclib::$UnionPetscLib, ct::DMPolytopeType, sourceVert::Vector{$PetscInt}, targetVert::Vector{$PetscInt} )
	ornt_ = Ref{$PetscInt}()
	found_ = Ref{PetscBool}()

    @chk ccall(
               (:DMPolytopeMatchVertexOrientation, $petsc_library),
               PetscErrorCode,
               (DMPolytopeType, Ptr{$PetscInt}, Ptr{$PetscInt}, Ptr{$PetscInt}, Ptr{PetscBool}),
               ct, sourceVert, targetVert, ornt_, found_,
              )

	ornt = ornt_[]
	found = found_[]

	return ornt,found
end 

"""
	ornt::PetscInt = DMPolytopeGetVertexOrientation(petsclib::PetscLibType,ct::DMPolytopeType, sourceCone::Vector{PetscInt}, targetCone::Vector{PetscInt}) 
Determine an orientation (transformation) that takes the source vertex arrangement to the target vertex arrangement

Not Collective

Input Parameters:
- `ct`         - The `DMPolytopeType`
- `sourceCone` - The source arrangement of vertices
- `targetCone` - The target arrangement of vertices

Output Parameter:
- `ornt` - The orientation (transformation) which will take the source arrangement to the target arrangement

Level: advanced

Note:
This function is the same as `DMPolytopeMatchVertexOrientation()` except it errors if not orientation is possible.

Developer Note:
It is unclear why this function needs to exist since one can simply call `DMPolytopeMatchVertexOrientation()` and error if none is found

See also: 
=== 
`DM`, `DMPolytopeType`, `DMPolytopeMatchVertexOrientation()`, `DMPolytopeGetOrientation()`

# External Links
$(_doc_external("Dm/DMPolytopeGetVertexOrientation"))
"""
function DMPolytopeGetVertexOrientation(petsclib::PetscLibType, ct::DMPolytopeType, sourceCone::Vector{PetscInt}, targetCone::Vector{PetscInt}) end

@for_petsc function DMPolytopeGetVertexOrientation(petsclib::$UnionPetscLib, ct::DMPolytopeType, sourceCone::Vector{$PetscInt}, targetCone::Vector{$PetscInt} )
	ornt_ = Ref{$PetscInt}()

    @chk ccall(
               (:DMPolytopeGetVertexOrientation, $petsc_library),
               PetscErrorCode,
               (DMPolytopeType, Ptr{$PetscInt}, Ptr{$PetscInt}, Ptr{$PetscInt}),
               ct, sourceCone, targetCone, ornt_,
              )

	ornt = ornt_[]

	return ornt
end 

"""
	inside::PetscBool = DMPolytopeInCellTest(petsclib::PetscLibType,ct::DMPolytopeType, point::Vector{PetscReal}) 
Check whether a point lies inside the reference cell of given type

Not Collective

Input Parameters:
- `ct`    - The `DMPolytopeType`
- `point` - Coordinates of the point

Output Parameter:
- `inside` - Flag indicating whether the point is inside the reference cell of given type

Level: advanced

See also: 
=== 
`DM`, `DMPolytopeType`, `DMLocatePoints()`

# External Links
$(_doc_external("Dm/DMPolytopeInCellTest"))
"""
function DMPolytopeInCellTest(petsclib::PetscLibType, ct::DMPolytopeType, point::Vector{PetscReal}) end

@for_petsc function DMPolytopeInCellTest(petsclib::$UnionPetscLib, ct::DMPolytopeType, point::Vector{$PetscReal} )
	inside_ = Ref{PetscBool}()

    @chk ccall(
               (:DMPolytopeInCellTest, $petsc_library),
               PetscErrorCode,
               (DMPolytopeType, Ptr{$PetscReal}, Ptr{PetscBool}),
               ct, point, inside_,
              )

	inside = inside_[]

	return inside
end 

"""
	DMReorderSectionSetDefault(petsclib::PetscLibType,dm::PetscDM, reorder::DMReorderDefaultFlag) 
Set flag indicating whether the local section should be reordered by default

Logically collective

Input Parameters:
- `dm`      - The DM
- `reorder` - Flag for reordering

Level: intermediate

-seealso: `DMReorderSectionGetDefault()`

# External Links
$(_doc_external("Dm/DMReorderSectionSetDefault"))
"""
function DMReorderSectionSetDefault(petsclib::PetscLibType, dm::PetscDM, reorder::DMReorderDefaultFlag) end

@for_petsc function DMReorderSectionSetDefault(petsclib::$UnionPetscLib, dm::PetscDM, reorder::DMReorderDefaultFlag )

    @chk ccall(
               (:DMReorderSectionSetDefault, $petsc_library),
               PetscErrorCode,
               (CDM, DMReorderDefaultFlag),
               dm, reorder,
              )


	return nothing
end 

"""
	DMReorderSectionGetDefault(petsclib::PetscLibType,dm::PetscDM, reorder::DMReorderDefaultFlag) 
Get flag indicating whether the local section should be reordered by default

Not collective

Input Parameter:
- `dm` - The DM

Output Parameter:
- `reorder` - Flag for reordering

Level: intermediate

-seealso: `DMReorderSetDefault()`

# External Links
$(_doc_external("Dm/DMReorderSectionGetDefault"))
"""
function DMReorderSectionGetDefault(petsclib::PetscLibType, dm::PetscDM, reorder::DMReorderDefaultFlag) end

@for_petsc function DMReorderSectionGetDefault(petsclib::$UnionPetscLib, dm::PetscDM, reorder::DMReorderDefaultFlag )

    @chk ccall(
               (:DMReorderSectionGetDefault, $petsc_library),
               PetscErrorCode,
               (CDM, Ptr{DMReorderDefaultFlag}),
               dm, reorder,
              )


	return nothing
end 

"""
	DMReorderSectionSetType(petsclib::PetscLibType,dm::PetscDM, reorder::MatOrderingType) 
Set the type of local section reordering

Logically collective

Input Parameters:
- `dm`      - The DM
- `reorder` - The reordering method

Level: intermediate

-seealso: `DMReorderSectionGetType()`, `DMReorderSectionSetDefault()`

# External Links
$(_doc_external("Dm/DMReorderSectionSetType"))
"""
function DMReorderSectionSetType(petsclib::PetscLibType, dm::PetscDM, reorder::MatOrderingType) end

@for_petsc function DMReorderSectionSetType(petsclib::$UnionPetscLib, dm::PetscDM, reorder::MatOrderingType )

    @chk ccall(
               (:DMReorderSectionSetType, $petsc_library),
               PetscErrorCode,
               (CDM, MatOrderingType),
               dm, reorder,
              )


	return nothing
end 

"""
	reorder::MatOrderingType = DMReorderSectionGetType(petsclib::PetscLibType,dm::PetscDM) 
Get the reordering type for the local section

Not collective

Input Parameter:
- `dm` - The DM

Output Parameter:
- `reorder` - The reordering method

Level: intermediate

-seealso: `DMReorderSetDefault()`, `DMReorderSectionGetDefault()`

# External Links
$(_doc_external("Dm/DMReorderSectionGetType"))
"""
function DMReorderSectionGetType(petsclib::PetscLibType, dm::PetscDM) end

@for_petsc function DMReorderSectionGetType(petsclib::$UnionPetscLib, dm::PetscDM )
	reorder_ = Ref{MatOrderingType}()

    @chk ccall(
               (:DMReorderSectionGetType, $petsc_library),
               PetscErrorCode,
               (CDM, Ptr{MatOrderingType}),
               dm, reorder_,
              )

	reorder = unsafe_string(reorder_[])

	return reorder
end 

"""
	DMGetLocalVector(petsclib::PetscLibType,dm::PetscDM, g::PetscVec) 
Gets a PETSc vector that may be used with the `DM` local routines. This vector has spaces for the ghost values.

Not Collective

Input Parameter:
- `dm` - the `DM`

Output Parameter:
- `g` - the local vector

Level: beginner

-seealso: `DM`, `DMCreateGlobalVector()`, `VecDuplicate()`, `VecDuplicateVecs()`,
`DMDACreate1d()`, `DMDACreate2d()`, `DMDACreate3d()`, `DMGlobalToLocalBegin()`,
`DMGlobalToLocalEnd()`, `DMLocalToGlobalBegin()`, `DMCreateLocalVector()`, `DMRestoreLocalVector()`,
`VecStrideMax()`, `VecStrideMin()`, `VecStrideNorm()`, `DMClearLocalVectors()`, `DMGetNamedGlobalVector()`, `DMGetNamedLocalVector()`

# External Links
$(_doc_external("Dm/DMGetLocalVector"))
"""
function DMGetLocalVector(petsclib::PetscLibType, dm::PetscDM, g::PetscVec) end

@for_petsc function DMGetLocalVector(petsclib::$UnionPetscLib, dm::PetscDM, g::PetscVec )
	g_ = Ref(g.ptr)

    @chk ccall(
               (:DMGetLocalVector, $petsc_library),
               PetscErrorCode,
               (CDM, Ptr{CVec}),
               dm, g_,
              )

	g.ptr = C_NULL

	return nothing
end 

"""
	DMRestoreLocalVector(petsclib::PetscLibType,dm::PetscDM, g::PetscVec) 
Returns a PETSc vector that was
obtained from `DMGetLocalVector()`. Do not use with vector obtained via
`DMCreateLocalVector()`.

Not Collective

Input Parameters:
- `dm` - the `DM`
- `g`  - the local vector

Level: beginner

-seealso: `DM`, `DMCreateGlobalVector()`, `VecDuplicate()`, `VecDuplicateVecs()`,
`DMDACreate1d()`, `DMDACreate2d()`, `DMDACreate3d()`, `DMGlobalToLocalBegin()`,
`DMGlobalToLocalEnd()`, `DMLocalToGlobalBegin()`, `DMCreateLocalVector()`, `DMGetLocalVector()`, `DMClearLocalVectors()`

# External Links
$(_doc_external("Dm/DMRestoreLocalVector"))
"""
function DMRestoreLocalVector(petsclib::PetscLibType, dm::PetscDM, g::PetscVec) end

@for_petsc function DMRestoreLocalVector(petsclib::$UnionPetscLib, dm::PetscDM, g::PetscVec )
	g_ = Ref(g.ptr)

    @chk ccall(
               (:DMRestoreLocalVector, $petsc_library),
               PetscErrorCode,
               (CDM, Ptr{CVec}),
               dm, g_,
              )

	g.ptr = C_NULL

	return nothing
end 

"""
	DMGetGlobalVector(petsclib::PetscLibType,dm::PetscDM, g::PetscVec) 
Gets a PETSc vector that may be used with the `DM` global routines.

Collective

Input Parameter:
- `dm` - the `DM`

Output Parameter:
- `g` - the global vector

Level: beginner

-seealso: `DM`, `DMCreateGlobalVector()`, `VecDuplicate()`, `VecDuplicateVecs()`,
`DMDACreate1d()`, `DMDACreate2d()`, `DMDACreate3d()`, `DMGlobalToLocalBegin()`,
`DMGlobalToLocalEnd()`, `DMLocalToGlobalBegin()`, `DMCreateLocalVector()`, `DMRestoreLocalVector()`
`VecStrideMax()`, `VecStrideMin()`, `VecStrideNorm()`, `DMClearGlobalVectors()`, `DMGetNamedGlobalVector()`, `DMGetNamedLocalVector()`

# External Links
$(_doc_external("Dm/DMGetGlobalVector"))
"""
function DMGetGlobalVector(petsclib::PetscLibType, dm::PetscDM, g::PetscVec) end

@for_petsc function DMGetGlobalVector(petsclib::$UnionPetscLib, dm::PetscDM, g::PetscVec )
	g_ = Ref(g.ptr)

    @chk ccall(
               (:DMGetGlobalVector, $petsc_library),
               PetscErrorCode,
               (CDM, Ptr{CVec}),
               dm, g_,
              )

	g.ptr = C_NULL

	return nothing
end 

"""
	DMClearGlobalVectors(petsclib::PetscLibType,dm::PetscDM) 
Destroys all the global vectors that have been created for `DMGetGlobalVector()` calls in this `DM`

Collective

Input Parameter:
- `dm` - the `DM`

Level: developer

-seealso: `DM`, `DMCreateGlobalVector()`, `VecDuplicate()`, `VecDuplicateVecs()`,
`DMDACreate1d()`, `DMDACreate2d()`, `DMDACreate3d()`, `DMGlobalToLocalBegin()`,
`DMGlobalToLocalEnd()`, `DMLocalToGlobalBegin()`, `DMCreateLocalVector()`, `DMRestoreLocalVector()`
`VecStrideMax()`, `VecStrideMin()`, `VecStrideNorm()`, `DMClearLocalVectors()`

# External Links
$(_doc_external("Dm/DMClearGlobalVectors"))
"""
function DMClearGlobalVectors(petsclib::PetscLibType, dm::PetscDM) end

@for_petsc function DMClearGlobalVectors(petsclib::$UnionPetscLib, dm::PetscDM )

    @chk ccall(
               (:DMClearGlobalVectors, $petsc_library),
               PetscErrorCode,
               (CDM,),
               dm,
              )


	return nothing
end 

"""
	DMClearLocalVectors(petsclib::PetscLibType,dm::PetscDM) 
Destroys all the local vectors that have been created for `DMGetLocalVector()` calls in this `DM`

Collective

Input Parameter:
- `dm` - the `DM`

Level: developer

-seealso: `DM`, `DMCreateLocalVector()`, `VecDuplicate()`, `VecDuplicateVecs()`,
`DMDACreate1d()`, `DMDACreate2d()`, `DMDACreate3d()`, `DMLocalToLocalBegin()`,
`DMLocalToLocalEnd()`, `DMRestoreLocalVector()`
`VecStrideMax()`, `VecStrideMin()`, `VecStrideNorm()`, `DMClearGlobalVectors()`

# External Links
$(_doc_external("Dm/DMClearLocalVectors"))
"""
function DMClearLocalVectors(petsclib::PetscLibType, dm::PetscDM) end

@for_petsc function DMClearLocalVectors(petsclib::$UnionPetscLib, dm::PetscDM )

    @chk ccall(
               (:DMClearLocalVectors, $petsc_library),
               PetscErrorCode,
               (CDM,),
               dm,
              )


	return nothing
end 

"""
	DMRestoreGlobalVector(petsclib::PetscLibType,dm::PetscDM, g::PetscVec) 
Returns a PETSc vector that
obtained from `DMGetGlobalVector()`. Do not use with vector obtained via
`DMCreateGlobalVector()`.

Not Collective

Input Parameters:
- `dm` - the `DM`
- `g`  - the global vector

Level: beginner

-seealso: `DM`, `DMCreateGlobalVector()`, `VecDuplicate()`, `VecDuplicateVecs()`,
`DMDACreate1d()`, `DMDACreate2d()`, `DMDACreate3d()`, `DMGlobalToGlobalBegin()`,
`DMGlobalToGlobalEnd()`, `DMGlobalToGlobal()`, `DMCreateLocalVector()`, `DMGetGlobalVector()`, `DMClearGlobalVectors()`

# External Links
$(_doc_external("Dm/DMRestoreGlobalVector"))
"""
function DMRestoreGlobalVector(petsclib::PetscLibType, dm::PetscDM, g::PetscVec) end

@for_petsc function DMRestoreGlobalVector(petsclib::$UnionPetscLib, dm::PetscDM, g::PetscVec )
	g_ = Ref(g.ptr)

    @chk ccall(
               (:DMRestoreGlobalVector, $petsc_library),
               PetscErrorCode,
               (CDM, Ptr{CVec}),
               dm, g_,
              )

	g.ptr = C_NULL

	return nothing
end 

"""
	DMClearNamedGlobalVectors(petsclib::PetscLibType,dm::PetscDM) 
Destroys all the named global vectors that have been created with `DMGetNamedGlobalVector()` in this `DM`

Collective

Input Parameter:
- `dm` - the `DM`

Level: developer

-seealso: `DM`, `DMGetNamedGlobalVector()`, `DMGetNamedLocalVector()`, `DMClearNamedLocalVectors()`

# External Links
$(_doc_external("Dm/DMClearNamedGlobalVectors"))
"""
function DMClearNamedGlobalVectors(petsclib::PetscLibType, dm::PetscDM) end

@for_petsc function DMClearNamedGlobalVectors(petsclib::$UnionPetscLib, dm::PetscDM )

    @chk ccall(
               (:DMClearNamedGlobalVectors, $petsc_library),
               PetscErrorCode,
               (CDM,),
               dm,
              )


	return nothing
end 

"""
	DMClearNamedLocalVectors(petsclib::PetscLibType,dm::PetscDM) 
Destroys all the named local vectors that have been created with `DMGetNamedLocalVector()` in this `DM`

Collective

Input Parameter:
- `dm` - the `DM`

Level: developer

-seealso: `DM`, `DMGetNamedGlobalVector()`, `DMGetNamedLocalVector()`, `DMClearNamedGlobalVectors()`

# External Links
$(_doc_external("Dm/DMClearNamedLocalVectors"))
"""
function DMClearNamedLocalVectors(petsclib::PetscLibType, dm::PetscDM) end

@for_petsc function DMClearNamedLocalVectors(petsclib::$UnionPetscLib, dm::PetscDM )

    @chk ccall(
               (:DMClearNamedLocalVectors, $petsc_library),
               PetscErrorCode,
               (CDM,),
               dm,
              )


	return nothing
end 

"""
	exists::PetscBool = DMHasNamedGlobalVector(petsclib::PetscLibType,dm::PetscDM, name::String) 
check for a named, persistent global vector created with `DMGetNamedGlobalVector()`

Not Collective

Input Parameters:
- `dm`   - `DM` to hold named vectors
- `name` - unique name for `Vec`

Output Parameter:
- `exists` - true if the vector was previously created

Level: developer

-seealso: `DM`, `DMGetNamedGlobalVector()`, `DMRestoreNamedLocalVector()`, `DMClearNamedGlobalVectors()`

# External Links
$(_doc_external("Dm/DMHasNamedGlobalVector"))
"""
function DMHasNamedGlobalVector(petsclib::PetscLibType, dm::PetscDM, name::String) end

@for_petsc function DMHasNamedGlobalVector(petsclib::$UnionPetscLib, dm::PetscDM, name::String )
	exists_ = Ref{PetscBool}()

    @chk ccall(
               (:DMHasNamedGlobalVector, $petsc_library),
               PetscErrorCode,
               (CDM, Ptr{Cchar}, Ptr{PetscBool}),
               dm, name, exists_,
              )

	exists = exists_[]

	return exists
end 

"""
	DMGetNamedGlobalVector(petsclib::PetscLibType,dm::PetscDM, name::String, X::PetscVec) 
get access to a named, persistent global vector

Collective

Input Parameters:
- `dm`   - `DM` to hold named vectors
- `name` - unique name for `X`

Output Parameter:
- `X` - named `Vec`

Level: developer

-seealso: `DM`, `DMRestoreNamedGlobalVector()`, `DMHasNamedGlobalVector()`, `DMClearNamedGlobalVectors()`, `DMGetGlobalVector()`, `DMGetLocalVector()`

# External Links
$(_doc_external("Dm/DMGetNamedGlobalVector"))
"""
function DMGetNamedGlobalVector(petsclib::PetscLibType, dm::PetscDM, name::String, X::PetscVec) end

@for_petsc function DMGetNamedGlobalVector(petsclib::$UnionPetscLib, dm::PetscDM, name::String, X::PetscVec )
	X_ = Ref(X.ptr)

    @chk ccall(
               (:DMGetNamedGlobalVector, $petsc_library),
               PetscErrorCode,
               (CDM, Ptr{Cchar}, Ptr{CVec}),
               dm, name, X_,
              )

	X.ptr = C_NULL

	return nothing
end 

"""
	DMRestoreNamedGlobalVector(petsclib::PetscLibType,dm::PetscDM, name::String, X::PetscVec) 
restore access to a named, persistent global vector

Collective

Input Parameters:
- `dm`   - `DM` on which `X` was gotten
- `name` - name under which `X` was gotten
- `X`    - `Vec` to restore

Level: developer

-seealso: `DM`, `DMGetNamedGlobalVector()`, `DMClearNamedGlobalVectors()`

# External Links
$(_doc_external("Dm/DMRestoreNamedGlobalVector"))
"""
function DMRestoreNamedGlobalVector(petsclib::PetscLibType, dm::PetscDM, name::String, X::PetscVec) end

@for_petsc function DMRestoreNamedGlobalVector(petsclib::$UnionPetscLib, dm::PetscDM, name::String, X::PetscVec )
	X_ = Ref(X.ptr)

    @chk ccall(
               (:DMRestoreNamedGlobalVector, $petsc_library),
               PetscErrorCode,
               (CDM, Ptr{Cchar}, Ptr{CVec}),
               dm, name, X_,
              )

	X.ptr = C_NULL

	return nothing
end 

"""
	exists::PetscBool = DMHasNamedLocalVector(petsclib::PetscLibType,dm::PetscDM, name::String) 
check for a named, persistent local vector created with `DMGetNamedLocalVector()`

Not Collective

Input Parameters:
- `dm`   - `DM` to hold named vectors
- `name` - unique name for `Vec`

Output Parameter:
- `exists` - true if the vector was previously created

Level: developer

-seealso: `DM`, `DMGetNamedGlobalVector()`, `DMRestoreNamedLocalVector()`, `DMClearNamedLocalVectors()`

# External Links
$(_doc_external("Dm/DMHasNamedLocalVector"))
"""
function DMHasNamedLocalVector(petsclib::PetscLibType, dm::PetscDM, name::String) end

@for_petsc function DMHasNamedLocalVector(petsclib::$UnionPetscLib, dm::PetscDM, name::String )
	exists_ = Ref{PetscBool}()

    @chk ccall(
               (:DMHasNamedLocalVector, $petsc_library),
               PetscErrorCode,
               (CDM, Ptr{Cchar}, Ptr{PetscBool}),
               dm, name, exists_,
              )

	exists = exists_[]

	return exists
end 

"""
	DMGetNamedLocalVector(petsclib::PetscLibType,dm::PetscDM, name::String, X::PetscVec) 
get access to a named, persistent local vector

Not Collective

Input Parameters:
- `dm`   - `DM` to hold named vectors
- `name` - unique name for `X`

Output Parameter:
- `X` - named `Vec`

Level: developer

-seealso: `DM`, `DMGetNamedGlobalVector()`, `DMRestoreNamedLocalVector()`, `DMHasNamedLocalVector()`, `DMClearNamedLocalVectors()`, `DMGetGlobalVector()`, `DMGetLocalVector()`

# External Links
$(_doc_external("Dm/DMGetNamedLocalVector"))
"""
function DMGetNamedLocalVector(petsclib::PetscLibType, dm::PetscDM, name::String, X::PetscVec) end

@for_petsc function DMGetNamedLocalVector(petsclib::$UnionPetscLib, dm::PetscDM, name::String, X::PetscVec )
	X_ = Ref(X.ptr)

    @chk ccall(
               (:DMGetNamedLocalVector, $petsc_library),
               PetscErrorCode,
               (CDM, Ptr{Cchar}, Ptr{CVec}),
               dm, name, X_,
              )

	X.ptr = C_NULL

	return nothing
end 

"""
	DMRestoreNamedLocalVector(petsclib::PetscLibType,dm::PetscDM, name::String, X::PetscVec) 
restore access to a named, persistent local vector obtained with `DMGetNamedLocalVector()`

Not Collective

Input Parameters:
- `dm`   - `DM` on which `X` was gotten
- `name` - name under which `X` was gotten
- `X`    - `Vec` to restore

Level: developer

-seealso: `DM`, `DMRestoreNamedGlobalVector()`, `DMGetNamedLocalVector()`, `DMClearNamedLocalVectors()`

# External Links
$(_doc_external("Dm/DMRestoreNamedLocalVector"))
"""
function DMRestoreNamedLocalVector(petsclib::PetscLibType, dm::PetscDM, name::String, X::PetscVec) end

@for_petsc function DMRestoreNamedLocalVector(petsclib::$UnionPetscLib, dm::PetscDM, name::String, X::PetscVec )
	X_ = Ref(X.ptr)

    @chk ccall(
               (:DMRestoreNamedLocalVector, $petsc_library),
               PetscErrorCode,
               (CDM, Ptr{Cchar}, Ptr{CVec}),
               dm, name, X_,
              )

	X.ptr = C_NULL

	return nothing
end 

"""
	DMFinalizePackage(petsclib::PetscLibType) 
This function finalizes everything in the `DM` package. It is called
from `PetscFinalize()`.

Level: developer

-seealso: `PetscInitialize()`

# External Links
$(_doc_external("Dm/DMFinalizePackage"))
"""
function DMFinalizePackage(petsclib::PetscLibType) end

@for_petsc function DMFinalizePackage(petsclib::$UnionPetscLib)

    @chk ccall(
               (:DMFinalizePackage, $petsc_library),
               PetscErrorCode,
               (),
              )


	return nothing
end 

"""
	DMInitializePackage(petsclib::PetscLibType) 
This function initializes everything in the `DM` package. It is called
from `PetscDLLibraryRegister_petscdm()` when using dynamic libraries, and on the first call to `DMCreate()`
or similar routines when using shared or static libraries.

Level: developer

-seealso: `PetscInitialize()`

# External Links
$(_doc_external("Dm/DMInitializePackage"))
"""
function DMInitializePackage(petsclib::PetscLibType) end

@for_petsc function DMInitializePackage(petsclib::$UnionPetscLib)

    @chk ccall(
               (:DMInitializePackage, $petsc_library),
               PetscErrorCode,
               (),
              )


	return nothing
end 

"""
	DMGetCoordinateDM(petsclib::PetscLibType,dm::PetscDM, cdm::PetscDM) 
Gets the `DM` that prescribes coordinate layout and scatters between global and local coordinates

Collective

Input Parameter:
- `dm` - the `DM`

Output Parameter:
- `cdm` - coordinate `DM`

Level: intermediate

-seealso: `DM`, `DMSetCoordinateDM()`, `DMSetCoordinates()`, `DMSetCoordinatesLocal()`, `DMGetCoordinates()`, `DMGetCoordinatesLocal()`, `DMGSetCellCoordinateDM()`,


# External Links
$(_doc_external("Dm/DMGetCoordinateDM"))
"""
function DMGetCoordinateDM(petsclib::PetscLibType, dm::PetscDM, cdm::PetscDM) end

@for_petsc function DMGetCoordinateDM(petsclib::$UnionPetscLib, dm::PetscDM, cdm::PetscDM )
	cdm_ = Ref(cdm.ptr)

    @chk ccall(
               (:DMGetCoordinateDM, $petsc_library),
               PetscErrorCode,
               (CDM, Ptr{CDM}),
               dm, cdm_,
              )

	cdm.ptr = C_NULL

	return nothing
end 

"""
	DMSetCoordinateDM(petsclib::PetscLibType,dm::PetscDM, cdm::PetscDM) 
Sets the `DM` that prescribes coordinate layout and scatters between global and local coordinates

Logically Collective

Input Parameters:
- `dm`  - the `DM`
- `cdm` - coordinate `DM`

Level: intermediate

-seealso: `DM`, `DMGetCoordinateDM()`, `DMSetCoordinates()`, `DMGetCellCoordinateDM()`, `DMSetCoordinatesLocal()`, `DMGetCoordinates()`, `DMGetCoordinatesLocal()`,
`DMGSetCellCoordinateDM()`

# External Links
$(_doc_external("Dm/DMSetCoordinateDM"))
"""
function DMSetCoordinateDM(petsclib::PetscLibType, dm::PetscDM, cdm::PetscDM) end

@for_petsc function DMSetCoordinateDM(petsclib::$UnionPetscLib, dm::PetscDM, cdm::PetscDM )

    @chk ccall(
               (:DMSetCoordinateDM, $petsc_library),
               PetscErrorCode,
               (CDM, CDM),
               dm, cdm,
              )


	return nothing
end 

"""
	DMGetCellCoordinateDM(petsclib::PetscLibType,dm::PetscDM, cdm::PetscDM) 
Gets the `DM` that prescribes cellwise coordinate layout and scatters between global and local cellwise coordinates

Collective

Input Parameter:
- `dm` - the `DM`

Output Parameter:
- `cdm` - cellwise coordinate `DM`, or `NULL` if they are not defined

Level: intermediate

-seealso: `DM`, `DMSetCellCoordinateDM()`, `DMSetCellCoordinates()`, `DMSetCellCoordinatesLocal()`, `DMGetCellCoordinates()`, `DMGetCellCoordinatesLocal()`,
`DMLocalizeCoordinates()`, `DMSetCoordinateDM()`, `DMGetCoordinateDM()`

# External Links
$(_doc_external("Dm/DMGetCellCoordinateDM"))
"""
function DMGetCellCoordinateDM(petsclib::PetscLibType, dm::PetscDM, cdm::PetscDM) end

@for_petsc function DMGetCellCoordinateDM(petsclib::$UnionPetscLib, dm::PetscDM, cdm::PetscDM )
	cdm_ = Ref(cdm.ptr)

    @chk ccall(
               (:DMGetCellCoordinateDM, $petsc_library),
               PetscErrorCode,
               (CDM, Ptr{CDM}),
               dm, cdm_,
              )

	cdm.ptr = C_NULL

	return nothing
end 

"""
	DMSetCellCoordinateDM(petsclib::PetscLibType,dm::PetscDM, cdm::PetscDM) 
Sets the `DM` that prescribes cellwise coordinate layout and scatters between global and local cellwise coordinates

Logically Collective

Input Parameters:
- `dm`  - the `DM`
- `cdm` - cellwise coordinate `DM`

Level: intermediate

-seealso: `DMGetCellCoordinateDM()`, `DMSetCellCoordinates()`, `DMSetCellCoordinatesLocal()`, `DMGetCellCoordinates()`, `DMGetCellCoordinatesLocal()`,
`DMSetCoordinateDM()`, `DMGetCoordinateDM()`

# External Links
$(_doc_external("Dm/DMSetCellCoordinateDM"))
"""
function DMSetCellCoordinateDM(petsclib::PetscLibType, dm::PetscDM, cdm::PetscDM) end

@for_petsc function DMSetCellCoordinateDM(petsclib::$UnionPetscLib, dm::PetscDM, cdm::PetscDM )

    @chk ccall(
               (:DMSetCellCoordinateDM, $petsc_library),
               PetscErrorCode,
               (CDM, CDM),
               dm, cdm,
              )


	return nothing
end 

"""
	dim::PetscInt = DMGetCoordinateDim(petsclib::PetscLibType,dm::PetscDM) 
Retrieve the dimension of the embedding space for coordinate values. For example a mesh on the surface of a sphere would have a 3 dimensional embedding space

Not Collective

Input Parameter:
- `dm` - The `DM` object

Output Parameter:
- `dim` - The embedding dimension

Level: intermediate

-seealso: `DM`, `DMSetCoordinateDim()`, `DMGetCoordinateSection()`, `DMGetCoordinateDM()`, `DMGetLocalSection()`, `DMSetLocalSection()`

# External Links
$(_doc_external("Dm/DMGetCoordinateDim"))
"""
function DMGetCoordinateDim(petsclib::PetscLibType, dm::PetscDM) end

@for_petsc function DMGetCoordinateDim(petsclib::$UnionPetscLib, dm::PetscDM )
	dim_ = Ref{$PetscInt}()

    @chk ccall(
               (:DMGetCoordinateDim, $petsc_library),
               PetscErrorCode,
               (CDM, Ptr{$PetscInt}),
               dm, dim_,
              )

	dim = dim_[]

	return dim
end 

"""
	DMSetCoordinateDim(petsclib::PetscLibType,dm::PetscDM, dim::PetscInt) 
Set the dimension of the embedding space for coordinate values.

Not Collective

Input Parameters:
- `dm`  - The `DM` object
- `dim` - The embedding dimension

Level: intermediate

-seealso: `DM`, `DMGetCoordinateDim()`, `DMSetCoordinateSection()`, `DMGetCoordinateSection()`, `DMGetLocalSection()`, `DMSetLocalSection()`

# External Links
$(_doc_external("Dm/DMSetCoordinateDim"))
"""
function DMSetCoordinateDim(petsclib::PetscLibType, dm::PetscDM, dim::PetscInt) end

@for_petsc function DMSetCoordinateDim(petsclib::$UnionPetscLib, dm::PetscDM, dim::$PetscInt )

    @chk ccall(
               (:DMSetCoordinateDim, $petsc_library),
               PetscErrorCode,
               (CDM, $PetscInt),
               dm, dim,
              )


	return nothing
end 

"""
	DMGetCoordinateSection(petsclib::PetscLibType,dm::PetscDM, section::PetscSection) 
Retrieve the `PetscSection` of coordinate values over the mesh.

Collective

Input Parameter:
- `dm` - The `DM` object

Output Parameter:
- `section` - The `PetscSection` object

Level: intermediate

-seealso: `DM`, `DMGetCoordinateDM()`, `DMGetLocalSection()`, `DMSetLocalSection()`

# External Links
$(_doc_external("Dm/DMGetCoordinateSection"))
"""
function DMGetCoordinateSection(petsclib::PetscLibType, dm::PetscDM, section::PetscSection) end

@for_petsc function DMGetCoordinateSection(petsclib::$UnionPetscLib, dm::PetscDM, section::PetscSection )

    @chk ccall(
               (:DMGetCoordinateSection, $petsc_library),
               PetscErrorCode,
               (CDM, Ptr{PetscSection}),
               dm, section,
              )


	return nothing
end 

"""
	DMSetCoordinateSection(petsclib::PetscLibType,dm::PetscDM, dim::PetscInt, section::PetscSection) 
Set the `PetscSection` of coordinate values over the mesh.

Not Collective

Input Parameters:
- `dm`      - The `DM` object
- `dim`     - The embedding dimension, or `PETSC_DETERMINE`
- `section` - The `PetscSection` object

Level: intermediate

-seealso: `DM`, `DMGetCoordinateDim()`, `DMGetCoordinateSection()`, `DMGetLocalSection()`, `DMSetLocalSection()`

# External Links
$(_doc_external("Dm/DMSetCoordinateSection"))
"""
function DMSetCoordinateSection(petsclib::PetscLibType, dm::PetscDM, dim::PetscInt, section::PetscSection) end

@for_petsc function DMSetCoordinateSection(petsclib::$UnionPetscLib, dm::PetscDM, dim::$PetscInt, section::PetscSection )

    @chk ccall(
               (:DMSetCoordinateSection, $petsc_library),
               PetscErrorCode,
               (CDM, $PetscInt, PetscSection),
               dm, dim, section,
              )


	return nothing
end 

"""
	DMGetCellCoordinateSection(petsclib::PetscLibType,dm::PetscDM, section::PetscSection) 
Retrieve the `PetscSection` of cellwise coordinate values over the mesh.

Collective

Input Parameter:
- `dm` - The `DM` object

Output Parameter:
- `section` - The `PetscSection` object, or `NULL` if no cellwise coordinates are defined

Level: intermediate

-seealso: `DM`, `DMGetCoordinateSection()`, `DMSetCellCoordinateSection()`, `DMGetCellCoordinateDM()`, `DMGetCoordinateDM()`, `DMGetLocalSection()`, `DMSetLocalSection()`

# External Links
$(_doc_external("Dm/DMGetCellCoordinateSection"))
"""
function DMGetCellCoordinateSection(petsclib::PetscLibType, dm::PetscDM, section::PetscSection) end

@for_petsc function DMGetCellCoordinateSection(petsclib::$UnionPetscLib, dm::PetscDM, section::PetscSection )

    @chk ccall(
               (:DMGetCellCoordinateSection, $petsc_library),
               PetscErrorCode,
               (CDM, Ptr{PetscSection}),
               dm, section,
              )


	return nothing
end 

"""
	DMSetCellCoordinateSection(petsclib::PetscLibType,dm::PetscDM, dim::PetscInt, section::PetscSection) 
Set the `PetscSection` of cellwise coordinate values over the mesh.

Not Collective

Input Parameters:
- `dm`      - The `DM` object
- `dim`     - The embedding dimension, or `PETSC_DETERMINE`
- `section` - The `PetscSection` object for a cellwise layout

Level: intermediate

-seealso: `DM`, `DMGetCoordinateDim()`, `DMSetCoordinateSection()`, `DMGetCellCoordinateSection()`, `DMGetCoordinateSection()`, `DMGetCellCoordinateDM()`, `DMGetLocalSection()`, `DMSetLocalSection()`

# External Links
$(_doc_external("Dm/DMSetCellCoordinateSection"))
"""
function DMSetCellCoordinateSection(petsclib::PetscLibType, dm::PetscDM, dim::PetscInt, section::PetscSection) end

@for_petsc function DMSetCellCoordinateSection(petsclib::$UnionPetscLib, dm::PetscDM, dim::$PetscInt, section::PetscSection )

    @chk ccall(
               (:DMSetCellCoordinateSection, $petsc_library),
               PetscErrorCode,
               (CDM, $PetscInt, PetscSection),
               dm, dim, section,
              )


	return nothing
end 

"""
	DMGetCoordinates(petsclib::PetscLibType,dm::PetscDM, c::PetscVec) 
Gets a global vector with the coordinates associated with the `DM`.

Collective if the global vector with coordinates has not been set yet but the local vector with coordinates has been set

Input Parameter:
- `dm` - the `DM`

Output Parameter:
- `c` - global coordinate vector

Level: intermediate

-seealso: `DM`, `DMDA`, `DMSetCoordinates()`, `DMGetCoordinatesLocal()`, `DMGetCoordinateDM()`, `DMDASetUniformCoordinates()`

# External Links
$(_doc_external("Dm/DMGetCoordinates"))
"""
function DMGetCoordinates(petsclib::PetscLibType, dm::PetscDM, c::PetscVec) end

@for_petsc function DMGetCoordinates(petsclib::$UnionPetscLib, dm::PetscDM, c::PetscVec )
	c_ = Ref(c.ptr)

    @chk ccall(
               (:DMGetCoordinates, $petsc_library),
               PetscErrorCode,
               (CDM, Ptr{CVec}),
               dm, c_,
              )

	c.ptr = C_NULL

	return nothing
end 

"""
	DMSetCoordinates(petsclib::PetscLibType,dm::PetscDM, c::PetscVec) 
Sets into the `DM` a global vector that holds the coordinates

Logically Collective

Input Parameters:
- `dm` - the `DM`
- `c`  - coordinate vector

Level: intermediate

-seealso: `DM`, `DMSetCoordinatesLocal()`, `DMGetCoordinates()`, `DMGetCoordinatesLocal()`, `DMGetCoordinateDM()`, `DMDASetUniformCoordinates()`

# External Links
$(_doc_external("Dm/DMSetCoordinates"))
"""
function DMSetCoordinates(petsclib::PetscLibType, dm::PetscDM, c::PetscVec) end

@for_petsc function DMSetCoordinates(petsclib::$UnionPetscLib, dm::PetscDM, c::PetscVec )

    @chk ccall(
               (:DMSetCoordinates, $petsc_library),
               PetscErrorCode,
               (CDM, CVec),
               dm, c,
              )


	return nothing
end 

"""
	DMGetCellCoordinates(petsclib::PetscLibType,dm::PetscDM, c::PetscVec) 
Gets a global vector with the cellwise coordinates associated with the `DM`.

Collective

Input Parameter:
- `dm` - the `DM`

Output Parameter:
- `c` - global coordinate vector

Level: intermediate

-seealso: `DM`, `DMGetCoordinates()`, `DMSetCellCoordinates()`, `DMGetCellCoordinatesLocal()`, `DMGetCellCoordinateDM()`

# External Links
$(_doc_external("Dm/DMGetCellCoordinates"))
"""
function DMGetCellCoordinates(petsclib::PetscLibType, dm::PetscDM, c::PetscVec) end

@for_petsc function DMGetCellCoordinates(petsclib::$UnionPetscLib, dm::PetscDM, c::PetscVec )
	c_ = Ref(c.ptr)

    @chk ccall(
               (:DMGetCellCoordinates, $petsc_library),
               PetscErrorCode,
               (CDM, Ptr{CVec}),
               dm, c_,
              )

	c.ptr = C_NULL

	return nothing
end 

"""
	DMSetCellCoordinates(petsclib::PetscLibType,dm::PetscDM, c::PetscVec) 
Sets into the `DM` a global vector that holds the cellwise coordinates

Collective

Input Parameters:
- `dm` - the `DM`
- `c`  - cellwise coordinate vector

Level: intermediate

-seealso: `DM`, `DMGetCoordinates()`, `DMSetCellCoordinatesLocal()`, `DMGetCellCoordinates()`, `DMGetCellCoordinatesLocal()`, `DMGetCellCoordinateDM()`

# External Links
$(_doc_external("Dm/DMSetCellCoordinates"))
"""
function DMSetCellCoordinates(petsclib::PetscLibType, dm::PetscDM, c::PetscVec) end

@for_petsc function DMSetCellCoordinates(petsclib::$UnionPetscLib, dm::PetscDM, c::PetscVec )

    @chk ccall(
               (:DMSetCellCoordinates, $petsc_library),
               PetscErrorCode,
               (CDM, CVec),
               dm, c,
              )


	return nothing
end 

"""
	DMGetCoordinatesLocalSetUp(petsclib::PetscLibType,dm::PetscDM) 
Prepares a local vector of coordinates, so that `DMGetCoordinatesLocalNoncollective()` can be used as non

Collective

Input Parameter:
- `dm` - the `DM`

Level: advanced

-seealso: `DM`, `DMSetCoordinates()`, `DMGetCoordinatesLocalNoncollective()`

# External Links
$(_doc_external("Dm/DMGetCoordinatesLocalSetUp"))
"""
function DMGetCoordinatesLocalSetUp(petsclib::PetscLibType, dm::PetscDM) end

@for_petsc function DMGetCoordinatesLocalSetUp(petsclib::$UnionPetscLib, dm::PetscDM )

    @chk ccall(
               (:DMGetCoordinatesLocalSetUp, $petsc_library),
               PetscErrorCode,
               (CDM,),
               dm,
              )


	return nothing
end 

"""
	DMGetCoordinatesLocal(petsclib::PetscLibType,dm::PetscDM, c::PetscVec) 
Gets a local vector with the coordinates associated with the `DM`.

Collective the first time it is called

Input Parameter:
- `dm` - the `DM`

Output Parameter:
- `c` - coordinate vector

Level: intermediate

-seealso: `DM`, `DMSetCoordinatesLocal()`, `DMGetCoordinates()`, `DMSetCoordinates()`, `DMGetCoordinateDM()`, `DMGetCoordinatesLocalNoncollective()`

# External Links
$(_doc_external("Dm/DMGetCoordinatesLocal"))
"""
function DMGetCoordinatesLocal(petsclib::PetscLibType, dm::PetscDM, c::PetscVec) end

@for_petsc function DMGetCoordinatesLocal(petsclib::$UnionPetscLib, dm::PetscDM, c::PetscVec )
	c_ = Ref(c.ptr)

    @chk ccall(
               (:DMGetCoordinatesLocal, $petsc_library),
               PetscErrorCode,
               (CDM, Ptr{CVec}),
               dm, c_,
              )

	c.ptr = C_NULL

	return nothing
end 

"""
	DMGetCoordinatesLocalNoncollective(petsclib::PetscLibType,dm::PetscDM, c::PetscVec) 
Non

Not Collective

Input Parameter:
- `dm` - the `DM`

Output Parameter:
- `c` - coordinate vector

Level: advanced

-seealso: `DM`, `DMGetCoordinatesLocalSetUp()`, `DMGetCoordinatesLocal()`, `DMSetCoordinatesLocal()`, `DMGetCoordinates()`, `DMSetCoordinates()`, `DMGetCoordinateDM()`

# External Links
$(_doc_external("Dm/DMGetCoordinatesLocalNoncollective"))
"""
function DMGetCoordinatesLocalNoncollective(petsclib::PetscLibType, dm::PetscDM, c::PetscVec) end

@for_petsc function DMGetCoordinatesLocalNoncollective(petsclib::$UnionPetscLib, dm::PetscDM, c::PetscVec )
	c_ = Ref(c.ptr)

    @chk ccall(
               (:DMGetCoordinatesLocalNoncollective, $petsc_library),
               PetscErrorCode,
               (CDM, Ptr{CVec}),
               dm, c_,
              )

	c.ptr = C_NULL

	return nothing
end 

"""
	DMGetCoordinatesLocalTuple(petsclib::PetscLibType,dm::PetscDM, p::IS, pCoordSection::PetscSection, pCoord::PetscVec) 
Gets a local vector with the coordinates of specified points and the section describing its layout.

Not Collective

Input Parameters:
- `dm` - the `DM`
- `p`  - the `IS` of points whose coordinates will be returned

Output Parameters:
- `pCoordSection` - the `PetscSection` describing the layout of pCoord, i.e. each point corresponds to one point in `p`, and DOFs correspond to coordinates
- `pCoord`        - the `Vec` with coordinates of points in `p`

Level: advanced

-seealso: `DM`, `DMDA`, `DMSetCoordinatesLocal()`, `DMGetCoordinatesLocal()`, `DMGetCoordinatesLocalNoncollective()`, `DMGetCoordinatesLocalSetUp()`, `DMGetCoordinates()`, `DMSetCoordinates()`, `DMGetCoordinateDM()`

# External Links
$(_doc_external("Dm/DMGetCoordinatesLocalTuple"))
"""
function DMGetCoordinatesLocalTuple(petsclib::PetscLibType, dm::PetscDM, p::IS, pCoordSection::PetscSection, pCoord::PetscVec) end

@for_petsc function DMGetCoordinatesLocalTuple(petsclib::$UnionPetscLib, dm::PetscDM, p::IS, pCoordSection::PetscSection, pCoord::PetscVec )
	pCoord_ = Ref(pCoord.ptr)

    @chk ccall(
               (:DMGetCoordinatesLocalTuple, $petsc_library),
               PetscErrorCode,
               (CDM, IS, Ptr{PetscSection}, Ptr{CVec}),
               dm, p, pCoordSection, pCoord_,
              )

	pCoord.ptr = C_NULL

	return nothing
end 

"""
	DMSetCoordinatesLocal(petsclib::PetscLibType,dm::PetscDM, c::PetscVec) 
Sets into the `DM` a local vector, including ghost points, that holds the coordinates

Not Collective

Input Parameters:
- `dm` - the `DM`
- `c`  - coordinate vector

Level: intermediate

-seealso: `DM`, `DMGetCoordinatesLocal()`, `DMSetCoordinates()`, `DMGetCoordinates()`, `DMGetCoordinateDM()`

# External Links
$(_doc_external("Dm/DMSetCoordinatesLocal"))
"""
function DMSetCoordinatesLocal(petsclib::PetscLibType, dm::PetscDM, c::PetscVec) end

@for_petsc function DMSetCoordinatesLocal(petsclib::$UnionPetscLib, dm::PetscDM, c::PetscVec )

    @chk ccall(
               (:DMSetCoordinatesLocal, $petsc_library),
               PetscErrorCode,
               (CDM, CVec),
               dm, c,
              )


	return nothing
end 

"""
	DMGetCellCoordinatesLocalSetUp(petsclib::PetscLibType,dm::PetscDM) 
Prepares a local vector of cellwise coordinates, so that `DMGetCellCoordinatesLocalNoncollective()` can be used as non

Collective

Input Parameter:
- `dm` - the `DM`

Level: advanced

-seealso: `DM`, `DMGetCellCoordinatesLocalNoncollective()`

# External Links
$(_doc_external("Dm/DMGetCellCoordinatesLocalSetUp"))
"""
function DMGetCellCoordinatesLocalSetUp(petsclib::PetscLibType, dm::PetscDM) end

@for_petsc function DMGetCellCoordinatesLocalSetUp(petsclib::$UnionPetscLib, dm::PetscDM )

    @chk ccall(
               (:DMGetCellCoordinatesLocalSetUp, $petsc_library),
               PetscErrorCode,
               (CDM,),
               dm,
              )


	return nothing
end 

"""
	DMGetCellCoordinatesLocal(petsclib::PetscLibType,dm::PetscDM, c::PetscVec) 
Gets a local vector with the cellwise coordinates associated with the `DM`.

Collective

Input Parameter:
- `dm` - the `DM`

Output Parameter:
- `c` - coordinate vector

Level: intermediate

-seealso: `DM`, `DMSetCellCoordinatesLocal()`, `DMGetCellCoordinates()`, `DMSetCellCoordinates()`, `DMGetCellCoordinateDM()`, `DMGetCellCoordinatesLocalNoncollective()`

# External Links
$(_doc_external("Dm/DMGetCellCoordinatesLocal"))
"""
function DMGetCellCoordinatesLocal(petsclib::PetscLibType, dm::PetscDM, c::PetscVec) end

@for_petsc function DMGetCellCoordinatesLocal(petsclib::$UnionPetscLib, dm::PetscDM, c::PetscVec )
	c_ = Ref(c.ptr)

    @chk ccall(
               (:DMGetCellCoordinatesLocal, $petsc_library),
               PetscErrorCode,
               (CDM, Ptr{CVec}),
               dm, c_,
              )

	c.ptr = C_NULL

	return nothing
end 

"""
	DMGetCellCoordinatesLocalNoncollective(petsclib::PetscLibType,dm::PetscDM, c::PetscVec) 
Non

Not Collective

Input Parameter:
- `dm` - the `DM`

Output Parameter:
- `c` - cellwise coordinate vector

Level: advanced

-seealso: `DM`, `DMGetCellCoordinatesLocalSetUp()`, `DMGetCellCoordinatesLocal()`, `DMSetCellCoordinatesLocal()`, `DMGetCellCoordinates()`, `DMSetCellCoordinates()`, `DMGetCellCoordinateDM()`

# External Links
$(_doc_external("Dm/DMGetCellCoordinatesLocalNoncollective"))
"""
function DMGetCellCoordinatesLocalNoncollective(petsclib::PetscLibType, dm::PetscDM, c::PetscVec) end

@for_petsc function DMGetCellCoordinatesLocalNoncollective(petsclib::$UnionPetscLib, dm::PetscDM, c::PetscVec )
	c_ = Ref(c.ptr)

    @chk ccall(
               (:DMGetCellCoordinatesLocalNoncollective, $petsc_library),
               PetscErrorCode,
               (CDM, Ptr{CVec}),
               dm, c_,
              )

	c.ptr = C_NULL

	return nothing
end 

"""
	DMSetCellCoordinatesLocal(petsclib::PetscLibType,dm::PetscDM, c::PetscVec) 
Sets into the `DM` a local vector including ghost points that holds the cellwise coordinates

Not Collective

Input Parameters:
- `dm` - the `DM`
- `c`  - cellwise coordinate vector

Level: intermediate

-seealso: `DM`, `DMGetCellCoordinatesLocal()`, `DMSetCellCoordinates()`, `DMGetCellCoordinates()`, `DMGetCellCoordinateDM()`

# External Links
$(_doc_external("Dm/DMSetCellCoordinatesLocal"))
"""
function DMSetCellCoordinatesLocal(petsclib::PetscLibType, dm::PetscDM, c::PetscVec) end

@for_petsc function DMSetCellCoordinatesLocal(petsclib::$UnionPetscLib, dm::PetscDM, c::PetscVec )

    @chk ccall(
               (:DMSetCellCoordinatesLocal, $petsc_library),
               PetscErrorCode,
               (CDM, CVec),
               dm, c,
              )


	return nothing
end 

"""
	DMGetCoordinateField(petsclib::PetscLibType,dm::PetscDM, field::DMField) 

# External Links
$(_doc_external("Dm/DMGetCoordinateField"))
"""
function DMGetCoordinateField(petsclib::PetscLibType, dm::PetscDM, field::DMField) end

@for_petsc function DMGetCoordinateField(petsclib::$UnionPetscLib, dm::PetscDM, field::DMField )

    @chk ccall(
               (:DMGetCoordinateField, $petsc_library),
               PetscErrorCode,
               (CDM, Ptr{DMField}),
               dm, field,
              )


	return nothing
end 

"""
	DMSetCoordinateField(petsclib::PetscLibType,dm::PetscDM, field::DMField) 

# External Links
$(_doc_external("Dm/DMSetCoordinateField"))
"""
function DMSetCoordinateField(petsclib::PetscLibType, dm::PetscDM, field::DMField) end

@for_petsc function DMSetCoordinateField(petsclib::$UnionPetscLib, dm::PetscDM, field::DMField )

    @chk ccall(
               (:DMSetCoordinateField, $petsc_library),
               PetscErrorCode,
               (CDM, DMField),
               dm, field,
              )


	return nothing
end 

"""
	DMSetCellCoordinateField(petsclib::PetscLibType,dm::PetscDM, field::DMField) 

# External Links
$(_doc_external("Dm/DMSetCellCoordinateField"))
"""
function DMSetCellCoordinateField(petsclib::PetscLibType, dm::PetscDM, field::DMField) end

@for_petsc function DMSetCellCoordinateField(petsclib::$UnionPetscLib, dm::PetscDM, field::DMField )

    @chk ccall(
               (:DMSetCellCoordinateField, $petsc_library),
               PetscErrorCode,
               (CDM, DMField),
               dm, field,
              )


	return nothing
end 

"""
	lmin::Vector{PetscReal},lmax::Vector{PetscReal} = DMGetLocalBoundingBox(petsclib::PetscLibType,dm::PetscDM) 
Returns the bounding box for the piece of the `DM` on this process.

Not Collective

Input Parameter:
- `dm` - the `DM`

Output Parameters:
- `lmin` - local minimum coordinates (length coord dim, optional)
- `lmax` - local maximum coordinates (length coord dim, optional)

Level: beginner

-seealso: `DM`, `DMGetCoordinates()`, `DMGetCoordinatesLocal()`, `DMGetBoundingBox()`

# External Links
$(_doc_external("Dm/DMGetLocalBoundingBox"))
"""
function DMGetLocalBoundingBox(petsclib::PetscLibType, dm::PetscDM) end

@for_petsc function DMGetLocalBoundingBox(petsclib::$UnionPetscLib, dm::PetscDM )
	lmin = Vector{$PetscReal}(undef, ni);  # CHECK SIZE!!
	lmax = Vector{$PetscReal}(undef, ni);  # CHECK SIZE!!

    @chk ccall(
               (:DMGetLocalBoundingBox, $petsc_library),
               PetscErrorCode,
               (CDM, Ptr{$PetscReal}, Ptr{$PetscReal}),
               dm, lmin, lmax,
              )


	return lmin,lmax
end 

"""
	gmin::Vector{PetscReal},gmax::Vector{PetscReal} = DMGetBoundingBox(petsclib::PetscLibType,dm::PetscDM) 
Returns the global bounding box for the `DM`.

Collective

Input Parameter:
- `dm` - the `DM`

Output Parameters:
- `gmin` - global minimum coordinates (length coord dim, optional)
- `gmax` - global maximum coordinates (length coord dim, optional)

Level: beginner

-seealso: `DM`, `DMGetLocalBoundingBox()`, `DMGetCoordinates()`, `DMGetCoordinatesLocal()`

# External Links
$(_doc_external("Dm/DMGetBoundingBox"))
"""
function DMGetBoundingBox(petsclib::PetscLibType, dm::PetscDM) end

@for_petsc function DMGetBoundingBox(petsclib::$UnionPetscLib, dm::PetscDM )
	gmin = Vector{$PetscReal}(undef, ni);  # CHECK SIZE!!
	gmax = Vector{$PetscReal}(undef, ni);  # CHECK SIZE!!

    @chk ccall(
               (:DMGetBoundingBox, $petsc_library),
               PetscErrorCode,
               (CDM, Ptr{$PetscReal}, Ptr{$PetscReal}),
               dm, gmin, gmax,
              )


	return gmin,gmax
end 

"""
	DMSetCoordinateDisc(petsclib::PetscLibType,dm::PetscDM, disc::PetscFE, locized::PetscBool, project::PetscBool) 
Set a coordinate space

Input Parameters:
- `dm`        - The `DM` object
- `disc`      - The new coordinate discretization or `NULL` to ensure a coordinate discretization exists
- `localized` - Set a localized (DG) coordinate space
- `project`   - Project coordinates to new discretization

Level: intermediate

-seealso: `DM`, `PetscFE`, `DMGetCoordinateField()`

# External Links
$(_doc_external("Dm/DMSetCoordinateDisc"))
"""
function DMSetCoordinateDisc(petsclib::PetscLibType, dm::PetscDM, disc::PetscFE, locized::PetscBool, project::PetscBool) end

@for_petsc function DMSetCoordinateDisc(petsclib::$UnionPetscLib, dm::PetscDM, disc::PetscFE, locized::PetscBool, project::PetscBool )

    @chk ccall(
               (:DMSetCoordinateDisc, $petsc_library),
               PetscErrorCode,
               (CDM, PetscFE, PetscBool, PetscBool),
               dm, disc, locized, project,
              )


	return nothing
end 

"""
	DMLocatePoints(petsclib::PetscLibType,dm::PetscDM, v::PetscVec, ltype::DMPoCintLocationType, cellSF::PetscSF) 
Locate the points in `v` in the mesh and return a `PetscSF` of the containing cells

Collective

Input Parameters:
- `dm`    - The `DM`
- `ltype` - The type of point location, e.g. `DM_POINTLOCATION_NONE` or `DM_POINTLOCATION_NEAREST`

Input/Output Parameters:
- `v`      - The `Vec` of points, on output contains the nearest mesh points to the given points if `DM_POINTLOCATION_NEAREST` is used
- `cellSF` - Points to either `NULL`, or a `PetscSF` with guesses for which cells contain each point;
on output, the `PetscSF` containing the MPI ranks and local indices of the containing points

Level: developer

-seealso: `DM`, `DMSetCoordinates()`, `DMSetCoordinatesLocal()`, `DMGetCoordinates()`, `DMGetCoordinatesLocal()`, `DMPointLocationType`

# External Links
$(_doc_external("Dm/DMLocatePoints"))
"""
function DMLocatePoints(petsclib::PetscLibType, dm::PetscDM, v::PetscVec, ltype::DMPoCintLocationType, cellSF::PetscSF) end

@for_petsc function DMLocatePoints(petsclib::$UnionPetscLib, dm::PetscDM, v::PetscVec, ltype::DMPoCintLocationType, cellSF::PetscSF )

    @chk ccall(
               (:DMLocatePoints, $petsc_library),
               PetscErrorCode,
               (CDM, CVec, DMPoCintLocationType, Ptr{PetscSF}),
               dm, v, ltype, cellSF,
              )


	return nothing
end 

"""
	DMGeomModelRegisterAll(petsclib::PetscLibType) 
Registers all of the geometry model methods in the `DM` package.

Not Collective

Level: advanced

-seealso: `DM`, `DMGeomModelRegisterDestroy()`

# External Links
$(_doc_external("Dm/DMGeomModelRegisterAll"))
"""
function DMGeomModelRegisterAll(petsclib::PetscLibType) end

@for_petsc function DMGeomModelRegisterAll(petsclib::$UnionPetscLib)

    @chk ccall(
               (:DMGeomModelRegisterAll, $petsc_library),
               PetscErrorCode,
               (),
              )


	return nothing
end 

"""
	DMGeomModelRegister(petsclib::PetscLibType,sname::String, fnc::external) 
Adds a geometry model to `DM`

Not Collective, No Fortran Support

Input Parameters:
- `sname` - name of a new user-defined geometry model
- `fnc`   - geometry model function

-seealso: `DM`, `DMGeomModelRegisterAll()`, `DMPlexGeomModel()`, `DMGeomModelRegisterDestroy()`

# External Links
$(_doc_external("Dm/DMGeomModelRegister"))
"""
function DMGeomModelRegister(petsclib::PetscLibType, sname::String, fnc::external) end

@for_petsc function DMGeomModelRegister(petsclib::$UnionPetscLib, sname::String, fnc::external )

    @chk ccall(
               (:DMGeomModelRegister, $petsc_library),
               PetscErrorCode,
               (Ptr{Cchar}, external),
               sname, fnc,
              )


	return nothing
end 

"""
	DMGeomModelRegisterDestroy(petsclib::PetscLibType) 

# External Links
$(_doc_external("Dm/DMGeomModelRegisterDestroy"))
"""
function DMGeomModelRegisterDestroy(petsclib::PetscLibType) end

@for_petsc function DMGeomModelRegisterDestroy(petsclib::$UnionPetscLib)

    @chk ccall(
               (:DMGeomModelRegisterDestroy, $petsc_library),
               PetscErrorCode,
               (),
              )


	return nothing
end 

"""
	DMSetSnapToGeomModel(petsclib::PetscLibType,dm::PetscDM, name::String) 
Choose a geometry model for this `DM`.

Not Collective

Input Parameters:
- `dm`   - The `DM` object
- `name` - A geometry model name, or `NULL` for the default

Level: intermediate

-seealso: [](ch_unstructured), `DM`, `DMPLEX`, `DMRefine()`, `DMPlexCreate()`, `DMSnapToGeomModel()`

# External Links
$(_doc_external("Dm/DMSetSnapToGeomModel"))
"""
function DMSetSnapToGeomModel(petsclib::PetscLibType, dm::PetscDM, name::String) end

@for_petsc function DMSetSnapToGeomModel(petsclib::$UnionPetscLib, dm::PetscDM, name::String )

    @chk ccall(
               (:DMSetSnapToGeomModel, $petsc_library),
               PetscErrorCode,
               (CDM, Ptr{Cchar}),
               dm, name,
              )


	return nothing
end 

"""
	gcoords::Vector{PetscScalar} = DMSnapToGeomModel(petsclib::PetscLibType,dm::PetscDM, p::PetscInt, dE::PetscInt, mcoords::Vector{PetscScalar}) 
Given a coordinate point 'mcoords' on the mesh point 'p', return the closest coordinate point 'gcoords' on the geometry model associated with that point.

Not Collective

Input Parameters:
- `dm`      - The `DMPLEX` object
- `p`       - The mesh point
- `dE`      - The coordinate dimension
- `mcoords` - A coordinate point lying on the mesh point

Output Parameter:
- `gcoords` - The closest coordinate point on the geometry model associated with 'p' to the given point

Level: intermediate

-seealso: [](ch_unstructured), `DM`, `DMPLEX`, `DMRefine()`, `DMPlexCreate()`, `DMPlexSetRefinementUniform()`

# External Links
$(_doc_external("Dm/DMSnapToGeomModel"))
"""
function DMSnapToGeomModel(petsclib::PetscLibType, dm::PetscDM, p::PetscInt, dE::PetscInt, mcoords::Vector{PetscScalar}) end

@for_petsc function DMSnapToGeomModel(petsclib::$UnionPetscLib, dm::PetscDM, p::$PetscInt, dE::$PetscInt, mcoords::Vector{$PetscScalar} )
	gcoords = Vector{$PetscScalar}(undef, ni);  # CHECK SIZE!!

    @chk ccall(
               (:DMSnapToGeomModel, $petsc_library),
               PetscErrorCode,
               (CDM, $PetscInt, $PetscInt, Ptr{$PetscScalar}, Ptr{$PetscScalar}),
               dm, p, dE, mcoords, gcoords,
              )


	return gcoords
end 

"""
	DMGenerateRegisterAll(petsclib::PetscLibType) 
Registers all of the mesh generation methods in the `DM` package.

Not Collective

Level: advanced

-seealso: `DM`, `DMGenerateRegisterDestroy()`

# External Links
$(_doc_external("Dm/DMGenerateRegisterAll"))
"""
function DMGenerateRegisterAll(petsclib::PetscLibType) end

@for_petsc function DMGenerateRegisterAll(petsclib::$UnionPetscLib)

    @chk ccall(
               (:DMGenerateRegisterAll, $petsc_library),
               PetscErrorCode,
               (),
              )


	return nothing
end 

"""
	DMGenerateRegister(petsclib::PetscLibType,sname::String, fnc::external, rfnc::external, alfnc::external, dim::PetscInt) 
Adds a grid generator to `DM`

Not Collective, No Fortran Support

Input Parameters:
- `sname` - name of a new user-defined grid generator
- `fnc`   - generator function
- `rfnc`  - refinement function
- `alfnc` - adapt by label function
- `dim`   - dimension of boundary of domain

-seealso: `DM`, `DMGenerateRegisterAll()`, `DMPlexGenerate()`, `DMGenerateRegisterDestroy()`

# External Links
$(_doc_external("Dm/DMGenerateRegister"))
"""
function DMGenerateRegister(petsclib::PetscLibType, sname::String, fnc::external, rfnc::external, alfnc::external, dim::PetscInt) end

@for_petsc function DMGenerateRegister(petsclib::$UnionPetscLib, sname::String, fnc::external, rfnc::external, alfnc::external, dim::$PetscInt )

    @chk ccall(
               (:DMGenerateRegister, $petsc_library),
               PetscErrorCode,
               (Ptr{Cchar}, external, external, external, $PetscInt),
               sname, fnc, rfnc, alfnc, dim,
              )


	return nothing
end 

"""
	DMGenerateRegisterDestroy(petsclib::PetscLibType) 

# External Links
$(_doc_external("Dm/DMGenerateRegisterDestroy"))
"""
function DMGenerateRegisterDestroy(petsclib::PetscLibType) end

@for_petsc function DMGenerateRegisterDestroy(petsclib::$UnionPetscLib)

    @chk ccall(
               (:DMGenerateRegisterDestroy, $petsc_library),
               PetscErrorCode,
               (),
              )


	return nothing
end 

"""
	DMAdaptLabel(petsclib::PetscLibType,dm::PetscDM, label::DMLabel, dmAdapt::PetscDM) 
Adapt a `DM` based on a `DMLabel` with values interpreted as coarsening and refining flags.  Specific implementations of `DM` maybe have
specialized flags, but all implementations should accept flag values `DM_ADAPT_DETERMINE`, `DM_ADAPT_KEEP`, `DM_ADAPT_REFINE`, and,
`DM_ADAPT_COARSEN`.

Collective

Input Parameters:
- `dm`    - the pre-adaptation `DM` object
- `label` - label with the flags

Output Parameters:
- `dmAdapt` - the adapted `DM` object: may be `NULL` if an adapted `DM` could not be produced.

Level: intermediate

-seealso: `DM`, `DMAdaptMetric()`, `DMCoarsen()`, `DMRefine()`

# External Links
$(_doc_external("Dm/DMAdaptLabel"))
"""
function DMAdaptLabel(petsclib::PetscLibType, dm::PetscDM, label::DMLabel, dmAdapt::PetscDM) end

@for_petsc function DMAdaptLabel(petsclib::$UnionPetscLib, dm::PetscDM, label::DMLabel, dmAdapt::PetscDM )
	dmAdapt_ = Ref(dmAdapt.ptr)

    @chk ccall(
               (:DMAdaptLabel, $petsc_library),
               PetscErrorCode,
               (CDM, DMLabel, Ptr{CDM}),
               dm, label, dmAdapt_,
              )

	dmAdapt.ptr = C_NULL

	return nothing
end 

"""
	DMAdaptMetric(petsclib::PetscLibType,dm::PetscDM, metric::PetscVec, bdLabel::DMLabel, rgLabel::DMLabel, dmAdapt::PetscDM) 
Generates a mesh adapted to the specified metric field.

Input Parameters:
- `dm`      - The DM object
- `metric`  - The metric to which the mesh is adapted, defined vertex-wise.
- `bdLabel` - Label for boundary tags, which will be preserved in the output mesh. `bdLabel` should be `NULL` if there is no such label, and should be different from "_boundary_".
- `rgLabel` - Label for cell tags, which will be preserved in the output mesh. `rgLabel` should be `NULL` if there is no such label, and should be different from "_regions_".

Output Parameter:
- `dmAdapt` - Pointer to the `DM` object containing the adapted mesh

-seealso: `DMAdaptLabel()`, `DMCoarsen()`, `DMRefine()`

# External Links
$(_doc_external("Dm/DMAdaptMetric"))
"""
function DMAdaptMetric(petsclib::PetscLibType, dm::PetscDM, metric::PetscVec, bdLabel::DMLabel, rgLabel::DMLabel, dmAdapt::PetscDM) end

@for_petsc function DMAdaptMetric(petsclib::$UnionPetscLib, dm::PetscDM, metric::PetscVec, bdLabel::DMLabel, rgLabel::DMLabel, dmAdapt::PetscDM )
	dmAdapt_ = Ref(dmAdapt.ptr)

    @chk ccall(
               (:DMAdaptMetric, $petsc_library),
               PetscErrorCode,
               (CDM, CVec, DMLabel, DMLabel, Ptr{CDM}),
               dm, metric, bdLabel, rgLabel, dmAdapt_,
              )

	dmAdapt.ptr = C_NULL

	return nothing
end 

"""
	maxCell::Vector{PetscReal},Lstart::Vector{PetscReal},L::Vector{PetscReal} = DMGetPeriodicity(petsclib::PetscLibType,dm::PetscDM) 
Get the description of mesh periodicity

Not collective

Input Parameter:
- `dm` - The `DM` object

Output Parameters:
- `maxCell` - Over distances greater than this, we can assume a point has crossed over to another sheet, when trying to localize cell coordinates
- `Lstart`  - If we assume the mesh is a torus, this is the start of each coordinate, or `NULL` for 0.0
- `L`       - If we assume the mesh is a torus, this is the length of each coordinate, otherwise it is < 0.0

Level: developer

-seealso: `DM`

# External Links
$(_doc_external("Dm/DMGetPeriodicity"))
"""
function DMGetPeriodicity(petsclib::PetscLibType, dm::PetscDM) end

@for_petsc function DMGetPeriodicity(petsclib::$UnionPetscLib, dm::PetscDM )
	maxCell_ = Ref{Ptr{$PetscReal}}()
	Lstart_ = Ref{Ptr{$PetscReal}}()
	L_ = Ref{Ptr{$PetscReal}}()

    @chk ccall(
               (:DMGetPeriodicity, $petsc_library),
               PetscErrorCode,
               (CDM, Ptr{Ptr{$PetscReal}}, Ptr{Ptr{$PetscReal}}, Ptr{Ptr{$PetscReal}}),
               dm, maxCell_, Lstart_, L_,
              )

	maxCell = unsafe_wrap(Array, maxCell_[], VecGetLocalSize(petsclib, x); own = false)
	Lstart = unsafe_wrap(Array, Lstart_[], VecGetLocalSize(petsclib, x); own = false)
	L = unsafe_wrap(Array, L_[], VecGetLocalSize(petsclib, x); own = false)

	return maxCell,Lstart,L
end 

"""
	DMSetPeriodicity(petsclib::PetscLibType,dm::PetscDM, maxCell::Vector{PetscReal}, Lstart::Vector{PetscReal}, L::Vector{PetscReal}) 
Set the description of mesh periodicity

Logically Collective

Input Parameters:
- `dm`      - The `DM` object
- `maxCell` - Over distances greater than this, we can assume a point has crossed over to another sheet, when trying to localize cell coordinates. Pass `NULL` to remove such information.
- `Lstart`  - If we assume the mesh is a torus, this is the start of each coordinate, or `NULL` for 0.0
- `L`       - If we assume the mesh is a torus, this is the length of each coordinate, otherwise it is < 0.0

Level: developer

-seealso: `DM`, `DMGetPeriodicity()`

# External Links
$(_doc_external("Dm/DMSetPeriodicity"))
"""
function DMSetPeriodicity(petsclib::PetscLibType, dm::PetscDM, maxCell::Vector{PetscReal}, Lstart::Vector{PetscReal}, L::Vector{PetscReal}) end

@for_petsc function DMSetPeriodicity(petsclib::$UnionPetscLib, dm::PetscDM, maxCell::Vector{$PetscReal}, Lstart::Vector{$PetscReal}, L::Vector{$PetscReal} )

    @chk ccall(
               (:DMSetPeriodicity, $petsc_library),
               PetscErrorCode,
               (CDM, Ptr{$PetscReal}, Ptr{$PetscReal}, Ptr{$PetscReal}),
               dm, maxCell, Lstart, L,
              )


	return nothing
end 

"""
	out::Vector{PetscScalar} = DMLocalizeCoordinate(petsclib::PetscLibType,dm::PetscDM, in::Vector{PetscScalar}, endpoint::PetscBool) 
If a mesh is periodic (a torus with lengths L_i, some of which can be infinite), project the coordinate onto [0, L_i) in each dimension.

Input Parameters:
- `dm`       - The `DM`
- `in`       - The input coordinate point (dim numbers)
- `endpoint` - Include the endpoint L_i

Output Parameter:
- `out` - The localized coordinate point (dim numbers)

Level: developer

-seealso: `DM`, `DMLocalizeCoordinates()`, `DMLocalizeAddCoordinate()`

# External Links
$(_doc_external("Dm/DMLocalizeCoordinate"))
"""
function DMLocalizeCoordinate(petsclib::PetscLibType, dm::PetscDM, in::Vector{PetscScalar}, endpoint::PetscBool) end

@for_petsc function DMLocalizeCoordinate(petsclib::$UnionPetscLib, dm::PetscDM, in::Vector{$PetscScalar}, endpoint::PetscBool )
	out = Vector{$PetscScalar}(undef, ni);  # CHECK SIZE!!

    @chk ccall(
               (:DMLocalizeCoordinate, $petsc_library),
               PetscErrorCode,
               (CDM, Ptr{$PetscScalar}, PetscBool, Ptr{$PetscScalar}),
               dm, in, endpoint, out,
              )


	return out
end 

"""
	areLocalized::PetscBool = DMGetCoordinatesLocalizedLocal(petsclib::PetscLibType,dm::PetscDM) 
Check if the `DM` coordinates have been localized for cells on this process

Not Collective

Input Parameter:
- `dm` - The `DM`

Output Parameter:
- `areLocalized` - `PETSC_TRUE` if localized

Level: developer

-seealso: `DM`, `DMLocalizeCoordinates()`, `DMGetCoordinatesLocalized()`, `DMSetPeriodicity()`

# External Links
$(_doc_external("Dm/DMGetCoordinatesLocalizedLocal"))
"""
function DMGetCoordinatesLocalizedLocal(petsclib::PetscLibType, dm::PetscDM) end

@for_petsc function DMGetCoordinatesLocalizedLocal(petsclib::$UnionPetscLib, dm::PetscDM )
	areLocalized_ = Ref{PetscBool}()

    @chk ccall(
               (:DMGetCoordinatesLocalizedLocal, $petsc_library),
               PetscErrorCode,
               (CDM, Ptr{PetscBool}),
               dm, areLocalized_,
              )

	areLocalized = areLocalized_[]

	return areLocalized
end 

"""
	areLocalized::PetscBool = DMGetCoordinatesLocalized(petsclib::PetscLibType,dm::PetscDM) 
Check if the `DM` coordinates have been localized for cells

Collective

Input Parameter:
- `dm` - The `DM`

Output Parameter:
- `areLocalized` - `PETSC_TRUE` if localized

Level: developer

-seealso: `DM`, `DMLocalizeCoordinates()`, `DMSetPeriodicity()`, `DMGetCoordinatesLocalizedLocal()`

# External Links
$(_doc_external("Dm/DMGetCoordinatesLocalized"))
"""
function DMGetCoordinatesLocalized(petsclib::PetscLibType, dm::PetscDM) end

@for_petsc function DMGetCoordinatesLocalized(petsclib::$UnionPetscLib, dm::PetscDM )
	areLocalized_ = Ref{PetscBool}()

    @chk ccall(
               (:DMGetCoordinatesLocalized, $petsc_library),
               PetscErrorCode,
               (CDM, Ptr{PetscBool}),
               dm, areLocalized_,
              )

	areLocalized = areLocalized_[]

	return areLocalized
end 

"""
	sparse::PetscBool = DMGetSparseLocalize(petsclib::PetscLibType,dm::PetscDM) 
Check if the `DM` coordinates should be localized only for cells near the periodic boundary.

Not collective

Input Parameter:
- `dm` - The `DM`

Output Parameter:
- `sparse` - `PETSC_TRUE` if only cells near the periodic boundary are localized

Level: intermediate

-seealso: `DMSetSparseLocalize()`, `DMLocalizeCoordinates()`, `DMSetPeriodicity()`

# External Links
$(_doc_external("Dm/DMGetSparseLocalize"))
"""
function DMGetSparseLocalize(petsclib::PetscLibType, dm::PetscDM) end

@for_petsc function DMGetSparseLocalize(petsclib::$UnionPetscLib, dm::PetscDM )
	sparse_ = Ref{PetscBool}()

    @chk ccall(
               (:DMGetSparseLocalize, $petsc_library),
               PetscErrorCode,
               (CDM, Ptr{PetscBool}),
               dm, sparse_,
              )

	sparse = sparse_[]

	return sparse
end 

"""
	DMSetSparseLocalize(petsclib::PetscLibType,dm::PetscDM, sparse::PetscBool) 
Set the flag indicating that `DM` coordinates should be localized only for cells near the periodic boundary.

Logically collective

Input Parameters:
- `dm`     - The `DM`
- `sparse` - `PETSC_TRUE` if only cells near the periodic boundary are localized

Level: intermediate

-seealso: `DMGetSparseLocalize()`, `DMLocalizeCoordinates()`, `DMSetPeriodicity()`

# External Links
$(_doc_external("Dm/DMSetSparseLocalize"))
"""
function DMSetSparseLocalize(petsclib::PetscLibType, dm::PetscDM, sparse::PetscBool) end

@for_petsc function DMSetSparseLocalize(petsclib::$UnionPetscLib, dm::PetscDM, sparse::PetscBool )

    @chk ccall(
               (:DMSetSparseLocalize, $petsc_library),
               PetscErrorCode,
               (CDM, PetscBool),
               dm, sparse,
              )


	return nothing
end 

"""
	DMLocalizeCoordinates(petsclib::PetscLibType,dm::PetscDM) 
If a mesh is periodic, create local coordinates for cells having periodic faces

Collective

Input Parameter:
- `dm` - The `DM`

Level: developer

-seealso: `DM`, `DMSetPeriodicity()`, `DMLocalizeCoordinate()`, `DMLocalizeAddCoordinate()`

# External Links
$(_doc_external("Dm/DMLocalizeCoordinates"))
"""
function DMLocalizeCoordinates(petsclib::PetscLibType, dm::PetscDM) end

@for_petsc function DMLocalizeCoordinates(petsclib::$UnionPetscLib, dm::PetscDM )

    @chk ccall(
               (:DMLocalizeCoordinates, $petsc_library),
               PetscErrorCode,
               (CDM,),
               dm,
              )


	return nothing
end 

"""
	DMForestRegisterType(petsclib::PetscLibType,name::DMType) 
Registers a `DMType` as a subtype of `DMFOREST` (so that `DMIsForest()` will be correct)

Not Collective

Input Parameter:
- `name` - the name of the type

Level: advanced

-seealso: `DMFOREST`, `DMIsForest()`

# External Links
$(_doc_external("Dm/DMForestRegisterType"))
"""
function DMForestRegisterType(petsclib::PetscLibType, name::DMType) end

@for_petsc function DMForestRegisterType(petsclib::$UnionPetscLib, name::DMType )

    @chk ccall(
               (:DMForestRegisterType, $petsc_library),
               PetscErrorCode,
               (DMType,),
               name,
              )


	return nothing
end 

"""
	isForest::PetscBool = DMIsForest(petsclib::PetscLibType,dm::PetscDM) 
Check whether a DM uses the DMFOREST interface for hierarchically

Not Collective

Input Parameter:
- `dm` - the DM object

Output Parameter:
- `isForest` - whether dm is a subtype of DMFOREST

Level: intermediate

-seealso: `DMFOREST`, `DMForestRegisterType()`

# External Links
$(_doc_external("Dm/DMIsForest"))
"""
function DMIsForest(petsclib::PetscLibType, dm::PetscDM) end

@for_petsc function DMIsForest(petsclib::$UnionPetscLib, dm::PetscDM )
	isForest_ = Ref{PetscBool}()

    @chk ccall(
               (:DMIsForest, $petsc_library),
               PetscErrorCode,
               (CDM, Ptr{PetscBool}),
               dm, isForest_,
              )

	isForest = isForest_[]

	return isForest
end 

"""
	DMForestTemplate(petsclib::PetscLibType,dm::PetscDM, comm::MPI_Comm, tdm::PetscDM) 
Create a new `DM` that will be adapted from a source `DM`.

Collective

Input Parameters:
- `dm`   - the source `DM` object
- `comm` - the communicator for the new `DM` (this communicator is currently ignored, but is present so that `DMForestTemplate()` can be used within `DMCoarsen()`)

Output Parameter:
- `tdm` - the new `DM` object

Level: intermediate

-seealso: `DM`, `DMFOREST`, `DMForestSetAdaptivityForest()`

# External Links
$(_doc_external("Dm/DMForestTemplate"))
"""
function DMForestTemplate(petsclib::PetscLibType, dm::PetscDM, comm::MPI_Comm, tdm::PetscDM) end

@for_petsc function DMForestTemplate(petsclib::$UnionPetscLib, dm::PetscDM, comm::MPI_Comm, tdm::PetscDM )
	tdm_ = Ref(tdm.ptr)

    @chk ccall(
               (:DMForestTemplate, $petsc_library),
               PetscErrorCode,
               (CDM, MPI_Comm, Ptr{CDM}),
               dm, comm, tdm_,
              )

	tdm.ptr = C_NULL

	return nothing
end 

"""
	DMForestSetTopology(petsclib::PetscLibType,dm::PetscDM, topology::DMForestTopology) 
Set the topology of a `DMFOREST` during the pre
"cube", "shell") and can be interpreted by subtypes of `DMFOREST`) to construct the base DM of a forest during
`DMSetUp()`.

Logically collectiv

Input Parameters:
- `dm`       - the forest
- `topology` - the topology of the forest

Level: intermediate

-seealso: `DM`, `DMFOREST`, `DMForestGetTopology()`, `DMForestSetBaseDM()`

# External Links
$(_doc_external("Dm/DMForestSetTopology"))
"""
function DMForestSetTopology(petsclib::PetscLibType, dm::PetscDM, topology::DMForestTopology) end

@for_petsc function DMForestSetTopology(petsclib::$UnionPetscLib, dm::PetscDM, topology::DMForestTopology )

    @chk ccall(
               (:DMForestSetTopology, $petsc_library),
               PetscErrorCode,
               (CDM, DMForestTopology),
               dm, topology,
              )


	return nothing
end 

"""
	DMForestGetTopology(petsclib::PetscLibType,dm::PetscDM, topology::DMForestTopology) 
Get a string describing the topology of a `DMFOREST`.

Not Collective

Input Parameter:
- `dm` - the forest

Output Parameter:
- `topology` - the topology of the forest (e.g., 'cube', 'shell')

Level: intermediate

-seealso: `DM`, `DMFOREST`, `DMForestSetTopology()`

# External Links
$(_doc_external("Dm/DMForestGetTopology"))
"""
function DMForestGetTopology(petsclib::PetscLibType, dm::PetscDM, topology::DMForestTopology) end

@for_petsc function DMForestGetTopology(petsclib::$UnionPetscLib, dm::PetscDM, topology::DMForestTopology )

    @chk ccall(
               (:DMForestGetTopology, $petsc_library),
               PetscErrorCode,
               (CDM, Ptr{DMForestTopology}),
               dm, topology,
              )


	return nothing
end 

"""
	DMForestSetBaseDM(petsclib::PetscLibType,dm::PetscDM, base::PetscDM) 
During the pre
`DMFOREST` forest.

Logically Collective

Input Parameters:
- `dm`   - the forest
- `base` - the base `DM` of the forest

Level: intermediate

-seealso: `DM`, `DMFOREST`, `DMForestGetBaseDM()`

# External Links
$(_doc_external("Dm/DMForestSetBaseDM"))
"""
function DMForestSetBaseDM(petsclib::PetscLibType, dm::PetscDM, base::PetscDM) end

@for_petsc function DMForestSetBaseDM(petsclib::$UnionPetscLib, dm::PetscDM, base::PetscDM )

    @chk ccall(
               (:DMForestSetBaseDM, $petsc_library),
               PetscErrorCode,
               (CDM, CDM),
               dm, base,
              )


	return nothing
end 

"""
	DMForestGetBaseDM(petsclib::PetscLibType,dm::PetscDM, base::PetscDM) 
Get the base `DM` of a `DMFOREST`

Not Collective

Input Parameter:
- `dm` - the forest

Output Parameter:
- `base` - the base `DM` of the forest

Level: intermediate

-seealso: `DM`, `DMFOREST`, `DMForestSetBaseDM()`

# External Links
$(_doc_external("Dm/DMForestGetBaseDM"))
"""
function DMForestGetBaseDM(petsclib::PetscLibType, dm::PetscDM, base::PetscDM) end

@for_petsc function DMForestGetBaseDM(petsclib::$UnionPetscLib, dm::PetscDM, base::PetscDM )
	base_ = Ref(base.ptr)

    @chk ccall(
               (:DMForestGetBaseDM, $petsc_library),
               PetscErrorCode,
               (CDM, Ptr{CDM}),
               dm, base_,
              )

	base.ptr = C_NULL

	return nothing
end 

"""
	DMForestSetBaseCoordinateMapping(petsclib::PetscLibType,dm::PetscDM, func::external, ctx::Cvoid) 

# External Links
$(_doc_external("Dm/DMForestSetBaseCoordinateMapping"))
"""
function DMForestSetBaseCoordinateMapping(petsclib::PetscLibType, dm::PetscDM, func::external, ctx::Cvoid) end

@for_petsc function DMForestSetBaseCoordinateMapping(petsclib::$UnionPetscLib, dm::PetscDM, func::external, ctx::Cvoid )

    @chk ccall(
               (:DMForestSetBaseCoordinateMapping, $petsc_library),
               PetscErrorCode,
               (CDM, external, Ptr{Cvoid}),
               dm, func, ctx,
              )


	return nothing
end 

"""
	DMForestSetAdaptivityForest(petsclib::PetscLibType,dm::PetscDM, adapt::PetscDM) 
During the pre
current forest will be adapted (e.g., the current forest will be
refined/coarsened/repartitioned from it) in `DMSetUp()`.

Logically Collective

Input Parameters:
- `dm`    - the new forest, which will be constructed from adapt
- `adapt` - the old forest

Level: intermediate

-seealso: `DM`, `DMFOREST`, `DMForestGetAdaptivityForest()`, `DMForestSetAdaptivityPurpose()`

# External Links
$(_doc_external("Dm/DMForestSetAdaptivityForest"))
"""
function DMForestSetAdaptivityForest(petsclib::PetscLibType, dm::PetscDM, adapt::PetscDM) end

@for_petsc function DMForestSetAdaptivityForest(petsclib::$UnionPetscLib, dm::PetscDM, adapt::PetscDM )

    @chk ccall(
               (:DMForestSetAdaptivityForest, $petsc_library),
               PetscErrorCode,
               (CDM, CDM),
               dm, adapt,
              )


	return nothing
end 

"""
	DMForestGetAdaptivityForest(petsclib::PetscLibType,dm::PetscDM, adapt::PetscDM) 
Get the forest from which the current forest is adapted.

Not Collective

Input Parameter:
- `dm` - the forest

Output Parameter:
- `adapt` - the forest from which `dm` is/was adapted

Level: intermediate

-seealso: `DM`, `DMFOREST`, `DMForestSetAdaptivityForest()`, `DMForestSetAdaptivityPurpose()`

# External Links
$(_doc_external("Dm/DMForestGetAdaptivityForest"))
"""
function DMForestGetAdaptivityForest(petsclib::PetscLibType, dm::PetscDM, adapt::PetscDM) end

@for_petsc function DMForestGetAdaptivityForest(petsclib::$UnionPetscLib, dm::PetscDM, adapt::PetscDM )
	adapt_ = Ref(adapt.ptr)

    @chk ccall(
               (:DMForestGetAdaptivityForest, $petsc_library),
               PetscErrorCode,
               (CDM, Ptr{CDM}),
               dm, adapt_,
              )

	adapt.ptr = C_NULL

	return nothing
end 

"""
	DMForestSetAdaptivityPurpose(petsclib::PetscLibType,dm::PetscDM, purpose::DMAdaptFlag) 
During the pre
source (set with `DMForestSetAdaptivityForest()`) for the purpose of refinement (`DM_ADAPT_REFINE`), coarsening
(`DM_ADAPT_COARSEN`), or undefined (`DM_ADAPT_DETERMINE`).

Logically Collective

Input Parameters:
- `dm`      - the forest
- `purpose` - the adaptivity purpose

Level: advanced

-seealso: `DM`, `DMFOREST`, `DMForestTemplate()`, `DMForestSetAdaptivityForest()`, `DMForestGetAdaptivityForest()`, `DMAdaptFlag`

# External Links
$(_doc_external("Dm/DMForestSetAdaptivityPurpose"))
"""
function DMForestSetAdaptivityPurpose(petsclib::PetscLibType, dm::PetscDM, purpose::DMAdaptFlag) end

@for_petsc function DMForestSetAdaptivityPurpose(petsclib::$UnionPetscLib, dm::PetscDM, purpose::DMAdaptFlag )

    @chk ccall(
               (:DMForestSetAdaptivityPurpose, $petsc_library),
               PetscErrorCode,
               (CDM, DMAdaptFlag),
               dm, purpose,
              )


	return nothing
end 

"""
	DMForestGetAdaptivityPurpose(petsclib::PetscLibType,dm::PetscDM, purpose::DMAdaptFlag) 
Get whether the current `DM` is being adapted from its source (set with
`DMForestSetAdaptivityForest()`) for the purpose of refinement (`DM_ADAPT_REFINE`), coarsening (`DM_ADAPT_COARSEN`),
coarsening only the last level (`DM_ADAPT_COARSEN_LAST`) or undefined (`DM_ADAPT_DETERMINE`).

Not Collective

Input Parameter:
- `dm` - the forest

Output Parameter:
- `purpose` - the adaptivity purpose

Level: advanced

-seealso: `DM`, `DMFOREST`, `DMForestTemplate()`, `DMForestSetAdaptivityForest()`, `DMForestGetAdaptivityForest()`, `DMAdaptFlag`

# External Links
$(_doc_external("Dm/DMForestGetAdaptivityPurpose"))
"""
function DMForestGetAdaptivityPurpose(petsclib::PetscLibType, dm::PetscDM, purpose::DMAdaptFlag) end

@for_petsc function DMForestGetAdaptivityPurpose(petsclib::$UnionPetscLib, dm::PetscDM, purpose::DMAdaptFlag )

    @chk ccall(
               (:DMForestGetAdaptivityPurpose, $petsc_library),
               PetscErrorCode,
               (CDM, Ptr{DMAdaptFlag}),
               dm, purpose,
              )


	return nothing
end 

"""
	DMForestSetAdjacencyDimension(petsclib::PetscLibType,dm::PetscDM, adjDim::PetscInt) 
During the pre
cell adjacency (for the purposes of partitioning and overlap).

Logically Collective

Input Parameters:
- `dm`     - the forest
- `adjDim` - default 0 (i.e., vertices determine adjacency)

Level: intermediate

-seealso: `DM`, `DMFOREST`, `DMForestGetAdjacencyDimension()`, `DMForestSetAdjacencyCodimension()`, `DMForestSetPartitionOverlap()`

# External Links
$(_doc_external("Dm/DMForestSetAdjacencyDimension"))
"""
function DMForestSetAdjacencyDimension(petsclib::PetscLibType, dm::PetscDM, adjDim::PetscInt) end

@for_petsc function DMForestSetAdjacencyDimension(petsclib::$UnionPetscLib, dm::PetscDM, adjDim::$PetscInt )

    @chk ccall(
               (:DMForestSetAdjacencyDimension, $petsc_library),
               PetscErrorCode,
               (CDM, $PetscInt),
               dm, adjDim,
              )


	return nothing
end 

"""
	DMForestSetAdjacencyCodimension(petsclib::PetscLibType,dm::PetscDM, adjCodim::PetscInt) 
Like `DMForestSetAdjacencyDimension()`, but specified as a co
e.g., adjacency based on facets can be specified by codimension 1 in all cases)

Logically Collective

Input Parameters:
- `dm`       - the forest
- `adjCodim` - default is the dimension of the forest (see `DMGetDimension()`), since this is the codimension of vertices

Level: intermediate

-seealso: `DM`, `DMFOREST`, `DMForestGetAdjacencyCodimension()`, `DMForestSetAdjacencyDimension()`

# External Links
$(_doc_external("Dm/DMForestSetAdjacencyCodimension"))
"""
function DMForestSetAdjacencyCodimension(petsclib::PetscLibType, dm::PetscDM, adjCodim::PetscInt) end

@for_petsc function DMForestSetAdjacencyCodimension(petsclib::$UnionPetscLib, dm::PetscDM, adjCodim::$PetscInt )

    @chk ccall(
               (:DMForestSetAdjacencyCodimension, $petsc_library),
               PetscErrorCode,
               (CDM, $PetscInt),
               dm, adjCodim,
              )


	return nothing
end 

"""
	adjDim::PetscInt = DMForestGetAdjacencyDimension(petsclib::PetscLibType,dm::PetscDM) 
Get the dimension of interface points that determine cell adjacency (for the
purposes of partitioning and overlap).

Not Collective

Input Parameter:
- `dm` - the forest

Output Parameter:
- `adjDim` - default 0 (i.e., vertices determine adjacency)

Level: intermediate

-seealso: `DM`, `DMFOREST`, `DMForestSetAdjacencyDimension()`, `DMForestGetAdjacencyCodimension()`, `DMForestSetPartitionOverlap()`

# External Links
$(_doc_external("Dm/DMForestGetAdjacencyDimension"))
"""
function DMForestGetAdjacencyDimension(petsclib::PetscLibType, dm::PetscDM) end

@for_petsc function DMForestGetAdjacencyDimension(petsclib::$UnionPetscLib, dm::PetscDM )
	adjDim_ = Ref{$PetscInt}()

    @chk ccall(
               (:DMForestGetAdjacencyDimension, $petsc_library),
               PetscErrorCode,
               (CDM, Ptr{$PetscInt}),
               dm, adjDim_,
              )

	adjDim = adjDim_[]

	return adjDim
end 

"""
	adjCodim::PetscInt = DMForestGetAdjacencyCodimension(petsclib::PetscLibType,dm::PetscDM) 
Like `DMForestGetAdjacencyDimension()`, but specified as a co
e.g., adjacency based on facets can be specified by codimension 1 in all cases)

Not Collective

Input Parameter:
- `dm` - the forest

Output Parameter:
- `adjCodim` - default isthe dimension of the forest (see `DMGetDimension()`), since this is the codimension of vertices

Level: intermediate

-seealso: `DM`, `DMFOREST`, `DMForestSetAdjacencyCodimension()`, `DMForestGetAdjacencyDimension()`

# External Links
$(_doc_external("Dm/DMForestGetAdjacencyCodimension"))
"""
function DMForestGetAdjacencyCodimension(petsclib::PetscLibType, dm::PetscDM) end

@for_petsc function DMForestGetAdjacencyCodimension(petsclib::$UnionPetscLib, dm::PetscDM )
	adjCodim_ = Ref{$PetscInt}()

    @chk ccall(
               (:DMForestGetAdjacencyCodimension, $petsc_library),
               PetscErrorCode,
               (CDM, Ptr{$PetscInt}),
               dm, adjCodim_,
              )

	adjCodim = adjCodim_[]

	return adjCodim
end 

"""
	DMForestSetPartitionOverlap(petsclib::PetscLibType,dm::PetscDM, overlap::PetscInt) 
During the pre
partitions of a forest, with values > 0 indicating subdomains that are expanded by that many iterations of adding
adjacent cells

Logically Collective

Input Parameters:
- `dm`      - the forest
- `overlap` - default 0

Level: intermediate

-seealso: `DM`, `DMFOREST`, `DMForestGetPartitionOverlap()`, `DMForestSetAdjacencyDimension()`, `DMForestSetAdjacencyCodimension()`

# External Links
$(_doc_external("Dm/DMForestSetPartitionOverlap"))
"""
function DMForestSetPartitionOverlap(petsclib::PetscLibType, dm::PetscDM, overlap::PetscInt) end

@for_petsc function DMForestSetPartitionOverlap(petsclib::$UnionPetscLib, dm::PetscDM, overlap::$PetscInt )

    @chk ccall(
               (:DMForestSetPartitionOverlap, $petsc_library),
               PetscErrorCode,
               (CDM, $PetscInt),
               dm, overlap,
              )


	return nothing
end 

"""
	overlap::PetscInt = DMForestGetPartitionOverlap(petsclib::PetscLibType,dm::PetscDM) 
Get the amount of cell
> 0 indicating subdomains that are expanded by that many iterations of adding adjacent cells

Not Collective

Input Parameter:
- `dm` - the forest

Output Parameter:
- `overlap` - default 0

Level: intermediate

-seealso: `DM`, `DMFOREST`, `DMForestSetAdjacencyDimension()`, `DMForestSetAdjacencyCodimension()`

# External Links
$(_doc_external("Dm/DMForestGetPartitionOverlap"))
"""
function DMForestGetPartitionOverlap(petsclib::PetscLibType, dm::PetscDM) end

@for_petsc function DMForestGetPartitionOverlap(petsclib::$UnionPetscLib, dm::PetscDM )
	overlap_ = Ref{$PetscInt}()

    @chk ccall(
               (:DMForestGetPartitionOverlap, $petsc_library),
               PetscErrorCode,
               (CDM, Ptr{$PetscInt}),
               dm, overlap_,
              )

	overlap = overlap_[]

	return overlap
end 

"""
	DMForestSetMinimumRefinement(petsclib::PetscLibType,dm::PetscDM, minRefinement::PetscInt) 
During the pre
`DM`, see `DMForestGetBaseDM()`) allowed in the forest.  If the forest is being created by coarsening a previous forest
(see `DMForestGetAdaptivityForest()`) this limits the amount of coarsening.

Logically Collective

Input Parameters:
- `dm`            - the forest
- `minRefinement` - default `PETSC_DEFAULT` (interpreted by the subtype of `DMFOREST`)

Level: intermediate

-seealso: `DM`, `DMFOREST`, `DMForestGetMinimumRefinement()`, `DMForestSetMaximumRefinement()`, `DMForestSetInitialRefinement()`, `DMForestGetBaseDM()`, `DMForestGetAdaptivityForest()`

# External Links
$(_doc_external("Dm/DMForestSetMinimumRefinement"))
"""
function DMForestSetMinimumRefinement(petsclib::PetscLibType, dm::PetscDM, minRefinement::PetscInt) end

@for_petsc function DMForestSetMinimumRefinement(petsclib::$UnionPetscLib, dm::PetscDM, minRefinement::$PetscInt )

    @chk ccall(
               (:DMForestSetMinimumRefinement, $petsc_library),
               PetscErrorCode,
               (CDM, $PetscInt),
               dm, minRefinement,
              )


	return nothing
end 

"""
	minRefinement::PetscInt = DMForestGetMinimumRefinement(petsclib::PetscLibType,dm::PetscDM) 
Get the minimum level of refinement (relative to the base `DM`, see
`DMForestGetBaseDM()`) allowed in the forest.  If the forest is being created by coarsening a previous forest (see
`DMForestGetAdaptivityForest()`), this limits the amount of coarsening.

Not Collective

Input Parameter:
- `dm` - the forest

Output Parameter:
- `minRefinement` - default `PETSC_DEFAULT` (interpreted by the subtype of `DMFOREST`)

Level: intermediate

-seealso: `DM`, `DMFOREST`, `DMForestSetMinimumRefinement()`, `DMForestGetMaximumRefinement()`, `DMForestGetInitialRefinement()`, `DMForestGetBaseDM()`, `DMForestGetAdaptivityForest()`

# External Links
$(_doc_external("Dm/DMForestGetMinimumRefinement"))
"""
function DMForestGetMinimumRefinement(petsclib::PetscLibType, dm::PetscDM) end

@for_petsc function DMForestGetMinimumRefinement(petsclib::$UnionPetscLib, dm::PetscDM )
	minRefinement_ = Ref{$PetscInt}()

    @chk ccall(
               (:DMForestGetMinimumRefinement, $petsc_library),
               PetscErrorCode,
               (CDM, Ptr{$PetscInt}),
               dm, minRefinement_,
              )

	minRefinement = minRefinement_[]

	return minRefinement
end 

"""
	DMForestSetInitialRefinement(petsclib::PetscLibType,dm::PetscDM, initRefinement::PetscInt) 
During the pre
`DM`, see `DMForestGetBaseDM()`) allowed in the forest.

Logically Collective

Input Parameters:
- `dm`             - the forest
- `initRefinement` - default `PETSC_DEFAULT` (interpreted by the subtype of `DMFOREST`)

Level: intermediate

-seealso: `DM`, `DMFOREST`, `DMForestSetMinimumRefinement()`, `DMForestSetMaximumRefinement()`, `DMForestGetBaseDM()`

# External Links
$(_doc_external("Dm/DMForestSetInitialRefinement"))
"""
function DMForestSetInitialRefinement(petsclib::PetscLibType, dm::PetscDM, initRefinement::PetscInt) end

@for_petsc function DMForestSetInitialRefinement(petsclib::$UnionPetscLib, dm::PetscDM, initRefinement::$PetscInt )

    @chk ccall(
               (:DMForestSetInitialRefinement, $petsc_library),
               PetscErrorCode,
               (CDM, $PetscInt),
               dm, initRefinement,
              )


	return nothing
end 

"""
	initRefinement::PetscInt = DMForestGetInitialRefinement(petsclib::PetscLibType,dm::PetscDM) 
Get the initial level of refinement (relative to the base `DM`, see
`DMForestGetBaseDM()`) allowed in the forest.

Not Collective

Input Parameter:
- `dm` - the forest

Output Parameter:
- `initRefinement` - default `PETSC_DEFAULT` (interpreted by the subtype of `DMFOREST`)

Level: intermediate

-seealso: `DM`, `DMFOREST`, `DMForestSetMinimumRefinement()`, `DMForestSetMaximumRefinement()`, `DMForestGetBaseDM()`

# External Links
$(_doc_external("Dm/DMForestGetInitialRefinement"))
"""
function DMForestGetInitialRefinement(petsclib::PetscLibType, dm::PetscDM) end

@for_petsc function DMForestGetInitialRefinement(petsclib::$UnionPetscLib, dm::PetscDM )
	initRefinement_ = Ref{$PetscInt}()

    @chk ccall(
               (:DMForestGetInitialRefinement, $petsc_library),
               PetscErrorCode,
               (CDM, Ptr{$PetscInt}),
               dm, initRefinement_,
              )

	initRefinement = initRefinement_[]

	return initRefinement
end 

"""
	DMForestSetMaximumRefinement(petsclib::PetscLibType,dm::PetscDM, maxRefinement::PetscInt) 
During the pre
`DM`, see `DMForestGetBaseDM()`) allowed in the forest.  If the forest is being created by refining a previous forest
(see `DMForestGetAdaptivityForest()`), this limits the amount of refinement.

Logically Collective

Input Parameters:
- `dm`            - the forest
- `maxRefinement` - default `PETSC_DEFAULT` (interpreted by the subtype of `DMFOREST`)

Level: intermediate

-seealso: `DM`, `DMFOREST`, `DMForestGetMinimumRefinement()`, `DMForestSetInitialRefinement()`, `DMForestGetBaseDM()`, `DMForestGetAdaptivityDM()`

# External Links
$(_doc_external("Dm/DMForestSetMaximumRefinement"))
"""
function DMForestSetMaximumRefinement(petsclib::PetscLibType, dm::PetscDM, maxRefinement::PetscInt) end

@for_petsc function DMForestSetMaximumRefinement(petsclib::$UnionPetscLib, dm::PetscDM, maxRefinement::$PetscInt )

    @chk ccall(
               (:DMForestSetMaximumRefinement, $petsc_library),
               PetscErrorCode,
               (CDM, $PetscInt),
               dm, maxRefinement,
              )


	return nothing
end 

"""
	maxRefinement::PetscInt = DMForestGetMaximumRefinement(petsclib::PetscLibType,dm::PetscDM) 
Get the maximum level of refinement (relative to the base `DM`, see
`DMForestGetBaseDM()`) allowed in the forest.  If the forest is being created by refining a previous forest (see
`DMForestGetAdaptivityForest()`), this limits the amount of refinement.

Not Collective

Input Parameter:
- `dm` - the forest

Output Parameter:
- `maxRefinement` - default `PETSC_DEFAULT` (interpreted by the subtype of `DMFOREST`)

Level: intermediate

-seealso: `DM`, `DMFOREST`, `DMForestSetMaximumRefinement()`, `DMForestGetMinimumRefinement()`, `DMForestGetInitialRefinement()`, `DMForestGetBaseDM()`, `DMForestGetAdaptivityForest()`

# External Links
$(_doc_external("Dm/DMForestGetMaximumRefinement"))
"""
function DMForestGetMaximumRefinement(petsclib::PetscLibType, dm::PetscDM) end

@for_petsc function DMForestGetMaximumRefinement(petsclib::$UnionPetscLib, dm::PetscDM )
	maxRefinement_ = Ref{$PetscInt}()

    @chk ccall(
               (:DMForestGetMaximumRefinement, $petsc_library),
               PetscErrorCode,
               (CDM, Ptr{$PetscInt}),
               dm, maxRefinement_,
              )

	maxRefinement = maxRefinement_[]

	return maxRefinement
end 

"""
	DMForestSetAdaptivityStrategy(petsclib::PetscLibType,dm::PetscDM, adaptStrategy::DMForestAdaptivityStrategy) 
During the pre

Logically Collective

Input Parameters:
- `dm`            - the forest
- `adaptStrategy` - default `DMFORESTADAPTALL`

Level: advanced

-seealso: `DM`, `DMFOREST`, `DMForestGetAdaptivityStrategy()`, `DMFORESTADAPTALL`, `DMFORESTADAPTANY`

# External Links
$(_doc_external("Dm/DMForestSetAdaptivityStrategy"))
"""
function DMForestSetAdaptivityStrategy(petsclib::PetscLibType, dm::PetscDM, adaptStrategy::DMForestAdaptivityStrategy) end

@for_petsc function DMForestSetAdaptivityStrategy(petsclib::$UnionPetscLib, dm::PetscDM, adaptStrategy::DMForestAdaptivityStrategy )

    @chk ccall(
               (:DMForestSetAdaptivityStrategy, $petsc_library),
               PetscErrorCode,
               (CDM, DMForestAdaptivityStrategy),
               dm, adaptStrategy,
              )


	return nothing
end 

"""
	DMForestGetAdaptivityStrategy(petsclib::PetscLibType,dm::PetscDM, adaptStrategy::DMForestAdaptivityStrategy) 
Get the strategy for combining adaptivity labels from multiple processes.

Not Collective

Input Parameter:
- `dm` - the forest

Output Parameter:
- `adaptStrategy` - the adaptivity strategy (default `DMFORESTADAPTALL`)

Level: advanced

-seealso: `DM`, `DMFOREST`, `DMFORESTADAPTALL`, `DMFORESTADAPTANY`, `DMForestSetAdaptivityStrategy()`

# External Links
$(_doc_external("Dm/DMForestGetAdaptivityStrategy"))
"""
function DMForestGetAdaptivityStrategy(petsclib::PetscLibType, dm::PetscDM, adaptStrategy::DMForestAdaptivityStrategy) end

@for_petsc function DMForestGetAdaptivityStrategy(petsclib::$UnionPetscLib, dm::PetscDM, adaptStrategy::DMForestAdaptivityStrategy )

    @chk ccall(
               (:DMForestGetAdaptivityStrategy, $petsc_library),
               PetscErrorCode,
               (CDM, Ptr{DMForestAdaptivityStrategy}),
               dm, adaptStrategy,
              )


	return nothing
end 

"""
	success::PetscBool = DMForestGetAdaptivitySuccess(petsclib::PetscLibType,dm::PetscDM) 
Return whether the requested adaptation (refinement, coarsening, repartitioning,
etc.) was successful.

Collective

Input Parameter:
- `dm` - the post-adaptation forest

Output Parameter:
- `success` - `PETSC_TRUE` if the post-adaptation forest is different from the pre-adaptation forest.

Level: intermediate

-seealso: `DM`, `DMFOREST`

# External Links
$(_doc_external("Dm/DMForestGetAdaptivitySuccess"))
"""
function DMForestGetAdaptivitySuccess(petsclib::PetscLibType, dm::PetscDM) end

@for_petsc function DMForestGetAdaptivitySuccess(petsclib::$UnionPetscLib, dm::PetscDM )
	success_ = Ref{PetscBool}()

    @chk ccall(
               (:DMForestGetAdaptivitySuccess, $petsc_library),
               PetscErrorCode,
               (CDM, Ptr{PetscBool}),
               dm, success_,
              )

	success = success_[]

	return success
end 

"""
	DMForestSetComputeAdaptivitySF(petsclib::PetscLibType,dm::PetscDM, computeSF::PetscBool) 
During the pre
relating the cells of the pre-adaptation forest to the post-adaptiation forest.

Logically Collective

Input Parameters:
- `dm`        - the post-adaptation forest
- `computeSF` - default `PETSC_TRUE`

Level: advanced

-seealso: `DM`, `DMFOREST`, `DMForestGetComputeAdaptivitySF()`, `DMForestGetAdaptivitySF()`

# External Links
$(_doc_external("Dm/DMForestSetComputeAdaptivitySF"))
"""
function DMForestSetComputeAdaptivitySF(petsclib::PetscLibType, dm::PetscDM, computeSF::PetscBool) end

@for_petsc function DMForestSetComputeAdaptivitySF(petsclib::$UnionPetscLib, dm::PetscDM, computeSF::PetscBool )

    @chk ccall(
               (:DMForestSetComputeAdaptivitySF, $petsc_library),
               PetscErrorCode,
               (CDM, PetscBool),
               dm, computeSF,
              )


	return nothing
end 

"""
	DMForestTransferVec(petsclib::PetscLibType,dmIn::PetscDM, vecIn::PetscVec, dmOut::PetscDM, vecOut::PetscVec, useBCs::PetscBool, time::PetscReal) 

# External Links
$(_doc_external("Dm/DMForestTransferVec"))
"""
function DMForestTransferVec(petsclib::PetscLibType, dmIn::PetscDM, vecIn::PetscVec, dmOut::PetscDM, vecOut::PetscVec, useBCs::PetscBool, time::PetscReal) end

@for_petsc function DMForestTransferVec(petsclib::$UnionPetscLib, dmIn::PetscDM, vecIn::PetscVec, dmOut::PetscDM, vecOut::PetscVec, useBCs::PetscBool, time::$PetscReal )

    @chk ccall(
               (:DMForestTransferVec, $petsc_library),
               PetscErrorCode,
               (CDM, CVec, CDM, CVec, PetscBool, $PetscReal),
               dmIn, vecIn, dmOut, vecOut, useBCs, time,
              )


	return nothing
end 

"""
	DMForestTransferVecFromBase(petsclib::PetscLibType,dm::PetscDM, vecIn::PetscVec, vecOut::PetscVec) 

# External Links
$(_doc_external("Dm/DMForestTransferVecFromBase"))
"""
function DMForestTransferVecFromBase(petsclib::PetscLibType, dm::PetscDM, vecIn::PetscVec, vecOut::PetscVec) end

@for_petsc function DMForestTransferVecFromBase(petsclib::$UnionPetscLib, dm::PetscDM, vecIn::PetscVec, vecOut::PetscVec )

    @chk ccall(
               (:DMForestTransferVecFromBase, $petsc_library),
               PetscErrorCode,
               (CDM, CVec, CVec),
               dm, vecIn, vecOut,
              )


	return nothing
end 

"""
	computeSF::PetscBool = DMForestGetComputeAdaptivitySF(petsclib::PetscLibType,dm::PetscDM) 
Get whether transfer `PetscSF`s should be computed relating the cells of the
pre-adaptation forest to the post-adaptiation forest.  After `DMSetUp()` is called, these transfer PetscSFs can be
accessed with `DMForestGetAdaptivitySF()`.

Not Collective

Input Parameter:
- `dm` - the post-adaptation forest

Output Parameter:
- `computeSF` - default `PETSC_TRUE`

Level: advanced

-seealso: `DM`, `DMFOREST`, `DMForestSetComputeAdaptivitySF()`, `DMForestGetAdaptivitySF()`

# External Links
$(_doc_external("Dm/DMForestGetComputeAdaptivitySF"))
"""
function DMForestGetComputeAdaptivitySF(petsclib::PetscLibType, dm::PetscDM) end

@for_petsc function DMForestGetComputeAdaptivitySF(petsclib::$UnionPetscLib, dm::PetscDM )
	computeSF_ = Ref{PetscBool}()

    @chk ccall(
               (:DMForestGetComputeAdaptivitySF, $petsc_library),
               PetscErrorCode,
               (CDM, Ptr{PetscBool}),
               dm, computeSF_,
              )

	computeSF = computeSF_[]

	return computeSF
end 

"""
	DMForestGetAdaptivitySF(petsclib::PetscLibType,dm::PetscDM, preCoarseToFine::PetscSF, coarseToPreFine::PetscSF) 
Get `PetscSF`s that relate the pre
post-adaptation forest.

Not Collective

Input Parameter:
- `dm` - the post-adaptation forest

Output Parameters:
- `preCoarseToFine` - pre-adaptation coarse cells to post-adaptation fine cells: BCast goes from pre- to post-
- `coarseToPreFine` - post-adaptation coarse cells to pre-adaptation fine cells: BCast goes from post- to pre-

Level: advanced

-seealso: `DM`, `DMFOREST`, `DMForestGetComputeAdaptivitySF()`, `DMForestSetComputeAdaptivitySF()`

# External Links
$(_doc_external("Dm/DMForestGetAdaptivitySF"))
"""
function DMForestGetAdaptivitySF(petsclib::PetscLibType, dm::PetscDM, preCoarseToFine::PetscSF, coarseToPreFine::PetscSF) end

@for_petsc function DMForestGetAdaptivitySF(petsclib::$UnionPetscLib, dm::PetscDM, preCoarseToFine::PetscSF, coarseToPreFine::PetscSF )

    @chk ccall(
               (:DMForestGetAdaptivitySF, $petsc_library),
               PetscErrorCode,
               (CDM, Ptr{PetscSF}, Ptr{PetscSF}),
               dm, preCoarseToFine, coarseToPreFine,
              )


	return nothing
end 

"""
	DMForestSetGradeFactor(petsclib::PetscLibType,dm::PetscDM, grade::PetscInt) 
During the pre
mesh, e.g. give 2 to indicate that the diameter of neighboring cells should differ by at most
a factor of 2.

Logically Collective

Input Parameters:
- `dm`    - the forest
- `grade` - the grading factor

Level: advanced

-seealso: `DM`, `DMFOREST`, `DMForestGetGradeFactor()`

# External Links
$(_doc_external("Dm/DMForestSetGradeFactor"))
"""
function DMForestSetGradeFactor(petsclib::PetscLibType, dm::PetscDM, grade::PetscInt) end

@for_petsc function DMForestSetGradeFactor(petsclib::$UnionPetscLib, dm::PetscDM, grade::$PetscInt )

    @chk ccall(
               (:DMForestSetGradeFactor, $petsc_library),
               PetscErrorCode,
               (CDM, $PetscInt),
               dm, grade,
              )


	return nothing
end 

"""
	grade::PetscInt = DMForestGetGradeFactor(petsclib::PetscLibType,dm::PetscDM) 
Get the desired amount of grading in the mesh, e.g. give 2 to indicate that the diameter of
neighboring cells should differ by at most a factor of 2.  Subtypes of `DMFOREST` may only support one particular
choice of grading factor.

Not Collective

Input Parameter:
- `dm` - the forest

Output Parameter:
- `grade` - the grading factor

Level: advanced

-seealso: `DM`, `DMFOREST`, `DMForestSetGradeFactor()`

# External Links
$(_doc_external("Dm/DMForestGetGradeFactor"))
"""
function DMForestGetGradeFactor(petsclib::PetscLibType, dm::PetscDM) end

@for_petsc function DMForestGetGradeFactor(petsclib::$UnionPetscLib, dm::PetscDM )
	grade_ = Ref{$PetscInt}()

    @chk ccall(
               (:DMForestGetGradeFactor, $petsc_library),
               PetscErrorCode,
               (CDM, Ptr{$PetscInt}),
               dm, grade_,
              )

	grade = grade_[]

	return grade
end 

"""
	DMForestSetCellWeightFactor(petsclib::PetscLibType,dm::PetscDM, weightsFactor::PetscReal) 
During the pre
the cell weight (see `DMForestSetCellWeights()`) when calculating partitions.

Logically Collective

Input Parameters:
- `dm`            - the forest
- `weightsFactor` - default 1.

Level: advanced

-seealso: `DM`, `DMFOREST`, `DMForestGetCellWeightFactor()`, `DMForestSetCellWeights()`

# External Links
$(_doc_external("Dm/DMForestSetCellWeightFactor"))
"""
function DMForestSetCellWeightFactor(petsclib::PetscLibType, dm::PetscDM, weightsFactor::PetscReal) end

@for_petsc function DMForestSetCellWeightFactor(petsclib::$UnionPetscLib, dm::PetscDM, weightsFactor::$PetscReal )

    @chk ccall(
               (:DMForestSetCellWeightFactor, $petsc_library),
               PetscErrorCode,
               (CDM, $PetscReal),
               dm, weightsFactor,
              )


	return nothing
end 

"""
	weightsFactor::PetscReal = DMForestGetCellWeightFactor(petsclib::PetscLibType,dm::PetscDM) 
Get the factor by which the level of refinement changes the cell weight (see
`DMForestSetCellWeights()`) when calculating partitions.

Not Collective

Input Parameter:
- `dm` - the forest

Output Parameter:
- `weightsFactor` - default 1.

Level: advanced

-seealso: `DM`, `DMFOREST`, `DMForestSetCellWeightFactor()`, `DMForestSetCellWeights()`

# External Links
$(_doc_external("Dm/DMForestGetCellWeightFactor"))
"""
function DMForestGetCellWeightFactor(petsclib::PetscLibType, dm::PetscDM) end

@for_petsc function DMForestGetCellWeightFactor(petsclib::$UnionPetscLib, dm::PetscDM )
	weightsFactor_ = Ref{$PetscReal}()

    @chk ccall(
               (:DMForestGetCellWeightFactor, $petsc_library),
               PetscErrorCode,
               (CDM, Ptr{$PetscReal}),
               dm, weightsFactor_,
              )

	weightsFactor = weightsFactor_[]

	return weightsFactor
end 

"""
	cStart::PetscInt,cEnd::PetscInt = DMForestGetCellChart(petsclib::PetscLibType,dm::PetscDM) 
After the setup phase, get the local half

Not Collective

Input Parameter:
- `dm` - the forest

Output Parameters:
- `cStart` - the first cell on this process
- `cEnd`   - one after the final cell on this process

Level: intermediate

-seealso: `DM`, `DMFOREST`, `DMForestGetCellSF()`

# External Links
$(_doc_external("Dm/DMForestGetCellChart"))
"""
function DMForestGetCellChart(petsclib::PetscLibType, dm::PetscDM) end

@for_petsc function DMForestGetCellChart(petsclib::$UnionPetscLib, dm::PetscDM )
	cStart_ = Ref{$PetscInt}()
	cEnd_ = Ref{$PetscInt}()

    @chk ccall(
               (:DMForestGetCellChart, $petsc_library),
               PetscErrorCode,
               (CDM, Ptr{$PetscInt}, Ptr{$PetscInt}),
               dm, cStart_, cEnd_,
              )

	cStart = cStart_[]
	cEnd = cEnd_[]

	return cStart,cEnd
end 

"""
	DMForestGetCellSF(petsclib::PetscLibType,dm::PetscDM, cellSF::PetscSF) 
After the setup phase, get the `PetscSF` for overlapping cells between processes

Not Collective

Input Parameter:
- `dm` - the forest

Output Parameter:
- `cellSF` - the `PetscSF`

Level: intermediate

-seealso: `DM`, `DMFOREST`, `DMForestGetCellChart()`

# External Links
$(_doc_external("Dm/DMForestGetCellSF"))
"""
function DMForestGetCellSF(petsclib::PetscLibType, dm::PetscDM, cellSF::PetscSF) end

@for_petsc function DMForestGetCellSF(petsclib::$UnionPetscLib, dm::PetscDM, cellSF::PetscSF )

    @chk ccall(
               (:DMForestGetCellSF, $petsc_library),
               PetscErrorCode,
               (CDM, Ptr{PetscSF}),
               dm, cellSF,
              )


	return nothing
end 

"""
	DMForestSetAdaptivityLabel(petsclib::PetscLibType,dm::PetscDM, adaptLabel::DMLabel) 
During the pre
`DMForestGetAdaptivityForest()`) that holds the adaptation flags (refinement, coarsening, or some combination).

Logically Collective

Input Parameters:
- `dm`         - the forest
- `adaptLabel` - the label in the pre-adaptation forest

Level: intermediate

-seealso: `DM`, `DMFOREST`, `DMForestGetAdaptivityLabel()`

# External Links
$(_doc_external("Dm/DMForestSetAdaptivityLabel"))
"""
function DMForestSetAdaptivityLabel(petsclib::PetscLibType, dm::PetscDM, adaptLabel::DMLabel) end

@for_petsc function DMForestSetAdaptivityLabel(petsclib::$UnionPetscLib, dm::PetscDM, adaptLabel::DMLabel )

    @chk ccall(
               (:DMForestSetAdaptivityLabel, $petsc_library),
               PetscErrorCode,
               (CDM, DMLabel),
               dm, adaptLabel,
              )


	return nothing
end 

"""
	DMForestGetAdaptivityLabel(petsclib::PetscLibType,dm::PetscDM, adaptLabel::DMLabel) 
Get the label of the pre
holds the adaptation flags (refinement, coarsening, or some combination).

Not Collective

Input Parameter:
- `dm` - the forest

Output Parameter:
- `adaptLabel` - the name of the label in the pre-adaptation forest

Level: intermediate

-seealso: `DM`, `DMFOREST`, `DMForestSetAdaptivityLabel()`

# External Links
$(_doc_external("Dm/DMForestGetAdaptivityLabel"))
"""
function DMForestGetAdaptivityLabel(petsclib::PetscLibType, dm::PetscDM, adaptLabel::DMLabel) end

@for_petsc function DMForestGetAdaptivityLabel(petsclib::$UnionPetscLib, dm::PetscDM, adaptLabel::DMLabel )

    @chk ccall(
               (:DMForestGetAdaptivityLabel, $petsc_library),
               PetscErrorCode,
               (CDM, Ptr{DMLabel}),
               dm, adaptLabel,
              )


	return nothing
end 

"""
	DMForestSetCellWeights(petsclib::PetscLibType,dm::PetscDM, weights::Vector{PetscReal}, copyMode::PetscCopyMode) 
Set the weights assigned to each of the cells (see `DMForestGetCellChart()`) of the current
process: weights are used to determine parallel partitioning.

Logically Collective

Input Parameters:
- `dm`       - the forest
- `weights`  - the array of weights (see `DMForestSetWeightCapacity()`) for all cells, or `NULL` to indicate each cell has weight 1.
- `copyMode` - how weights should reference weights

Level: advanced

-seealso: `DM`, `DMFOREST`, `DMForestGetCellWeights()`, `DMForestSetWeightCapacity()`

# External Links
$(_doc_external("Dm/DMForestSetCellWeights"))
"""
function DMForestSetCellWeights(petsclib::PetscLibType, dm::PetscDM, weights::Vector{PetscReal}, copyMode::PetscCopyMode) end

@for_petsc function DMForestSetCellWeights(petsclib::$UnionPetscLib, dm::PetscDM, weights::Vector{$PetscReal}, copyMode::PetscCopyMode )

    @chk ccall(
               (:DMForestSetCellWeights, $petsc_library),
               PetscErrorCode,
               (CDM, Ptr{$PetscReal}, PetscCopyMode),
               dm, weights, copyMode,
              )


	return nothing
end 

"""
	weights::PetscReal = DMForestGetCellWeights(petsclib::PetscLibType,dm::PetscDM) 
Get the weights assigned to each of the cells (see `DMForestGetCellChart()`) of the current
process: weights are used to determine parallel partitioning.

Not Collective

Input Parameter:
- `dm` - the forest

Output Parameter:
- `weights` - the array of weights for all cells, or `NULL` to indicate each cell has weight 1.

Level: advanced

-seealso: `DM`, `DMFOREST`, `DMForestSetCellWeights()`, `DMForestSetWeightCapacity()`

# External Links
$(_doc_external("Dm/DMForestGetCellWeights"))
"""
function DMForestGetCellWeights(petsclib::PetscLibType, dm::PetscDM) end

@for_petsc function DMForestGetCellWeights(petsclib::$UnionPetscLib, dm::PetscDM )
	weights_ = Ref{$PetscReal}()

    @chk ccall(
               (:DMForestGetCellWeights, $petsc_library),
               PetscErrorCode,
               (CDM, $PetscReal),
               dm, weights_,
              )

	weights = weights_[]

	return weights
end 

"""
	DMForestSetWeightCapacity(petsclib::PetscLibType,dm::PetscDM, capacity::PetscReal) 
During the pre
a pre-adaptation forest (see `DMForestGetAdaptivityForest()`).

Logically Collective

Input Parameters:
- `dm`       - the forest
- `capacity` - this process's capacity

Level: advanced

-seealso: `DM`, `DMFOREST`, `DMForestGetWeightCapacity()`, `DMForestSetCellWeights()`, `DMForestSetCellWeightFactor()`

# External Links
$(_doc_external("Dm/DMForestSetWeightCapacity"))
"""
function DMForestSetWeightCapacity(petsclib::PetscLibType, dm::PetscDM, capacity::PetscReal) end

@for_petsc function DMForestSetWeightCapacity(petsclib::$UnionPetscLib, dm::PetscDM, capacity::$PetscReal )

    @chk ccall(
               (:DMForestSetWeightCapacity, $petsc_library),
               PetscErrorCode,
               (CDM, $PetscReal),
               dm, capacity,
              )


	return nothing
end 

"""
	capacity::PetscReal = DMForestGetWeightCapacity(petsclib::PetscLibType,dm::PetscDM) 
Set the capacity of the current process when repartitioning a pre
`DMForestGetAdaptivityForest()`).

Not Collective

Input Parameter:
- `dm` - the forest

Output Parameter:
- `capacity` - this process's capacity

Level: advanced

-seealso: `DM`, `DMFOREST`, `DMForestSetWeightCapacity()`, `DMForestSetCellWeights()`, `DMForestSetCellWeightFactor()`

# External Links
$(_doc_external("Dm/DMForestGetWeightCapacity"))
"""
function DMForestGetWeightCapacity(petsclib::PetscLibType, dm::PetscDM) end

@for_petsc function DMForestGetWeightCapacity(petsclib::$UnionPetscLib, dm::PetscDM )
	capacity_ = Ref{$PetscReal}()

    @chk ccall(
               (:DMForestGetWeightCapacity, $petsc_library),
               PetscErrorCode,
               (CDM, Ptr{$PetscReal}),
               dm, capacity_,
              )

	capacity = capacity_[]

	return capacity
end 

"""
	DMSwarmSetPointsUniformCoordinates(petsclib::PetscLibType,sw::PetscDM, min::Vector{PetscReal}, max::Vector{PetscReal}, npoints::Vector{PetscInt}, mode::InsertMode) 
Set point coordinates in a `DMSWARM` on a regular (ijk) grid

Collective

Input Parameters:
- `sw`      - the `DMSWARM`
- `min`     - minimum coordinate values in the x, y, z directions (array of length dim)
- `max`     - maximum coordinate values in the x, y, z directions (array of length dim)
- `npoints` - number of points in each spatial direction (array of length dim)
- `mode`    - indicates whether to append points to the swarm (`ADD_VALUES`), or over-ride existing points (`INSERT_VALUES`)

Level: beginner

-seealso: `DM`, `DMSWARM`, `DMSwarmSetType()`, `DMSwarmSetCellDM()`, `DMSwarmType`

# External Links
$(_doc_external("Dm/DMSwarmSetPointsUniformCoordinates"))
"""
function DMSwarmSetPointsUniformCoordinates(petsclib::PetscLibType, sw::PetscDM, min::Vector{PetscReal}, max::Vector{PetscReal}, npoints::Vector{PetscInt}, mode::InsertMode) end

@for_petsc function DMSwarmSetPointsUniformCoordinates(petsclib::$UnionPetscLib, sw::PetscDM, min::Vector{$PetscReal}, max::Vector{$PetscReal}, npoints::Vector{$PetscInt}, mode::InsertMode )

    @chk ccall(
               (:DMSwarmSetPointsUniformCoordinates, $petsc_library),
               PetscErrorCode,
               (CDM, Ptr{$PetscReal}, Ptr{$PetscReal}, Ptr{$PetscInt}, InsertMode),
               sw, min, max, npoints, mode,
              )


	return nothing
end 

"""
	DMSwarmSetPointCoordinates(petsclib::PetscLibType,sw::PetscDM, npoints::PetscInt, coor::Vector{PetscReal}, redundant::PetscBool, mode::InsertMode) 
Set point coordinates in a `DMSWARM` from a user defined list

Collective

Input Parameters:
- `sw`        - the `DMSWARM`
- `npoints`   - the number of points to insert
- `coor`      - the coordinate values
- `redundant` - if set to `PETSC_TRUE`, it is assumed that `npoints` and `coor` are only valid on rank 0 and should be broadcast to other ranks
- `mode`      - indicates whether to append points to the swarm (`ADD_VALUES`), or over-ride existing points (`INSERT_VALUES`)

Level: beginner

-seealso: `DMSWARM`, `DMSwarmSetType()`, `DMSwarmSetCellDM()`, `DMSwarmType`, `DMSwarmSetPointsUniformCoordinates()`

# External Links
$(_doc_external("Dm/DMSwarmSetPointCoordinates"))
"""
function DMSwarmSetPointCoordinates(petsclib::PetscLibType, sw::PetscDM, npoints::PetscInt, coor::Vector{PetscReal}, redundant::PetscBool, mode::InsertMode) end

@for_petsc function DMSwarmSetPointCoordinates(petsclib::$UnionPetscLib, sw::PetscDM, npoints::$PetscInt, coor::Vector{$PetscReal}, redundant::PetscBool, mode::InsertMode )

    @chk ccall(
               (:DMSwarmSetPointCoordinates, $petsc_library),
               PetscErrorCode,
               (CDM, $PetscInt, Ptr{$PetscReal}, PetscBool, InsertMode),
               sw, npoints, coor, redundant, mode,
              )


	return nothing
end 

"""
	DMSwarmInsertPointsUsingCellDM(petsclib::PetscLibType,dm::PetscDM, layout_type::DMSwarmPICLayoutType, fill_param::PetscInt) 
Insert point coordinates within each cell

Not Collective

Input Parameters:
- `dm`          - the `DMSWARM`
- `layout_type` - method used to fill each cell with the cell `DM`
- `fill_param`  - parameter controlling how many points per cell are added (the meaning of this parameter is dependent on the layout type)

Level: beginner

-seealso: `DMSWARM`, `DMSwarmPICLayoutType`, `DMSwarmSetType()`, `DMSwarmSetCellDM()`, `DMSwarmType`

# External Links
$(_doc_external("Dm/DMSwarmInsertPointsUsingCellDM"))
"""
function DMSwarmInsertPointsUsingCellDM(petsclib::PetscLibType, dm::PetscDM, layout_type::DMSwarmPICLayoutType, fill_param::PetscInt) end

@for_petsc function DMSwarmInsertPointsUsingCellDM(petsclib::$UnionPetscLib, dm::PetscDM, layout_type::DMSwarmPICLayoutType, fill_param::$PetscInt )

    @chk ccall(
               (:DMSwarmInsertPointsUsingCellDM, $petsc_library),
               PetscErrorCode,
               (CDM, DMSwarmPICLayoutType, $PetscInt),
               dm, layout_type, fill_param,
              )


	return nothing
end 

"""
	DMSwarmSetPointCoordinatesCellwise(petsclib::PetscLibType,dm::PetscDM, npoints::PetscInt, xi::Vector{PetscReal}) 
Insert point coordinates (defined over the reference cell) within each cell

Not Collective

Input Parameters:
- `dm`      - the `DMSWARM`
- `npoints` - the number of points to insert in each cell
- `xi`      - the coordinates (defined in the local coordinate system for each cell) to insert

Level: beginner

-seealso: `DMSWARM`, `DMSwarmSetCellDM()`, `DMSwarmInsertPointsUsingCellDM()`

# External Links
$(_doc_external("Dm/DMSwarmSetPointCoordinatesCellwise"))
"""
function DMSwarmSetPointCoordinatesCellwise(petsclib::PetscLibType, dm::PetscDM, npoints::PetscInt, xi::Vector{PetscReal}) end

@for_petsc function DMSwarmSetPointCoordinatesCellwise(petsclib::$UnionPetscLib, dm::PetscDM, npoints::$PetscInt, xi::Vector{$PetscReal} )

    @chk ccall(
               (:DMSwarmSetPointCoordinatesCellwise, $petsc_library),
               PetscErrorCode,
               (CDM, $PetscInt, Ptr{$PetscReal}),
               dm, npoints, xi,
              )


	return nothing
end 

"""
	ncells::PetscInt,count::PetscInt = DMSwarmCreatePointPerCellCount(petsclib::PetscLibType,sw::PetscDM) 
Count the number of points within all cells in the cell DM

Not Collective

Input Parameter:
- `sw` - the `DMSWARM`

Output Parameters:
- `ncells` - the number of cells in the cell `DM` (optional argument, pass `NULL` to ignore)
- `count`  - array of length ncells containing the number of points per cell

Level: beginner

-seealso: `DMSWARM`, `DMSwarmSetType()`, `DMSwarmSetCellDM()`, `DMSwarmType`

# External Links
$(_doc_external("Dm/DMSwarmCreatePointPerCellCount"))
"""
function DMSwarmCreatePointPerCellCount(petsclib::PetscLibType, sw::PetscDM) end

@for_petsc function DMSwarmCreatePointPerCellCount(petsclib::$UnionPetscLib, sw::PetscDM )
	ncells_ = Ref{$PetscInt}()
	count_ = Ref{$PetscInt}()

    @chk ccall(
               (:DMSwarmCreatePointPerCellCount, $petsc_library),
               PetscErrorCode,
               (CDM, Ptr{$PetscInt}, $PetscInt),
               sw, ncells_, count_,
              )

	ncells = ncells_[]
	count = count_[]

	return ncells,count
end 

"""
	Ns::PetscInt = DMSwarmGetNumSpecies(petsclib::PetscLibType,sw::PetscDM) 
Get the number of particle species

Not Collective

Input Parameter:
- `sw` - the `DMSWARM`

Output Parameters:
- `Ns` - the number of species

Level: intermediate

-seealso: `DMSWARM`, `DMSwarmSetNumSpecies()`, `DMSwarmSetType()`, `DMSwarmType`

# External Links
$(_doc_external("Dm/DMSwarmGetNumSpecies"))
"""
function DMSwarmGetNumSpecies(petsclib::PetscLibType, sw::PetscDM) end

@for_petsc function DMSwarmGetNumSpecies(petsclib::$UnionPetscLib, sw::PetscDM )
	Ns_ = Ref{$PetscInt}()

    @chk ccall(
               (:DMSwarmGetNumSpecies, $petsc_library),
               PetscErrorCode,
               (CDM, Ptr{$PetscInt}),
               sw, Ns_,
              )

	Ns = Ns_[]

	return Ns
end 

"""
	DMSwarmSetNumSpecies(petsclib::PetscLibType,sw::PetscDM, Ns::PetscInt) 
Set the number of particle species

Not Collective

Input Parameters:
- `sw` - the `DMSWARM`
- `Ns` - the number of species

Level: intermediate

-seealso: `DMSWARM`, `DMSwarmGetNumSpecies()`, `DMSwarmSetType()`, `DMSwarmType`

# External Links
$(_doc_external("Dm/DMSwarmSetNumSpecies"))
"""
function DMSwarmSetNumSpecies(petsclib::PetscLibType, sw::PetscDM, Ns::PetscInt) end

@for_petsc function DMSwarmSetNumSpecies(petsclib::$UnionPetscLib, sw::PetscDM, Ns::$PetscInt )

    @chk ccall(
               (:DMSwarmSetNumSpecies, $petsc_library),
               PetscErrorCode,
               (CDM, $PetscInt),
               sw, Ns,
              )


	return nothing
end 

"""
	DMSwarmGetCoordinateFunction(petsclib::PetscLibType,sw::PetscDM, coordFunc::PetscSimplePoCintFn) 
Get the function setting initial particle positions, if it exists

Not Collective

Input Parameter:
- `sw` - the `DMSWARM`

Output Parameter:
- `coordFunc` - the function setting initial particle positions, or `NULL`, see `PetscSimplePointFn` for the calling sequence

Level: intermediate

-seealso: `DMSWARM`, `DMSwarmSetCoordinateFunction()`, `DMSwarmGetVelocityFunction()`, `DMSwarmInitializeCoordinates()`, `PetscSimplePointFn`

# External Links
$(_doc_external("Dm/DMSwarmGetCoordinateFunction"))
"""
function DMSwarmGetCoordinateFunction(petsclib::PetscLibType, sw::PetscDM, coordFunc::PetscSimplePoCintFn) end

@for_petsc function DMSwarmGetCoordinateFunction(petsclib::$UnionPetscLib, sw::PetscDM, coordFunc::PetscSimplePoCintFn )

    @chk ccall(
               (:DMSwarmGetCoordinateFunction, $petsc_library),
               PetscErrorCode,
               (CDM, PetscSimplePoCintFn),
               sw, coordFunc,
              )


	return nothing
end 

"""
	DMSwarmSetCoordinateFunction(petsclib::PetscLibType,sw::PetscDM, coordFunc::PetscSimplePoCintFn) 
Set the function setting initial particle positions

Not Collective

Input Parameters:
- `sw`        - the `DMSWARM`
- `coordFunc` - the function setting initial particle positions, see `PetscSimplePointFn` for the calling sequence

Level: intermediate

-seealso: `DMSWARM`, `DMSwarmGetCoordinateFunction()`, `DMSwarmSetVelocityFunction()`, `DMSwarmInitializeCoordinates()`, `PetscSimplePointFn`

# External Links
$(_doc_external("Dm/DMSwarmSetCoordinateFunction"))
"""
function DMSwarmSetCoordinateFunction(petsclib::PetscLibType, sw::PetscDM, coordFunc::PetscSimplePoCintFn) end

@for_petsc function DMSwarmSetCoordinateFunction(petsclib::$UnionPetscLib, sw::PetscDM, coordFunc::PetscSimplePoCintFn )

    @chk ccall(
               (:DMSwarmSetCoordinateFunction, $petsc_library),
               PetscErrorCode,
               (CDM, Ptr{PetscSimplePoCintFn}),
               sw, coordFunc,
              )


	return nothing
end 

"""
	DMSwarmGetVelocityFunction(petsclib::PetscLibType,sw::PetscDM, velFunc::PetscSimplePoCintFn) 
Get the function setting initial particle velocities, if it exists

Not Collective

Input Parameter:
- `sw` - the `DMSWARM`

Output Parameter:
- `velFunc` - the function setting initial particle velocities, or `NULL`, see `PetscSimplePointFn` for the calling sequence

Level: intermediate

-seealso: `DMSWARM`, `DMSwarmSetVelocityFunction()`, `DMSwarmGetCoordinateFunction()`, `DMSwarmInitializeVelocities()`, `PetscSimplePointFn`

# External Links
$(_doc_external("Dm/DMSwarmGetVelocityFunction"))
"""
function DMSwarmGetVelocityFunction(petsclib::PetscLibType, sw::PetscDM, velFunc::PetscSimplePoCintFn) end

@for_petsc function DMSwarmGetVelocityFunction(petsclib::$UnionPetscLib, sw::PetscDM, velFunc::PetscSimplePoCintFn )

    @chk ccall(
               (:DMSwarmGetVelocityFunction, $petsc_library),
               PetscErrorCode,
               (CDM, PetscSimplePoCintFn),
               sw, velFunc,
              )


	return nothing
end 

"""
	DMSwarmSetVelocityFunction(petsclib::PetscLibType,sw::PetscDM, velFunc::PetscSimplePoCintFn) 
Set the function setting initial particle velocities

Not Collective

Input Parameters:
- `sw`      - the `DMSWARM`
- `velFunc` - the function setting initial particle velocities, see `PetscSimplePointFn` for the calling sequence

Level: intermediate

-seealso: `DMSWARM`, `DMSwarmGetVelocityFunction()`, `DMSwarmSetCoordinateFunction()`, `DMSwarmInitializeVelocities()`, `PetscSimplePointFn`

# External Links
$(_doc_external("Dm/DMSwarmSetVelocityFunction"))
"""
function DMSwarmSetVelocityFunction(petsclib::PetscLibType, sw::PetscDM, velFunc::PetscSimplePoCintFn) end

@for_petsc function DMSwarmSetVelocityFunction(petsclib::$UnionPetscLib, sw::PetscDM, velFunc::PetscSimplePoCintFn )

    @chk ccall(
               (:DMSwarmSetVelocityFunction, $petsc_library),
               PetscErrorCode,
               (CDM, Ptr{PetscSimplePoCintFn}),
               sw, velFunc,
              )


	return nothing
end 

"""
	DMSwarmComputeLocalSize(petsclib::PetscLibType,sw::PetscDM, N::PetscInt, density::PetscProbFn) 
Compute the local number and distribution of particles based upon a density function

Not Collective

Input Parameters:
- `sw`      - The `DMSWARM`
- `N`       - The target number of particles
- `density` - The density field for the particle layout, normalized to unity

Level: advanced

-seealso: `DMSWARM`, `DMSwarmComputeLocalSizeFromOptions()`

# External Links
$(_doc_external("Dm/DMSwarmComputeLocalSize"))
"""
function DMSwarmComputeLocalSize(petsclib::PetscLibType, sw::PetscDM, N::PetscInt, density::PetscProbFn) end

@for_petsc function DMSwarmComputeLocalSize(petsclib::$UnionPetscLib, sw::PetscDM, N::$PetscInt, density::PetscProbFn )

    @chk ccall(
               (:DMSwarmComputeLocalSize, $petsc_library),
               PetscErrorCode,
               (CDM, $PetscInt, Ptr{PetscProbFn}),
               sw, N, density,
              )


	return nothing
end 

"""
	DMSwarmComputeLocalSizeFromOptions(petsclib::PetscLibType,sw::PetscDM) 
Compute the local number and distribution of particles based upon a density function determined by options

Not Collective

Input Parameter:
- `sw` - The `DMSWARM`

Level: advanced

-seealso: `DMSWARM`, `DMSwarmComputeLocalSize()`

# External Links
$(_doc_external("Dm/DMSwarmComputeLocalSizeFromOptions"))
"""
function DMSwarmComputeLocalSizeFromOptions(petsclib::PetscLibType, sw::PetscDM) end

@for_petsc function DMSwarmComputeLocalSizeFromOptions(petsclib::$UnionPetscLib, sw::PetscDM )

    @chk ccall(
               (:DMSwarmComputeLocalSizeFromOptions, $petsc_library),
               PetscErrorCode,
               (CDM,),
               sw,
              )


	return nothing
end 

"""
	DMSwarmInitializeCoordinates(petsclib::PetscLibType,sw::PetscDM) 
Determine the initial coordinates of particles for a PIC method

Not Collective

Input Parameter:
- `sw` - The `DMSWARM`

Level: advanced

-seealso: `DMSWARM`, `DMSwarmComputeLocalSize()`, `DMSwarmInitializeVelocities()`

# External Links
$(_doc_external("Dm/DMSwarmInitializeCoordinates"))
"""
function DMSwarmInitializeCoordinates(petsclib::PetscLibType, sw::PetscDM) end

@for_petsc function DMSwarmInitializeCoordinates(petsclib::$UnionPetscLib, sw::PetscDM )

    @chk ccall(
               (:DMSwarmInitializeCoordinates, $petsc_library),
               PetscErrorCode,
               (CDM,),
               sw,
              )


	return nothing
end 

"""
	DMSwarmInitializeVelocities(petsclib::PetscLibType,sw::PetscDM, sampler::PetscProbFn, v0::Vector{PetscReal}) 
Set the initial velocities of particles using a distribution.

Collective

Input Parameters:
- `sw`      - The `DMSWARM` object
- `sampler` - A function which uniformly samples the velocity PDF
- `v0`      - The velocity scale for nondimensionalization for each species

Level: advanced

-seealso: `DMSWARM`, `DMSwarmComputeLocalSize()`, `DMSwarmInitializeCoordinates()`, `DMSwarmInitializeVelocitiesFromOptions()`

# External Links
$(_doc_external("Dm/DMSwarmInitializeVelocities"))
"""
function DMSwarmInitializeVelocities(petsclib::PetscLibType, sw::PetscDM, sampler::PetscProbFn, v0::Vector{PetscReal}) end

@for_petsc function DMSwarmInitializeVelocities(petsclib::$UnionPetscLib, sw::PetscDM, sampler::PetscProbFn, v0::Vector{$PetscReal} )

    @chk ccall(
               (:DMSwarmInitializeVelocities, $petsc_library),
               PetscErrorCode,
               (CDM, Ptr{PetscProbFn}, Ptr{$PetscReal}),
               sw, sampler, v0,
              )


	return nothing
end 

"""
	DMSwarmInitializeVelocitiesFromOptions(petsclib::PetscLibType,sw::PetscDM, v0::Vector{PetscReal}) 
Set the initial velocities of particles using a distribution determined from options.

Collective

Input Parameters:
- `sw` - The `DMSWARM` object
- `v0` - The velocity scale for nondimensionalization for each species

Level: advanced

-seealso: `DMSWARM`, `DMSwarmComputeLocalSize()`, `DMSwarmInitializeCoordinates()`, `DMSwarmInitializeVelocities()`

# External Links
$(_doc_external("Dm/DMSwarmInitializeVelocitiesFromOptions"))
"""
function DMSwarmInitializeVelocitiesFromOptions(petsclib::PetscLibType, sw::PetscDM, v0::Vector{PetscReal}) end

@for_petsc function DMSwarmInitializeVelocitiesFromOptions(petsclib::$UnionPetscLib, sw::PetscDM, v0::Vector{$PetscReal} )

    @chk ccall(
               (:DMSwarmInitializeVelocitiesFromOptions, $petsc_library),
               PetscErrorCode,
               (CDM, Ptr{$PetscReal}),
               sw, v0,
              )


	return nothing
end 

"""
	mtype::DMSwarmMigrateType = DMSwarmGetMigrateType(petsclib::PetscLibType,dm::PetscDM) 
Get the style of point migration

Logically Collective

Input Parameter:
- `dm` - the `DMSWARM`

Output Parameter:
- `mtype` - The migration type, see `DMSwarmMigrateType`

Level: intermediate

-seealso: `DM`, `DMSWARM`, `DMSwarmMigrateType`, `DMSwarmMigrate()`

# External Links
$(_doc_external("Dm/DMSwarmGetMigrateType"))
"""
function DMSwarmGetMigrateType(petsclib::PetscLibType, dm::PetscDM) end

@for_petsc function DMSwarmGetMigrateType(petsclib::$UnionPetscLib, dm::PetscDM )
	mtype_ = Ref{DMSwarmMigrateType}()

    @chk ccall(
               (:DMSwarmGetMigrateType, $petsc_library),
               PetscErrorCode,
               (CDM, Ptr{DMSwarmMigrateType}),
               dm, mtype_,
              )

	mtype = unsafe_string(mtype_[])

	return mtype
end 

"""
	DMSwarmSetMigrateType(petsclib::PetscLibType,dm::PetscDM, mtype::DMSwarmMigrateType) 
Set the style of point migration

Logically Collective

Input Parameters:
- `dm`    - the `DMSWARM`
- `mtype` - The migration type, see `DMSwarmMigrateType`

Level: intermediate

-seealso: `DM`, `DMSWARM`, `DMSwarmMigrateType`, `DMSwarmGetMigrateType()`, `DMSwarmMigrate()`

# External Links
$(_doc_external("Dm/DMSwarmSetMigrateType"))
"""
function DMSwarmSetMigrateType(petsclib::PetscLibType, dm::PetscDM, mtype::DMSwarmMigrateType) end

@for_petsc function DMSwarmSetMigrateType(petsclib::$UnionPetscLib, dm::PetscDM, mtype::DMSwarmMigrateType )

    @chk ccall(
               (:DMSwarmSetMigrateType, $petsc_library),
               PetscErrorCode,
               (CDM, DMSwarmMigrateType),
               dm, mtype,
              )


	return nothing
end 

"""
	DMSwarmViewFieldsXDMF(petsclib::PetscLibType,dm::PetscDM, filename::String, nfields::PetscInt, field_name_list::String) 
Write a selection of DMSwarm fields to an XDMF3 file

Collective

Input Parameters:
- `dm`              - the `DMSWARM`
- `filename`        - the file name of the XDMF file (must have the extension .xmf)
- `nfields`         - the number of fields to write into the XDMF file
- `field_name_list` - array of length nfields containing the textual name of fields to write

Level: beginner

-seealso: `DM`, `DMSWARM`, `DMSwarmViewXDMF()`

# External Links
$(_doc_external("Dm/DMSwarmViewFieldsXDMF"))
"""
function DMSwarmViewFieldsXDMF(petsclib::PetscLibType, dm::PetscDM, filename::String, nfields::PetscInt, field_name_list::String) end

@for_petsc function DMSwarmViewFieldsXDMF(petsclib::$UnionPetscLib, dm::PetscDM, filename::String, nfields::$PetscInt, field_name_list::String )
	field_name_list_ = Ref(pointer(field_name_list))

    @chk ccall(
               (:DMSwarmViewFieldsXDMF, $petsc_library),
               PetscErrorCode,
               (CDM, Ptr{Cchar}, $PetscInt, Ptr{Ptr{Cchar}}),
               dm, filename, nfields, field_name_list_,
              )


	return nothing
end 

"""
	DMSwarmViewXDMF(petsclib::PetscLibType,dm::PetscDM, filename::String) 
Write `DMSWARM` fields to an XDMF3 file

Collective

Input Parameters:
- `dm`       - the `DMSWARM`
- `filename` - the file name of the XDMF file (must have the extension .xmf)

Level: beginner

-seealso: `DM`, `DMSWARM`, `DMSwarmViewFieldsXDMF()`

# External Links
$(_doc_external("Dm/DMSwarmViewXDMF"))
"""
function DMSwarmViewXDMF(petsclib::PetscLibType, dm::PetscDM, filename::String) end

@for_petsc function DMSwarmViewXDMF(petsclib::$UnionPetscLib, dm::PetscDM, filename::String )

    @chk ccall(
               (:DMSwarmViewXDMF, $petsc_library),
               PetscErrorCode,
               (CDM, Ptr{Cchar}),
               dm, filename,
              )


	return nothing
end 

"""
	Nf::PetscInt = DMSwarmVectorGetField(petsclib::PetscLibType,sw::PetscDM, fieldnames::String) 
Gets the fields from which to define a `Vec` object
when `DMCreateLocalVector()`, or `DMCreateGlobalVector()` is called

Not collective

Input Parameter:
- `sw` - a `DMSWARM`

Output Parameters:
- `Nf`         - the number of fields
- `fieldnames` - the textual name given to each registered field, or NULL if it has not been set

Level: beginner

-seealso: `DM`, `DMSWARM`, `DMSwarmVectorDefineField()`, `DMSwarmRegisterPetscDatatypeField()`, `DMCreateGlobalVector()`, `DMCreateLocalVector()`

# External Links
$(_doc_external("Dm/DMSwarmVectorGetField"))
"""
function DMSwarmVectorGetField(petsclib::PetscLibType, sw::PetscDM, fieldnames::String) end

@for_petsc function DMSwarmVectorGetField(petsclib::$UnionPetscLib, sw::PetscDM, fieldnames::String )
	Nf_ = Ref{$PetscInt}()

    @chk ccall(
               (:DMSwarmVectorGetField, $petsc_library),
               PetscErrorCode,
               (CDM, Ptr{$PetscInt}, Ptr{Cchar}),
               sw, Nf_, fieldnames,
              )

	Nf = Nf_[]

	return Nf
end 

"""
	DMSwarmVectorDefineField(petsclib::PetscLibType,dm::PetscDM, fieldname::String) 
Sets the field from which to define a `Vec` object
when `DMCreateLocalVector()`, or `DMCreateGlobalVector()` is called

Collective

Input Parameters:
- `dm`        - a `DMSWARM`
- `fieldname` - the textual name given to each registered field

Level: beginner

-seealso: `DM`, `DMSWARM`, `DMSwarmVectorDefineFields()`, `DMSwarmVectorGetField()`, `DMSwarmRegisterPetscDatatypeField()`, `DMCreateGlobalVector()`, `DMCreateLocalVector()`

# External Links
$(_doc_external("Dm/DMSwarmVectorDefineField"))
"""
function DMSwarmVectorDefineField(petsclib::PetscLibType, dm::PetscDM, fieldname::String) end

@for_petsc function DMSwarmVectorDefineField(petsclib::$UnionPetscLib, dm::PetscDM, fieldname::String )

    @chk ccall(
               (:DMSwarmVectorDefineField, $petsc_library),
               PetscErrorCode,
               (CDM, Ptr{Cchar}),
               dm, fieldname,
              )


	return nothing
end 

"""
	DMSwarmVectorDefineFields(petsclib::PetscLibType,sw::PetscDM, Nf::PetscInt, fieldnames::String) 
Sets the fields from which to define a `Vec` object
when `DMCreateLocalVector()`, or `DMCreateGlobalVector()` is called

Collective, No Fortran support

Input Parameters:
- `sw`         - a `DMSWARM`
- `Nf`         - the number of fields
- `fieldnames` - the textual name given to each registered field

Level: beginner

-seealso: `DM`, `DMSWARM`, `DMSwarmVectorDefineField()`, `DMSwarmVectorGetField()`, `DMSwarmRegisterPetscDatatypeField()`, `DMCreateGlobalVector()`, `DMCreateLocalVector()`

# External Links
$(_doc_external("Dm/DMSwarmVectorDefineFields"))
"""
function DMSwarmVectorDefineFields(petsclib::PetscLibType, sw::PetscDM, Nf::PetscInt, fieldnames::String) end

@for_petsc function DMSwarmVectorDefineFields(petsclib::$UnionPetscLib, sw::PetscDM, Nf::$PetscInt, fieldnames::String )
	fieldnames_ = Ref(pointer(fieldnames))

    @chk ccall(
               (:DMSwarmVectorDefineFields, $petsc_library),
               PetscErrorCode,
               (CDM, $PetscInt, Ptr{Ptr{Cchar}}),
               sw, Nf, fieldnames_,
              )


	return nothing
end 

"""
	mass::PetscMat = DMSwarmCreateMassMatrixSquare(petsclib::PetscLibType,dmCoarse::PetscDM, dmFine::PetscDM) 
Creates the block

Collective

Input Parameters:
- `dmCoarse` - a `DMSWARM`
- `dmFine`   - a `DMPLEX`

Output Parameter:
- `mass` - the square of the particle mass matrix

Level: advanced

-seealso: `DM`, `DMSWARM`, `DMCreateMassMatrix()`

# External Links
$(_doc_external("Dm/DMSwarmCreateMassMatrixSquare"))
"""
function DMSwarmCreateMassMatrixSquare(petsclib::PetscLibType, dmCoarse::PetscDM, dmFine::PetscDM) end

@for_petsc function DMSwarmCreateMassMatrixSquare(petsclib::$UnionPetscLib, dmCoarse::PetscDM, dmFine::PetscDM )
	mass_ = Ref{CMat}()

    @chk ccall(
               (:DMSwarmCreateMassMatrixSquare, $petsc_library),
               PetscErrorCode,
               (CDM, CDM, Ptr{CMat}),
               dmCoarse, dmFine, mass_,
              )

	mass = PetscMat(mass_[], petsclib)

	return mass
end 

"""
	vec::PetscVec = DMSwarmCreateGlobalVectorFromField(petsclib::PetscLibType,dm::PetscDM, fieldname::String) 
Creates a `Vec` object sharing the array associated with a given field

Collective

Input Parameters:
- `dm`        - a `DMSWARM`
- `fieldname` - the textual name given to a registered field

Output Parameter:
- `vec` - the vector

Level: beginner

-seealso: `DM`, `DMSWARM`, `DMSwarmRegisterPetscDatatypeField()`, `DMSwarmDestroyGlobalVectorFromField()`

# External Links
$(_doc_external("Dm/DMSwarmCreateGlobalVectorFromField"))
"""
function DMSwarmCreateGlobalVectorFromField(petsclib::PetscLibType, dm::PetscDM, fieldname::String) end

@for_petsc function DMSwarmCreateGlobalVectorFromField(petsclib::$UnionPetscLib, dm::PetscDM, fieldname::String )
	vec_ = Ref{CVec}()

    @chk ccall(
               (:DMSwarmCreateGlobalVectorFromField, $petsc_library),
               PetscErrorCode,
               (CDM, Ptr{Cchar}, Ptr{CVec}),
               dm, fieldname, vec_,
              )

	vec = PetscVec(vec_[], petsclib)

	return vec
end 

"""
	DMSwarmDestroyGlobalVectorFromField(petsclib::PetscLibType,dm::PetscDM, fieldname::String, vec::PetscVec) 
Destroys the `Vec` object which share the array associated with a given field

Collective

Input Parameters:
- `dm`        - a `DMSWARM`
- `fieldname` - the textual name given to a registered field

Output Parameter:
- `vec` - the vector

Level: beginner

-seealso: `DM`, `DMSWARM`, `DMSwarmRegisterPetscDatatypeField()`, `DMSwarmCreateGlobalVectorFromField()`

# External Links
$(_doc_external("Dm/DMSwarmDestroyGlobalVectorFromField"))
"""
function DMSwarmDestroyGlobalVectorFromField(petsclib::PetscLibType, dm::PetscDM, fieldname::String, vec::PetscVec) end

@for_petsc function DMSwarmDestroyGlobalVectorFromField(petsclib::$UnionPetscLib, dm::PetscDM, fieldname::String, vec::PetscVec )
	vec_ = Ref(vec.ptr)

    @chk ccall(
               (:DMSwarmDestroyGlobalVectorFromField, $petsc_library),
               PetscErrorCode,
               (CDM, Ptr{Cchar}, Ptr{CVec}),
               dm, fieldname, vec_,
              )

	vec.ptr = C_NULL

	return nothing
end 

"""
	vec::PetscVec = DMSwarmCreateLocalVectorFromField(petsclib::PetscLibType,dm::PetscDM, fieldname::String) 
Creates a `Vec` object sharing the array associated with a given field

Collective

Input Parameters:
- `dm`        - a `DMSWARM`
- `fieldname` - the textual name given to a registered field

Output Parameter:
- `vec` - the vector

Level: beginner

-seealso: `DM`, `DMSWARM`, `DMSwarmRegisterPetscDatatypeField()`, `DMSwarmDestroyLocalVectorFromField()`

# External Links
$(_doc_external("Dm/DMSwarmCreateLocalVectorFromField"))
"""
function DMSwarmCreateLocalVectorFromField(petsclib::PetscLibType, dm::PetscDM, fieldname::String) end

@for_petsc function DMSwarmCreateLocalVectorFromField(petsclib::$UnionPetscLib, dm::PetscDM, fieldname::String )
	vec_ = Ref{CVec}()

    @chk ccall(
               (:DMSwarmCreateLocalVectorFromField, $petsc_library),
               PetscErrorCode,
               (CDM, Ptr{Cchar}, Ptr{CVec}),
               dm, fieldname, vec_,
              )

	vec = PetscVec(vec_[], petsclib)

	return vec
end 

"""
	DMSwarmDestroyLocalVectorFromField(petsclib::PetscLibType,dm::PetscDM, fieldname::String, vec::PetscVec) 
Destroys the `Vec` object which share the array associated with a given field

Collective

Input Parameters:
- `dm`        - a `DMSWARM`
- `fieldname` - the textual name given to a registered field

Output Parameter:
- `vec` - the vector

Level: beginner

-seealso: `DM`, `DMSWARM`, `DMSwarmRegisterPetscDatatypeField()`, `DMSwarmCreateLocalVectorFromField()`

# External Links
$(_doc_external("Dm/DMSwarmDestroyLocalVectorFromField"))
"""
function DMSwarmDestroyLocalVectorFromField(petsclib::PetscLibType, dm::PetscDM, fieldname::String, vec::PetscVec) end

@for_petsc function DMSwarmDestroyLocalVectorFromField(petsclib::$UnionPetscLib, dm::PetscDM, fieldname::String, vec::PetscVec )
	vec_ = Ref(vec.ptr)

    @chk ccall(
               (:DMSwarmDestroyLocalVectorFromField, $petsc_library),
               PetscErrorCode,
               (CDM, Ptr{Cchar}, Ptr{CVec}),
               dm, fieldname, vec_,
              )

	vec.ptr = C_NULL

	return nothing
end 

"""
	vec::PetscVec = DMSwarmCreateGlobalVectorFromFields(petsclib::PetscLibType,dm::PetscDM, Nf::PetscInt, fieldnames::String) 
Creates a `Vec` object sharing the array associated with a given field set

Collective

Input Parameters:
- `dm`         - a `DMSWARM`
- `Nf`         - the number of fields
- `fieldnames` - the textual names given to the registered fields

Output Parameter:
- `vec` - the vector

Level: beginner

-seealso: `DM`, `DMSWARM`, `DMSwarmRegisterPetscDatatypeField()`, `DMSwarmDestroyGlobalVectorFromFields()`

# External Links
$(_doc_external("Dm/DMSwarmCreateGlobalVectorFromFields"))
"""
function DMSwarmCreateGlobalVectorFromFields(petsclib::PetscLibType, dm::PetscDM, Nf::PetscInt, fieldnames::String) end

@for_petsc function DMSwarmCreateGlobalVectorFromFields(petsclib::$UnionPetscLib, dm::PetscDM, Nf::$PetscInt, fieldnames::String )
	fieldnames_ = Ref(pointer(fieldnames))
	vec_ = Ref{CVec}()

    @chk ccall(
               (:DMSwarmCreateGlobalVectorFromFields, $petsc_library),
               PetscErrorCode,
               (CDM, $PetscInt, Ptr{Ptr{Cchar}}, Ptr{CVec}),
               dm, Nf, fieldnames_, vec_,
              )

	vec = PetscVec(vec_[], petsclib)

	return vec
end 

"""
	DMSwarmDestroyGlobalVectorFromFields(petsclib::PetscLibType,dm::PetscDM, Nf::PetscInt, fieldnames::String, vec::PetscVec) 
Destroys the `Vec` object which share the array associated with a given field set

Collective

Input Parameters:
- `dm`         - a `DMSWARM`
- `Nf`         - the number of fields
- `fieldnames` - the textual names given to the registered fields

Output Parameter:
- `vec` - the vector

Level: beginner

-seealso: `DM`, `DMSWARM`, `DMSwarmRegisterPetscDatatypeField()`, `DMSwarmCreateGlobalVectorFromField()`

# External Links
$(_doc_external("Dm/DMSwarmDestroyGlobalVectorFromFields"))
"""
function DMSwarmDestroyGlobalVectorFromFields(petsclib::PetscLibType, dm::PetscDM, Nf::PetscInt, fieldnames::String, vec::PetscVec) end

@for_petsc function DMSwarmDestroyGlobalVectorFromFields(petsclib::$UnionPetscLib, dm::PetscDM, Nf::$PetscInt, fieldnames::String, vec::PetscVec )
	fieldnames_ = Ref(pointer(fieldnames))
	vec_ = Ref(vec.ptr)

    @chk ccall(
               (:DMSwarmDestroyGlobalVectorFromFields, $petsc_library),
               PetscErrorCode,
               (CDM, $PetscInt, Ptr{Ptr{Cchar}}, Ptr{CVec}),
               dm, Nf, fieldnames_, vec_,
              )

	vec.ptr = C_NULL

	return nothing
end 

"""
	vec::PetscVec = DMSwarmCreateLocalVectorFromFields(petsclib::PetscLibType,dm::PetscDM, Nf::PetscInt, fieldnames::String) 
Creates a `Vec` object sharing the array associated with a given field set

Collective

Input Parameters:
- `dm`         - a `DMSWARM`
- `Nf`         - the number of fields
- `fieldnames` - the textual names given to the registered fields

Output Parameter:
- `vec` - the vector

Level: beginner

-seealso: `DM`, `DMSWARM`, `DMSwarmRegisterPetscDatatypeField()`, `DMSwarmDestroyLocalVectorFromField()`

# External Links
$(_doc_external("Dm/DMSwarmCreateLocalVectorFromFields"))
"""
function DMSwarmCreateLocalVectorFromFields(petsclib::PetscLibType, dm::PetscDM, Nf::PetscInt, fieldnames::String) end

@for_petsc function DMSwarmCreateLocalVectorFromFields(petsclib::$UnionPetscLib, dm::PetscDM, Nf::$PetscInt, fieldnames::String )
	fieldnames_ = Ref(pointer(fieldnames))
	vec_ = Ref{CVec}()

    @chk ccall(
               (:DMSwarmCreateLocalVectorFromFields, $petsc_library),
               PetscErrorCode,
               (CDM, $PetscInt, Ptr{Ptr{Cchar}}, Ptr{CVec}),
               dm, Nf, fieldnames_, vec_,
              )

	vec = PetscVec(vec_[], petsclib)

	return vec
end 

"""
	DMSwarmDestroyLocalVectorFromFields(petsclib::PetscLibType,dm::PetscDM, Nf::PetscInt, fieldnames::String, vec::PetscVec) 
Destroys the `Vec` object which share the array associated with a given field set

Collective

Input Parameters:
- `dm`         - a `DMSWARM`
- `Nf`         - the number of fields
- `fieldnames` - the textual names given to the registered fields

Output Parameter:
- `vec` - the vector

Level: beginner

-seealso: `DM`, `DMSWARM`, `DMSwarmRegisterPetscDatatypeField()`, `DMSwarmCreateLocalVectorFromFields()`

# External Links
$(_doc_external("Dm/DMSwarmDestroyLocalVectorFromFields"))
"""
function DMSwarmDestroyLocalVectorFromFields(petsclib::PetscLibType, dm::PetscDM, Nf::PetscInt, fieldnames::String, vec::PetscVec) end

@for_petsc function DMSwarmDestroyLocalVectorFromFields(petsclib::$UnionPetscLib, dm::PetscDM, Nf::$PetscInt, fieldnames::String, vec::PetscVec )
	fieldnames_ = Ref(pointer(fieldnames))
	vec_ = Ref(vec.ptr)

    @chk ccall(
               (:DMSwarmDestroyLocalVectorFromFields, $petsc_library),
               PetscErrorCode,
               (CDM, $PetscInt, Ptr{Ptr{Cchar}}, Ptr{CVec}),
               dm, Nf, fieldnames_, vec_,
              )

	vec.ptr = C_NULL

	return nothing
end 

"""
	DMSwarmInitializeFieldRegister(petsclib::PetscLibType,dm::PetscDM) 
Initiates the registration of fields to a `DMSWARM`

Collective

Input Parameter:
- `dm` - a `DMSWARM`

Level: beginner

-seealso: `DM`, `DMSWARM`, `DMSwarmFinalizeFieldRegister()`, `DMSwarmRegisterPetscDatatypeField()`,
`DMSwarmRegisterUserStructField()`, `DMSwarmRegisterUserDatatypeField()`

# External Links
$(_doc_external("Dm/DMSwarmInitializeFieldRegister"))
"""
function DMSwarmInitializeFieldRegister(petsclib::PetscLibType, dm::PetscDM) end

@for_petsc function DMSwarmInitializeFieldRegister(petsclib::$UnionPetscLib, dm::PetscDM )

    @chk ccall(
               (:DMSwarmInitializeFieldRegister, $petsc_library),
               PetscErrorCode,
               (CDM,),
               dm,
              )


	return nothing
end 

"""
	DMSwarmFinalizeFieldRegister(petsclib::PetscLibType,dm::PetscDM) 
Finalizes the registration of fields to a `DMSWARM`

Collective

Input Parameter:
- `dm` - a `DMSWARM`

Level: beginner

-seealso: `DM`, `DMSWARM`, `DMSwarmInitializeFieldRegister()`, `DMSwarmRegisterPetscDatatypeField()`,
`DMSwarmRegisterUserStructField()`, `DMSwarmRegisterUserDatatypeField()`

# External Links
$(_doc_external("Dm/DMSwarmFinalizeFieldRegister"))
"""
function DMSwarmFinalizeFieldRegister(petsclib::PetscLibType, dm::PetscDM) end

@for_petsc function DMSwarmFinalizeFieldRegister(petsclib::$UnionPetscLib, dm::PetscDM )

    @chk ccall(
               (:DMSwarmFinalizeFieldRegister, $petsc_library),
               PetscErrorCode,
               (CDM,),
               dm,
              )


	return nothing
end 

"""
	DMSwarmSetLocalSizes(petsclib::PetscLibType,sw::PetscDM, nloc::PetscInt, buffer::PetscInt) 
Sets the length of all registered fields on the `DMSWARM`

Not Collective

Input Parameters:
- `sw`     - a `DMSWARM`
- `nlocal` - the length of each registered field
- `buffer` - the length of the buffer used to efficient dynamic re-sizing

Level: beginner

-seealso: `DM`, `DMSWARM`, `DMSwarmGetLocalSize()`

# External Links
$(_doc_external("Dm/DMSwarmSetLocalSizes"))
"""
function DMSwarmSetLocalSizes(petsclib::PetscLibType, sw::PetscDM, nloc::PetscInt, buffer::PetscInt) end

@for_petsc function DMSwarmSetLocalSizes(petsclib::$UnionPetscLib, sw::PetscDM, nloc::$PetscInt, buffer::$PetscInt )

    @chk ccall(
               (:DMSwarmSetLocalSizes, $petsc_library),
               PetscErrorCode,
               (CDM, $PetscInt, $PetscInt),
               sw, nloc, buffer,
              )


	return nothing
end 

"""
	DMSwarmSetCellDM(petsclib::PetscLibType,sw::PetscDM, dm::PetscDM) 
Attaches a `DM` to a `DMSWARM`

Collective

Input Parameters:
- `sw` - a `DMSWARM`
- `dm` - the `DM` to attach to the `DMSWARM`

Level: beginner

-seealso: `DM`, `DMSWARM`, `DMSwarmSetType()`, `DMSwarmGetCellDM()`, `DMSwarmMigrate()`

# External Links
$(_doc_external("Dm/DMSwarmSetCellDM"))
"""
function DMSwarmSetCellDM(petsclib::PetscLibType, sw::PetscDM, dm::PetscDM) end

@for_petsc function DMSwarmSetCellDM(petsclib::$UnionPetscLib, sw::PetscDM, dm::PetscDM )

    @chk ccall(
               (:DMSwarmSetCellDM, $petsc_library),
               PetscErrorCode,
               (CDM, CDM),
               sw, dm,
              )


	return nothing
end 

"""
	DMSwarmGetCellDM(petsclib::PetscLibType,sw::PetscDM, dm::PetscDM) 
Fetches the active cell `DM`

Collective

Input Parameter:
- `sw` - a `DMSWARM`

Output Parameter:
- `dm` - the active `DM` for the `DMSWARM`

Level: beginner

-seealso: `DM`, `DMSWARM`, `DMSwarmSetCellDM()`

# External Links
$(_doc_external("Dm/DMSwarmGetCellDM"))
"""
function DMSwarmGetCellDM(petsclib::PetscLibType, sw::PetscDM, dm::PetscDM) end

@for_petsc function DMSwarmGetCellDM(petsclib::$UnionPetscLib, sw::PetscDM, dm::PetscDM )
	dm_ = Ref(dm.ptr)

    @chk ccall(
               (:DMSwarmGetCellDM, $petsc_library),
               PetscErrorCode,
               (CDM, Ptr{CDM}),
               sw, dm_,
              )

	dm.ptr = C_NULL

	return nothing
end 

"""
	Ndm::PetscInt = DMSwarmGetCellDMNames(petsclib::PetscLibType,sw::PetscDM, celldms::String) 
Get the list of cell `DM` names

Not collective

Input Parameter:
- `sw` - a `DMSWARM`

Output Parameters:
- `Ndm`     - the number of `DMSwarmCellDM` in the `DMSWARM`
- `celldms` - the name of each `DMSwarmCellDM`

Level: beginner

-seealso: `DM`, `DMSWARM`, `DMSwarmSetCellDM()`, `DMSwarmGetCellDMByName()`

# External Links
$(_doc_external("Dm/DMSwarmGetCellDMNames"))
"""
function DMSwarmGetCellDMNames(petsclib::PetscLibType, sw::PetscDM, celldms::String) end

@for_petsc function DMSwarmGetCellDMNames(petsclib::$UnionPetscLib, sw::PetscDM, celldms::String )
	Ndm_ = Ref{$PetscInt}()

    @chk ccall(
               (:DMSwarmGetCellDMNames, $petsc_library),
               PetscErrorCode,
               (CDM, Ptr{$PetscInt}, Ptr{Cchar}),
               sw, Ndm_, celldms,
              )

	Ndm = Ndm_[]

	return Ndm
end 

"""
	DMSwarmSetCellDMActive(petsclib::PetscLibType,sw::PetscDM, name::String) 
Activates a cell `DM` for a `DMSWARM`

Collective

Input Parameters:
- `sw`   - a `DMSWARM`
- `name` - name of the cell `DM` to active for the `DMSWARM`

Level: beginner

-seealso: `DM`, `DMSWARM`, `DMSwarmCellDM`, `DMSwarmSetType()`, `DMSwarmAddCellDM()`, `DMSwarmSetCellDM()`, `DMSwarmMigrate()`

# External Links
$(_doc_external("Dm/DMSwarmSetCellDMActive"))
"""
function DMSwarmSetCellDMActive(petsclib::PetscLibType, sw::PetscDM, name::String) end

@for_petsc function DMSwarmSetCellDMActive(petsclib::$UnionPetscLib, sw::PetscDM, name::String )

    @chk ccall(
               (:DMSwarmSetCellDMActive, $petsc_library),
               PetscErrorCode,
               (CDM, Ptr{Cchar}),
               sw, name,
              )


	return nothing
end 

"""
	DMSwarmGetCellDMActive(petsclib::PetscLibType,sw::PetscDM, celldm::DMSwarmCellDM) 
Returns the active cell `DM` for a `DMSWARM`

Collective

Input Parameter:
- `sw` - a `DMSWARM`

Output Parameter:
- `celldm` - the active `DMSwarmCellDM`

Level: beginner

-seealso: `DM`, `DMSWARM`, `DMSwarmCellDM`, `DMSwarmSetType()`, `DMSwarmAddCellDM()`, `DMSwarmSetCellDM()`, `DMSwarmMigrate()`

# External Links
$(_doc_external("Dm/DMSwarmGetCellDMActive"))
"""
function DMSwarmGetCellDMActive(petsclib::PetscLibType, sw::PetscDM, celldm::DMSwarmCellDM) end

@for_petsc function DMSwarmGetCellDMActive(petsclib::$UnionPetscLib, sw::PetscDM, celldm::DMSwarmCellDM )

    @chk ccall(
               (:DMSwarmGetCellDMActive, $petsc_library),
               PetscErrorCode,
               (CDM, Ptr{DMSwarmCellDM}),
               sw, celldm,
              )


	return nothing
end 

"""
	DMSwarmGetCellDMByName(petsclib::PetscLibType,sw::PetscDM, name::String, celldm::DMSwarmCellDM) 
Get a `DMSwarmCellDM` from its name

Not collective

Input Parameters:
- `sw`   - a `DMSWARM`
- `name` - the name

Output Parameter:
- `celldm` - the `DMSwarmCellDM`

Level: beginner

-seealso: `DM`, `DMSWARM`, `DMSwarmSetCellDM()`, `DMSwarmGetCellDMNames()`

# External Links
$(_doc_external("Dm/DMSwarmGetCellDMByName"))
"""
function DMSwarmGetCellDMByName(petsclib::PetscLibType, sw::PetscDM, name::String, celldm::DMSwarmCellDM) end

@for_petsc function DMSwarmGetCellDMByName(petsclib::$UnionPetscLib, sw::PetscDM, name::String, celldm::DMSwarmCellDM )

    @chk ccall(
               (:DMSwarmGetCellDMByName, $petsc_library),
               PetscErrorCode,
               (CDM, Ptr{Cchar}, Ptr{DMSwarmCellDM}),
               sw, name, celldm,
              )


	return nothing
end 

"""
	DMSwarmAddCellDM(petsclib::PetscLibType,sw::PetscDM, celldm::DMSwarmCellDM) 
Adds a cell `DM` to the `DMSWARM`

Collective

Input Parameters:
- `sw`     - a `DMSWARM`
- `celldm` - the `DMSwarmCellDM`

Level: beginner

-seealso: `DM`, `DMSWARM`, `DMSwarmSetType()`, `DMSwarmPushCellDM()`, `DMSwarmSetCellDM()`, `DMSwarmMigrate()`

# External Links
$(_doc_external("Dm/DMSwarmAddCellDM"))
"""
function DMSwarmAddCellDM(petsclib::PetscLibType, sw::PetscDM, celldm::DMSwarmCellDM) end

@for_petsc function DMSwarmAddCellDM(petsclib::$UnionPetscLib, sw::PetscDM, celldm::DMSwarmCellDM )

    @chk ccall(
               (:DMSwarmAddCellDM, $petsc_library),
               PetscErrorCode,
               (CDM, DMSwarmCellDM),
               sw, celldm,
              )


	return nothing
end 

"""
	nloc::PetscInt = DMSwarmGetLocalSize(petsclib::PetscLibType,dm::PetscDM) 
Retrieves the local length of fields registered

Not Collective

Input Parameter:
- `dm` - a `DMSWARM`

Output Parameter:
- `nlocal` - the length of each registered field

Level: beginner

-seealso: `DM`, `DMSWARM`, `DMSwarmGetSize()`, `DMSwarmSetLocalSizes()`

# External Links
$(_doc_external("Dm/DMSwarmGetLocalSize"))
"""
function DMSwarmGetLocalSize(petsclib::PetscLibType, dm::PetscDM) end

@for_petsc function DMSwarmGetLocalSize(petsclib::$UnionPetscLib, dm::PetscDM )
	nloc_ = Ref{$PetscInt}()

    @chk ccall(
               (:DMSwarmGetLocalSize, $petsc_library),
               PetscErrorCode,
               (CDM, Ptr{$PetscInt}),
               dm, nloc_,
              )

	nloc = nloc_[]

	return nloc
end 

"""
	n::PetscInt = DMSwarmGetSize(petsclib::PetscLibType,dm::PetscDM) 
Retrieves the total length of fields registered

Collective

Input Parameter:
- `dm` - a `DMSWARM`

Output Parameter:
- `n` - the total length of each registered field

Level: beginner

-seealso: `DM`, `DMSWARM`, `DMSwarmGetLocalSize()`, `DMSwarmSetLocalSizes()`

# External Links
$(_doc_external("Dm/DMSwarmGetSize"))
"""
function DMSwarmGetSize(petsclib::PetscLibType, dm::PetscDM) end

@for_petsc function DMSwarmGetSize(petsclib::$UnionPetscLib, dm::PetscDM )
	n_ = Ref{$PetscInt}()

    @chk ccall(
               (:DMSwarmGetSize, $petsc_library),
               PetscErrorCode,
               (CDM, Ptr{$PetscInt}),
               dm, n_,
              )

	n = n_[]

	return n
end 

"""
	DMSwarmRegisterPetscDatatypeField(petsclib::PetscLibType,dm::PetscDM, fieldname::String, blocksize::PetscInt, type::PetscDataType) 
Register a field to a `DMSWARM` with a native PETSc data type

Collective

Input Parameters:
- `dm`        - a `DMSWARM`
- `fieldname` - the textual name to identify this field
- `blocksize` - the number of each data type
- `type`      - a valid PETSc data type (`PETSC_CHAR`, `PETSC_SHORT`, `PETSC_INT`, `PETSC_FLOAT`, `PETSC_REAL`, `PETSC_LONG`)

Level: beginner

-seealso: `DM`, `DMSWARM`, `DMSwarmRegisterUserStructField()`, `DMSwarmRegisterUserDatatypeField()`

# External Links
$(_doc_external("Dm/DMSwarmRegisterPetscDatatypeField"))
"""
function DMSwarmRegisterPetscDatatypeField(petsclib::PetscLibType, dm::PetscDM, fieldname::String, blocksize::PetscInt, type::PetscDataType) end

@for_petsc function DMSwarmRegisterPetscDatatypeField(petsclib::$UnionPetscLib, dm::PetscDM, fieldname::String, blocksize::$PetscInt, type::PetscDataType )

    @chk ccall(
               (:DMSwarmRegisterPetscDatatypeField, $petsc_library),
               PetscErrorCode,
               (CDM, Ptr{Cchar}, $PetscInt, PetscDataType),
               dm, fieldname, blocksize, type,
              )


	return nothing
end 

"""
	DMSwarmRegisterUserStructField(petsclib::PetscLibType,dm::PetscDM, fieldname::String, size::Csize_t) 
Register a user defined struct to a `DMSWARM`

Collective

Input Parameters:
- `dm`        - a `DMSWARM`
- `fieldname` - the textual name to identify this field
- `size`      - the size in bytes of the user struct of each data type

Level: beginner

-seealso: `DM`, `DMSWARM`, `DMSwarmRegisterPetscDatatypeField()`, `DMSwarmRegisterUserDatatypeField()`

# External Links
$(_doc_external("Dm/DMSwarmRegisterUserStructField"))
"""
function DMSwarmRegisterUserStructField(petsclib::PetscLibType, dm::PetscDM, fieldname::String, size::Csize_t) end

@for_petsc function DMSwarmRegisterUserStructField(petsclib::$UnionPetscLib, dm::PetscDM, fieldname::String, size::Csize_t )

    @chk ccall(
               (:DMSwarmRegisterUserStructField, $petsc_library),
               PetscErrorCode,
               (CDM, Ptr{Cchar}, Csize_t),
               dm, fieldname, size,
              )


	return nothing
end 

"""
	DMSwarmRegisterUserDatatypeField(petsclib::PetscLibType,dm::PetscDM, fieldname::String, size::Csize_t, blocksize::PetscInt) 
Register a user defined data type to a `DMSWARM`

Collective

Input Parameters:
- `dm`        - a `DMSWARM`
- `fieldname` - the textual name to identify this field
- `size`      - the size in bytes of the user data type
- `blocksize` - the number of each data type

Level: beginner

-seealso: `DM`, `DMSWARM`, `DMSwarmRegisterPetscDatatypeField()`, `DMSwarmRegisterUserStructField()`

# External Links
$(_doc_external("Dm/DMSwarmRegisterUserDatatypeField"))
"""
function DMSwarmRegisterUserDatatypeField(petsclib::PetscLibType, dm::PetscDM, fieldname::String, size::Csize_t, blocksize::PetscInt) end

@for_petsc function DMSwarmRegisterUserDatatypeField(petsclib::$UnionPetscLib, dm::PetscDM, fieldname::String, size::Csize_t, blocksize::$PetscInt )

    @chk ccall(
               (:DMSwarmRegisterUserDatatypeField, $petsc_library),
               PetscErrorCode,
               (CDM, Ptr{Cchar}, Csize_t, $PetscInt),
               dm, fieldname, size, blocksize,
              )


	return nothing
end 

"""
	blocksize::PetscInt = DMSwarmGetField(petsclib::PetscLibType,dm::PetscDM, fieldname::String, type::PetscDataType, data::Cvoid) 
Get access to the underlying array storing all entries associated with a registered field

Not Collective, No Fortran Support

Input Parameters:
- `dm`        - a `DMSWARM`
- `fieldname` - the textual name to identify this field

Output Parameters:
- `blocksize` - the number of each data type
- `type`      - the data type
- `data`      - pointer to raw array

Level: beginner

-seealso: `DM`, `DMSWARM`, `DMSwarmRestoreField()`

# External Links
$(_doc_external("Dm/DMSwarmGetField"))
"""
function DMSwarmGetField(petsclib::PetscLibType, dm::PetscDM, fieldname::String, type::PetscDataType, data::Cvoid) end

@for_petsc function DMSwarmGetField(petsclib::$UnionPetscLib, dm::PetscDM, fieldname::String, type::PetscDataType, data::Cvoid )
	blocksize_ = Ref{$PetscInt}()

    @chk ccall(
               (:DMSwarmGetField, $petsc_library),
               PetscErrorCode,
               (CDM, Ptr{Cchar}, Ptr{$PetscInt}, Ptr{PetscDataType}, Cvoid),
               dm, fieldname, blocksize_, type, data,
              )

	blocksize = blocksize_[]

	return blocksize
end 

"""
	blocksize::PetscInt = DMSwarmRestoreField(petsclib::PetscLibType,dm::PetscDM, fieldname::String, type::PetscDataType, data::Cvoid) 
Restore access to the underlying array storing all entries associated with a registered field

Not Collective

Input Parameters:
- `dm`        - a `DMSWARM`
- `fieldname` - the textual name to identify this field

Output Parameters:
- `blocksize` - the number of each data type
- `type`      - the data type
- `data`      - pointer to raw array

Level: beginner

-seealso: `DM`, `DMSWARM`, `DMSwarmGetField()`

# External Links
$(_doc_external("Dm/DMSwarmRestoreField"))
"""
function DMSwarmRestoreField(petsclib::PetscLibType, dm::PetscDM, fieldname::String, type::PetscDataType, data::Cvoid) end

@for_petsc function DMSwarmRestoreField(petsclib::$UnionPetscLib, dm::PetscDM, fieldname::String, type::PetscDataType, data::Cvoid )
	blocksize_ = Ref{$PetscInt}()

    @chk ccall(
               (:DMSwarmRestoreField, $petsc_library),
               PetscErrorCode,
               (CDM, Ptr{Cchar}, Ptr{$PetscInt}, Ptr{PetscDataType}, Cvoid),
               dm, fieldname, blocksize_, type, data,
              )

	blocksize = blocksize_[]

	return blocksize
end 

"""
	blocksize::PetscInt = DMSwarmGetFieldInfo(petsclib::PetscLibType,dm::PetscDM, fieldname::String, type::PetscDataType) 

# External Links
$(_doc_external("Dm/DMSwarmGetFieldInfo"))
"""
function DMSwarmGetFieldInfo(petsclib::PetscLibType, dm::PetscDM, fieldname::String, type::PetscDataType) end

@for_petsc function DMSwarmGetFieldInfo(petsclib::$UnionPetscLib, dm::PetscDM, fieldname::String, type::PetscDataType )
	blocksize_ = Ref{$PetscInt}()

    @chk ccall(
               (:DMSwarmGetFieldInfo, $petsc_library),
               PetscErrorCode,
               (CDM, Ptr{Cchar}, Ptr{$PetscInt}, Ptr{PetscDataType}),
               dm, fieldname, blocksize_, type,
              )

	blocksize = blocksize_[]

	return blocksize
end 

"""
	DMSwarmAddPoint(petsclib::PetscLibType,dm::PetscDM) 
Add space for one new point in the `DMSWARM`

Not Collective

Input Parameter:
- `dm` - a `DMSWARM`

Level: beginner

-seealso: `DM`, `DMSWARM`, `DMSwarmAddNPoints()`

# External Links
$(_doc_external("Dm/DMSwarmAddPoint"))
"""
function DMSwarmAddPoint(petsclib::PetscLibType, dm::PetscDM) end

@for_petsc function DMSwarmAddPoint(petsclib::$UnionPetscLib, dm::PetscDM )

    @chk ccall(
               (:DMSwarmAddPoint, $petsc_library),
               PetscErrorCode,
               (CDM,),
               dm,
              )


	return nothing
end 

"""
	DMSwarmAddNPoints(petsclib::PetscLibType,dm::PetscDM, npoints::PetscInt) 
Add space for a number of new points in the `DMSWARM`

Not Collective

Input Parameters:
- `dm`      - a `DMSWARM`
- `npoints` - the number of new points to add

Level: beginner

-seealso: `DM`, `DMSWARM`, `DMSwarmAddPoint()`

# External Links
$(_doc_external("Dm/DMSwarmAddNPoints"))
"""
function DMSwarmAddNPoints(petsclib::PetscLibType, dm::PetscDM, npoints::PetscInt) end

@for_petsc function DMSwarmAddNPoints(petsclib::$UnionPetscLib, dm::PetscDM, npoints::$PetscInt )

    @chk ccall(
               (:DMSwarmAddNPoints, $petsc_library),
               PetscErrorCode,
               (CDM, $PetscInt),
               dm, npoints,
              )


	return nothing
end 

"""
	DMSwarmRemovePoint(petsclib::PetscLibType,dm::PetscDM) 
Remove the last point from the `DMSWARM`

Not Collective

Input Parameter:
- `dm` - a `DMSWARM`

Level: beginner

-seealso: `DM`, `DMSWARM`, `DMSwarmRemovePointAtIndex()`

# External Links
$(_doc_external("Dm/DMSwarmRemovePoint"))
"""
function DMSwarmRemovePoint(petsclib::PetscLibType, dm::PetscDM) end

@for_petsc function DMSwarmRemovePoint(petsclib::$UnionPetscLib, dm::PetscDM )

    @chk ccall(
               (:DMSwarmRemovePoint, $petsc_library),
               PetscErrorCode,
               (CDM,),
               dm,
              )


	return nothing
end 

"""
	DMSwarmRemovePointAtIndex(petsclib::PetscLibType,dm::PetscDM, idx::PetscInt) 
Removes a specific point from the `DMSWARM`

Not Collective

Input Parameters:
- `dm`  - a `DMSWARM`
- `idx` - index of point to remove

Level: beginner

-seealso: `DM`, `DMSWARM`, `DMSwarmRemovePoint()`

# External Links
$(_doc_external("Dm/DMSwarmRemovePointAtIndex"))
"""
function DMSwarmRemovePointAtIndex(petsclib::PetscLibType, dm::PetscDM, idx::PetscInt) end

@for_petsc function DMSwarmRemovePointAtIndex(petsclib::$UnionPetscLib, dm::PetscDM, idx::$PetscInt )

    @chk ccall(
               (:DMSwarmRemovePointAtIndex, $petsc_library),
               PetscErrorCode,
               (CDM, $PetscInt),
               dm, idx,
              )


	return nothing
end 

"""
	DMSwarmCopyPoint(petsclib::PetscLibType,dm::PetscDM, pi::PetscInt, pj::PetscInt) 
Copy point pj to point pi in the `DMSWARM`

Not Collective

Input Parameters:
- `dm` - a `DMSWARM`
- `pi` - the index of the point to copy
- `pj` - the point index where the copy should be located

Level: beginner

-seealso: `DM`, `DMSWARM`, `DMSwarmRemovePoint()`

# External Links
$(_doc_external("Dm/DMSwarmCopyPoint"))
"""
function DMSwarmCopyPoint(petsclib::PetscLibType, dm::PetscDM, pi::PetscInt, pj::PetscInt) end

@for_petsc function DMSwarmCopyPoint(petsclib::$UnionPetscLib, dm::PetscDM, pi::$PetscInt, pj::$PetscInt )

    @chk ccall(
               (:DMSwarmCopyPoint, $petsc_library),
               PetscErrorCode,
               (CDM, $PetscInt, $PetscInt),
               dm, pi, pj,
              )


	return nothing
end 

"""
	DMSwarmMigrate(petsclib::PetscLibType,dm::PetscDM, remove_sent_points::PetscBool) 
Relocates points defined in the `DMSWARM` to other MPI

Collective

Input Parameters:
- `dm`                 - the `DMSWARM`
- `remove_sent_points` - flag indicating if sent points should be removed from the current MPI-rank

Level: advanced

-seealso: `DM`, `DMSWARM`, `DMSwarmSetMigrateType()`

# External Links
$(_doc_external("Dm/DMSwarmMigrate"))
"""
function DMSwarmMigrate(petsclib::PetscLibType, dm::PetscDM, remove_sent_points::PetscBool) end

@for_petsc function DMSwarmMigrate(petsclib::$UnionPetscLib, dm::PetscDM, remove_sent_points::PetscBool )

    @chk ccall(
               (:DMSwarmMigrate, $petsc_library),
               PetscErrorCode,
               (CDM, PetscBool),
               dm, remove_sent_points,
              )


	return nothing
end 

"""
	DMSwarmCollectViewCreate(petsclib::PetscLibType,dm::PetscDM) 
Applies a collection method and gathers points
in neighbour ranks into the `DMSWARM`

Collective

Input Parameter:
- `dm` - the `DMSWARM`

Level: advanced

-seealso: `DM`, `DMSWARM`, `DMSwarmCollectViewDestroy()`, `DMSwarmSetCollectType()`

# External Links
$(_doc_external("Dm/DMSwarmCollectViewCreate"))
"""
function DMSwarmCollectViewCreate(petsclib::PetscLibType, dm::PetscDM) end

@for_petsc function DMSwarmCollectViewCreate(petsclib::$UnionPetscLib, dm::PetscDM )

    @chk ccall(
               (:DMSwarmCollectViewCreate, $petsc_library),
               PetscErrorCode,
               (CDM,),
               dm,
              )


	return nothing
end 

"""
	DMSwarmCollectViewDestroy(petsclib::PetscLibType,dm::PetscDM) 
Resets the `DMSWARM` to the size prior to calling `DMSwarmCollectViewCreate()`

Collective

Input Parameters:
- `dm` - the `DMSWARM`

-seealso: `DM`, `DMSWARM`, `DMSwarmCollectViewCreate()`, `DMSwarmSetCollectType()`

# External Links
$(_doc_external("Dm/DMSwarmCollectViewDestroy"))
"""
function DMSwarmCollectViewDestroy(petsclib::PetscLibType, dm::PetscDM) end

@for_petsc function DMSwarmCollectViewDestroy(petsclib::$UnionPetscLib, dm::PetscDM )

    @chk ccall(
               (:DMSwarmCollectViewDestroy, $petsc_library),
               PetscErrorCode,
               (CDM,),
               dm,
              )


	return nothing
end 

"""
	DMSwarmSetPointCoordinatesRandom(petsclib::PetscLibType,dm::PetscDM, Npc::PetscInt) 
Sets initial coordinates for particles in each cell

Collective

Input Parameters:
- `dm`  - the `DMSWARM`
- `Npc` - The number of particles per cell in the cell `DM`

Level: intermediate

-seealso: `DM`, `DMSWARM`, `DMSwarmSetCellDM()`

# External Links
$(_doc_external("Dm/DMSwarmSetPointCoordinatesRandom"))
"""
function DMSwarmSetPointCoordinatesRandom(petsclib::PetscLibType, dm::PetscDM, Npc::PetscInt) end

@for_petsc function DMSwarmSetPointCoordinatesRandom(petsclib::$UnionPetscLib, dm::PetscDM, Npc::$PetscInt )

    @chk ccall(
               (:DMSwarmSetPointCoordinatesRandom, $petsc_library),
               PetscErrorCode,
               (CDM, $PetscInt),
               dm, Npc,
              )


	return nothing
end 

"""
	stype::DMSwarmType = DMSwarmGetType(petsclib::PetscLibType,sw::PetscDM) 
Get particular flavor of `DMSWARM`

Collective

Input Parameter:
- `sw` - the `DMSWARM`

Output Parameter:
- `stype` - the `DMSWARM` type (e.g. `DMSWARM_PIC`)

Level: advanced

-seealso: `DM`, `DMSWARM`, `DMSwarmSetMigrateType()`, `DMSwarmSetCollectType()`, `DMSwarmType`, `DMSWARM_PIC`, `DMSWARM_BASIC`

# External Links
$(_doc_external("Dm/DMSwarmGetType"))
"""
function DMSwarmGetType(petsclib::PetscLibType, sw::PetscDM) end

@for_petsc function DMSwarmGetType(petsclib::$UnionPetscLib, sw::PetscDM )
	stype_ = Ref{DMSwarmType}()

    @chk ccall(
               (:DMSwarmGetType, $petsc_library),
               PetscErrorCode,
               (CDM, Ptr{DMSwarmType}),
               sw, stype_,
              )

	stype = unsafe_string(stype_[])

	return stype
end 

"""
	DMSwarmSetType(petsclib::PetscLibType,sw::PetscDM, stype::DMSwarmType) 
Set particular flavor of `DMSWARM`

Collective

Input Parameters:
- `sw`    - the `DMSWARM`
- `stype` - the `DMSWARM` type (e.g. `DMSWARM_PIC`)

Level: advanced

-seealso: `DM`, `DMSWARM`, `DMSwarmSetMigrateType()`, `DMSwarmSetCollectType()`, `DMSwarmType`, `DMSWARM_PIC`, `DMSWARM_BASIC`

# External Links
$(_doc_external("Dm/DMSwarmSetType"))
"""
function DMSwarmSetType(petsclib::PetscLibType, sw::PetscDM, stype::DMSwarmType) end

@for_petsc function DMSwarmSetType(petsclib::$UnionPetscLib, sw::PetscDM, stype::DMSwarmType )

    @chk ccall(
               (:DMSwarmSetType, $petsc_library),
               PetscErrorCode,
               (CDM, DMSwarmType),
               sw, stype,
              )


	return nothing
end 

"""
	DMSwarmGetCellSwarm(petsclib::PetscLibType,sw::PetscDM, cellID::PetscInt, cellswarm::PetscDM) 
Extracts a single cell from the `DMSWARM` object, returns it as a single cell `DMSWARM`.
The cell `DM` is filtered for fields of that cell, and the filtered `DM` is used as the cell `DM` of the new swarm object.

Noncollective

Input Parameters:
- `sw`        - the `DMSWARM`
- `cellID`    - the integer id of the cell to be extracted and filtered
- `cellswarm` - The `DMSWARM` to receive the cell

Level: beginner

-seealso: `DM`, `DMSWARM`, `DMSwarmRestoreCellSwarm()`

# External Links
$(_doc_external("Dm/DMSwarmGetCellSwarm"))
"""
function DMSwarmGetCellSwarm(petsclib::PetscLibType, sw::PetscDM, cellID::PetscInt, cellswarm::PetscDM) end

@for_petsc function DMSwarmGetCellSwarm(petsclib::$UnionPetscLib, sw::PetscDM, cellID::$PetscInt, cellswarm::PetscDM )

    @chk ccall(
               (:DMSwarmGetCellSwarm, $petsc_library),
               PetscErrorCode,
               (CDM, $PetscInt, CDM),
               sw, cellID, cellswarm,
              )


	return nothing
end 

"""
	DMSwarmRestoreCellSwarm(petsclib::PetscLibType,sw::PetscDM, cellID::PetscInt, cellswarm::PetscDM) 
Restores a `DMSWARM` object obtained with `DMSwarmGetCellSwarm()`. All fields are copied back into the parent swarm.

Noncollective

Input Parameters:
- `sw`        - the parent `DMSWARM`
- `cellID`    - the integer id of the cell to be copied back into the parent swarm
- `cellswarm` - the cell swarm object

Level: beginner

-seealso: `DM`, `DMSWARM`, `DMSwarmGetCellSwarm()`

# External Links
$(_doc_external("Dm/DMSwarmRestoreCellSwarm"))
"""
function DMSwarmRestoreCellSwarm(petsclib::PetscLibType, sw::PetscDM, cellID::PetscInt, cellswarm::PetscDM) end

@for_petsc function DMSwarmRestoreCellSwarm(petsclib::$UnionPetscLib, sw::PetscDM, cellID::$PetscInt, cellswarm::PetscDM )

    @chk ccall(
               (:DMSwarmRestoreCellSwarm, $petsc_library),
               PetscErrorCode,
               (CDM, $PetscInt, CDM),
               sw, cellID, cellswarm,
              )


	return nothing
end 

"""
	moments::Vector{PetscReal} = DMSwarmComputeMoments(petsclib::PetscLibType,sw::PetscDM, coordinate::String, weight::String) 
Compute the first three particle moments for a given field

Noncollective

Input Parameters:
- `sw`         - the `DMSWARM`
- `coordinate` - the coordinate field name
- `weight`     - the weight field name

Output Parameter:
- `moments` - the field moments

Level: intermediate

-seealso: `DM`, `DMSWARM`, `DMPlexComputeMoments()`

# External Links
$(_doc_external("Dm/DMSwarmComputeMoments"))
"""
function DMSwarmComputeMoments(petsclib::PetscLibType, sw::PetscDM, coordinate::String, weight::String) end

@for_petsc function DMSwarmComputeMoments(petsclib::$UnionPetscLib, sw::PetscDM, coordinate::String, weight::String )
	moments = Vector{$PetscReal}(undef, ni);  # CHECK SIZE!!

    @chk ccall(
               (:DMSwarmComputeMoments, $petsc_library),
               PetscErrorCode,
               (CDM, Ptr{Cchar}, Ptr{Cchar}, Ptr{$PetscReal}),
               sw, coordinate, weight, moments,
              )


	return moments
end 

"""
	DMSwarmReplace(petsclib::PetscLibType,dm::PetscDM, ndm::PetscDM) 

# External Links
$(_doc_external("Dm/DMSwarmReplace"))
"""
function DMSwarmReplace(petsclib::PetscLibType, dm::PetscDM, ndm::PetscDM) end

@for_petsc function DMSwarmReplace(petsclib::$UnionPetscLib, dm::PetscDM, ndm::PetscDM )
	ndm_ = Ref(ndm.ptr)

    @chk ccall(
               (:DMSwarmReplace, $petsc_library),
               PetscErrorCode,
               (CDM, Ptr{CDM}),
               dm, ndm_,
              )

	ndm.ptr = C_NULL

	return nothing
end 

"""
	nsw::PetscDM = DMSwarmDuplicate(petsclib::PetscLibType,sw::PetscDM) 
Creates a new `DMSWARM` with the same fields and cell `DM`s but no particles

Collective

Input Parameter:
- `sw` - the `DMSWARM`

Output Parameter:
- `nsw` - the new `DMSWARM`

Level: beginner

-seealso: `DM`, `DMSWARM`, `DMSwarmCreate()`, `DMClone()`

# External Links
$(_doc_external("Dm/DMSwarmDuplicate"))
"""
function DMSwarmDuplicate(petsclib::PetscLibType, sw::PetscDM) end

@for_petsc function DMSwarmDuplicate(petsclib::$UnionPetscLib, sw::PetscDM )
	nsw_ = Ref{CDM}()

    @chk ccall(
               (:DMSwarmDuplicate, $petsc_library),
               PetscErrorCode,
               (CDM, Ptr{CDM}),
               sw, nsw_,
              )

	nsw = PetscDM(nsw_[], petsclib)

	return nsw
end 

"""
	gx::PetscInt,gy::PetscInt,gz::PetscInt = DMDAGetElementsCorners(petsclib::PetscLibType,da::PetscDM) 
Returns the global (i,j,k) indices of the lower left
corner of the non-overlapping decomposition of elements identified by `DMDAGetElements()`

Not Collective

Input Parameter:
- `da` - the `DMDA` object

Output Parameters:
- `gx` - the i index
- `gy` - the j index
- `gz` - the k index

Level: intermediate

-seealso: [](sec_struct), `DM`, `DMDA`, `DMDAElementType`, `DMDASetElementType()`, `DMDAGetElements()`, `DMDAGetCorners()`, `DMDAGetGhostCorners()`, `DMDAGetElementsSizes()`,
`DMDAGetElementsCornersIS()`, `DMDARestoreElementsCornersIS()`

# External Links
$(_doc_external("Dm/DMDAGetElementsCorners"))
"""
function DMDAGetElementsCorners(petsclib::PetscLibType, da::PetscDM) end

@for_petsc function DMDAGetElementsCorners(petsclib::$UnionPetscLib, da::PetscDM )
	gx_ = Ref{$PetscInt}()
	gy_ = Ref{$PetscInt}()
	gz_ = Ref{$PetscInt}()

    @chk ccall(
               (:DMDAGetElementsCorners, $petsc_library),
               PetscErrorCode,
               (CDM, Ptr{$PetscInt}, Ptr{$PetscInt}, Ptr{$PetscInt}),
               da, gx_, gy_, gz_,
              )

	gx = gx_[]
	gy = gy_[]
	gz = gz_[]

	return gx,gy,gz
end 

"""
	mx::PetscInt,my::PetscInt,mz::PetscInt = DMDAGetElementsSizes(petsclib::PetscLibType,da::PetscDM) 
Gets the local number of elements per coordinate direction for the non

Not Collective

Input Parameter:
- `da` - the `DMDA` object

Output Parameters:
- `mx` - number of local elements in x-direction
- `my` - number of local elements in y-direction
- `mz` - number of local elements in z-direction

Level: intermediate

-seealso: [](sec_struct), `DM`, `DMDA`, `DMDAElementType`, `DMDASetElementType()`, `DMDAGetElements()`, `DMDAGetElementsCorners()`

# External Links
$(_doc_external("Dm/DMDAGetElementsSizes"))
"""
function DMDAGetElementsSizes(petsclib::PetscLibType, da::PetscDM) end

@for_petsc function DMDAGetElementsSizes(petsclib::$UnionPetscLib, da::PetscDM )
	mx_ = Ref{$PetscInt}()
	my_ = Ref{$PetscInt}()
	mz_ = Ref{$PetscInt}()

    @chk ccall(
               (:DMDAGetElementsSizes, $petsc_library),
               PetscErrorCode,
               (CDM, Ptr{$PetscInt}, Ptr{$PetscInt}, Ptr{$PetscInt}),
               da, mx_, my_, mz_,
              )

	mx = mx_[]
	my = my_[]
	mz = mz_[]

	return mx,my,mz
end 

"""
	etype::DMDAElementType = DMDASetElementType(petsclib::PetscLibType,da::PetscDM) 
Sets the element type to be returned by `DMDAGetElements()`

Not Collective

Input Parameter:
- `da` - the `DMDA` object

Output Parameter:
- `etype` - the element type, currently either `DMDA_ELEMENT_P1` or `DMDA_ELEMENT_Q1`

Level: intermediate

-seealso: [](sec_struct), `DM`, `DMDA`, `DMDAElementType`, `DMDAGetElementType()`, `DMDAGetElements()`, `DMDARestoreElements()`,
`DMDA_ELEMENT_P1`, `DMDA_ELEMENT_Q1`

# External Links
$(_doc_external("Dm/DMDASetElementType"))
"""
function DMDASetElementType(petsclib::PetscLibType, da::PetscDM) end

@for_petsc function DMDASetElementType(petsclib::$UnionPetscLib, da::PetscDM )
	etype_ = Ref{DMDAElementType}()

    @chk ccall(
               (:DMDASetElementType, $petsc_library),
               PetscErrorCode,
               (CDM, DMDAElementType),
               da, etype_,
              )

	etype = unsafe_string(etype_[])

	return etype
end 

"""
	etype::DMDAElementType = DMDAGetElementType(petsclib::PetscLibType,da::PetscDM) 
Gets the element type to be returned by `DMDAGetElements()`

Not Collective

Input Parameter:
- `da` - the `DMDA` object

Output Parameter:
- `etype` - the element type, currently either `DMDA_ELEMENT_P1` or `DMDA_ELEMENT_Q1`

Level: intermediate

-seealso: [](sec_struct), `DM`, `DMDA`, `DMDAElementType`, `DMDASetElementType()`, `DMDAGetElements()`, `DMDARestoreElements()`,
`DMDA_ELEMENT_P1`, `DMDA_ELEMENT_Q1`

# External Links
$(_doc_external("Dm/DMDAGetElementType"))
"""
function DMDAGetElementType(petsclib::PetscLibType, da::PetscDM) end

@for_petsc function DMDAGetElementType(petsclib::$UnionPetscLib, da::PetscDM )
	etype_ = Ref{DMDAElementType}()

    @chk ccall(
               (:DMDAGetElementType, $petsc_library),
               PetscErrorCode,
               (CDM, Ptr{DMDAElementType}),
               da, etype_,
              )

	etype = unsafe_string(etype_[])

	return etype
end 

"""
	nel::PetscInt,nen::PetscInt,e::Vector{PetscInt} = DMDAGetElements(petsclib::PetscLibType,dm::PetscDM) 
Gets an array containing the indices (in local indexing)
of all the local elements

Not Collective

Input Parameter:
- `dm` - the `DMDA` object

Output Parameters:
- `nel` - number of local elements
- `nen` - number of nodes in each element (for example in one dimension it is 2, in two dimensions it is 3 (for `DMDA_ELEMENT_P1`) and 4
(for `DMDA_ELEMENT_Q1`)
- `e`   - the local indices of the elements' vertices, of length `nel` * `nen`

Level: intermediate

-seealso: [](sec_struct), `DM`, `DMDA`, `DMDAElementType`, `DMDASetElementType()`, `VecSetValuesLocal()`, `MatSetValuesLocal()`,
`DMGlobalToLocalBegin()`, `DMLocalToGlobalBegin()`, `DMDARestoreElements()`, `DMDA_ELEMENT_P1`, `DMDA_ELEMENT_Q1`, `DMDAGetElementsSizes()`,
`DMDAGetElementsCorners()`

# External Links
$(_doc_external("Dm/DMDAGetElements"))
"""
function DMDAGetElements(petsclib::PetscLibType, dm::PetscDM) end

@for_petsc function DMDAGetElements(petsclib::$UnionPetscLib, dm::PetscDM )
	nel_ = Ref{$PetscInt}()
	nen_ = Ref{$PetscInt}()
	e_ = Ref{Ptr{$PetscInt}}()

    @chk ccall(
               (:DMDAGetElements, $petsc_library),
               PetscErrorCode,
               (CDM, Ptr{$PetscInt}, Ptr{$PetscInt}, Ptr{Ptr{$PetscInt}}),
               dm, nel_, nen_, e_,
              )

	nel = nel_[]
	nen = nen_[]
	e = unsafe_wrap(Array, e_[], VecGetLocalSize(petsclib, x); own = false)

	return nel,nen,e
end 

"""
	DMDAGetSubdomainCornersIS(petsclib::PetscLibType,dm::PetscDM, is::IS) 
Gets an index set containing the corner indices (in local indexing)
of the non-overlapping decomposition identified by `DMDAGetElements()`

Not Collective

Input Parameter:
- `dm` - the `DMDA` object

Output Parameter:
- `is` - the index set

Level: intermediate

-seealso: [](sec_struct), `DM`, `DMDA`, `DMDAElementType`, `DMDASetElementType()`, `DMDAGetElements()`, `DMDARestoreElementsCornersIS()`,
`DMDAGetElementsSizes()`, `DMDAGetElementsCorners()`

# External Links
$(_doc_external("Dm/DMDAGetSubdomainCornersIS"))
"""
function DMDAGetSubdomainCornersIS(petsclib::PetscLibType, dm::PetscDM, is::IS) end

@for_petsc function DMDAGetSubdomainCornersIS(petsclib::$UnionPetscLib, dm::PetscDM, is::IS )

    @chk ccall(
               (:DMDAGetSubdomainCornersIS, $petsc_library),
               PetscErrorCode,
               (CDM, Ptr{IS}),
               dm, is,
              )


	return nothing
end 

"""
	DMDARestoreElements(petsclib::PetscLibType,dm::PetscDM, nel::PetscInt, nen::PetscInt, e::Vector{PetscInt}) 
Restores the array obtained with `DMDAGetElements()`

Not Collective

Input Parameters:
- `dm`  - the `DM` object
- `nel` - number of local elements
- `nen` - number of nodes in each element
- `e`   - the local indices of the elements' vertices

Level: intermediate

-seealso: [](sec_struct), `DM`, `DMDA`, `DMDAElementType`, `DMDASetElementType()`, `DMDAGetElements()`

# External Links
$(_doc_external("Dm/DMDARestoreElements"))
"""
function DMDARestoreElements(petsclib::PetscLibType, dm::PetscDM, nel::PetscInt, nen::PetscInt, e::Vector{PetscInt}) end

@for_petsc function DMDARestoreElements(petsclib::$UnionPetscLib, dm::PetscDM, nel::$PetscInt, nen::$PetscInt, e::Vector{$PetscInt} )
	e_ = Ref(pointer(e))

    @chk ccall(
               (:DMDARestoreElements, $petsc_library),
               PetscErrorCode,
               (CDM, Ptr{$PetscInt}, Ptr{$PetscInt}, Ptr{Ptr{$PetscInt}}),
               dm, nel, nen, e_,
              )


	return nothing
end 

"""
	DMDARestoreSubdomainCornersIS(petsclib::PetscLibType,dm::PetscDM, is::IS) 
Restores the `IS` obtained with `DMDAGetSubdomainCornersIS()`

Not Collective

Input Parameters:
- `dm` - the `DM` object
- `is` - the index set

Level: intermediate

-seealso: [](sec_struct), `DM`, `DMDA`, `DMDAElementType`, `DMDASetElementType()`, `DMDAGetSubdomainCornersIS()`

# External Links
$(_doc_external("Dm/DMDARestoreSubdomainCornersIS"))
"""
function DMDARestoreSubdomainCornersIS(petsclib::PetscLibType, dm::PetscDM, is::IS) end

@for_petsc function DMDARestoreSubdomainCornersIS(petsclib::$UnionPetscLib, dm::PetscDM, is::IS )

    @chk ccall(
               (:DMDARestoreSubdomainCornersIS, $petsc_library),
               PetscErrorCode,
               (CDM, Ptr{IS}),
               dm, is,
              )


	return nothing
end 

"""
	DMDAVecGetArray(petsclib::PetscLibType,da::PetscDM, vec::PetscVec, array::Cvoid) 
Returns a multiple dimension array that shares data with
the underlying vector and is indexed using the global or local dimensions of a `DMDA`.

Logically Collective

Input Parameters:
- `da`  - the `DMDA`
- `vec` - a vector the same size as one obtained with `DMCreateGlobalVector()` or `DMCreateLocalVector()`

Output Parameter:
- `array` - the array

Level: intermediate

-seealso: [](sec_struct), [](sec_struct_set), `DM`, `DMDA`, `DMDAGetGhostCorners()`, `DMDAGetCorners()`, `VecGetArray()`, `VecRestoreArray()`, `DMDAVecRestoreArray()`, `DMDAVecRestoreArrayDOF()`
`DMDAVecGetArrayDOF()`, `DMDAVecGetArrayWrite()`, `DMDAVecRestoreArrayWrite()`, `DMDAVecGetArrayRead()`, `DMDAVecRestoreArrayRead()`,
`DMStagVecGetArray()`

# External Links
$(_doc_external("Dm/DMDAVecGetArray"))
"""
function DMDAVecGetArray(petsclib::PetscLibType, da::PetscDM, vec::PetscVec, array::Cvoid) end

@for_petsc function DMDAVecGetArray(petsclib::$UnionPetscLib, da::PetscDM, vec::PetscVec, array::Cvoid )

    @chk ccall(
               (:DMDAVecGetArray, $petsc_library),
               PetscErrorCode,
               (CDM, CVec, Ptr{Cvoid}),
               da, vec, array,
              )


	return nothing
end 

"""
	DMDAVecRestoreArray(petsclib::PetscLibType,da::PetscDM, vec::PetscVec, array::Cvoid) 
Restores a multiple dimension array obtained with `DMDAVecGetArray()`

Logically Collective

Input Parameters:
- `da`    - the `DMDA`
- `vec`   - a vector the same size as one obtained with `DMCreateGlobalVector()` or `DMCreateLocalVector()`
- `array` - the `array` pointer

Level: intermediate

-seealso: [](sec_struct), [](sec_struct_set), `DM`, `DMDA`, `DMDAGetGhostCorners()`, `DMDAGetCorners()`, `VecGetArray()`, `VecRestoreArray()`, `DMDAVecGetArray()`,
`DMDAVecGetArrayWrite()`, `DMDAVecRestoreArrayWrite()`, `DMDAVecGetArrayRead()`, `DMDAVecRestoreArrayRead()`,
`DMStagVecRestoreArray()`

# External Links
$(_doc_external("Dm/DMDAVecRestoreArray"))
"""
function DMDAVecRestoreArray(petsclib::PetscLibType, da::PetscDM, vec::PetscVec, array::Cvoid) end

@for_petsc function DMDAVecRestoreArray(petsclib::$UnionPetscLib, da::PetscDM, vec::PetscVec, array::Cvoid )

    @chk ccall(
               (:DMDAVecRestoreArray, $petsc_library),
               PetscErrorCode,
               (CDM, CVec, Ptr{Cvoid}),
               da, vec, array,
              )


	return nothing
end 

"""
	DMDAVecGetArrayWrite(petsclib::PetscLibType,da::PetscDM, vec::PetscVec, array::Cvoid) 
Returns a multiple dimension array that shares data with
the underlying vector and is indexed using the global or local dimensions of a `DMDA`.

Logically Collective

Input Parameters:
- `da`  - the `DMDA`
- `vec` - a vector the same size as one obtained with `DMCreateGlobalVector()` or `DMCreateLocalVector()`

Output Parameter:
- `array` - the array

Level: intermediate

-seealso: [](sec_struct), [](sec_struct_set), `DM`, `DMDA`, `DMDAGetGhostCorners()`, `DMDAGetCorners()`, `VecGetArray()`, `VecRestoreArray()`, `DMDAVecRestoreArrayWrite()`, `DMDAVecRestoreArrayDOF()`
`DMDAVecGetArrayDOF()`, `DMDAVecGetArray()`, `DMDAVecRestoreArray()`, `DMDAVecGetArrayRead()`, `DMDAVecRestoreArrayRead()`

# External Links
$(_doc_external("Dm/DMDAVecGetArrayWrite"))
"""
function DMDAVecGetArrayWrite(petsclib::PetscLibType, da::PetscDM, vec::PetscVec, array::Cvoid) end

@for_petsc function DMDAVecGetArrayWrite(petsclib::$UnionPetscLib, da::PetscDM, vec::PetscVec, array::Cvoid )

    @chk ccall(
               (:DMDAVecGetArrayWrite, $petsc_library),
               PetscErrorCode,
               (CDM, CVec, Ptr{Cvoid}),
               da, vec, array,
              )


	return nothing
end 

"""
	DMDAVecRestoreArrayWrite(petsclib::PetscLibType,da::PetscDM, vec::PetscVec, array::Cvoid) 
Restores a multiple dimension array obtained with `DMDAVecGetArrayWrite()`

Logically Collective

Input Parameters:
- `da`    - the `DMDA`
- `vec`   - a vector the same size as one obtained with `DMCreateGlobalVector()` or `DMCreateLocalVector()`
- `array` - the `array` pointer

Level: intermediate

-seealso: [](sec_struct), [](sec_struct_set), `DM`, `DMDA`, `DMDAGetGhostCorners()`, `DMDAGetCorners()`, `VecGetArray()`, `VecRestoreArray()`, `DMDAVecGetArrayWrite()`,
`DMDAVecGetArray()`, `DMDAVecRestoreArray()`, `DMDAVecGetArrayRead()`, `DMDAVecRestoreArrayRead()`

# External Links
$(_doc_external("Dm/DMDAVecRestoreArrayWrite"))
"""
function DMDAVecRestoreArrayWrite(petsclib::PetscLibType, da::PetscDM, vec::PetscVec, array::Cvoid) end

@for_petsc function DMDAVecRestoreArrayWrite(petsclib::$UnionPetscLib, da::PetscDM, vec::PetscVec, array::Cvoid )

    @chk ccall(
               (:DMDAVecRestoreArrayWrite, $petsc_library),
               PetscErrorCode,
               (CDM, CVec, Ptr{Cvoid}),
               da, vec, array,
              )


	return nothing
end 

"""
	DMDAVecGetArrayDOF(petsclib::PetscLibType,da::PetscDM, vec::PetscVec, array::Cvoid) 
Returns a multiple dimension array that shares data with
the underlying vector and is indexed using the global or local dimensions of a `DMDA`

Logically Collective

Input Parameters:
- `da`  - the `DMDA`
- `vec` - a vector the same size as one obtained with `DMCreateGlobalVector()` or `DMCreateLocalVector()`

Output Parameter:
- `array` - the `array` pointer

Level: intermediate

-seealso: [](sec_struct), [](sec_struct_set), `DM`, `DMDA`, `DMDAGetGhostCorners()`, `DMDAGetCorners()`, `VecGetArray()`, `VecRestoreArray()`, `DMDAVecRestoreArray()`, `DMDAVecGetArray()`, `DMDAVecRestoreArrayDOF()`,
`DMDAVecGetArrayWrite()`, `DMDAVecRestoreArrayWrite()`, `DMDAVecGetArrayRead()`, `DMDAVecRestoreArrayRead()`, `DMDAVecGetArrayDOFRead()`

# External Links
$(_doc_external("Dm/DMDAVecGetArrayDOF"))
"""
function DMDAVecGetArrayDOF(petsclib::PetscLibType, da::PetscDM, vec::PetscVec, array::Cvoid) end

@for_petsc function DMDAVecGetArrayDOF(petsclib::$UnionPetscLib, da::PetscDM, vec::PetscVec, array::Cvoid )

    @chk ccall(
               (:DMDAVecGetArrayDOF, $petsc_library),
               PetscErrorCode,
               (CDM, CVec, Ptr{Cvoid}),
               da, vec, array,
              )


	return nothing
end 

"""
	DMDAVecRestoreArrayDOF(petsclib::PetscLibType,da::PetscDM, vec::PetscVec, array::Cvoid) 
Restores a multiple dimension array obtained with `DMDAVecGetArrayDOF()`

Logically Collective

Input Parameters:
- `da`    - the `DMDA`
- `vec`   - vector the same size as one obtained with `DMCreateGlobalVector()` or `DMCreateLocalVector()`
- `array` - the `array` point

Level: intermediate

-seealso: [](sec_struct), [](sec_struct_set), `DM`, `DMDA`, `DMDAGetGhostCorners()`, `DMDAGetCorners()`, `VecGetArray()`, `VecRestoreArray()`, `DMDAVecGetArray()`, `DMDAVecGetArrayDOF()`,
`DMDAVecGetArrayWrite()`, `DMDAVecRestoreArrayWrite()`, `DMDAVecGetArrayRead()`, `DMDAVecRestoreArrayRead()`

# External Links
$(_doc_external("Dm/DMDAVecRestoreArrayDOF"))
"""
function DMDAVecRestoreArrayDOF(petsclib::PetscLibType, da::PetscDM, vec::PetscVec, array::Cvoid) end

@for_petsc function DMDAVecRestoreArrayDOF(petsclib::$UnionPetscLib, da::PetscDM, vec::PetscVec, array::Cvoid )

    @chk ccall(
               (:DMDAVecRestoreArrayDOF, $petsc_library),
               PetscErrorCode,
               (CDM, CVec, Ptr{Cvoid}),
               da, vec, array,
              )


	return nothing
end 

"""
	DMDAVecGetArrayRead(petsclib::PetscLibType,da::PetscDM, vec::PetscVec, array::Cvoid) 
Returns a multiple dimension array that shares data with
the underlying vector and is indexed using the global or local dimensions of a `DMDA`.

Not Collective

Input Parameters:
- `da`  - the `DMDA`
- `vec` - a vector the same size as one obtained with `DMCreateGlobalVector()` or `DMCreateLocalVector()`

Output Parameter:
- `array` - the array

Level: intermediate

-seealso: [](sec_struct), [](sec_struct_set), `DM`, `DMDA`, `DMDAGetGhostCorners()`,
`DMDAGetCorners()`, `VecGetArray()`, `VecRestoreArray()`, `DMDAVecRestoreArrayRead()`,
`DMDAVecRestoreArrayDOF()`, `DMDAVecGetArrayDOF()`, `DMDAVecGetArray()`,
`DMDAVecRestoreArray()`, `DMStagVecGetArrayRead()`

# External Links
$(_doc_external("Dm/DMDAVecGetArrayRead"))
"""
function DMDAVecGetArrayRead(petsclib::PetscLibType, da::PetscDM, vec::PetscVec, array::Cvoid) end

@for_petsc function DMDAVecGetArrayRead(petsclib::$UnionPetscLib, da::PetscDM, vec::PetscVec, array::Cvoid )

    @chk ccall(
               (:DMDAVecGetArrayRead, $petsc_library),
               PetscErrorCode,
               (CDM, CVec, Ptr{Cvoid}),
               da, vec, array,
              )


	return nothing
end 

"""
	DMDAVecRestoreArrayRead(petsclib::PetscLibType,da::PetscDM, vec::PetscVec, array::Cvoid) 
Restores a multiple dimension array obtained with `DMDAVecGetArrayRead()`

Not Collective

Input Parameters:
- `da`    - the `DMDA`
- `vec`   - vector the same size as one obtained with `DMCreateGlobalVector()` or `DMCreateLocalVector()`
- `array` - the `array` pointer

Level: intermediate

-seealso: [](sec_struct), [](sec_struct_set), `DM`, `DMDA`, `DMDAGetGhostCorners()`, `DMDAGetCorners()`, `VecGetArray()`, `VecRestoreArray()`, `DMDAVecGetArrayRead()`,
`DMDAVecGetArray()`, `DMDAVecRestoreArray()`, `DMDAVecGetArrayWrite()`, `DMDAVecRestoreArrayWrite()`,
`DMStagVecRestoreArrayRead()`

# External Links
$(_doc_external("Dm/DMDAVecRestoreArrayRead"))
"""
function DMDAVecRestoreArrayRead(petsclib::PetscLibType, da::PetscDM, vec::PetscVec, array::Cvoid) end

@for_petsc function DMDAVecRestoreArrayRead(petsclib::$UnionPetscLib, da::PetscDM, vec::PetscVec, array::Cvoid )

    @chk ccall(
               (:DMDAVecRestoreArrayRead, $petsc_library),
               PetscErrorCode,
               (CDM, CVec, Ptr{Cvoid}),
               da, vec, array,
              )


	return nothing
end 

"""
	DMDAVecGetArrayDOFRead(petsclib::PetscLibType,da::PetscDM, vec::PetscVec, array::Cvoid) 
Returns a multiple dimension array that shares data with
the underlying vector and is indexed using the global or local dimensions of a `DMDA`

Not Collective

Input Parameters:
- `da`  - the `DMDA`
- `vec` - a vector the same size as one obtained with `DMCreateGlobalVector()` or `DMCreateLocalVector()`

Output Parameter:
- `array` - the array

Level: intermediate

-seealso: [](sec_struct), [](sec_struct_set), `DM`, `DMDA`, `DMDAGetGhostCorners()`, `DMDAGetCorners()`, `VecGetArray()`, `VecRestoreArray()`, `DMDAVecRestoreArray()`, `DMDAVecGetArray()`, `DMDAVecGetArrayDOF()`,
`DMDAVecGetArrayWrite()`, `DMDAVecRestoreArrayWrite()`, `DMDAVecGetArrayRead()`, `DMDAVecRestoreArrayRead()`

# External Links
$(_doc_external("Dm/DMDAVecGetArrayDOFRead"))
"""
function DMDAVecGetArrayDOFRead(petsclib::PetscLibType, da::PetscDM, vec::PetscVec, array::Cvoid) end

@for_petsc function DMDAVecGetArrayDOFRead(petsclib::$UnionPetscLib, da::PetscDM, vec::PetscVec, array::Cvoid )

    @chk ccall(
               (:DMDAVecGetArrayDOFRead, $petsc_library),
               PetscErrorCode,
               (CDM, CVec, Ptr{Cvoid}),
               da, vec, array,
              )


	return nothing
end 

"""
	DMDAVecRestoreArrayDOFRead(petsclib::PetscLibType,da::PetscDM, vec::PetscVec, array::Cvoid) 
Restores a multiple dimension array obtained with `DMDAVecGetArrayDOFRead()`

Not Collective

Input Parameters:
- `da`    - the `DMDA`
- `vec`   - a vector the same size as one obtained with `DMCreateGlobalVector()` or `DMCreateLocalVector()`
- `array` - the `array` pointer

Level: intermediate

-seealso: [](sec_struct), [](sec_struct_set), `DM`, `DMDA`, `DMDAGetGhostCorners()`, `DMDAGetCorners()`, `VecGetArray()`, `VecRestoreArray()`, `DMDAVecGetArray()`, `DMDAVecGetArrayDOF()`, `DMDAVecRestoreArrayDOF()`,
`DMDAVecGetArrayWrite()`, `DMDAVecRestoreArrayWrite()`, `DMDAVecGetArrayRead()`, `DMDAVecRestoreArrayRead()`

# External Links
$(_doc_external("Dm/DMDAVecRestoreArrayDOFRead"))
"""
function DMDAVecRestoreArrayDOFRead(petsclib::PetscLibType, da::PetscDM, vec::PetscVec, array::Cvoid) end

@for_petsc function DMDAVecRestoreArrayDOFRead(petsclib::$UnionPetscLib, da::PetscDM, vec::PetscVec, array::Cvoid )

    @chk ccall(
               (:DMDAVecRestoreArrayDOFRead, $petsc_library),
               PetscErrorCode,
               (CDM, CVec, Ptr{Cvoid}),
               da, vec, array,
              )


	return nothing
end 

"""
	DMDAVecGetArrayDOFWrite(petsclib::PetscLibType,da::PetscDM, vec::PetscVec, array::Cvoid) 
Returns a multiple dimension array that shares data with
the underlying vector and is indexed using the global or local dimensions of a `DMDA`

Not Collective

Input Parameters:
- `da`  - the `DMDA`
- `vec` - a vector the same size as one obtained with `DMCreateGlobalVector()` or `DMCreateLocalVector()`

Output Parameter:
- `array` - the array

Level: intermediate

-seealso: [](sec_struct), [](sec_struct_set), `DM`, `DMDA`, `DMDAGetGhostCorners()`, `DMDAGetCorners()`, `VecGetArray()`, `VecRestoreArray()`, `DMDAVecRestoreArray()`, `DMDAVecGetArray()`, `DMDAVecGetArrayDOF()`,
`DMDAVecGetArrayWrite()`, `DMDAVecRestoreArrayWrite()`

# External Links
$(_doc_external("Dm/DMDAVecGetArrayDOFWrite"))
"""
function DMDAVecGetArrayDOFWrite(petsclib::PetscLibType, da::PetscDM, vec::PetscVec, array::Cvoid) end

@for_petsc function DMDAVecGetArrayDOFWrite(petsclib::$UnionPetscLib, da::PetscDM, vec::PetscVec, array::Cvoid )

    @chk ccall(
               (:DMDAVecGetArrayDOFWrite, $petsc_library),
               PetscErrorCode,
               (CDM, CVec, Ptr{Cvoid}),
               da, vec, array,
              )


	return nothing
end 

"""
	DMDAVecRestoreArrayDOFWrite(petsclib::PetscLibType,da::PetscDM, vec::PetscVec, array::Cvoid) 
Restores a multiple dimension array obtained with `DMDAVecGetArrayDOFWrite()`

Not Collective

Input Parameters:
- `da`    - the `DMDA`
- `vec`   - a vector the same size as one obtained with `DMCreateGlobalVector()` or `DMCreateLocalVector()`
- `array` - the `array` pointer

Level: intermediate

-seealso: [](sec_struct), [](sec_struct_set), `DM`, `DMDA`, `DMDAGetGhostCorners()`, `DMDAGetCorners()`, `VecGetArray()`, `VecRestoreArray()`, `DMDAVecGetArray()`, `DMDAVecGetArrayDOF()`, `DMDAVecRestoreArrayDOF()`,
`DMDAVecGetArrayWrite()`, `DMDAVecRestoreArrayWrite()`

# External Links
$(_doc_external("Dm/DMDAVecRestoreArrayDOFWrite"))
"""
function DMDAVecRestoreArrayDOFWrite(petsclib::PetscLibType, da::PetscDM, vec::PetscVec, array::Cvoid) end

@for_petsc function DMDAVecRestoreArrayDOFWrite(petsclib::$UnionPetscLib, da::PetscDM, vec::PetscVec, array::Cvoid )

    @chk ccall(
               (:DMDAVecRestoreArrayDOFWrite, $petsc_library),
               PetscErrorCode,
               (CDM, CVec, Ptr{Cvoid}),
               da, vec, array,
              )


	return nothing
end 

"""
	DMDAGlobalToNaturalBegin(petsclib::PetscLibType,da::PetscDM, g::PetscVec, mode::InsertMode, n::PetscVec) 
Maps values from the global vector obtained with `DMCreateGlobalVector()` to a global vector
in the "natural" grid ordering. Must be followed by
`DMDAGlobalToNaturalEnd()` to complete the exchange.

Neighbor-wise Collective

Input Parameters:
- `da`   - the `DMDA` context
- `g`    - the global vector, see `DMCreateGlobalVector()`
- `mode` - one of `INSERT_VALUES` or `ADD_VALUES`

Output Parameter:
- `n` - the natural ordering values, see `DMDACreateNaturalVector()`

Level: advanced

-seealso: [](sec_struct), `DM`, `DMDA`, `DMDAGlobalToNaturalEnd()`, `DMLocalToGlobalBegin()`, `DMDACreate2d()`,
`DMGlobalToLocalBegin()`, `DMGlobalToLocalEnd()`, `DMDACreateNaturalVector()`

# External Links
$(_doc_external("Dm/DMDAGlobalToNaturalBegin"))
"""
function DMDAGlobalToNaturalBegin(petsclib::PetscLibType, da::PetscDM, g::PetscVec, mode::InsertMode, n::PetscVec) end

@for_petsc function DMDAGlobalToNaturalBegin(petsclib::$UnionPetscLib, da::PetscDM, g::PetscVec, mode::InsertMode, n::PetscVec )

    @chk ccall(
               (:DMDAGlobalToNaturalBegin, $petsc_library),
               PetscErrorCode,
               (CDM, CVec, InsertMode, CVec),
               da, g, mode, n,
              )


	return nothing
end 

"""
	DMDAGlobalToNaturalEnd(petsclib::PetscLibType,da::PetscDM, g::PetscVec, mode::InsertMode, n::PetscVec) 
Maps values from the global vector obtained with `DMCreateGlobalVector()` to a global vector
in the natural ordering. Must be preceded by `DMDAGlobalToNaturalBegin()`.

Neighbor-wise Collective

Input Parameters:
- `da`   - the `DMDA` context
- `g`    - the global vector, see `DMCreateGlobalVector()`
- `mode` - one of `INSERT_VALUES` or `ADD_VALUES`

Output Parameter:
- `n` - the global values in the natural ordering, see `DMDACreateNaturalVector()`

Level: advanced

-seealso: [](sec_struct), `DM`, `DMDA`, `DMDAGlobalToNaturalBegin()`, `DMLocalToGlobalBegin()`, `DMDACreate2d()`,
`DMGlobalToLocalBegin()`, `DMGlobalToLocalEnd()`, `DMDACreateNaturalVector()`

# External Links
$(_doc_external("Dm/DMDAGlobalToNaturalEnd"))
"""
function DMDAGlobalToNaturalEnd(petsclib::PetscLibType, da::PetscDM, g::PetscVec, mode::InsertMode, n::PetscVec) end

@for_petsc function DMDAGlobalToNaturalEnd(petsclib::$UnionPetscLib, da::PetscDM, g::PetscVec, mode::InsertMode, n::PetscVec )

    @chk ccall(
               (:DMDAGlobalToNaturalEnd, $petsc_library),
               PetscErrorCode,
               (CDM, CVec, InsertMode, CVec),
               da, g, mode, n,
              )


	return nothing
end 

"""
	DMDANaturalToGlobalBegin(petsclib::PetscLibType,da::PetscDM, n::PetscVec, mode::InsertMode, g::PetscVec) 
Maps values from a global vector in the "natural" ordering
to a global vector in the PETSc `DMDA` grid ordering. Must be followed by
`DMDANaturalToGlobalEnd()` to complete the exchange.

Neighbor-wise Collective

Input Parameters:
- `da`   - the `DMDA` context
- `g`    - the global vector in a natural ordering, see `DMDACreateNaturalVector()`
- `mode` - one of `INSERT_VALUES` or `ADD_VALUES`

Output Parameter:
- `n` - the values in the `DMDA` ordering

Level: advanced

-seealso: [](sec_struct), `DM`, `DMDA`, `DMDAGlobalToNaturalEnd()`, `DMDAGlobalToNaturalBegin()`, `DMLocalToGlobalBegin()`, `DMDACreate2d()`,
`DMGlobalToLocalBegin()`, `DMGlobalToLocalEnd()`, `DMDACreateNaturalVector()`

# External Links
$(_doc_external("Dm/DMDANaturalToGlobalBegin"))
"""
function DMDANaturalToGlobalBegin(petsclib::PetscLibType, da::PetscDM, n::PetscVec, mode::InsertMode, g::PetscVec) end

@for_petsc function DMDANaturalToGlobalBegin(petsclib::$UnionPetscLib, da::PetscDM, n::PetscVec, mode::InsertMode, g::PetscVec )

    @chk ccall(
               (:DMDANaturalToGlobalBegin, $petsc_library),
               PetscErrorCode,
               (CDM, CVec, InsertMode, CVec),
               da, n, mode, g,
              )


	return nothing
end 

"""
	DMDANaturalToGlobalEnd(petsclib::PetscLibType,da::PetscDM, n::PetscVec, mode::InsertMode, g::PetscVec) 
Maps values from the natural ordering global vector
to a global vector in the PETSc `DMDA` ordering. Must be preceded by `DMDANaturalToGlobalBegin()`.

Neighbor-wise Collective

Input Parameters:
- `da`   - the `DMDA` context
- `g`    - the global vector in a natural ordering
- `mode` - one of `INSERT_VALUES` or `ADD_VALUES`

Output Parameter:
- `n` - the global values in the PETSc `DMDA` ordering

Level: advanced

-seealso: [](sec_struct), `DM`, `DMDA`, `DMDAGlobalToNaturalBegin()`, `DMDAGlobalToNaturalEnd()`, `DMLocalToGlobalBegin()`, `DMDACreate2d()`,
`DMGlobalToLocalBegin()`, `DMGlobalToLocalEnd()`, `DMDACreateNaturalVector()`

# External Links
$(_doc_external("Dm/DMDANaturalToGlobalEnd"))
"""
function DMDANaturalToGlobalEnd(petsclib::PetscLibType, da::PetscDM, n::PetscVec, mode::InsertMode, g::PetscVec) end

@for_petsc function DMDANaturalToGlobalEnd(petsclib::$UnionPetscLib, da::PetscDM, n::PetscVec, mode::InsertMode, g::PetscVec )

    @chk ccall(
               (:DMDANaturalToGlobalEnd, $petsc_library),
               PetscErrorCode,
               (CDM, CVec, InsertMode, CVec),
               da, n, mode, g,
              )


	return nothing
end 

"""
	scatter::VecScatter = DMDAGlobalToNaturalAllCreate(petsclib::PetscLibType,da::PetscDM) 
Creates a scatter context that maps from a
global vector, obtained with `DMCreateGlobalVector()`, to the entire vector to each processor in natural numbering

Collective

Input Parameter:
- `da` - the `DMDA` context

Output Parameter:
- `scatter` - the scatter context

Level: advanced

-seealso: [](sec_struct), `DM`, `DMDA`, `DMDANaturalAllToGlobalCreate()`, `DMDAGlobalToNaturalEnd()`, `DMLocalToGlobalBegin()`, `DMDACreate2d()`,
`DMGlobalToLocalBegin()`, `DMGlobalToLocalEnd()`, `DMDACreateNaturalVector()`

# External Links
$(_doc_external("Dm/DMDAGlobalToNaturalAllCreate"))
"""
function DMDAGlobalToNaturalAllCreate(petsclib::PetscLibType, da::PetscDM) end

@for_petsc function DMDAGlobalToNaturalAllCreate(petsclib::$UnionPetscLib, da::PetscDM )
	scatter_ = Ref{VecScatter}()

    @chk ccall(
               (:DMDAGlobalToNaturalAllCreate, $petsc_library),
               PetscErrorCode,
               (CDM, Ptr{VecScatter}),
               da, scatter_,
              )

	scatter = scatter_[]

	return scatter
end 

"""
	scatter::VecScatter = DMDANaturalAllToGlobalCreate(petsclib::PetscLibType,da::PetscDM) 
Creates a scatter context that maps from a copy
of the entire vector on each processor (in the natural ordering) to its local part in the global vector, obtained with `DMCreateGlobalVector()`.

Collective

Input Parameter:
- `da` - the `DMDA` context

Output Parameter:
- `scatter` - the scatter context

Level: advanced

-seealso: [](sec_struct), `DM`, `DMDA`, `DMDAGlobalToNaturalAllCreate()`, `DMDAGlobalToNaturalEnd()`, `DMLocalToGlobalBegin()`, `DMDACreate2d()`,
`DMGlobalToLocalBegin()`, `DMGlobalToLocalEnd()`, `DMDACreateNaturalVector()`

# External Links
$(_doc_external("Dm/DMDANaturalAllToGlobalCreate"))
"""
function DMDANaturalAllToGlobalCreate(petsclib::PetscLibType, da::PetscDM) end

@for_petsc function DMDANaturalAllToGlobalCreate(petsclib::$UnionPetscLib, da::PetscDM )
	scatter_ = Ref{VecScatter}()

    @chk ccall(
               (:DMDANaturalAllToGlobalCreate, $petsc_library),
               PetscErrorCode,
               (CDM, Ptr{VecScatter}),
               da, scatter_,
              )

	scatter = scatter_[]

	return scatter
end 

"""
	g::PetscVec = DMDACreateNaturalVector(petsclib::PetscLibType,da::PetscDM) 
Creates a parallel PETSc vector that
will hold vector values in the natural numbering, rather than in
the PETSc parallel numbering associated with the `DMDA`.

Collective

Input Parameter:
- `da` - the `DMDA`

Output Parameter:
- `g` - the distributed global vector

Level: advanced

-seealso: [](sec_struct), `DM`, `DMDA`, `DMDAGlobalToNaturalBegin()`, `DMDAGlobalToNaturalEnd()`, `DMDANaturalToGlobalBegin()`, `DMDANaturalToGlobalEnd()`,
`DMCreateLocalVector()`, `VecDuplicate()`, `VecDuplicateVecs()`, `DMDACreate1d()`, `DMDACreate2d()`, `DMDACreate3d()`, `DMGlobalToLocalBegin()`,
`DMGlobalToLocalEnd()`, `DMLocalToGlobalBegin()`

# External Links
$(_doc_external("Dm/DMDACreateNaturalVector"))
"""
function DMDACreateNaturalVector(petsclib::PetscLibType, da::PetscDM) end

@for_petsc function DMDACreateNaturalVector(petsclib::$UnionPetscLib, da::PetscDM )
	g_ = Ref{CVec}()

    @chk ccall(
               (:DMDACreateNaturalVector, $petsc_library),
               PetscErrorCode,
               (CDM, Ptr{CVec}),
               da, g_,
              )

	g = PetscVec(g_[], petsclib)

	return g
end 

"""
	da::PetscDM = DMDACreate1d(petsclib::PetscLibType,comm::MPI_Comm, bx::DMBoundaryType, M::PetscInt, dof::PetscInt, s::PetscInt, lx::Vector{PetscInt}) 
Creates an object that will manage the communication of  one
regular array data that is distributed across one or mpre MPI processes.

Collective

Input Parameters:
- `comm` - MPI communicator
- `bx`   - type of ghost cells at the boundary the array should have, if any. Use
`DM_BOUNDARY_NONE`, `DM_BOUNDARY_GHOSTED`, or `DM_BOUNDARY_PERIODIC`.
- `M`    - global dimension of the array (that is the number of grid points)
- `dof`  - number of degrees of freedom per node
- `s`    - stencil width
- `lx`   - array containing number of nodes in the X direction on each processor,
or `NULL`. If non-null, must be of length as the number of processes in the MPI_Comm.
The sum of these entries must equal `M`

Output Parameter:
- `da` - the resulting distributed array object

Options Database Keys:
- `-dm_view`          - Calls `DMView()` at the conclusion of `DMDACreate1d()`
- `-da_grid_x <nx>`   - number of grid points in x direction
- `-da_refine_x <rx>` - refinement factor
- `-da_refine <n>`    - refine the `DMDA` n times before creating it

Level: beginner

-seealso: [](sec_struct), `DMDA`, `DM`, `DMDestroy()`, `DMView()`, `DMDACreate2d()`, `DMDACreate3d()`, `DMGlobalToLocalBegin()`, `DMDASetRefinementFactor()`,
`DMGlobalToLocalEnd()`, `DMLocalToGlobalBegin()`, `DMLocalToLocalBegin()`, `DMLocalToLocalEnd()`, `DMDAGetRefinementFactor()`,
`DMDAGetInfo()`, `DMCreateGlobalVector()`, `DMCreateLocalVector()`, `DMDACreateNaturalVector()`, `DMLoad()`, `DMDAGetOwnershipRanges()`,
`DMStagCreate1d()`, `DMBoundaryType`

# External Links
$(_doc_external("Dm/DMDACreate1d"))
"""
function DMDACreate1d(petsclib::PetscLibType, comm::MPI_Comm, bx::DMBoundaryType, M::PetscInt, dof::PetscInt, s::PetscInt, lx::Vector{PetscInt}) end

@for_petsc function DMDACreate1d(petsclib::$UnionPetscLib, comm::MPI_Comm, bx::DMBoundaryType, M::$PetscInt, dof::$PetscInt, s::$PetscInt, lx::Vector{$PetscInt} )
	da_ = Ref{CDM}()

    @chk ccall(
               (:DMDACreate1d, $petsc_library),
               PetscErrorCode,
               (MPI_Comm, DMBoundaryType, $PetscInt, $PetscInt, $PetscInt, Ptr{$PetscInt}, Ptr{CDM}),
               comm, bx, M, dof, s, lx, da_,
              )

	da = PetscDM(da_[], petsclib)

	return da
end 

"""
	DMDASetAOType(petsclib::PetscLibType,da::PetscDM, aotype::AOType) 
Sets the type of application ordering to create with `DMDAGetAO()`, for a distributed array.

Collective

Input Parameters:
- `da`     - the `DMDA`
- `aotype` - type of `AO`. `AOType` which can be `AOBASIC`, `AOADVANCED`, `AOMAPPING`, or `AOMEMORYSCALABLE`

Level: intermediate

-seealso: [](sec_struct), `DM`, `DMDA`, `DMDACreate2d()`, `DMDAGetAO()`, `DMDAGetGhostCorners()`, `DMDAGetCorners()`, `DMLocalToGlobal()`
`DMGlobalToLocalBegin()`, `DMGlobalToLocalEnd()`, `DMLocalToLocalBegin()`, `DMLocalToLocalEnd()`, `DMDAGetGlobalIndices()`, `DMDAGetOwnershipRanges()`,
`AO`, `AOPetscToApplication()`, `AOApplicationToPetsc()`, `AOType`, `AOBASIC`, `AOADVANCED`, `AOMAPPING`, `AOMEMORYSCALABLE`

# External Links
$(_doc_external("Dm/DMDASetAOType"))
"""
function DMDASetAOType(petsclib::PetscLibType, da::PetscDM, aotype::AOType) end

@for_petsc function DMDASetAOType(petsclib::$UnionPetscLib, da::PetscDM, aotype::AOType )

    @chk ccall(
               (:DMDASetAOType, $petsc_library),
               PetscErrorCode,
               (CDM, AOType),
               da, aotype,
              )


	return nothing
end 

"""
	DMDAGetAO(petsclib::PetscLibType,da::PetscDM, ao::AO) 
Gets the application ordering context for a distributed array.

Collective

Input Parameter:
- `da` - the `DMDA`

Output Parameter:
- `ao` - the application ordering context for `DMDA`

Level: intermediate

-seealso: [](sec_struct), `DM`, `DMDA`, `DMDACreate2d()`, `DMDASetAOType()`, `DMDAGetGhostCorners()`, `DMDAGetCorners()`, `DMLocalToGlobal()`
`DMGlobalToLocalBegin()`, `DMGlobalToLocalEnd()`, `DMLocalToLocalBegin()`, `DMLocalToLocalEnd()`, `DMDAGetOwnershipRanges()`,
`AO`, `AOPetscToApplication()`, `AOApplicationToPetsc()`

# External Links
$(_doc_external("Dm/DMDAGetAO"))
"""
function DMDAGetAO(petsclib::PetscLibType, da::PetscDM, ao::AO) end

@for_petsc function DMDAGetAO(petsclib::$UnionPetscLib, da::PetscDM, ao::AO )

    @chk ccall(
               (:DMDAGetAO, $petsc_library),
               PetscErrorCode,
               (CDM, Ptr{AO}),
               da, ao,
              )


	return nothing
end 

"""
	DMDASetUniformCoordinates(petsclib::PetscLibType,da::PetscDM, xmin::PetscReal, xmax::PetscReal, ymin::PetscReal, ymax::PetscReal, zmin::PetscReal, zmax::PetscReal) 
Sets a `DMDA` coordinates to be a uniform grid

Collective

Input Parameters:
- `da`   - the `DMDA` object
- `xmin` - min extreme in the x direction
- `xmax` - max extreme in the x direction
- `ymin` - min extreme in the y direction (value ignored for 1 dimensional problems)
- `ymax` - max extreme in the y direction (value ignored for 1 dimensional problems)
- `zmin` - min extreme in the z direction (value ignored for 1 or 2 dimensional problems)
- `zmax` - max extreme in the z direction (value ignored for 1 or 2 dimensional problems)

Level: beginner

-seealso: [](sec_struct), `DM`, `DMDA`, `DMSetCoordinates()`, `DMGetCoordinates()`, `DMDACreate1d()`, `DMDACreate2d()`, `DMDACreate3d()`, `DMStagSetUniformCoordinates()`

# External Links
$(_doc_external("Dm/DMDASetUniformCoordinates"))
"""
function DMDASetUniformCoordinates(petsclib::PetscLibType, da::PetscDM, xmin::PetscReal, xmax::PetscReal, ymin::PetscReal, ymax::PetscReal, zmin::PetscReal, zmax::PetscReal) end

@for_petsc function DMDASetUniformCoordinates(petsclib::$UnionPetscLib, da::PetscDM, xmin::$PetscReal, xmax::$PetscReal, ymin::$PetscReal, ymax::$PetscReal, zmin::$PetscReal, zmax::$PetscReal )

    @chk ccall(
               (:DMDASetUniformCoordinates, $petsc_library),
               PetscErrorCode,
               (CDM, $PetscReal, $PetscReal, $PetscReal, $PetscReal, $PetscReal, $PetscReal),
               da, xmin, xmax, ymin, ymax, zmin, zmax,
              )


	return nothing
end 

"""
	dim::PetscInt,M::PetscInt,N::PetscInt,P::PetscInt,m::PetscInt,n::PetscInt,p::PetscInt,dof::PetscInt,s::PetscInt = DMDAGetInfo(petsclib::PetscLibType,da::PetscDM, bx::DMBoundaryType, by::DMBoundaryType, bz::DMBoundaryType, st::DMDAStencilType) 
Gets information about a given distributed array.

Not Collective

Input Parameter:
- `da` - the `DMDA`

Output Parameters:
- `dim` - dimension of the `DMDA` (1, 2, or 3)
- `M`   - global dimension in first direction of the array
- `N`   - global dimension in second direction of the array
- `P`   - global dimension in third direction of the array
- `m`   - corresponding number of MPI processes in first dimension
- `n`   - corresponding number of MPI processes in second dimension
- `p`   - corresponding number of MPI processes in third dimension
- `dof` - number of degrees of freedom per node
- `s`   - stencil width
- `bx`  - type of ghost nodes at boundary in first dimension
- `by`  - type of ghost nodes at boundary in second dimension
- `bz`  - type of ghost nodes at boundary in third dimension
- `st`  - stencil type, either `DMDA_STENCIL_STAR` or `DMDA_STENCIL_BOX`

Level: beginner

-seealso: [](sec_struct), `DM`, `DMDA`, `DMView()`, `DMDAGetCorners()`, `DMDAGetLocalInfo()`

# External Links
$(_doc_external("Dm/DMDAGetInfo"))
"""
function DMDAGetInfo(petsclib::PetscLibType, da::PetscDM, bx::DMBoundaryType, by::DMBoundaryType, bz::DMBoundaryType, st::DMDAStencilType) end

@for_petsc function DMDAGetInfo(petsclib::$UnionPetscLib, da::PetscDM, bx::DMBoundaryType, by::DMBoundaryType, bz::DMBoundaryType, st::DMDAStencilType )
	dim_ = Ref{$PetscInt}()
	M_ = Ref{$PetscInt}()
	N_ = Ref{$PetscInt}()
	P_ = Ref{$PetscInt}()
	m_ = Ref{$PetscInt}()
	n_ = Ref{$PetscInt}()
	p_ = Ref{$PetscInt}()
	dof_ = Ref{$PetscInt}()
	s_ = Ref{$PetscInt}()

    @chk ccall(
               (:DMDAGetInfo, $petsc_library),
               PetscErrorCode,
               (CDM, Ptr{$PetscInt}, Ptr{$PetscInt}, Ptr{$PetscInt}, Ptr{$PetscInt}, Ptr{$PetscInt}, Ptr{$PetscInt}, Ptr{$PetscInt}, Ptr{$PetscInt}, Ptr{$PetscInt}, Ptr{DMBoundaryType}, Ptr{DMBoundaryType}, Ptr{DMBoundaryType}, Ptr{DMDAStencilType}),
               da, dim_, M_, N_, P_, m_, n_, p_, dof_, s_, bx, by, bz, st,
              )

	dim = dim_[]
	M = M_[]
	N = N_[]
	P = P_[]
	m = m_[]
	n = n_[]
	p = p_[]
	dof = dof_[]
	s = s_[]

	return dim,M,N,P,m,n,p,dof,s
end 

"""
	DMDAGetLocalInfo(petsclib::PetscLibType,da::PetscDM, info::DMDALocalInfo) 
Gets information about a given `DMDA` and this MPI process's location in it

Not Collective

Input Parameter:
- `da` - the `DMDA`

Output Parameter:
- `info` - structure containing the information

Level: beginner

-seealso: [](sec_struct), `DM`, `DMDA`, `DMDAGetInfo()`, `DMDAGetCorners()`, `DMDALocalInfo`

# External Links
$(_doc_external("Dm/DMDAGetLocalInfo"))
"""
function DMDAGetLocalInfo(petsclib::PetscLibType, da::PetscDM, info::DMDALocalInfo) end

@for_petsc function DMDAGetLocalInfo(petsclib::$UnionPetscLib, da::PetscDM, info::DMDALocalInfo )

    @chk ccall(
               (:DMDAGetLocalInfo, $petsc_library),
               PetscErrorCode,
               (CDM, Ptr{DMDALocalInfo}),
               da, info,
              )


	return nothing
end 

"""
	da::PetscDM = DMDACreate2d(petsclib::PetscLibType,comm::MPI_Comm, bx::DMBoundaryType, by::DMBoundaryType, stencil_type::DMDAStencilType, M::PetscInt, N::PetscInt, m::PetscInt, n::PetscInt, dof::PetscInt, s::PetscInt, lx::Vector{PetscInt}, ly::Vector{PetscInt}) 
Creates an object that will manage the communication of two
regular array data that is distributed across one or more MPI processes.

Collective

Input Parameters:
- `comm`         - MPI communicator
- `bx`           - type of ghost nodes the x array have. Use one of `DM_BOUNDARY_NONE`, `DM_BOUNDARY_GHOSTED`, `DM_BOUNDARY_PERIODIC`.
- `by`           - type of ghost nodes the y array have. Use one of `DM_BOUNDARY_NONE`, `DM_BOUNDARY_GHOSTED`, `DM_BOUNDARY_PERIODIC`.
- `stencil_type` - stencil type.  Use either `DMDA_STENCIL_BOX` or `DMDA_STENCIL_STAR`.
- `M`            - global dimension in x direction of the array
- `N`            - global dimension in y direction of the array
- `m`            - corresponding number of processors in x dimension (or `PETSC_DECIDE` to have calculated)
- `n`            - corresponding number of processors in y dimension (or `PETSC_DECIDE` to have calculated)
- `dof`          - number of degrees of freedom per node
- `s`            - stencil width
- `lx`           - arrays containing the number of nodes in each cell along the x coordinates, or `NULL`.
- `ly`           - arrays containing the number of nodes in each cell along the y coordinates, or `NULL`.

Output Parameter:
- `da` - the resulting distributed array object

Options Database Keys:
- `-dm_view`              - Calls `DMView()` at the conclusion of `DMDACreate2d()`
- `-da_grid_x <nx>`       - number of grid points in x direction
- `-da_grid_y <ny>`       - number of grid points in y direction
- `-da_processors_x <nx>` - number of processors in x direction
- `-da_processors_y <ny>` - number of processors in y direction
- `-da_bd_x <bx>`         - boundary type in x direction
- `-da_bd_y <by>`         - boundary type in y direction
- `-da_bd_all <bt>`       - boundary type in all directions
- `-da_refine_x <rx>`     - refinement ratio in x direction
- `-da_refine_y <ry>`     - refinement ratio in y direction
- `-da_refine <n>`        - refine the `DMDA` n times before creating

Level: beginner

-seealso: [](sec_struct), `DM`, `DMDA`, `DMDestroy()`, `DMView()`, `DMDACreate1d()`, `DMDACreate3d()`, `DMGlobalToLocalBegin()`, `DMDAGetRefinementFactor()`,
`DMGlobalToLocalEnd()`, `DMLocalToGlobalBegin()`, `DMLocalToLocalBegin()`, `DMLocalToLocalEnd()`, `DMDASetRefinementFactor()`,
`DMDAGetInfo()`, `DMCreateGlobalVector()`, `DMCreateLocalVector()`, `DMDACreateNaturalVector()`, `DMLoad()`, `DMDAGetOwnershipRanges()`,
`DMStagCreate2d()`, `DMBoundaryType`

# External Links
$(_doc_external("Dm/DMDACreate2d"))
"""
function DMDACreate2d(petsclib::PetscLibType, comm::MPI_Comm, bx::DMBoundaryType, by::DMBoundaryType, stencil_type::DMDAStencilType, M::PetscInt, N::PetscInt, m::PetscInt, n::PetscInt, dof::PetscInt, s::PetscInt, lx::Vector{PetscInt}, ly::Vector{PetscInt}) end

@for_petsc function DMDACreate2d(petsclib::$UnionPetscLib, comm::MPI_Comm, bx::DMBoundaryType, by::DMBoundaryType, stencil_type::DMDAStencilType, M::$PetscInt, N::$PetscInt, m::$PetscInt, n::$PetscInt, dof::$PetscInt, s::$PetscInt, lx::Vector{$PetscInt}, ly::Vector{$PetscInt} )
	da_ = Ref{CDM}()

    @chk ccall(
               (:DMDACreate2d, $petsc_library),
               PetscErrorCode,
               (MPI_Comm, DMBoundaryType, DMBoundaryType, DMDAStencilType, $PetscInt, $PetscInt, $PetscInt, $PetscInt, $PetscInt, $PetscInt, Ptr{$PetscInt}, Ptr{$PetscInt}, Ptr{CDM}),
               comm, bx, by, stencil_type, M, N, m, n, dof, s, lx, ly, da_,
              )

	da = PetscDM(da_[], petsclib)

	return da
end 

"""
	DMDAGetScatter(petsclib::PetscLibType,da::PetscDM, gtol::VecScatter, ltol::VecScatter) 
Gets the global
local-to-local vector scatter contexts for a `DMDA` distributed array.

Collective

Input Parameter:
- `da` - the `DMDA`

Output Parameters:
- `gtol` - global-to-local scatter context (may be `NULL`)
- `ltol` - local-to-local scatter context (may be `NULL`)

Level: developer

-seealso: [](sec_struct), `DM`, `DMDA`, `DMGlobalToLocalBegin()`, `DMGlobalToLocalEnd()`, `DMLocalToGlobalBegin()`

# External Links
$(_doc_external("Dm/DMDAGetScatter"))
"""
function DMDAGetScatter(petsclib::PetscLibType, da::PetscDM, gtol::VecScatter, ltol::VecScatter) end

@for_petsc function DMDAGetScatter(petsclib::$UnionPetscLib, da::PetscDM, gtol::VecScatter, ltol::VecScatter )

    @chk ccall(
               (:DMDAGetScatter, $petsc_library),
               PetscErrorCode,
               (CDM, Ptr{VecScatter}, Ptr{VecScatter}),
               da, gtol, ltol,
              )


	return nothing
end 

"""
	numCellsX::PetscInt,numCellsY::PetscInt,numCellsZ::PetscInt,numCells::PetscInt = DMDAGetNumCells(petsclib::PetscLibType,dm::PetscDM) 
Get the number of cells (or vertices) in the local piece of the `DMDA`. This includes ghost cells.

Input Parameter:
- `dm` - The `DMDA` object

Output Parameters:
- `numCellsX` - The number of local cells in the x-direction
- `numCellsY` - The number of local cells in the y-direction
- `numCellsZ` - The number of local cells in the z-direction
- `numCells`  - The number of local cells

Level: developer

-seealso: [](sec_struct), `DM`, `DMDA`, `DMDAGetCellPoint()`

# External Links
$(_doc_external("Dm/DMDAGetNumCells"))
"""
function DMDAGetNumCells(petsclib::PetscLibType, dm::PetscDM) end

@for_petsc function DMDAGetNumCells(petsclib::$UnionPetscLib, dm::PetscDM )
	numCellsX_ = Ref{$PetscInt}()
	numCellsY_ = Ref{$PetscInt}()
	numCellsZ_ = Ref{$PetscInt}()
	numCells_ = Ref{$PetscInt}()

    @chk ccall(
               (:DMDAGetNumCells, $petsc_library),
               PetscErrorCode,
               (CDM, Ptr{$PetscInt}, Ptr{$PetscInt}, Ptr{$PetscInt}, Ptr{$PetscInt}),
               dm, numCellsX_, numCellsY_, numCellsZ_, numCells_,
              )

	numCellsX = numCellsX_[]
	numCellsY = numCellsY_[]
	numCellsZ = numCellsZ_[]
	numCells = numCells_[]

	return numCellsX,numCellsY,numCellsZ,numCells
end 

"""
	point::PetscInt = DMDAGetCellPoint(petsclib::PetscLibType,dm::PetscDM, i::PetscInt, j::PetscInt, k::PetscInt) 
Get the `DM` point corresponding to the tuple (i, j, k) in the `DMDA`

Input Parameters:
- `dm` - The `DMDA` object
- `i`  - The global x index for the cell
- `j`  - The global y index for the cell
- `k`  - The global z index for the cell

Output Parameter:
- `point` - The local `DM` point

Level: developer

-seealso: [](sec_struct), `DM`, `DMDA`, `DMDAGetNumCells()`

# External Links
$(_doc_external("Dm/DMDAGetCellPoint"))
"""
function DMDAGetCellPoint(petsclib::PetscLibType, dm::PetscDM, i::PetscInt, j::PetscInt, k::PetscInt) end

@for_petsc function DMDAGetCellPoint(petsclib::$UnionPetscLib, dm::PetscDM, i::$PetscInt, j::$PetscInt, k::$PetscInt )
	point_ = Ref{$PetscInt}()

    @chk ccall(
               (:DMDAGetCellPoint, $petsc_library),
               PetscErrorCode,
               (CDM, $PetscInt, $PetscInt, $PetscInt, Ptr{$PetscInt}),
               dm, i, j, k, point_,
              )

	point = point_[]

	return point
end 

"""
	numVerticesX::PetscInt,numVerticesY::PetscInt,numVerticesZ::PetscInt,numVertices::PetscInt = DMDAGetNumVertices(petsclib::PetscLibType,dm::PetscDM) 

# External Links
$(_doc_external("Dm/DMDAGetNumVertices"))
"""
function DMDAGetNumVertices(petsclib::PetscLibType, dm::PetscDM) end

@for_petsc function DMDAGetNumVertices(petsclib::$UnionPetscLib, dm::PetscDM )
	numVerticesX_ = Ref{$PetscInt}()
	numVerticesY_ = Ref{$PetscInt}()
	numVerticesZ_ = Ref{$PetscInt}()
	numVertices_ = Ref{$PetscInt}()

    @chk ccall(
               (:DMDAGetNumVertices, $petsc_library),
               PetscErrorCode,
               (CDM, Ptr{$PetscInt}, Ptr{$PetscInt}, Ptr{$PetscInt}, Ptr{$PetscInt}),
               dm, numVerticesX_, numVerticesY_, numVerticesZ_, numVertices_,
              )

	numVerticesX = numVerticesX_[]
	numVerticesY = numVerticesY_[]
	numVerticesZ = numVerticesZ_[]
	numVertices = numVertices_[]

	return numVerticesX,numVerticesY,numVerticesZ,numVertices
end 

"""
	numXFacesX::PetscInt,numXFaces::PetscInt,numYFacesY::PetscInt,numYFaces::PetscInt,numZFacesZ::PetscInt,numZFaces::PetscInt = DMDAGetNumFaces(petsclib::PetscLibType,dm::PetscDM) 

# External Links
$(_doc_external("Dm/DMDAGetNumFaces"))
"""
function DMDAGetNumFaces(petsclib::PetscLibType, dm::PetscDM) end

@for_petsc function DMDAGetNumFaces(petsclib::$UnionPetscLib, dm::PetscDM )
	numXFacesX_ = Ref{$PetscInt}()
	numXFaces_ = Ref{$PetscInt}()
	numYFacesY_ = Ref{$PetscInt}()
	numYFaces_ = Ref{$PetscInt}()
	numZFacesZ_ = Ref{$PetscInt}()
	numZFaces_ = Ref{$PetscInt}()

    @chk ccall(
               (:DMDAGetNumFaces, $petsc_library),
               PetscErrorCode,
               (CDM, Ptr{$PetscInt}, Ptr{$PetscInt}, Ptr{$PetscInt}, Ptr{$PetscInt}, Ptr{$PetscInt}, Ptr{$PetscInt}),
               dm, numXFacesX_, numXFaces_, numYFacesY_, numYFaces_, numZFacesZ_, numZFaces_,
              )

	numXFacesX = numXFacesX_[]
	numXFaces = numXFaces_[]
	numYFacesY = numYFacesY_[]
	numYFaces = numYFaces_[]
	numZFacesZ = numZFacesZ_[]
	numZFaces = numZFaces_[]

	return numXFacesX,numXFaces,numYFacesY,numYFaces,numZFacesZ,numZFaces
end 

"""
	pStart::PetscInt,pEnd::PetscInt = DMDAGetHeightStratum(petsclib::PetscLibType,dm::PetscDM, height::PetscInt) 
Get the bounds [`start`, `end`) for all points at a certain height.

Not Collective

Input Parameters:
- `dm`     - The `DMDA` object
- `height` - The requested height

Output Parameters:
- `pStart` - The first point at this `height`
- `pEnd`   - One beyond the last point at this `height`

Level: developer

-seealso: [](ch_unstructured), `DM`, `DMDA`,  `DMPlexGetDepthStratum()`, `DMPlexGetHeightStratum()`, `DMPlexGetCellTypeStratum()`, `DMPlexGetDepth()`,
`DMPlexGetDepthLabel()`, `DMPlexGetPointDepth()`, `DMPlexSymmetrize()`, `DMPlexInterpolate()`, `DMDAGetDepthStratum()`

# External Links
$(_doc_external("Dm/DMDAGetHeightStratum"))
"""
function DMDAGetHeightStratum(petsclib::PetscLibType, dm::PetscDM, height::PetscInt) end

@for_petsc function DMDAGetHeightStratum(petsclib::$UnionPetscLib, dm::PetscDM, height::$PetscInt )
	pStart_ = Ref{$PetscInt}()
	pEnd_ = Ref{$PetscInt}()

    @chk ccall(
               (:DMDAGetHeightStratum, $petsc_library),
               PetscErrorCode,
               (CDM, $PetscInt, Ptr{$PetscInt}, Ptr{$PetscInt}),
               dm, height, pStart_, pEnd_,
              )

	pStart = pStart_[]
	pEnd = pEnd_[]

	return pStart,pEnd
end 

"""
	pStart::PetscInt,pEnd::PetscInt = DMDAGetDepthStratum(petsclib::PetscLibType,dm::PetscDM, depth::PetscInt) 
Get the bounds [`start`, `end`) for all points at a certain depth.

Not Collective

Input Parameters:
- `dm`    - The `DMDA` object
- `depth` - The requested depth

Output Parameters:
- `pStart` - The first point at this `depth`
- `pEnd`   - One beyond the last point at this `depth`

Level: developer

-seealso: [](ch_unstructured), `DM`, `DMDA`,  `DMPlexGetDepthStratum()`, `DMPlexGetHeightStratum()`, `DMPlexGetCellTypeStratum()`, `DMPlexGetDepth()`,
`DMPlexGetDepthLabel()`, `DMPlexGetPointDepth()`, `DMPlexSymmetrize()`, `DMPlexInterpolate()`, `DMDAGetHeightStratum()`

# External Links
$(_doc_external("Dm/DMDAGetDepthStratum"))
"""
function DMDAGetDepthStratum(petsclib::PetscLibType, dm::PetscDM, depth::PetscInt) end

@for_petsc function DMDAGetDepthStratum(petsclib::$UnionPetscLib, dm::PetscDM, depth::$PetscInt )
	pStart_ = Ref{$PetscInt}()
	pEnd_ = Ref{$PetscInt}()

    @chk ccall(
               (:DMDAGetDepthStratum, $petsc_library),
               PetscErrorCode,
               (CDM, $PetscInt, Ptr{$PetscInt}, Ptr{$PetscInt}),
               dm, depth, pStart_, pEnd_,
              )

	pStart = pStart_[]
	pEnd = pEnd_[]

	return pStart,pEnd
end 

"""
	DMDASetVertexCoordinates(petsclib::PetscLibType,dm::PetscDM, xl::PetscReal, xu::PetscReal, yl::PetscReal, yu::PetscReal, zl::PetscReal, zu::PetscReal) 
Sets the lower and upper coordinates for a `DMDA`

Logically Collective

Input Parameters:
- `dm` - The `DMDA` object
- `xl` - the lower x coordinate
- `xu` - the upper x coordinate
- `yl` - the lower y coordinate
- `yu` - the upper y coordinate
- `zl` - the lower z coordinate
- `zu` - the upper z coordinate

Level: intermediate

-seealso: [](ch_unstructured), `DM`, `DMDA`

# External Links
$(_doc_external("Dm/DMDASetVertexCoordinates"))
"""
function DMDASetVertexCoordinates(petsclib::PetscLibType, dm::PetscDM, xl::PetscReal, xu::PetscReal, yl::PetscReal, yu::PetscReal, zl::PetscReal, zu::PetscReal) end

@for_petsc function DMDASetVertexCoordinates(petsclib::$UnionPetscLib, dm::PetscDM, xl::$PetscReal, xu::$PetscReal, yl::$PetscReal, yu::$PetscReal, zl::$PetscReal, zu::$PetscReal )

    @chk ccall(
               (:DMDASetVertexCoordinates, $petsc_library),
               PetscErrorCode,
               (CDM, $PetscReal, $PetscReal, $PetscReal, $PetscReal, $PetscReal, $PetscReal),
               dm, xl, xu, yl, yu, zl, zu,
              )


	return nothing
end 

"""
	DMDAGetArray(petsclib::PetscLibType,da::PetscDM, ghosted::PetscBool, vptr::Cvoid) 
Gets a work array for a `DMDA`

Input Parameters:
- `da`      - a `DMDA`
- `ghosted` - do you want arrays for the ghosted or nonghosted patch

Output Parameter:
- `vptr` - array data structured

Level: advanced

-seealso: [](sec_struct), `DM`, `DMDA`, `DMDARestoreArray()`

# External Links
$(_doc_external("Dm/DMDAGetArray"))
"""
function DMDAGetArray(petsclib::PetscLibType, da::PetscDM, ghosted::PetscBool, vptr::Cvoid) end

@for_petsc function DMDAGetArray(petsclib::$UnionPetscLib, da::PetscDM, ghosted::PetscBool, vptr::Cvoid )

    @chk ccall(
               (:DMDAGetArray, $petsc_library),
               PetscErrorCode,
               (CDM, PetscBool, Ptr{Cvoid}),
               da, ghosted, vptr,
              )


	return nothing
end 

"""
	DMDARestoreArray(petsclib::PetscLibType,da::PetscDM, ghosted::PetscBool, vptr::Cvoid) 
Restores an array for a `DMDA` obtained with  `DMDAGetArray()`

Input Parameters:
- `da`      - information about my local patch
- `ghosted` - do you want arrays for the ghosted or nonghosted patch
- `vptr`    - array data structured

Level: advanced

-seealso: [](sec_struct), `DM`, `DMDA`, `DMDAGetArray()`

# External Links
$(_doc_external("Dm/DMDARestoreArray"))
"""
function DMDARestoreArray(petsclib::PetscLibType, da::PetscDM, ghosted::PetscBool, vptr::Cvoid) end

@for_petsc function DMDARestoreArray(petsclib::$UnionPetscLib, da::PetscDM, ghosted::PetscBool, vptr::Cvoid )

    @chk ccall(
               (:DMDARestoreArray, $petsc_library),
               PetscErrorCode,
               (CDM, PetscBool, Ptr{Cvoid}),
               da, ghosted, vptr,
              )


	return nothing
end 

"""
	DMDASetSizes(petsclib::PetscLibType,da::PetscDM, M::PetscInt, N::PetscInt, P::PetscInt) 
Sets the number of grid points in the three dimensional directions

Logically Collective

Input Parameters:
- `da` - the `DMDA`
- `M`  - the global X size
- `N`  - the global Y size
- `P`  - the global Z size

Level: intermediate

-seealso: [](sec_struct), `DM`, `DMDA`, `PetscSplitOwnership()`

# External Links
$(_doc_external("Dm/DMDASetSizes"))
"""
function DMDASetSizes(petsclib::PetscLibType, da::PetscDM, M::PetscInt, N::PetscInt, P::PetscInt) end

@for_petsc function DMDASetSizes(petsclib::$UnionPetscLib, da::PetscDM, M::$PetscInt, N::$PetscInt, P::$PetscInt )

    @chk ccall(
               (:DMDASetSizes, $petsc_library),
               PetscErrorCode,
               (CDM, $PetscInt, $PetscInt, $PetscInt),
               da, M, N, P,
              )


	return nothing
end 

"""
	DMDASetNumProcs(petsclib::PetscLibType,da::PetscDM, m::PetscInt, n::PetscInt, p::PetscInt) 
Sets the number of processes in each dimension

Logically Collective

Input Parameters:
- `da` - the `DMDA`
- `m`  - the number of X processes (or `PETSC_DECIDE`)
- `n`  - the number of Y processes (or `PETSC_DECIDE`)
- `p`  - the number of Z processes (or `PETSC_DECIDE`)

Level: intermediate

-seealso: [](sec_struct), `DM`, `DMDA`, `DMDASetSizes()`, `PetscSplitOwnership()`

# External Links
$(_doc_external("Dm/DMDASetNumProcs"))
"""
function DMDASetNumProcs(petsclib::PetscLibType, da::PetscDM, m::PetscInt, n::PetscInt, p::PetscInt) end

@for_petsc function DMDASetNumProcs(petsclib::$UnionPetscLib, da::PetscDM, m::$PetscInt, n::$PetscInt, p::$PetscInt )

    @chk ccall(
               (:DMDASetNumProcs, $petsc_library),
               PetscErrorCode,
               (CDM, $PetscInt, $PetscInt, $PetscInt),
               da, m, n, p,
              )


	return nothing
end 

"""
	bx::DMBoundaryType,by::DMBoundaryType,bz::DMBoundaryType = DMDAGetBoundaryType(petsclib::PetscLibType,da::PetscDM) 
Gets the type of ghost nodes on domain boundaries.

Not Collective

Input Parameter:
- `da` - The `DMDA`

Output Parameters:
- `bx` - x boundary type, one of `DM_BOUNDARY_NONE`, `DM_BOUNDARY_GHOSTED`, `DM_BOUNDARY_PERIODIC`
- `by` - y boundary type, one of `DM_BOUNDARY_NONE`, `DM_BOUNDARY_GHOSTED`, `DM_BOUNDARY_PERIODIC`
- `bz` - z boundary type, one of `DM_BOUNDARY_NONE`, `DM_BOUNDARY_GHOSTED`, `DM_BOUNDARY_PERIODIC`

Level: intermediate

-seealso: [](sec_struct), `DMDASetBoundaryType()`, `DM`, `DMDA`, `DMDACreate()`, `DMDestroy()`, `DMBoundaryType`, `DM_BOUNDARY_NONE`, `DM_BOUNDARY_GHOSTED`, `DM_BOUNDARY_PERIODIC`

# External Links
$(_doc_external("Dm/DMDAGetBoundaryType"))
"""
function DMDAGetBoundaryType(petsclib::PetscLibType, da::PetscDM) end

@for_petsc function DMDAGetBoundaryType(petsclib::$UnionPetscLib, da::PetscDM )
	bx_ = Ref{DMBoundaryType}()
	by_ = Ref{DMBoundaryType}()
	bz_ = Ref{DMBoundaryType}()

    @chk ccall(
               (:DMDAGetBoundaryType, $petsc_library),
               PetscErrorCode,
               (CDM, Ptr{DMBoundaryType}, Ptr{DMBoundaryType}, Ptr{DMBoundaryType}),
               da, bx_, by_, bz_,
              )

	bx = unsafe_string(bx_[])
	by = unsafe_string(by_[])
	bz = unsafe_string(bz_[])

	return bx,by,bz
end 

"""
	DMDASetBoundaryType(petsclib::PetscLibType,da::PetscDM, bx::DMBoundaryType, by::DMBoundaryType, bz::DMBoundaryType) 
Sets the type of ghost nodes on domain boundaries for a `DMDA` object.

Not Collective

Input Parameters:
- `da` - The `DMDA`
- `bx` - x boundary type, one of `DM_BOUNDARY_NONE`, `DM_BOUNDARY_GHOSTED`, `DM_BOUNDARY_PERIODIC`
- `by` - y boundary type, one of `DM_BOUNDARY_NONE`, `DM_BOUNDARY_GHOSTED`, `DM_BOUNDARY_PERIODIC`
- `bz` - z boundary type, one of `DM_BOUNDARY_NONE`, `DM_BOUNDARY_GHOSTED`, `DM_BOUNDARY_PERIODIC`

Level: intermediate

-seealso: [](sec_struct), `DMDAGetBoundaryType()`, `DM`, `DMDA`, `DMDACreate()`, `DMDestroy()`, `DMBoundaryType`, `DM_BOUNDARY_NONE`, `DM_BOUNDARY_GHOSTED`, `DM_BOUNDARY_PERIODIC`

# External Links
$(_doc_external("Dm/DMDASetBoundaryType"))
"""
function DMDASetBoundaryType(petsclib::PetscLibType, da::PetscDM, bx::DMBoundaryType, by::DMBoundaryType, bz::DMBoundaryType) end

@for_petsc function DMDASetBoundaryType(petsclib::$UnionPetscLib, da::PetscDM, bx::DMBoundaryType, by::DMBoundaryType, bz::DMBoundaryType )

    @chk ccall(
               (:DMDASetBoundaryType, $petsc_library),
               PetscErrorCode,
               (CDM, DMBoundaryType, DMBoundaryType, DMBoundaryType),
               da, bx, by, bz,
              )


	return nothing
end 

"""
	DMDASetDof(petsclib::PetscLibType,da::PetscDM, dof::PetscInt) 
Sets the number of degrees of freedom per vertex

Not Collective

Input Parameters:
- `da`  - The `DMDA`
- `dof` - Number of degrees of freedom per vertex

Level: intermediate

-seealso: [](sec_struct), `DM`, `DMDA`, `DMDAGetDof()`, `DMDACreate()`, `DMDestroy()`

# External Links
$(_doc_external("Dm/DMDASetDof"))
"""
function DMDASetDof(petsclib::PetscLibType, da::PetscDM, dof::PetscInt) end

@for_petsc function DMDASetDof(petsclib::$UnionPetscLib, da::PetscDM, dof::$PetscInt )

    @chk ccall(
               (:DMDASetDof, $petsc_library),
               PetscErrorCode,
               (CDM, $PetscInt),
               da, dof,
              )


	return nothing
end 

"""
	dof::PetscInt = DMDAGetDof(petsclib::PetscLibType,da::PetscDM) 
Gets the number of degrees of freedom per vertex

Not Collective

Input Parameter:
- `da` - The `DMDA`

Output Parameter:
- `dof` - Number of degrees of freedom per vertex

Level: intermediate

-seealso: [](sec_struct), `DM`, `DMDA`, `DMDASetDof()`, `DMDACreate()`, `DMDestroy()`

# External Links
$(_doc_external("Dm/DMDAGetDof"))
"""
function DMDAGetDof(petsclib::PetscLibType, da::PetscDM) end

@for_petsc function DMDAGetDof(petsclib::$UnionPetscLib, da::PetscDM )
	dof_ = Ref{$PetscInt}()

    @chk ccall(
               (:DMDAGetDof, $petsc_library),
               PetscErrorCode,
               (CDM, Ptr{$PetscInt}),
               da, dof_,
              )

	dof = dof_[]

	return dof
end 

"""
	x::PetscInt,y::PetscInt,z::PetscInt = DMDAGetOverlap(petsclib::PetscLibType,da::PetscDM) 
Gets the size of the per

Not Collective

Input Parameter:
- `da` - The `DMDA`

Output Parameters:
- `x` - Overlap in the x direction
- `y` - Overlap in the y direction
- `z` - Overlap in the z direction

Level: intermediate

-seealso: [](sec_struct), `DM`, `DMDA`, `DMCreateDomainDecomposition()`, `DMDASetOverlap()`

# External Links
$(_doc_external("Dm/DMDAGetOverlap"))
"""
function DMDAGetOverlap(petsclib::PetscLibType, da::PetscDM) end

@for_petsc function DMDAGetOverlap(petsclib::$UnionPetscLib, da::PetscDM )
	x_ = Ref{$PetscInt}()
	y_ = Ref{$PetscInt}()
	z_ = Ref{$PetscInt}()

    @chk ccall(
               (:DMDAGetOverlap, $petsc_library),
               PetscErrorCode,
               (CDM, Ptr{$PetscInt}, Ptr{$PetscInt}, Ptr{$PetscInt}),
               da, x_, y_, z_,
              )

	x = x_[]
	y = y_[]
	z = z_[]

	return x,y,z
end 

"""
	DMDASetOverlap(petsclib::PetscLibType,da::PetscDM, x::PetscInt, y::PetscInt, z::PetscInt) 
Sets the size of the per

Not Collective

Input Parameters:
- `da` - The `DMDA`
- `x`  - Overlap in the x direction
- `y`  - Overlap in the y direction
- `z`  - Overlap in the z direction

Level: intermediate

-seealso: [](sec_struct), `DM`, `DMDA`, `DMCreateDomainDecomposition()`, `DMDAGetOverlap()`

# External Links
$(_doc_external("Dm/DMDASetOverlap"))
"""
function DMDASetOverlap(petsclib::PetscLibType, da::PetscDM, x::PetscInt, y::PetscInt, z::PetscInt) end

@for_petsc function DMDASetOverlap(petsclib::$UnionPetscLib, da::PetscDM, x::$PetscInt, y::$PetscInt, z::$PetscInt )

    @chk ccall(
               (:DMDASetOverlap, $petsc_library),
               PetscErrorCode,
               (CDM, $PetscInt, $PetscInt, $PetscInt),
               da, x, y, z,
              )


	return nothing
end 

"""
	Nsub::PetscInt = DMDAGetNumLocalSubDomains(petsclib::PetscLibType,da::PetscDM) 
Gets the number of local subdomains that would be created upon decomposition.

Not Collective

Input Parameter:
- `da` - The `DMDA`

Output Parameter:
- `Nsub` - Number of local subdomains created upon decomposition

Level: intermediate

-seealso: [](sec_struct), `DM`, `DMDA`, `DMCreateDomainDecomposition()`, `DMDASetNumLocalSubDomains()`

# External Links
$(_doc_external("Dm/DMDAGetNumLocalSubDomains"))
"""
function DMDAGetNumLocalSubDomains(petsclib::PetscLibType, da::PetscDM) end

@for_petsc function DMDAGetNumLocalSubDomains(petsclib::$UnionPetscLib, da::PetscDM )
	Nsub_ = Ref{$PetscInt}()

    @chk ccall(
               (:DMDAGetNumLocalSubDomains, $petsc_library),
               PetscErrorCode,
               (CDM, Ptr{$PetscInt}),
               da, Nsub_,
              )

	Nsub = Nsub_[]

	return Nsub
end 

"""
	DMDASetNumLocalSubDomains(petsclib::PetscLibType,da::PetscDM, Nsub::PetscInt) 
Sets the number of local subdomains to create when decomposing with `DMCreateDomainDecomposition()`

Not Collective

Input Parameters:
- `da`   - The `DMDA`
- `Nsub` - The number of local subdomains requested

Level: intermediate

-seealso: [](sec_struct), `DM`, `DMDA`, `DMCreateDomainDecomposition()`, `DMDAGetNumLocalSubDomains()`

# External Links
$(_doc_external("Dm/DMDASetNumLocalSubDomains"))
"""
function DMDASetNumLocalSubDomains(petsclib::PetscLibType, da::PetscDM, Nsub::PetscInt) end

@for_petsc function DMDASetNumLocalSubDomains(petsclib::$UnionPetscLib, da::PetscDM, Nsub::$PetscInt )

    @chk ccall(
               (:DMDASetNumLocalSubDomains, $petsc_library),
               PetscErrorCode,
               (CDM, $PetscInt),
               da, Nsub,
              )


	return nothing
end 

"""
	DMDASetOffset(petsclib::PetscLibType,da::PetscDM, xo::PetscInt, yo::PetscInt, zo::PetscInt, Mo::PetscInt, No::PetscInt, Po::PetscInt) 
Sets the index offset of the `DMDA`.

Collective

Input Parameters:
- `da` - The `DMDA`
- `xo` - The offset in the x direction
- `yo` - The offset in the y direction
- `zo` - The offset in the z direction
- `Mo` - The problem offset in the x direction
- `No` - The problem offset in the y direction
- `Po` - The problem offset in the z direction

Level: developer

-seealso: [](sec_struct), `DM`, `DMDA`, `DMDAGetOffset()`, `DMDAVecGetArray()`

# External Links
$(_doc_external("Dm/DMDASetOffset"))
"""
function DMDASetOffset(petsclib::PetscLibType, da::PetscDM, xo::PetscInt, yo::PetscInt, zo::PetscInt, Mo::PetscInt, No::PetscInt, Po::PetscInt) end

@for_petsc function DMDASetOffset(petsclib::$UnionPetscLib, da::PetscDM, xo::$PetscInt, yo::$PetscInt, zo::$PetscInt, Mo::$PetscInt, No::$PetscInt, Po::$PetscInt )

    @chk ccall(
               (:DMDASetOffset, $petsc_library),
               PetscErrorCode,
               (CDM, $PetscInt, $PetscInt, $PetscInt, $PetscInt, $PetscInt, $PetscInt),
               da, xo, yo, zo, Mo, No, Po,
              )


	return nothing
end 

"""
	xo::PetscInt,yo::PetscInt,zo::PetscInt,Mo::PetscInt,No::PetscInt,Po::PetscInt = DMDAGetOffset(petsclib::PetscLibType,da::PetscDM) 
Gets the index offset of the `DMDA`.

Not Collective

Input Parameter:
- `da` - The `DMDA`

Output Parameters:
- `xo` - The offset in the x direction
- `yo` - The offset in the y direction
- `zo` - The offset in the z direction
- `Mo` - The global size in the x direction
- `No` - The global size in the y direction
- `Po` - The global size in the z direction

Level: developer

-seealso: [](sec_struct), `DM`, `DMDA`, `DMDASetOffset()`, `DMDAVecGetArray()`

# External Links
$(_doc_external("Dm/DMDAGetOffset"))
"""
function DMDAGetOffset(petsclib::PetscLibType, da::PetscDM) end

@for_petsc function DMDAGetOffset(petsclib::$UnionPetscLib, da::PetscDM )
	xo_ = Ref{$PetscInt}()
	yo_ = Ref{$PetscInt}()
	zo_ = Ref{$PetscInt}()
	Mo_ = Ref{$PetscInt}()
	No_ = Ref{$PetscInt}()
	Po_ = Ref{$PetscInt}()

    @chk ccall(
               (:DMDAGetOffset, $petsc_library),
               PetscErrorCode,
               (CDM, Ptr{$PetscInt}, Ptr{$PetscInt}, Ptr{$PetscInt}, Ptr{$PetscInt}, Ptr{$PetscInt}, Ptr{$PetscInt}),
               da, xo_, yo_, zo_, Mo_, No_, Po_,
              )

	xo = xo_[]
	yo = yo_[]
	zo = zo_[]
	Mo = Mo_[]
	No = No_[]
	Po = Po_[]

	return xo,yo,zo,Mo,No,Po
end 

"""
	xs::PetscInt,ys::PetscInt,zs::PetscInt,xm::PetscInt,ym::PetscInt,zm::PetscInt = DMDAGetNonOverlappingRegion(petsclib::PetscLibType,da::PetscDM) 
Gets the indices of the nonoverlapping region of a subdomain `DMDA`.

Not Collective

Input Parameter:
- `da` - The `DMDA`

Output Parameters:
- `xs` - The start of the region in x
- `ys` - The start of the region in y
- `zs` - The start of the region in z
- `xm` - The size of the region in x
- `ym` - The size of the region in y
- `zm` - The size of the region in z

Level: intermediate

-seealso: [](sec_struct), `DM`, `DMDA`, `DMDAGetOffset()`, `DMDAVecGetArray()`

# External Links
$(_doc_external("Dm/DMDAGetNonOverlappingRegion"))
"""
function DMDAGetNonOverlappingRegion(petsclib::PetscLibType, da::PetscDM) end

@for_petsc function DMDAGetNonOverlappingRegion(petsclib::$UnionPetscLib, da::PetscDM )
	xs_ = Ref{$PetscInt}()
	ys_ = Ref{$PetscInt}()
	zs_ = Ref{$PetscInt}()
	xm_ = Ref{$PetscInt}()
	ym_ = Ref{$PetscInt}()
	zm_ = Ref{$PetscInt}()

    @chk ccall(
               (:DMDAGetNonOverlappingRegion, $petsc_library),
               PetscErrorCode,
               (CDM, Ptr{$PetscInt}, Ptr{$PetscInt}, Ptr{$PetscInt}, Ptr{$PetscInt}, Ptr{$PetscInt}, Ptr{$PetscInt}),
               da, xs_, ys_, zs_, xm_, ym_, zm_,
              )

	xs = xs_[]
	ys = ys_[]
	zs = zs_[]
	xm = xm_[]
	ym = ym_[]
	zm = zm_[]

	return xs,ys,zs,xm,ym,zm
end 

"""
	DMDASetNonOverlappingRegion(petsclib::PetscLibType,da::PetscDM, xs::PetscInt, ys::PetscInt, zs::PetscInt, xm::PetscInt, ym::PetscInt, zm::PetscInt) 
Sets the indices of the nonoverlapping region of a subdomain `DMDA`.

Collective

Input Parameters:
- `da` - The `DMDA`
- `xs` - The start of the region in x
- `ys` - The start of the region in y
- `zs` - The start of the region in z
- `xm` - The size of the region in x
- `ym` - The size of the region in y
- `zm` - The size of the region in z

Level: intermediate

-seealso: [](sec_struct), `DM`, `DMDA`, `DMDAGetOffset()`, `DMDAVecGetArray()`

# External Links
$(_doc_external("Dm/DMDASetNonOverlappingRegion"))
"""
function DMDASetNonOverlappingRegion(petsclib::PetscLibType, da::PetscDM, xs::PetscInt, ys::PetscInt, zs::PetscInt, xm::PetscInt, ym::PetscInt, zm::PetscInt) end

@for_petsc function DMDASetNonOverlappingRegion(petsclib::$UnionPetscLib, da::PetscDM, xs::$PetscInt, ys::$PetscInt, zs::$PetscInt, xm::$PetscInt, ym::$PetscInt, zm::$PetscInt )

    @chk ccall(
               (:DMDASetNonOverlappingRegion, $petsc_library),
               PetscErrorCode,
               (CDM, $PetscInt, $PetscInt, $PetscInt, $PetscInt, $PetscInt, $PetscInt),
               da, xs, ys, zs, xm, ym, zm,
              )


	return nothing
end 

"""
	DMDASetStencilType(petsclib::PetscLibType,da::PetscDM, stype::DMDAStencilType) 
Sets the type of the communication stencil

Logically Collective

Input Parameters:
- `da`    - The `DMDA`
- `stype` - The stencil type, use either `DMDA_STENCIL_BOX` or `DMDA_STENCIL_STAR`.

Level: intermediate

-seealso: [](sec_struct), `DM`, `DMDA`, `DMDACreate()`, `DMDestroy()`, `DMDAStencilType`, `DMDA_STENCIL_BOX`, `DMDA_STENCIL_STAR.`

# External Links
$(_doc_external("Dm/DMDASetStencilType"))
"""
function DMDASetStencilType(petsclib::PetscLibType, da::PetscDM, stype::DMDAStencilType) end

@for_petsc function DMDASetStencilType(petsclib::$UnionPetscLib, da::PetscDM, stype::DMDAStencilType )

    @chk ccall(
               (:DMDASetStencilType, $petsc_library),
               PetscErrorCode,
               (CDM, DMDAStencilType),
               da, stype,
              )


	return nothing
end 

"""
	stype::DMDAStencilType = DMDAGetStencilType(petsclib::PetscLibType,da::PetscDM) 
Gets the type of the communication stencil

Not Collective

Input Parameter:
- `da` - The `DMDA`

Output Parameter:
- `stype` - The stencil type, use either `DMDA_STENCIL_BOX` or `DMDA_STENCIL_STAR`.

Level: intermediate

-seealso: [](sec_struct), `DM`, `DMDA`, `DMDACreate()`, `DMDestroy()`, `DMDAStencilType`, `DMDA_STENCIL_BOX`, `DMDA_STENCIL_STAR.`

# External Links
$(_doc_external("Dm/DMDAGetStencilType"))
"""
function DMDAGetStencilType(petsclib::PetscLibType, da::PetscDM) end

@for_petsc function DMDAGetStencilType(petsclib::$UnionPetscLib, da::PetscDM )
	stype_ = Ref{DMDAStencilType}()

    @chk ccall(
               (:DMDAGetStencilType, $petsc_library),
               PetscErrorCode,
               (CDM, Ptr{DMDAStencilType}),
               da, stype_,
              )

	stype = unsafe_string(stype_[])

	return stype
end 

"""
	DMDASetStencilWidth(petsclib::PetscLibType,da::PetscDM, width::PetscInt) 
Sets the width of the communication stencil

Logically Collective

Input Parameters:
- `da`    - The `DMDA`
- `width` - The stencil width

Level: intermediate

-seealso: [](sec_struct), `DM`, `DMDA`, `DMDACreate()`, `DMDestroy()`, `DMDAStencilType`, `DMDA_STENCIL_BOX`, `DMDA_STENCIL_STAR.`

# External Links
$(_doc_external("Dm/DMDASetStencilWidth"))
"""
function DMDASetStencilWidth(petsclib::PetscLibType, da::PetscDM, width::PetscInt) end

@for_petsc function DMDASetStencilWidth(petsclib::$UnionPetscLib, da::PetscDM, width::$PetscInt )

    @chk ccall(
               (:DMDASetStencilWidth, $petsc_library),
               PetscErrorCode,
               (CDM, $PetscInt),
               da, width,
              )


	return nothing
end 

"""
	width::PetscInt = DMDAGetStencilWidth(petsclib::PetscLibType,da::PetscDM) 
Gets the width of the communication stencil

Not Collective

Input Parameter:
- `da` - The `DMDA`

Output Parameter:
- `width` - The stencil width

Level: intermediate

-seealso: [](sec_struct), `DM`, `DMDA`, `DMDACreate()`, `DMDestroy()`, `DMDAStencilType`, `DMDA_STENCIL_BOX`, `DMDA_STENCIL_STAR.`

# External Links
$(_doc_external("Dm/DMDAGetStencilWidth"))
"""
function DMDAGetStencilWidth(petsclib::PetscLibType, da::PetscDM) end

@for_petsc function DMDAGetStencilWidth(petsclib::$UnionPetscLib, da::PetscDM )
	width_ = Ref{$PetscInt}()

    @chk ccall(
               (:DMDAGetStencilWidth, $petsc_library),
               PetscErrorCode,
               (CDM, Ptr{$PetscInt}),
               da, width_,
              )

	width = width_[]

	return width
end 

"""
	DMDASetOwnershipRanges(petsclib::PetscLibType,da::PetscDM, lx::Vector{PetscInt}, ly::Vector{PetscInt}, lz::Vector{PetscInt}) 
Sets the number of nodes in each direction on each process

Logically Collective

Input Parameters:
- `da` - The `DMDA`
- `lx` - array containing number of nodes in the X direction on each process, or `NULL`. If non-null, must be of length da->m
- `ly` - array containing number of nodes in the Y direction on each process, or `NULL`. If non-null, must be of length da->n
- `lz` - array containing number of nodes in the Z direction on each process, or `NULL`. If non-null, must be of length da->p.

Level: intermediate

-seealso: [](sec_struct), `DM`, `DMDA`, `DMDACreate()`, `DMDestroy()`

# External Links
$(_doc_external("Dm/DMDASetOwnershipRanges"))
"""
function DMDASetOwnershipRanges(petsclib::PetscLibType, da::PetscDM, lx::Vector{PetscInt}, ly::Vector{PetscInt}, lz::Vector{PetscInt}) end

@for_petsc function DMDASetOwnershipRanges(petsclib::$UnionPetscLib, da::PetscDM, lx::Vector{$PetscInt}, ly::Vector{$PetscInt}, lz::Vector{$PetscInt} )

    @chk ccall(
               (:DMDASetOwnershipRanges, $petsc_library),
               PetscErrorCode,
               (CDM, Ptr{$PetscInt}, Ptr{$PetscInt}, Ptr{$PetscInt}),
               da, lx, ly, lz,
              )


	return nothing
end 

"""
	DMDASetInterpolationType(petsclib::PetscLibType,da::PetscDM, ctype::DMDAInterpolationType) 
Sets the type of interpolation that will be
returned by `DMCreateInterpolation()`

Logically Collective

Input Parameters:
- `da`    - initial distributed array
- `ctype` - `DMDA_Q1` and `DMDA_Q0` are currently the only supported forms

Level: intermediate

-seealso: [](sec_struct), `DM`, `DMDA`, `DMDACreate1d()`, `DMDACreate2d()`, `DMDACreate3d()`, `DMDestroy()`, `DMDAInterpolationType`,
`DMDA_Q1`, `DMDA_Q0`

# External Links
$(_doc_external("Dm/DMDASetInterpolationType"))
"""
function DMDASetInterpolationType(petsclib::PetscLibType, da::PetscDM, ctype::DMDAInterpolationType) end

@for_petsc function DMDASetInterpolationType(petsclib::$UnionPetscLib, da::PetscDM, ctype::DMDAInterpolationType )

    @chk ccall(
               (:DMDASetInterpolationType, $petsc_library),
               PetscErrorCode,
               (CDM, DMDAInterpolationType),
               da, ctype,
              )


	return nothing
end 

"""
	ctype::DMDAInterpolationType = DMDAGetInterpolationType(petsclib::PetscLibType,da::PetscDM) 
Gets the type of interpolation that will be
used by `DMCreateInterpolation()`

Not Collective

Input Parameter:
- `da` - distributed array

Output Parameter:
- `ctype` - interpolation type (`DMDA_Q1` and `DMDA_Q0` are currently the only supported forms)

Level: intermediate

-seealso: [](sec_struct), `DM`, `DMDA`, `DMDAInterpolationType`, `DMDASetInterpolationType()`, `DMCreateInterpolation()`,
`DMDA_Q1`, `DMDA_Q0`

# External Links
$(_doc_external("Dm/DMDAGetInterpolationType"))
"""
function DMDAGetInterpolationType(petsclib::PetscLibType, da::PetscDM) end

@for_petsc function DMDAGetInterpolationType(petsclib::$UnionPetscLib, da::PetscDM )
	ctype_ = Ref{DMDAInterpolationType}()

    @chk ccall(
               (:DMDAGetInterpolationType, $petsc_library),
               PetscErrorCode,
               (CDM, Ptr{DMDAInterpolationType}),
               da, ctype_,
              )

	ctype = unsafe_string(ctype_[])

	return ctype
end 

"""
	DMDAGetNeighbors(petsclib::PetscLibType,da::PetscDM, ranks::Vector{PetscMPIInt}) 
Gets an array containing the MPI rank of all the current
processes neighbors.

Not Collective

Input Parameter:
- `da` - the `DMDA` object

Output Parameter:
- `ranks` - the neighbors ranks, stored with the x index increasing most rapidly. The process itself is in the list

Level: intermediate

-seealso: [](sec_struct), `DMDA`, `DM`

# External Links
$(_doc_external("Dm/DMDAGetNeighbors"))
"""
function DMDAGetNeighbors(petsclib::PetscLibType, da::PetscDM, ranks::Vector{PetscMPIInt}) end

@for_petsc function DMDAGetNeighbors(petsclib::$UnionPetscLib, da::PetscDM, ranks::Vector{PetscMPIInt} )
	ranks_ = Ref(pointer(ranks))

    @chk ccall(
               (:DMDAGetNeighbors, $petsc_library),
               PetscErrorCode,
               (CDM, Ptr{Ptr{PetscMPIInt}}),
               da, ranks_,
              )


	return nothing
end 

"""
	lx::Vector{PetscInt},ly::Vector{PetscInt},lz::Vector{PetscInt} = DMDAGetOwnershipRanges(petsclib::PetscLibType,da::PetscDM) 
Gets the number of indices in the x, y and z direction that are owned by each process in that direction

Not Collective

Input Parameter:
- `da` - the `DMDA` object

Output Parameters:
- `lx` - ownership along x direction (optional), its length is `m` the number of processes in the x-direction
- `ly` - ownership along y direction (optional), its length is `n` the number of processes in the y-direction
- `lz` - ownership along z direction (optional), its length is `p` the number of processes in the z-direction

Level: intermediate

-seealso: [](sec_struct), `DM`, `DMDA`, `DMDAGetCorners()`, `DMDAGetGhostCorners()`, `DMDACreate()`, `DMDACreate1d()`, `DMDACreate2d()`, `DMDACreate3d()`, `VecGetOwnershipRanges()`

# External Links
$(_doc_external("Dm/DMDAGetOwnershipRanges"))
"""
function DMDAGetOwnershipRanges(petsclib::PetscLibType, da::PetscDM) end

@for_petsc function DMDAGetOwnershipRanges(petsclib::$UnionPetscLib, da::PetscDM )
	lx_ = Ref{Ptr{$PetscInt}}()
	ly_ = Ref{Ptr{$PetscInt}}()
	lz_ = Ref{Ptr{$PetscInt}}()

    @chk ccall(
               (:DMDAGetOwnershipRanges, $petsc_library),
               PetscErrorCode,
               (CDM, Ptr{Ptr{$PetscInt}}, Ptr{Ptr{$PetscInt}}, Ptr{Ptr{$PetscInt}}),
               da, lx_, ly_, lz_,
              )

	lx = unsafe_wrap(Array, lx_[], VecGetLocalSize(petsclib, x); own = false)
	ly = unsafe_wrap(Array, ly_[], VecGetLocalSize(petsclib, x); own = false)
	lz = unsafe_wrap(Array, lz_[], VecGetLocalSize(petsclib, x); own = false)

	return lx,ly,lz
end 

"""
	DMDASetRefinementFactor(petsclib::PetscLibType,da::PetscDM, refine_x::PetscInt, refine_y::PetscInt, refine_z::PetscInt) 
Set the ratios that the `DMDA` grid is refined

Logically Collective

Input Parameters:
- `da`       - the `DMDA` object
- `refine_x` - ratio of fine grid to coarse in x direction (2 by default)
- `refine_y` - ratio of fine grid to coarse in y direction (2 by default)
- `refine_z` - ratio of fine grid to coarse in z direction (2 by default)

Options Database Keys:
- `-da_refine_x refine_x` - refinement ratio in x direction
- `-da_refine_y rafine_y` - refinement ratio in y direction
- `-da_refine_z refine_z` - refinement ratio in z direction
- `-da_refine <n>`        - refine the `DMDA` object n times when it is created.

Level: intermediate

-seealso: [](sec_struct), `DM`, `DMDA`, `DMRefine()`, `DMDAGetRefinementFactor()`

# External Links
$(_doc_external("Dm/DMDASetRefinementFactor"))
"""
function DMDASetRefinementFactor(petsclib::PetscLibType, da::PetscDM, refine_x::PetscInt, refine_y::PetscInt, refine_z::PetscInt) end

@for_petsc function DMDASetRefinementFactor(petsclib::$UnionPetscLib, da::PetscDM, refine_x::$PetscInt, refine_y::$PetscInt, refine_z::$PetscInt )

    @chk ccall(
               (:DMDASetRefinementFactor, $petsc_library),
               PetscErrorCode,
               (CDM, $PetscInt, $PetscInt, $PetscInt),
               da, refine_x, refine_y, refine_z,
              )


	return nothing
end 

"""
	refine_x::PetscInt,refine_y::PetscInt,refine_z::PetscInt = DMDAGetRefinementFactor(petsclib::PetscLibType,da::PetscDM) 
Gets the ratios that the `DMDA` grid is refined

Not Collective

Input Parameter:
- `da` - the `DMDA` object

Output Parameters:
- `refine_x` - ratio of fine grid to coarse in x direction (2 by default)
- `refine_y` - ratio of fine grid to coarse in y direction (2 by default)
- `refine_z` - ratio of fine grid to coarse in z direction (2 by default)

Level: intermediate

-seealso: [](sec_struct), `DM`, `DMDA`, `DMRefine()`, `DMDASetRefinementFactor()`

# External Links
$(_doc_external("Dm/DMDAGetRefinementFactor"))
"""
function DMDAGetRefinementFactor(petsclib::PetscLibType, da::PetscDM) end

@for_petsc function DMDAGetRefinementFactor(petsclib::$UnionPetscLib, da::PetscDM )
	refine_x_ = Ref{$PetscInt}()
	refine_y_ = Ref{$PetscInt}()
	refine_z_ = Ref{$PetscInt}()

    @chk ccall(
               (:DMDAGetRefinementFactor, $petsc_library),
               PetscErrorCode,
               (CDM, Ptr{$PetscInt}, Ptr{$PetscInt}, Ptr{$PetscInt}),
               da, refine_x_, refine_y_, refine_z_,
              )

	refine_x = refine_x_[]
	refine_y = refine_y_[]
	refine_z = refine_z_[]

	return refine_x,refine_y,refine_z
end 

"""
	DMDASetGetMatrix(petsclib::PetscLibType,da::PetscDM, f::external) 
Sets the routine used by the `DMDA` to allocate a matrix.

Logically Collective; No Fortran Support

Input Parameters:
- `da` - the `DMDA` object
- `f`  - the function that allocates the matrix for that specific `DMDA`

Calling sequence of `f`:
- `da` - the `DMDA` object
- `A`  - the created matrix

Level: developer

-seealso: [](sec_struct), `DM`, `DMDA`, `DMCreateMatrix()`, `DMDASetBlockFills()`

# External Links
$(_doc_external("Dm/DMDASetGetMatrix"))
"""
function DMDASetGetMatrix(petsclib::PetscLibType, da::PetscDM, f::external) end

@for_petsc function DMDASetGetMatrix(petsclib::$UnionPetscLib, da::PetscDM, f::external )

    @chk ccall(
               (:DMDASetGetMatrix, $petsc_library),
               PetscErrorCode,
               (CDM, external),
               da, f,
              )


	return nothing
end 

"""
	gidxm::Vector{PetscInt} = DMDAMapMatStencilToGlobal(petsclib::PetscLibType,da::PetscDM, m::PetscInt, idxm::Vector{MatStencil}) 
Map a list of `MatStencil` on a grid to global indices.

Not Collective

Input Parameters:
- `da`   - the `DMDA` object
- `m`    - number of `MatStencil` to map
- `idxm` - grid points (and component number when dof > 1)

Output Parameter:
- `gidxm` - global row indices

Level: intermediate

-seealso: [](sec_struct), `DM`, `DMDA`, `MatStencil`

# External Links
$(_doc_external("Dm/DMDAMapMatStencilToGlobal"))
"""
function DMDAMapMatStencilToGlobal(petsclib::PetscLibType, da::PetscDM, m::PetscInt, idxm::Vector{MatStencil}) end

@for_petsc function DMDAMapMatStencilToGlobal(petsclib::$UnionPetscLib, da::PetscDM, m::$PetscInt, idxm::Vector{MatStencil} )
	gidxm = Vector{$PetscInt}(undef, ni);  # CHECK SIZE!!

    @chk ccall(
               (:DMDAMapMatStencilToGlobal, $petsc_library),
               PetscErrorCode,
               (CDM, $PetscInt, Ptr{MatStencil}, Ptr{$PetscInt}),
               da, m, idxm, gidxm,
              )


	return gidxm
end 

"""
	nodes::PetscReal = DMDASetGLLCoordinates(petsclib::PetscLibType,da::PetscDM, n::PetscInt) 

# External Links
$(_doc_external("Dm/DMDASetGLLCoordinates"))
"""
function DMDASetGLLCoordinates(petsclib::PetscLibType, da::PetscDM, n::PetscInt) end

@for_petsc function DMDASetGLLCoordinates(petsclib::$UnionPetscLib, da::PetscDM, n::$PetscInt )
	nodes_ = Ref{$PetscReal}()

    @chk ccall(
               (:DMDASetGLLCoordinates, $petsc_library),
               PetscErrorCode,
               (CDM, $PetscInt, Ptr{$PetscReal}),
               da, n, nodes_,
              )

	nodes = nodes_[]

	return nodes
end 

"""
	is::IS = DMDACreatePatchIS(petsclib::PetscLibType,da::PetscDM, lower::MatStencil, upper::MatStencil, offproc::PetscBool) 
Creates an index set corresponding to a logically rectangular patch of the `DMDA`.

Collective

Input Parameters:
- `da`      - the `DMDA`
- `lower`   - a `MatStencil` with i, j and k entries corresponding to the lower corner of the patch
- `upper`   - a `MatStencil` with i, j and k entries corresponding to the upper corner of the patch
- `offproc` - indicate whether the returned `IS` will contain off process indices

Output Parameter:
- `is` - the `IS` corresponding to the patch

Level: developer

-seealso: [](sec_struct), `DM`, `DMDA`, `DMCreateDomainDecomposition()`, `DMCreateDomainDecompositionScatters()`

# External Links
$(_doc_external("Dm/DMDACreatePatchIS"))
"""
function DMDACreatePatchIS(petsclib::PetscLibType, da::PetscDM, lower::MatStencil, upper::MatStencil, offproc::PetscBool) end

@for_petsc function DMDACreatePatchIS(petsclib::$UnionPetscLib, da::PetscDM, lower::MatStencil, upper::MatStencil, offproc::PetscBool )
	is_ = Ref{IS}()

    @chk ccall(
               (:DMDACreatePatchIS, $petsc_library),
               PetscErrorCode,
               (CDM, Ptr{MatStencil}, Ptr{MatStencil}, Ptr{IS}, PetscBool),
               da, lower, upper, is_, offproc,
              )

	is = is_[]

	return is
end 

"""
	pf::PF = DMDACreatePF(petsclib::PetscLibType,da::PetscDM) 
Creates an appropriately dimensioned `PF` mathematical function object
from a `DMDA`.

Collective; No Fortran Support

Input Parameter:
- `da` - initial distributed array

Output Parameter:
- `pf` - the mathematical function object

Level: advanced

-seealso: `DM`, `PF`, `DMDA`, `DMDACreate1d()`, `DMDACreate2d()`, `DMDACreate3d()`, `DMDestroy()`, `DMCreateGlobalVector()`

# External Links
$(_doc_external("Dm/DMDACreatePF"))
"""
function DMDACreatePF(petsclib::PetscLibType, da::PetscDM) end

@for_petsc function DMDACreatePF(petsclib::$UnionPetscLib, da::PetscDM )
	pf_ = Ref{PF}()

    @chk ccall(
               (:DMDACreatePF, $petsc_library),
               PetscErrorCode,
               (CDM, Ptr{PF}),
               da, pf_,
              )

	pf = pf_[]

	return pf
end 

"""
	DMDAVTKWriteAll(petsclib::PetscLibType,odm::PetscObject, viewer::PetscViewer) 
Write a file containing all the fields that have been provided to the viewer

Collective

Input Parameters:
- `odm`    - `DMDA` specifying the grid layout, passed as a `PetscObject`
- `viewer` - viewer of type `PETSCVIEWERVTK`

Level: developer

-seealso: [](sec_struct), `DMDA`, `DM`, `PETSCVIEWERVTK`, `DMDASetFieldName()`

# External Links
$(_doc_external("Dm/DMDAVTKWriteAll"))
"""
function DMDAVTKWriteAll(petsclib::PetscLibType, odm::PetscObject, viewer::PetscViewer) end

@for_petsc function DMDAVTKWriteAll(petsclib::$UnionPetscLib, odm::PetscObject, viewer::PetscViewer )

    @chk ccall(
               (:DMDAVTKWriteAll, $petsc_library),
               PetscErrorCode,
               (PetscObject, PetscViewer),
               odm, viewer,
              )


	return nothing
end 

"""
	da::PetscDM = DMDACreate3d(petsclib::PetscLibType,comm::MPI_Comm, bx::DMBoundaryType, by::DMBoundaryType, bz::DMBoundaryType, stencil_type::DMDAStencilType, M::PetscInt, N::PetscInt, P::PetscInt, m::PetscInt, n::PetscInt, p::PetscInt, dof::PetscInt, s::PetscInt, lx::Vector{PetscInt}, ly::Vector{PetscInt}, lz::Vector{PetscInt}) 
Creates an object that will manage the communication of three
regular array data that is distributed across one or more MPI processes.

Collective

Input Parameters:
- `comm`         - MPI communicator
- `bx`           - type of x ghost nodes the array have.
Use one of `DM_BOUNDARY_NONE`, `DM_BOUNDARY_GHOSTED`, `DM_BOUNDARY_PERIODIC`.
- `by`           - type of y ghost nodes the array have.
Use one of `DM_BOUNDARY_NONE`, `DM_BOUNDARY_GHOSTED`, `DM_BOUNDARY_PERIODIC`.
- `bz`           - type of z ghost nodes the array have.
Use one of `DM_BOUNDARY_NONE`, `DM_BOUNDARY_GHOSTED`, `DM_BOUNDARY_PERIODIC`.
- `stencil_type` - Type of stencil (`DMDA_STENCIL_STAR` or `DMDA_STENCIL_BOX`)
- `M`            - global dimension in x direction of the array
- `N`            - global dimension in y direction of the array
- `P`            - global dimension in z direction of the array
- `m`            - corresponding number of processors in x dimension (or `PETSC_DECIDE` to have calculated)
- `n`            - corresponding number of processors in y dimension (or `PETSC_DECIDE` to have calculated)
- `p`            - corresponding number of processors in z dimension (or `PETSC_DECIDE` to have calculated)
- `dof`          - number of degrees of freedom per node
- `s`            - stencil width
- `lx`           - arrays containing the number of nodes in each cell along the x  coordinates, or `NULL`.
- `ly`           - arrays containing the number of nodes in each cell along the y coordinates, or `NULL`.
- `lz`           - arrays containing the number of nodes in each cell along the z coordinates, or `NULL`.

Output Parameter:
- `da` - the resulting distributed array object

Options Database Keys:
- `-dm_view`              - Calls `DMView()` at the conclusion of `DMDACreate3d()`
- `-da_grid_x <nx>`       - number of grid points in x direction
- `-da_grid_y <ny>`       - number of grid points in y direction
- `-da_grid_z <nz>`       - number of grid points in z direction
- `-da_processors_x <MX>` - number of processors in x direction
- `-da_processors_y <MY>` - number of processors in y direction
- `-da_processors_z <MZ>` - number of processors in z direction
- `-da_bd_x <bx>`         - boundary type in x direction
- `-da_bd_y <by>`         - boundary type in y direction
- `-da_bd_z <bz>`         - boundary type in x direction
- `-da_bd_all <bt>`       - boundary type in all directions
- `-da_refine_x <rx>`     - refinement ratio in x direction
- `-da_refine_y <ry>`     - refinement ratio in y direction
- `-da_refine_z <rz>`     - refinement ratio in z directio
- `-da_refine <n>`        - refine the `DMDA` n times before creating it

Level: beginner

-seealso: [](sec_struct), `DM`, `DMDA`, `DMDestroy()`, `DMView()`, `DMDACreate1d()`, `DMDACreate2d()`, `DMGlobalToLocalBegin()`, `DMDAGetRefinementFactor()`,
`DMGlobalToLocalEnd()`, `DMLocalToGlobalBegin()`, `DMLocalToLocalBegin()`, `DMLocalToLocalEnd()`, `DMDASetRefinementFactor()`,
`DMDAGetInfo()`, `DMCreateGlobalVector()`, `DMCreateLocalVector()`, `DMDACreateNaturalVector()`, `DMLoad()`, `DMDAGetOwnershipRanges()`,
`DMStagCreate3d()`, `DMBoundaryType`

# External Links
$(_doc_external("Dm/DMDACreate3d"))
"""
function DMDACreate3d(petsclib::PetscLibType, comm::MPI_Comm, bx::DMBoundaryType, by::DMBoundaryType, bz::DMBoundaryType, stencil_type::DMDAStencilType, M::PetscInt, N::PetscInt, P::PetscInt, m::PetscInt, n::PetscInt, p::PetscInt, dof::PetscInt, s::PetscInt, lx::Vector{PetscInt}, ly::Vector{PetscInt}, lz::Vector{PetscInt}) end

@for_petsc function DMDACreate3d(petsclib::$UnionPetscLib, comm::MPI_Comm, bx::DMBoundaryType, by::DMBoundaryType, bz::DMBoundaryType, stencil_type::DMDAStencilType, M::$PetscInt, N::$PetscInt, P::$PetscInt, m::$PetscInt, n::$PetscInt, p::$PetscInt, dof::$PetscInt, s::$PetscInt, lx::Vector{$PetscInt}, ly::Vector{$PetscInt}, lz::Vector{$PetscInt} )
	da_ = Ref{CDM}()

    @chk ccall(
               (:DMDACreate3d, $petsc_library),
               PetscErrorCode,
               (MPI_Comm, DMBoundaryType, DMBoundaryType, DMBoundaryType, DMDAStencilType, $PetscInt, $PetscInt, $PetscInt, $PetscInt, $PetscInt, $PetscInt, $PetscInt, $PetscInt, Ptr{$PetscInt}, Ptr{$PetscInt}, Ptr{$PetscInt}, Ptr{CDM}),
               comm, bx, by, bz, stencil_type, M, N, P, m, n, p, dof, s, lx, ly, lz, da_,
              )

	da = PetscDM(da_[], petsclib)

	return da
end 

"""
	DMDASetBlockFills(petsclib::PetscLibType,da::PetscDM, dfill::PetscInt, ofill::PetscInt) 
Sets the fill pattern in each block for a multi
of the matrix returned by `DMCreateMatrix()`.

Logically Collective

Input Parameters:
- `da`    - the `DMDA`
- `dfill` - the fill pattern in the diagonal block (may be `NULL`, means use dense block)
- `ofill` - the fill pattern in the off-diagonal blocks

Level: developer

-seealso: [](sec_struct), `DM`, `DMDA`, `DMCreateMatrix()`, `DMDASetGetMatrix()`, `DMSetMatrixPreallocateOnly()`, `DMDASetBlockFillsSparse()`

# External Links
$(_doc_external("Dm/DMDASetBlockFills"))
"""
function DMDASetBlockFills(petsclib::PetscLibType, da::PetscDM, dfill::PetscInt, ofill::PetscInt) end

@for_petsc function DMDASetBlockFills(petsclib::$UnionPetscLib, da::PetscDM, dfill::$PetscInt, ofill::$PetscInt )

    @chk ccall(
               (:DMDASetBlockFills, $petsc_library),
               PetscErrorCode,
               (CDM, Ptr{$PetscInt}, Ptr{$PetscInt}),
               da, dfill, ofill,
              )


	return nothing
end 

"""
	DMDASetBlockFillsSparse(petsclib::PetscLibType,da::PetscDM, dfillsparse::PetscInt, ofillsparse::PetscInt) 
Sets the fill pattern in each block for a multi
of the matrix returned by `DMCreateMatrix()`, using sparse representations
of fill patterns.

Logically Collective

Input Parameters:
- `da`          - the `DMDA`
- `dfillsparse` - the sparse fill pattern in the diagonal block (may be `NULL`, means use dense block)
- `ofillsparse` - the sparse fill pattern in the off-diagonal blocks

Level: developer

-seealso: [](sec_struct), `DM`, `DMDA`, `DMDASetBlockFills()`, `DMCreateMatrix()`, `DMDASetGetMatrix()`, `DMSetMatrixPreallocateOnly()`

# External Links
$(_doc_external("Dm/DMDASetBlockFillsSparse"))
"""
function DMDASetBlockFillsSparse(petsclib::PetscLibType, da::PetscDM, dfillsparse::PetscInt, ofillsparse::PetscInt) end

@for_petsc function DMDASetBlockFillsSparse(petsclib::$UnionPetscLib, da::PetscDM, dfillsparse::$PetscInt, ofillsparse::$PetscInt )

    @chk ccall(
               (:DMDASetBlockFillsSparse, $petsc_library),
               PetscErrorCode,
               (CDM, Ptr{$PetscInt}, Ptr{$PetscInt}),
               da, dfillsparse, ofillsparse,
              )


	return nothing
end 

"""
	DMDASetFieldName(petsclib::PetscLibType,da::PetscDM, nf::PetscInt, name::String) 
Sets the names of individual field components in multicomponent
vectors associated with a `DMDA`.

Logically Collective; name must contain a common value

Input Parameters:
- `da`   - the `DMDA`
- `nf`   - field number for the `DMDA` (0, 1, ... dof-1), where dof indicates the
number of degrees of freedom per node within the `DMDA`
- `name` - the name of the field (component)

Level: intermediate

-seealso: [](sec_struct), `DM`, `DMDA`, `DMDAGetFieldName()`, `DMDASetCoordinateName()`, `DMDAGetCoordinateName()`, `DMDASetFieldNames()`, `DMSetUp()`

# External Links
$(_doc_external("Dm/DMDASetFieldName"))
"""
function DMDASetFieldName(petsclib::PetscLibType, da::PetscDM, nf::PetscInt, name::String) end

@for_petsc function DMDASetFieldName(petsclib::$UnionPetscLib, da::PetscDM, nf::$PetscInt, name::String )

    @chk ccall(
               (:DMDASetFieldName, $petsc_library),
               PetscErrorCode,
               (CDM, $PetscInt, Ptr{Cchar}),
               da, nf, name,
              )


	return nothing
end 

"""
	DMDAGetFieldNames(petsclib::PetscLibType,da::PetscDM, names::Cchar) 
Gets the name of all the components in the vector associated with the `DMDA`

Not Collective; names will contain a common value; No Fortran Support

Input Parameter:
- `da` - the `DMDA` object

Output Parameter:
- `names` - the names of the components, final string is `NULL`, will have the same number of entries as the dof used in creating the `DMDA`

Level: intermediate

-seealso: [](sec_struct), `DM`, `DMDA`, `DMDAGetFieldName()`, `DMDASetCoordinateName()`, `DMDAGetCoordinateName()`, `DMDASetFieldName()`, `DMDASetFieldNames()`

# External Links
$(_doc_external("Dm/DMDAGetFieldNames"))
"""
function DMDAGetFieldNames(petsclib::PetscLibType, da::PetscDM, names::Cchar) end

@for_petsc function DMDAGetFieldNames(petsclib::$UnionPetscLib, da::PetscDM, names::Cchar )

    @chk ccall(
               (:DMDAGetFieldNames, $petsc_library),
               PetscErrorCode,
               (CDM, Cchar),
               da, names,
              )


	return nothing
end 

"""
	DMDASetFieldNames(petsclib::PetscLibType,da::PetscDM, names::String) 
Sets the name of each component in the vector associated with the `DMDA`

Logically Collective; names must contain a common value; No Fortran Support

Input Parameters:
- `da`    - the `DMDA` object
- `names` - the names of the components, final string must be `NULL`, must have the same number of entries as the dof used in creating the `DMDA`

Level: intermediate

-seealso: [](sec_struct), `DM`, `DMDA`, `DMDAGetFieldName()`, `DMDASetCoordinateName()`, `DMDAGetCoordinateName()`, `DMDASetFieldName()`, `DMSetUp()`

# External Links
$(_doc_external("Dm/DMDASetFieldNames"))
"""
function DMDASetFieldNames(petsclib::PetscLibType, da::PetscDM, names::String) end

@for_petsc function DMDASetFieldNames(petsclib::$UnionPetscLib, da::PetscDM, names::String )
	names_ = Ref(pointer(names))

    @chk ccall(
               (:DMDASetFieldNames, $petsc_library),
               PetscErrorCode,
               (CDM, Ptr{Ptr{Cchar}}),
               da, names_,
              )


	return nothing
end 

"""
	DMDAGetFieldName(petsclib::PetscLibType,da::PetscDM, nf::PetscInt, name::String) 
Gets the names of individual field components in multicomponent
vectors associated with a `DMDA`.

Not Collective; name will contain a common value

Input Parameters:
- `da` - the `DMDA`
- `nf` - field number for the `DMDA` (0, 1, ... dof-1), where dof indicates the
number of degrees of freedom per node within the `DMDA`

Output Parameter:
- `name` - the name of the field (component)

Level: intermediate

-seealso: [](sec_struct), `DM`, `DMDA`, `DMDASetFieldName()`, `DMDASetCoordinateName()`, `DMDAGetCoordinateName()`, `DMSetUp()`

# External Links
$(_doc_external("Dm/DMDAGetFieldName"))
"""
function DMDAGetFieldName(petsclib::PetscLibType, da::PetscDM, nf::PetscInt, name::String) end

@for_petsc function DMDAGetFieldName(petsclib::$UnionPetscLib, da::PetscDM, nf::$PetscInt, name::String )
	name_ = Ref(pointer(name))

    @chk ccall(
               (:DMDAGetFieldName, $petsc_library),
               PetscErrorCode,
               (CDM, $PetscInt, Ptr{Ptr{Cchar}}),
               da, nf, name_,
              )


	return nothing
end 

"""
	DMDASetCoordinateName(petsclib::PetscLibType,dm::PetscDM, nf::PetscInt, name::String) 
Sets the name of the coordinate directions associated with a `DMDA`, for example "x" or "y"

Logically Collective; name must contain a common value; No Fortran Support

Input Parameters:
- `dm`   - the `DMDA`
- `nf`   - coordinate number for the `DMDA` (0, 1, ... dim-1),
- `name` - the name of the coordinate

Level: intermediate

-seealso: [](sec_struct), `DM`, `DMDA`, `DMDAGetCoordinateName()`, `DMDASetFieldName()`, `DMDAGetFieldName()`, `DMSetUp()`

# External Links
$(_doc_external("Dm/DMDASetCoordinateName"))
"""
function DMDASetCoordinateName(petsclib::PetscLibType, dm::PetscDM, nf::PetscInt, name::String) end

@for_petsc function DMDASetCoordinateName(petsclib::$UnionPetscLib, dm::PetscDM, nf::$PetscInt, name::String )

    @chk ccall(
               (:DMDASetCoordinateName, $petsc_library),
               PetscErrorCode,
               (CDM, $PetscInt, Ptr{Cchar}),
               dm, nf, name,
              )


	return nothing
end 

"""
	DMDAGetCoordinateName(petsclib::PetscLibType,dm::PetscDM, nf::PetscInt, name::String) 
Gets the name of a coordinate direction associated with a `DMDA`.

Not Collective; name will contain a common value; No Fortran Support

Input Parameters:
- `dm` - the `DMDA`
- `nf` - number for the `DMDA` (0, 1, ... dim-1)

Output Parameter:
- `name` - the name of the coordinate direction

Level: intermediate

-seealso: [](sec_struct), `DM`, `DMDA`, `DMDASetCoordinateName()`, `DMDASetFieldName()`, `DMDAGetFieldName()`, `DMSetUp()`

# External Links
$(_doc_external("Dm/DMDAGetCoordinateName"))
"""
function DMDAGetCoordinateName(petsclib::PetscLibType, dm::PetscDM, nf::PetscInt, name::String) end

@for_petsc function DMDAGetCoordinateName(petsclib::$UnionPetscLib, dm::PetscDM, nf::$PetscInt, name::String )
	name_ = Ref(pointer(name))

    @chk ccall(
               (:DMDAGetCoordinateName, $petsc_library),
               PetscErrorCode,
               (CDM, $PetscInt, Ptr{Ptr{Cchar}}),
               dm, nf, name_,
              )


	return nothing
end 

"""
	x::PetscInt,y::PetscInt,z::PetscInt,m::PetscInt,n::PetscInt,p::PetscInt = DMDAGetCorners(petsclib::PetscLibType,da::PetscDM) 
Returns the global (`x`,`y`,`z`) indices of the lower left
corner and size of the local region, excluding ghost points.

Not Collective

Input Parameter:
- `da` - the `DMDA`

Output Parameters:
- `x` - the corner index for the first dimension
- `y` - the corner index for the second dimension (only used in 2D and 3D problems)
- `z` - the corner index for the third dimension (only used in 3D problems)
- `m` - the width in the first dimension
- `n` - the width in the second dimension (only used in 2D and 3D problems)
- `p` - the width in the third dimension (only used in 3D problems)

Level: beginner

-seealso: [](sec_struct), `DM`, `DMDA`, `DMDAGetGhostCorners()`, `DMDAGetOwnershipRanges()`, `DMStagGetCorners()`, `DMSTAG`

# External Links
$(_doc_external("Dm/DMDAGetCorners"))
"""
function DMDAGetCorners(petsclib::PetscLibType, da::PetscDM) end

@for_petsc function DMDAGetCorners(petsclib::$UnionPetscLib, da::PetscDM )
	x_ = Ref{$PetscInt}()
	y_ = Ref{$PetscInt}()
	z_ = Ref{$PetscInt}()
	m_ = Ref{$PetscInt}()
	n_ = Ref{$PetscInt}()
	p_ = Ref{$PetscInt}()

    @chk ccall(
               (:DMDAGetCorners, $petsc_library),
               PetscErrorCode,
               (CDM, Ptr{$PetscInt}, Ptr{$PetscInt}, Ptr{$PetscInt}, Ptr{$PetscInt}, Ptr{$PetscInt}, Ptr{$PetscInt}),
               da, x_, y_, z_, m_, n_, p_,
              )

	x = x_[]
	y = y_[]
	z = z_[]
	m = m_[]
	n = n_[]
	p = p_[]

	return x,y,z,m,n,p
end 

"""
	nda::PetscDM = DMDACreateCompatibleDMDA(petsclib::PetscLibType,da::PetscDM, nfields::PetscInt) 
Creates a `DMDA` with the same layout as given `DMDA` but with fewer or more fields

Collective

Input Parameters:
- `da`      - the `DMDA`
- `nfields` - number of fields in new `DMDA`

Output Parameter:
- `nda` - the new `DMDA`

Level: intermediate

-seealso: [](sec_struct), `DM`, `DMDA`, `DMDAGetGhostCorners()`, `DMSetCoordinates()`, `DMDASetUniformCoordinates()`, `DMGetCoordinates()`, `DMDAGetGhostedCoordinates()`,
`DMStagCreateCompatibleDMStag()`

# External Links
$(_doc_external("Dm/DMDACreateCompatibleDMDA"))
"""
function DMDACreateCompatibleDMDA(petsclib::PetscLibType, da::PetscDM, nfields::PetscInt) end

@for_petsc function DMDACreateCompatibleDMDA(petsclib::$UnionPetscLib, da::PetscDM, nfields::$PetscInt )
	nda_ = Ref{CDM}()

    @chk ccall(
               (:DMDACreateCompatibleDMDA, $petsc_library),
               PetscErrorCode,
               (CDM, $PetscInt, Ptr{CDM}),
               da, nfields, nda_,
              )

	nda = PetscDM(nda_[], petsclib)

	return nda
end 

"""
	DMDAGetCoordinateArray(petsclib::PetscLibType,dm::PetscDM, xc::Cvoid) 
Gets an array containing the coordinates of the `DMDA`

Not Collective; No Fortran Support

Input Parameter:
- `dm` - the `DMDA`

Output Parameter:
- `xc` - the coordinates

Level: intermediate

-seealso: [](sec_struct), `DM`, `DMDA`, `DMDASetCoordinateName()`, `DMDASetFieldName()`, `DMDAGetFieldName()`, `DMDARestoreCoordinateArray()`

# External Links
$(_doc_external("Dm/DMDAGetCoordinateArray"))
"""
function DMDAGetCoordinateArray(petsclib::PetscLibType, dm::PetscDM, xc::Cvoid) end

@for_petsc function DMDAGetCoordinateArray(petsclib::$UnionPetscLib, dm::PetscDM, xc::Cvoid )

    @chk ccall(
               (:DMDAGetCoordinateArray, $petsc_library),
               PetscErrorCode,
               (CDM, Ptr{Cvoid}),
               dm, xc,
              )


	return nothing
end 

"""
	DMDARestoreCoordinateArray(petsclib::PetscLibType,dm::PetscDM, xc::Cvoid) 
Returns an array containing the coordinates of the `DMDA` obtained with `DMDAGetCoordinateArray()`

Not Collective; No Fortran Support

Input Parameters:
- `dm` - the `DMDA`
- `xc` - the coordinates

Level: intermediate

-seealso: [](sec_struct), `DM`, `DMDA`, `DMDASetCoordinateName()`, `DMDASetFieldName()`, `DMDAGetFieldName()`, `DMDAGetCoordinateArray()`

# External Links
$(_doc_external("Dm/DMDARestoreCoordinateArray"))
"""
function DMDARestoreCoordinateArray(petsclib::PetscLibType, dm::PetscDM, xc::Cvoid) end

@for_petsc function DMDARestoreCoordinateArray(petsclib::$UnionPetscLib, dm::PetscDM, xc::Cvoid )

    @chk ccall(
               (:DMDARestoreCoordinateArray, $petsc_library),
               PetscErrorCode,
               (CDM, Ptr{Cvoid}),
               dm, xc,
              )


	return nothing
end 

"""
	da::PetscDM = DMDACreate(petsclib::PetscLibType,comm::MPI_Comm) 
Creates a `DMDA` object for managing structured grids.

Collective

Input Parameter:
- `comm` - The communicator for the `DMDA` object

Output Parameter:
- `da` - the `DMDA` object

Level: advanced

-seealso: [](sec_struct), `DM`, `DMDA`, `DMSetUp()`, `DMDASetSizes()`, `DMClone()`, `DMDACreate1d()`, `DMDACreate2d()`, `DMDACreate3d()`

# External Links
$(_doc_external("Dm/DMDACreate"))
"""
function DMDACreate(petsclib::PetscLibType, comm::MPI_Comm) end

@for_petsc function DMDACreate(petsclib::$UnionPetscLib, comm::MPI_Comm )
	da_ = Ref{CDM}()

    @chk ccall(
               (:DMDACreate, $petsc_library),
               PetscErrorCode,
               (MPI_Comm, Ptr{CDM}),
               comm, da_,
              )

	da = PetscDM(da_[], petsclib)

	return da
end 

"""
	cell::PetscInt = DMDAConvertToCell(petsclib::PetscLibType,dm::PetscDM, s::MatStencil) 
Convert a (i,j,k) location in a `DMDA` to its local cell or vertex number

Not Collective

Input Parameters:
- `dm` - the `DMDA`
- `s`  - a `MatStencil` that provides (i,j,k)

Output Parameter:
- `cell` - the local cell or vertext number

Level: developer

-seealso: [](sec_struct), `DM`, `DMDA`, `DMDAGetGhostCorners()`

# External Links
$(_doc_external("Dm/DMDAConvertToCell"))
"""
function DMDAConvertToCell(petsclib::PetscLibType, dm::PetscDM, s::MatStencil) end

@for_petsc function DMDAConvertToCell(petsclib::$UnionPetscLib, dm::PetscDM, s::MatStencil )
	cell_ = Ref{$PetscInt}()

    @chk ccall(
               (:DMDAConvertToCell, $petsc_library),
               PetscErrorCode,
               (CDM, MatStencil, Ptr{$PetscInt}),
               dm, s, cell_,
              )

	cell = cell_[]

	return cell
end 

"""
	II::PetscInt,JJ::PetscInt,KK::PetscInt,X::PetscScalar,Y::PetscScalar,Z::PetscScalar = DMDAGetLogicalCoordinate(petsclib::PetscLibType,da::PetscDM, x::PetscScalar, y::PetscScalar, z::PetscScalar) 
Returns a the i,j,k logical coordinate for the closest mesh point to a `x`, `y`, `z` point in the coordinates of the `DMDA`

Collective

Input Parameters:
- `da` - the `DMDA`
- `x`  - the first physical coordinate
- `y`  - the second physical coordinate
- `z`  - the third physical coordinate

Output Parameters:
- `II` - the first logical coordinate (-1 on processes that do not contain that point)
- `JJ` - the second logical coordinate (-1 on processes that do not contain that point)
- `KK` - the third logical coordinate (-1 on processes that do not contain that point)
- `X`  - (optional) the first coordinate of the located grid point
- `Y`  - (optional) the second coordinate of the located grid point
- `Z`  - (optional) the third coordinate of the located grid point

Level: advanced

-seealso: [](sec_struct), `DM`, `DMDA`

# External Links
$(_doc_external("Dm/DMDAGetLogicalCoordinate"))
"""
function DMDAGetLogicalCoordinate(petsclib::PetscLibType, da::PetscDM, x::PetscScalar, y::PetscScalar, z::PetscScalar) end

@for_petsc function DMDAGetLogicalCoordinate(petsclib::$UnionPetscLib, da::PetscDM, x::$PetscScalar, y::$PetscScalar, z::$PetscScalar )
	II_ = Ref{$PetscInt}()
	JJ_ = Ref{$PetscInt}()
	KK_ = Ref{$PetscInt}()
	X_ = Ref{$PetscScalar}()
	Y_ = Ref{$PetscScalar}()
	Z_ = Ref{$PetscScalar}()

    @chk ccall(
               (:DMDAGetLogicalCoordinate, $petsc_library),
               PetscErrorCode,
               (CDM, $PetscScalar, $PetscScalar, $PetscScalar, Ptr{$PetscInt}, Ptr{$PetscInt}, Ptr{$PetscInt}, Ptr{$PetscScalar}, Ptr{$PetscScalar}, Ptr{$PetscScalar}),
               da, x, y, z, II_, JJ_, KK_, X_, Y_, Z_,
              )

	II = II_[]
	JJ = JJ_[]
	KK = KK_[]
	X = X_[]
	Y = Y_[]
	Z = Z_[]

	return II,JJ,KK,X,Y,Z
end 

"""
	DMDAGetRay(petsclib::PetscLibType,da::PetscDM, dir::DMDirection, gp::PetscInt, newvec::PetscVec, scatter::VecScatter) 
Returns a vector on process zero that contains a row or column of the values in a `DMDA` vector

Collective

Input Parameters:
- `da`  - the `DMDA`
- `dir` - Cartesian direction, either `DM_X`, `DM_Y`, or `DM_Z`
- `gp`  - global grid point number in this direction

Output Parameters:
- `newvec`  - the new vector that can hold the values (size zero on all processes except MPI rank 0)
- `scatter` - the `VecScatter` that will map from the original vector to the ray

Level: advanced

-seealso: [](sec_struct), `DM`, `DMDA`, `DMDirection`, `Vec`, `VecScatter`

# External Links
$(_doc_external("Dm/DMDAGetRay"))
"""
function DMDAGetRay(petsclib::PetscLibType, da::PetscDM, dir::DMDirection, gp::PetscInt, newvec::PetscVec, scatter::VecScatter) end

@for_petsc function DMDAGetRay(petsclib::$UnionPetscLib, da::PetscDM, dir::DMDirection, gp::$PetscInt, newvec::PetscVec, scatter::VecScatter )
	newvec_ = Ref(newvec.ptr)

    @chk ccall(
               (:DMDAGetRay, $petsc_library),
               PetscErrorCode,
               (CDM, DMDirection, $PetscInt, Ptr{CVec}, Ptr{VecScatter}),
               da, dir, gp, newvec_, scatter,
              )

	newvec.ptr = C_NULL

	return nothing
end 

"""
	DMDAGetProcessorSubset(petsclib::PetscLibType,da::PetscDM, dir::DMDirection, gp::PetscInt, comm::MPI_Comm) 
Returns a communicator consisting only of the
processors in a `DMDA` that own a particular global x, y, or z grid point
(corresponding to a logical plane in a 3D grid or a line in a 2D grid).

Collective; No Fortran Support

Input Parameters:
- `da`  - the `DMDA`
- `dir` - Cartesian direction, either `DM_X`, `DM_Y`, or `DM_Z`
- `gp`  - global grid point number in this direction

Output Parameter:
- `comm` - new communicator

Level: advanced

-seealso: [](sec_struct), `DM`, `DMDA`, `DMDirection`, `DM_X`, `DM_Y`, `DM_Z`, `DMDAGetProcessorSubsets()`

# External Links
$(_doc_external("Dm/DMDAGetProcessorSubset"))
"""
function DMDAGetProcessorSubset(petsclib::PetscLibType, da::PetscDM, dir::DMDirection, gp::PetscInt, comm::MPI_Comm) end

@for_petsc function DMDAGetProcessorSubset(petsclib::$UnionPetscLib, da::PetscDM, dir::DMDirection, gp::$PetscInt, comm::MPI_Comm )

    @chk ccall(
               (:DMDAGetProcessorSubset, $petsc_library),
               PetscErrorCode,
               (CDM, DMDirection, $PetscInt, Ptr{MPI_Comm}),
               da, dir, gp, comm,
              )


	return nothing
end 

"""
	DMDAGetProcessorSubsets(petsclib::PetscLibType,da::PetscDM, dir::DMDirection, subcomm::MPI_Comm) 
Returns communicators consisting only of the
processors in a `DMDA` adjacent in a particular dimension,
corresponding to a logical plane in a 3D grid or a line in a 2D grid.

Collective; No Fortran Support

Input Parameters:
- `da`  - the `DMDA`
- `dir` - Cartesian direction, either `DM_X`, `DM_Y`, or `DM_Z`

Output Parameter:
- `subcomm` - new communicator

Level: advanced

-seealso: [](sec_struct), `DM`, `DMDA`, `DMDirection`, `DMDAGetProcessorSubset()`, `DM_X`, `DM_Y`, `DM_Z`

# External Links
$(_doc_external("Dm/DMDAGetProcessorSubsets"))
"""
function DMDAGetProcessorSubsets(petsclib::PetscLibType, da::PetscDM, dir::DMDirection, subcomm::MPI_Comm) end

@for_petsc function DMDAGetProcessorSubsets(petsclib::$UnionPetscLib, da::PetscDM, dir::DMDirection, subcomm::MPI_Comm )

    @chk ccall(
               (:DMDAGetProcessorSubsets, $petsc_library),
               PetscErrorCode,
               (CDM, DMDirection, Ptr{MPI_Comm}),
               da, dir, subcomm,
              )


	return nothing
end 

"""
	x::PetscInt,y::PetscInt,z::PetscInt,m::PetscInt,n::PetscInt,p::PetscInt = DMDAGetGhostCorners(petsclib::PetscLibType,da::PetscDM) 
Returns the global (`i`,`j`,`k`) indices of the lower left
corner and size of the local region, including ghost points.

Not Collective

Input Parameter:
- `da` - the `DMDA`

Output Parameters:
- `x` - the corner index for the first dimension
- `y` - the corner index for the second dimension (only used in 2D and 3D problems)
- `z` - the corner index for the third dimension (only used in 3D problems)
- `m` - the width in the first dimension
- `n` - the width in the second dimension (only used in 2D and 3D problems)
- `p` - the width in the third dimension (only used in 3D problems)

Level: beginner

-seealso: [](sec_struct), `DM`, `DMDA`, `DMDAGetCorners()`, `DMDACreate1d()`, `DMDACreate2d()`, `DMDACreate3d()`, `DMDAGetOwnershipRanges()`, `DMStagGetGhostCorners()`, `DMSTAG`

# External Links
$(_doc_external("Dm/DMDAGetGhostCorners"))
"""
function DMDAGetGhostCorners(petsclib::PetscLibType, da::PetscDM) end

@for_petsc function DMDAGetGhostCorners(petsclib::$UnionPetscLib, da::PetscDM )
	x_ = Ref{$PetscInt}()
	y_ = Ref{$PetscInt}()
	z_ = Ref{$PetscInt}()
	m_ = Ref{$PetscInt}()
	n_ = Ref{$PetscInt}()
	p_ = Ref{$PetscInt}()

    @chk ccall(
               (:DMDAGetGhostCorners, $petsc_library),
               PetscErrorCode,
               (CDM, Ptr{$PetscInt}, Ptr{$PetscInt}, Ptr{$PetscInt}, Ptr{$PetscInt}, Ptr{$PetscInt}, Ptr{$PetscInt}),
               da, x_, y_, z_, m_, n_, p_,
              )

	x = x_[]
	y = y_[]
	z = z_[]
	m = m_[]
	n = n_[]
	p = p_[]

	return x,y,z,m,n,p
end 

"""
	DMDASetPreallocationCenterDimension(petsclib::PetscLibType,dm::PetscDM, preallocCenterDim::PetscInt) 
Determine the topology used to determine adjacency

Input Parameters:
- `dm`                - The `DMDA` object
- `preallocCenterDim` - The dimension of points which connect adjacent entries

Level: developer

-seealso: [](sec_struct), `DM`, `DMDA`, `DMCreateMatrix()`, `DMDAPreallocateOperator()`

# External Links
$(_doc_external("Dm/DMDASetPreallocationCenterDimension"))
"""
function DMDASetPreallocationCenterDimension(petsclib::PetscLibType, dm::PetscDM, preallocCenterDim::PetscInt) end

@for_petsc function DMDASetPreallocationCenterDimension(petsclib::$UnionPetscLib, dm::PetscDM, preallocCenterDim::$PetscInt )

    @chk ccall(
               (:DMDASetPreallocationCenterDimension, $petsc_library),
               PetscErrorCode,
               (CDM, $PetscInt),
               dm, preallocCenterDim,
              )


	return nothing
end 

"""
	preallocCenterDim::PetscInt = DMDAGetPreallocationCenterDimension(petsclib::PetscLibType,dm::PetscDM) 
Return the topology used to determine adjacency

Input Parameter:
- `dm` - The `DMDA` object

Output Parameter:
- `preallocCenterDim` - The dimension of points which connect adjacent entries

Level: developer

-seealso: [](sec_struct), `DM`, `DMDA`, `DMCreateMatrix()`, `DMDAPreallocateOperator()`, `DMDASetPreallocationCenterDimension()`

# External Links
$(_doc_external("Dm/DMDAGetPreallocationCenterDimension"))
"""
function DMDAGetPreallocationCenterDimension(petsclib::PetscLibType, dm::PetscDM) end

@for_petsc function DMDAGetPreallocationCenterDimension(petsclib::$UnionPetscLib, dm::PetscDM )
	preallocCenterDim_ = Ref{$PetscInt}()

    @chk ccall(
               (:DMDAGetPreallocationCenterDimension, $petsc_library),
               PetscErrorCode,
               (CDM, Ptr{$PetscInt}),
               dm, preallocCenterDim_,
              )

	preallocCenterDim = preallocCenterDim_[]

	return preallocCenterDim
end 

"""
	rest::PetscMat = DMDACreateAggregates(petsclib::PetscLibType,dac::PetscDM, daf::PetscDM) 
Gets the aggregates that map between
grids associated with two `DMDA`

Collective

Input Parameters:
- `dac` - the coarse grid `DMDA`
- `daf` - the fine grid `DMDA`

Output Parameter:
- `rest` - the restriction matrix (transpose of the projection matrix)

Level: intermediate

-seealso: [](sec_struct), `DMRefine()`, `DMCreateInjection()`, `DMCreateInterpolation()`

# External Links
$(_doc_external("Dm/DMDACreateAggregates"))
"""
function DMDACreateAggregates(petsclib::PetscLibType, dac::PetscDM, daf::PetscDM) end

@for_petsc function DMDACreateAggregates(petsclib::$UnionPetscLib, dac::PetscDM, daf::PetscDM )
	rest_ = Ref{CMat}()

    @chk ccall(
               (:DMDACreateAggregates, $petsc_library),
               PetscErrorCode,
               (CDM, CDM, Ptr{CMat}),
               dac, daf, rest_,
              )

	rest = PetscMat(rest_[], petsclib)

	return rest
end 

"""
	DMGlobalToLocalBeginDefaultShell(petsclib::PetscLibType,dm::PetscDM, g::PetscVec, mode::InsertMode, l::PetscVec) 
Uses the GlobalToLocal `VecScatter` context set by the user to begin a global to local scatter

Collective

Input Parameters:
- `dm`   - `DMSHELL`
- `g`    - global vector
- `mode` - `InsertMode`
- `l`    - local vector

Level: advanced

-seealso: `DM`, `DMSHELL`, `DMGlobalToLocalEndDefaultShell()`

# External Links
$(_doc_external("Dm/DMGlobalToLocalBeginDefaultShell"))
"""
function DMGlobalToLocalBeginDefaultShell(petsclib::PetscLibType, dm::PetscDM, g::PetscVec, mode::InsertMode, l::PetscVec) end

@for_petsc function DMGlobalToLocalBeginDefaultShell(petsclib::$UnionPetscLib, dm::PetscDM, g::PetscVec, mode::InsertMode, l::PetscVec )

    @chk ccall(
               (:DMGlobalToLocalBeginDefaultShell, $petsc_library),
               PetscErrorCode,
               (CDM, CVec, InsertMode, CVec),
               dm, g, mode, l,
              )


	return nothing
end 

"""
	DMGlobalToLocalEndDefaultShell(petsclib::PetscLibType,dm::PetscDM, g::PetscVec, mode::InsertMode, l::PetscVec) 
Uses the GlobalToLocal `VecScatter` context set by the user to end a global to local scatter
Collective

Input Parameters:
- `dm`   - `DMSHELL`
- `g`    - global vector
- `mode` - `InsertMode`
- `l`    - local vector

Level: advanced

-seealso: `DM`, `DMSHELL`, `DMGlobalToLocalBeginDefaultShell()`

# External Links
$(_doc_external("Dm/DMGlobalToLocalEndDefaultShell"))
"""
function DMGlobalToLocalEndDefaultShell(petsclib::PetscLibType, dm::PetscDM, g::PetscVec, mode::InsertMode, l::PetscVec) end

@for_petsc function DMGlobalToLocalEndDefaultShell(petsclib::$UnionPetscLib, dm::PetscDM, g::PetscVec, mode::InsertMode, l::PetscVec )

    @chk ccall(
               (:DMGlobalToLocalEndDefaultShell, $petsc_library),
               PetscErrorCode,
               (CDM, CVec, InsertMode, CVec),
               dm, g, mode, l,
              )


	return nothing
end 

"""
	DMLocalToGlobalBeginDefaultShell(petsclib::PetscLibType,dm::PetscDM, l::PetscVec, mode::InsertMode, g::PetscVec) 
Uses the LocalToGlobal `VecScatter` context set by the user to begin a local to global scatter
Collective

Input Parameters:
- `dm`   - `DMSHELL`
- `l`    - local vector
- `mode` - `InsertMode`
- `g`    - global vector

Level: advanced

-seealso: `DM`, `DMSHELL`, `DMLocalToGlobalEndDefaultShell()`

# External Links
$(_doc_external("Dm/DMLocalToGlobalBeginDefaultShell"))
"""
function DMLocalToGlobalBeginDefaultShell(petsclib::PetscLibType, dm::PetscDM, l::PetscVec, mode::InsertMode, g::PetscVec) end

@for_petsc function DMLocalToGlobalBeginDefaultShell(petsclib::$UnionPetscLib, dm::PetscDM, l::PetscVec, mode::InsertMode, g::PetscVec )

    @chk ccall(
               (:DMLocalToGlobalBeginDefaultShell, $petsc_library),
               PetscErrorCode,
               (CDM, CVec, InsertMode, CVec),
               dm, l, mode, g,
              )


	return nothing
end 

"""
	DMLocalToGlobalEndDefaultShell(petsclib::PetscLibType,dm::PetscDM, l::PetscVec, mode::InsertMode, g::PetscVec) 
Uses the LocalToGlobal `VecScatter` context set by the user to end a local to global scatter
Collective

Input Parameters:
- `dm`   - `DMSHELL`
- `l`    - local vector
- `mode` - `InsertMode`
- `g`    - global vector

Level: advanced

-seealso: `DM`, `DMSHELL`, `DMLocalToGlobalBeginDefaultShell()`

# External Links
$(_doc_external("Dm/DMLocalToGlobalEndDefaultShell"))
"""
function DMLocalToGlobalEndDefaultShell(petsclib::PetscLibType, dm::PetscDM, l::PetscVec, mode::InsertMode, g::PetscVec) end

@for_petsc function DMLocalToGlobalEndDefaultShell(petsclib::$UnionPetscLib, dm::PetscDM, l::PetscVec, mode::InsertMode, g::PetscVec )

    @chk ccall(
               (:DMLocalToGlobalEndDefaultShell, $petsc_library),
               PetscErrorCode,
               (CDM, CVec, InsertMode, CVec),
               dm, l, mode, g,
              )


	return nothing
end 

"""
	DMLocalToLocalBeginDefaultShell(petsclib::PetscLibType,dm::PetscDM, g::PetscVec, mode::InsertMode, l::PetscVec) 
Uses the LocalToLocal `VecScatter` context set by the user to begin a local to local scatter
Collective

Input Parameters:
- `dm`   - `DMSHELL`
- `g`    - the original local vector
- `mode` - `InsertMode`

Output Parameter:
- `l` - the local vector with correct ghost values

Level: advanced

-seealso: `DM`, `DMSHELL`, `DMLocalToLocalEndDefaultShell()`

# External Links
$(_doc_external("Dm/DMLocalToLocalBeginDefaultShell"))
"""
function DMLocalToLocalBeginDefaultShell(petsclib::PetscLibType, dm::PetscDM, g::PetscVec, mode::InsertMode, l::PetscVec) end

@for_petsc function DMLocalToLocalBeginDefaultShell(petsclib::$UnionPetscLib, dm::PetscDM, g::PetscVec, mode::InsertMode, l::PetscVec )

    @chk ccall(
               (:DMLocalToLocalBeginDefaultShell, $petsc_library),
               PetscErrorCode,
               (CDM, CVec, InsertMode, CVec),
               dm, g, mode, l,
              )


	return nothing
end 

"""
	DMLocalToLocalEndDefaultShell(petsclib::PetscLibType,dm::PetscDM, g::PetscVec, mode::InsertMode, l::PetscVec) 
Uses the LocalToLocal `VecScatter` context set by the user to end a local to local scatter
Collective

Input Parameters:
- `dm`   - `DMSHELL`
- `g`    - the original local vector
- `mode` - `InsertMode`

Output Parameter:
- `l` - the local vector with correct ghost values

Level: advanced

-seealso: `DM`, `DMSHELL`, `DMLocalToLocalBeginDefaultShell()`

# External Links
$(_doc_external("Dm/DMLocalToLocalEndDefaultShell"))
"""
function DMLocalToLocalEndDefaultShell(petsclib::PetscLibType, dm::PetscDM, g::PetscVec, mode::InsertMode, l::PetscVec) end

@for_petsc function DMLocalToLocalEndDefaultShell(petsclib::$UnionPetscLib, dm::PetscDM, g::PetscVec, mode::InsertMode, l::PetscVec )

    @chk ccall(
               (:DMLocalToLocalEndDefaultShell, $petsc_library),
               PetscErrorCode,
               (CDM, CVec, InsertMode, CVec),
               dm, g, mode, l,
              )


	return nothing
end 

"""
	DMShellSetDestroyContext(petsclib::PetscLibType,dm::PetscDM, destroyctx::external) 
set a function that destroys the context provided with `DMShellSetContext()`

Collective

Input Parameters:
- `dm`         - the `DM` to attach the `destroyctx()` function to
- `destroyctx` - the function that destroys the context

Level: advanced

-seealso: `DM`, `DMSHELL`, `DMShellSetContext()`, `DMShellGetContext()`

# External Links
$(_doc_external("Dm/DMShellSetDestroyContext"))
"""
function DMShellSetDestroyContext(petsclib::PetscLibType, dm::PetscDM, destroyctx::external) end

@for_petsc function DMShellSetDestroyContext(petsclib::$UnionPetscLib, dm::PetscDM, destroyctx::external )

    @chk ccall(
               (:DMShellSetDestroyContext, $petsc_library),
               PetscErrorCode,
               (CDM, external),
               dm, destroyctx,
              )


	return nothing
end 

"""
	DMShellSetContext(petsclib::PetscLibType,dm::PetscDM, ctx::Cvoid) 
set some data to be usable by this `DMSHELL`

Collective

Input Parameters:
- `dm`  - `DMSHELL`
- `ctx` - the context

Level: advanced

-seealso: `DM`, `DMSHELL`, `DMCreateMatrix()`, `DMShellGetContext()`

# External Links
$(_doc_external("Dm/DMShellSetContext"))
"""
function DMShellSetContext(petsclib::PetscLibType, dm::PetscDM, ctx::Cvoid) end

@for_petsc function DMShellSetContext(petsclib::$UnionPetscLib, dm::PetscDM, ctx::Cvoid )

    @chk ccall(
               (:DMShellSetContext, $petsc_library),
               PetscErrorCode,
               (CDM, Ptr{Cvoid}),
               dm, ctx,
              )


	return nothing
end 

"""
	DMShellGetContext(petsclib::PetscLibType,dm::PetscDM, ctx::Cvoid) 
Returns the user

Collective

Input Parameter:
- `dm` - `DMSHELL`

Output Parameter:
- `ctx` - the context

Level: advanced

-seealso: `DM`, `DMSHELL`, `DMCreateMatrix()`, `DMShellSetContext()`

# External Links
$(_doc_external("Dm/DMShellGetContext"))
"""
function DMShellGetContext(petsclib::PetscLibType, dm::PetscDM, ctx::Cvoid) end

@for_petsc function DMShellGetContext(petsclib::$UnionPetscLib, dm::PetscDM, ctx::Cvoid )

    @chk ccall(
               (:DMShellGetContext, $petsc_library),
               PetscErrorCode,
               (CDM, Ptr{Cvoid}),
               dm, ctx,
              )


	return nothing
end 

"""
	DMShellSetMatrix(petsclib::PetscLibType,dm::PetscDM, J::PetscMat) 
sets a template matrix associated with the `DMSHELL`

Collective

Input Parameters:
- `dm` - `DMSHELL`
- `J`  - template matrix

Level: advanced

-seealso: `DM`, `DMSHELL`, `DMCreateMatrix()`, `DMShellSetCreateMatrix()`, `DMShellSetContext()`, `DMShellGetContext()`

# External Links
$(_doc_external("Dm/DMShellSetMatrix"))
"""
function DMShellSetMatrix(petsclib::PetscLibType, dm::PetscDM, J::PetscMat) end

@for_petsc function DMShellSetMatrix(petsclib::$UnionPetscLib, dm::PetscDM, J::PetscMat )

    @chk ccall(
               (:DMShellSetMatrix, $petsc_library),
               PetscErrorCode,
               (CDM, CMat),
               dm, J,
              )


	return nothing
end 

"""
	DMShellSetCreateMatrix(petsclib::PetscLibType,dm::PetscDM, func::external) 
sets the routine to create a matrix associated with the `DMSHELL`

Logically Collective

Input Parameters:
- `dm`   - the `DMSHELL`
- `func` - the function to create a matrix

Level: advanced

-seealso: `DM`, `DMSHELL`, `DMCreateMatrix()`, `DMShellSetMatrix()`, `DMShellSetContext()`, `DMShellGetContext()`

# External Links
$(_doc_external("Dm/DMShellSetCreateMatrix"))
"""
function DMShellSetCreateMatrix(petsclib::PetscLibType, dm::PetscDM, func::external) end

@for_petsc function DMShellSetCreateMatrix(petsclib::$UnionPetscLib, dm::PetscDM, func::external )

    @chk ccall(
               (:DMShellSetCreateMatrix, $petsc_library),
               PetscErrorCode,
               (CDM, external),
               dm, func,
              )


	return nothing
end 

"""
	DMShellSetGlobalVector(petsclib::PetscLibType,dm::PetscDM, X::PetscVec) 
sets a template global vector associated with the `DMSHELL`

Logically Collective

Input Parameters:
- `dm` - `DMSHELL`
- `X`  - template vector

Level: advanced

-seealso: `DM`, `DMSHELL`, `DMCreateGlobalVector()`, `DMShellSetMatrix()`, `DMShellSetCreateGlobalVector()`

# External Links
$(_doc_external("Dm/DMShellSetGlobalVector"))
"""
function DMShellSetGlobalVector(petsclib::PetscLibType, dm::PetscDM, X::PetscVec) end

@for_petsc function DMShellSetGlobalVector(petsclib::$UnionPetscLib, dm::PetscDM, X::PetscVec )

    @chk ccall(
               (:DMShellSetGlobalVector, $petsc_library),
               PetscErrorCode,
               (CDM, CVec),
               dm, X,
              )


	return nothing
end 

"""
	DMShellGetGlobalVector(petsclib::PetscLibType,dm::PetscDM, X::PetscVec) 
Returns the template global vector associated with the `DMSHELL`, or `NULL` if it was not set

Not Collective

Input Parameters:
- `dm` - `DMSHELL`
- `X`  - template vector

Level: advanced

-seealso: `DM`, `DMSHELL`, `DMShellSetGlobalVector()`, `DMShellSetCreateGlobalVector()`, `DMCreateGlobalVector()`

# External Links
$(_doc_external("Dm/DMShellGetGlobalVector"))
"""
function DMShellGetGlobalVector(petsclib::PetscLibType, dm::PetscDM, X::PetscVec) end

@for_petsc function DMShellGetGlobalVector(petsclib::$UnionPetscLib, dm::PetscDM, X::PetscVec )
	X_ = Ref(X.ptr)

    @chk ccall(
               (:DMShellGetGlobalVector, $petsc_library),
               PetscErrorCode,
               (CDM, Ptr{CVec}),
               dm, X_,
              )

	X.ptr = C_NULL

	return nothing
end 

"""
	DMShellSetCreateGlobalVector(petsclib::PetscLibType,dm::PetscDM, func::external) 
sets the routine to create a global vector associated with the `DMSHELL`

Logically Collective

Input Parameters:
- `dm`   - the `DMSHELL`
- `func` - the creation routine

Level: advanced

-seealso: `DM`, `DMSHELL`, `DMShellSetGlobalVector()`, `DMShellSetCreateMatrix()`, `DMShellSetContext()`, `DMShellGetContext()`

# External Links
$(_doc_external("Dm/DMShellSetCreateGlobalVector"))
"""
function DMShellSetCreateGlobalVector(petsclib::PetscLibType, dm::PetscDM, func::external) end

@for_petsc function DMShellSetCreateGlobalVector(petsclib::$UnionPetscLib, dm::PetscDM, func::external )

    @chk ccall(
               (:DMShellSetCreateGlobalVector, $petsc_library),
               PetscErrorCode,
               (CDM, external),
               dm, func,
              )


	return nothing
end 

"""
	DMShellSetLocalVector(petsclib::PetscLibType,dm::PetscDM, X::PetscVec) 
sets a template local vector associated with the `DMSHELL`

Logically Collective

Input Parameters:
- `dm` - `DMSHELL`
- `X`  - template vector

Level: advanced

-seealso: `DM`, `DMSHELL`, `DMCreateLocalVector()`, `DMShellSetMatrix()`, `DMShellSetCreateLocalVector()`

# External Links
$(_doc_external("Dm/DMShellSetLocalVector"))
"""
function DMShellSetLocalVector(petsclib::PetscLibType, dm::PetscDM, X::PetscVec) end

@for_petsc function DMShellSetLocalVector(petsclib::$UnionPetscLib, dm::PetscDM, X::PetscVec )

    @chk ccall(
               (:DMShellSetLocalVector, $petsc_library),
               PetscErrorCode,
               (CDM, CVec),
               dm, X,
              )


	return nothing
end 

"""
	DMShellSetCreateLocalVector(petsclib::PetscLibType,dm::PetscDM, func::external) 
sets the routine to create a local vector associated with the `DMSHELL`

Logically Collective

Input Parameters:
- `dm`   - the `DMSHELL`
- `func` - the creation routine

Level: advanced

-seealso: `DM`, `DMSHELL`, `DMShellSetLocalVector()`, `DMShellSetCreateMatrix()`, `DMShellSetContext()`, `DMShellGetContext()`

# External Links
$(_doc_external("Dm/DMShellSetCreateLocalVector"))
"""
function DMShellSetCreateLocalVector(petsclib::PetscLibType, dm::PetscDM, func::external) end

@for_petsc function DMShellSetCreateLocalVector(petsclib::$UnionPetscLib, dm::PetscDM, func::external )

    @chk ccall(
               (:DMShellSetCreateLocalVector, $petsc_library),
               PetscErrorCode,
               (CDM, external),
               dm, func,
              )


	return nothing
end 

"""
	DMShellSetGlobalToLocal(petsclib::PetscLibType,dm::PetscDM, begin_::external, end_::external) 
Sets the routines used to perform a global to local scatter

Logically Collective

Input Parameters:
- `dm`    - the `DMSHELL`
- `begin_` - the routine that begins the global to local scatter
- `end_`   - the routine that ends the global to local scatter

Level: advanced

-seealso: `DM`, `DMSHELL`, `DMShellSetLocalToGlobal()`, `DMGlobalToLocalBeginDefaultShell()`, `DMGlobalToLocalEndDefaultShell()`

# External Links
$(_doc_external("Dm/DMShellSetGlobalToLocal"))
"""
function DMShellSetGlobalToLocal(petsclib::PetscLibType, dm::PetscDM, begin_::external, end_::external) end

@for_petsc function DMShellSetGlobalToLocal(petsclib::$UnionPetscLib, dm::PetscDM, begin_::external, end_::external )

    @chk ccall(
               (:DMShellSetGlobalToLocal, $petsc_library),
               PetscErrorCode,
               (CDM, external, external),
               dm, begin_, end_,
              )


	return nothing
end 

#=
"""
               PetscErrorCode,
               (CDM, external, external),
               dm, begin_, end_,
              )


	return nothing
end 
=#

"""
	DMShellSetLocalToGlobal(petsclib::PetscLibType,dm::PetscDM, begin_::external, end_::external) 
Sets the routines used to perform a local to global scatter

Logically Collective

Input Parameters:
- `dm`    - the `DMSHELL`
- `begin` - the routine that begins the local to global scatter
- `end`   - the routine that ends the local to global scatter

Level: advanced

-seealso: `DM`, `DMSHELL`, `DMShellSetGlobalToLocal()`

# External Links
$(_doc_external("Dm/DMShellSetLocalToGlobal"))
"""
function DMShellSetLocalToGlobal(petsclib::PetscLibType, dm::PetscDM, begin_::external, end_::external) end

@for_petsc function DMShellSetLocalToGlobal(petsclib::$UnionPetscLib, dm::PetscDM, begin_::external, end_::external )

    @chk ccall(
               (:DMShellSetLocalToGlobal, $petsc_library),
               PetscErrorCode,
               (CDM, external, external),
               dm, begin_, end_,
              )


	return nothing
end 

"""
	DMShellSetLocalToLocal(petsclib::PetscLibType,dm::PetscDM, begin_::external, end_::external) 
Sets the routines used to perform a local to local scatter

Logically Collective

Input Parameters:
- `dm`    - the `DMSHELL`
- `begin` - the routine that begins the local to local scatter
- `end`   - the routine that ends the local to local scatter

Level: advanced

-seealso: `DM`, `DMSHELL`, `DMShellSetGlobalToLocal()`, `DMLocalToLocalBeginDefaultShell()`, `DMLocalToLocalEndDefaultShell()`

# External Links
$(_doc_external("Dm/DMShellSetLocalToLocal"))
"""
function DMShellSetLocalToLocal(petsclib::PetscLibType, dm::PetscDM, begin_::external, end_::external) end

@for_petsc function DMShellSetLocalToLocal(petsclib::$UnionPetscLib, dm::PetscDM, begin_::external, end_::external )

    @chk ccall(
               (:DMShellSetLocalToLocal, $petsc_library),
               PetscErrorCode,
               (CDM, external, external),
               dm, begin_, end_,
              )


	return nothing
end 

"""
	DMShellSetGlobalToLocalVecScatter(petsclib::PetscLibType,dm::PetscDM, gtol::VecScatter) 
Sets a `VecScatter` context for global to local communication

Logically Collective

Input Parameters:
- `dm`   - the `DMSHELL`
- `gtol` - the global to local `VecScatter` context

Level: advanced

-seealso: `DM`, `DMSHELL`, `DMShellSetGlobalToLocal()`, `DMGlobalToLocalBeginDefaultShell()`, `DMGlobalToLocalEndDefaultShell()`

# External Links
$(_doc_external("Dm/DMShellSetGlobalToLocalVecScatter"))
"""
function DMShellSetGlobalToLocalVecScatter(petsclib::PetscLibType, dm::PetscDM, gtol::VecScatter) end

@for_petsc function DMShellSetGlobalToLocalVecScatter(petsclib::$UnionPetscLib, dm::PetscDM, gtol::VecScatter )

    @chk ccall(
               (:DMShellSetGlobalToLocalVecScatter, $petsc_library),
               PetscErrorCode,
               (CDM, VecScatter),
               dm, gtol,
              )


	return nothing
end 

"""
	DMShellSetLocalToGlobalVecScatter(petsclib::PetscLibType,dm::PetscDM, ltog::VecScatter) 
Sets a` VecScatter` context for local to global communication

Logically Collective

Input Parameters:
- `dm`   - the `DMSHELL`
- `ltog` - the local to global `VecScatter` context

Level: advanced

-seealso: `DM`, `DMSHELL`, `DMShellSetLocalToGlobal()`, `DMLocalToGlobalBeginDefaultShell()`, `DMLocalToGlobalEndDefaultShell()`

# External Links
$(_doc_external("Dm/DMShellSetLocalToGlobalVecScatter"))
"""
function DMShellSetLocalToGlobalVecScatter(petsclib::PetscLibType, dm::PetscDM, ltog::VecScatter) end

@for_petsc function DMShellSetLocalToGlobalVecScatter(petsclib::$UnionPetscLib, dm::PetscDM, ltog::VecScatter )

    @chk ccall(
               (:DMShellSetLocalToGlobalVecScatter, $petsc_library),
               PetscErrorCode,
               (CDM, VecScatter),
               dm, ltog,
              )


	return nothing
end 

"""
	DMShellSetLocalToLocalVecScatter(petsclib::PetscLibType,dm::PetscDM, ltol::VecScatter) 
Sets a `VecScatter` context for local to local communication

Logically Collective

Input Parameters:
- `dm`   - the `DMSHELL`
- `ltol` - the local to local `VecScatter` context

Level: advanced

-seealso: `DM`, `DMSHELL`, `DMShellSetLocalToLocal()`, `DMLocalToLocalBeginDefaultShell()`, `DMLocalToLocalEndDefaultShell()`

# External Links
$(_doc_external("Dm/DMShellSetLocalToLocalVecScatter"))
"""
function DMShellSetLocalToLocalVecScatter(petsclib::PetscLibType, dm::PetscDM, ltol::VecScatter) end

@for_petsc function DMShellSetLocalToLocalVecScatter(petsclib::$UnionPetscLib, dm::PetscDM, ltol::VecScatter )

    @chk ccall(
               (:DMShellSetLocalToLocalVecScatter, $petsc_library),
               PetscErrorCode,
               (CDM, VecScatter),
               dm, ltol,
              )


	return nothing
end 

"""
	DMShellSetCoarsen(petsclib::PetscLibType,dm::PetscDM, coarsen::external) 
Set the routine used to coarsen the `DMSHELL`

Logically Collective

Input Parameters:
- `dm`      - the `DMSHELL`
- `coarsen` - the routine that coarsens the `DM`

Level: advanced

-seealso: `DM`, `DMSHELL`, `DMShellSetRefine()`, `DMCoarsen()`, `DMShellGetCoarsen()`, `DMShellSetContext()`, `DMShellGetContext()`

# External Links
$(_doc_external("Dm/DMShellSetCoarsen"))
"""
function DMShellSetCoarsen(petsclib::PetscLibType, dm::PetscDM, coarsen::external) end

@for_petsc function DMShellSetCoarsen(petsclib::$UnionPetscLib, dm::PetscDM, coarsen::external )

    @chk ccall(
               (:DMShellSetCoarsen, $petsc_library),
               PetscErrorCode,
               (CDM, external),
               dm, coarsen,
              )


	return nothing
end 

"""
	DMShellSetRefine(petsclib::PetscLibType,dm::PetscDM, refine::external) 
Set the routine used to refine the `DMSHELL`

Logically Collective

Input Parameters:
- `dm`     - the `DMSHELL`
- `refine` - the routine that refines the `DM`

Level: advanced

-seealso: `DM`, `DMSHELL`, `DMShellSetCoarsen()`, `DMRefine()`, `DMShellGetRefine()`, `DMShellSetContext()`, `DMShellGetContext()`

# External Links
$(_doc_external("Dm/DMShellSetRefine"))
"""
function DMShellSetRefine(petsclib::PetscLibType, dm::PetscDM, refine::external) end

@for_petsc function DMShellSetRefine(petsclib::$UnionPetscLib, dm::PetscDM, refine::external )

    @chk ccall(
               (:DMShellSetRefine, $petsc_library),
               PetscErrorCode,
               (CDM, external),
               dm, refine,
              )


	return nothing
end 

"""
	DMShellSetCreateInterpolation(petsclib::PetscLibType,dm::PetscDM, interp::external) 
Set the routine used to create the interpolation operator

Logically Collective

Input Parameters:
- `dm`     - the `DMSHELL`
- `interp` - the routine to create the interpolation

Level: advanced

-seealso: `DM`, `DMSHELL`, `DMShellSetCreateInjection()`, `DMCreateInterpolation()`, `DMShellGetCreateInterpolation()`, `DMShellSetCreateRestriction()`, `DMShellSetContext()`, `DMShellGetContext()`

# External Links
$(_doc_external("Dm/DMShellSetCreateInterpolation"))
"""
function DMShellSetCreateInterpolation(petsclib::PetscLibType, dm::PetscDM, interp::external) end

@for_petsc function DMShellSetCreateInterpolation(petsclib::$UnionPetscLib, dm::PetscDM, interp::external )

    @chk ccall(
               (:DMShellSetCreateInterpolation, $petsc_library),
               PetscErrorCode,
               (CDM, external),
               dm, interp,
              )


	return nothing
end 

"""
	DMShellSetCreateRestriction(petsclib::PetscLibType,dm::PetscDM, restriction::external) 
Set the routine used to create the restriction operator

Logically Collective

Input Parameters:
- `dm`          - the `DMSHELL`
- `restriction` - the routine to create the restriction

Level: advanced

-seealso: `DM`, `DMSHELL`, `DMShellSetCreateInjection()`, `DMCreateInterpolation()`, `DMShellGetCreateRestriction()`, `DMShellSetContext()`, `DMShellGetContext()`

# External Links
$(_doc_external("Dm/DMShellSetCreateRestriction"))
"""
function DMShellSetCreateRestriction(petsclib::PetscLibType, dm::PetscDM, restriction::external) end

@for_petsc function DMShellSetCreateRestriction(petsclib::$UnionPetscLib, dm::PetscDM, restriction::external )

    @chk ccall(
               (:DMShellSetCreateRestriction, $petsc_library),
               PetscErrorCode,
               (CDM, external),
               dm, restriction,
              )


	return nothing
end 

"""
	DMShellSetCreateInjection(petsclib::PetscLibType,dm::PetscDM, inject::external) 
Set the routine used to create the injection operator

Logically Collective

Input Parameters:
- `dm`     - the `DMSHELL`
- `inject` - the routine to create the injection

Level: advanced

-seealso: `DM`, `DMSHELL`, `DMShellSetCreateInterpolation()`, `DMCreateInjection()`, `DMShellGetCreateInjection()`, `DMShellSetContext()`, `DMShellGetContext()`

# External Links
$(_doc_external("Dm/DMShellSetCreateInjection"))
"""
function DMShellSetCreateInjection(petsclib::PetscLibType, dm::PetscDM, inject::external) end

@for_petsc function DMShellSetCreateInjection(petsclib::$UnionPetscLib, dm::PetscDM, inject::external )

    @chk ccall(
               (:DMShellSetCreateInjection, $petsc_library),
               PetscErrorCode,
               (CDM, external),
               dm, inject,
              )


	return nothing
end 

"""
	DMShellSetCreateFieldDecomposition(petsclib::PetscLibType,dm::PetscDM, decomp::external) 
Set the routine used to create a decomposition of fields for the `DMSHELL`

Logically Collective

Input Parameters:
- `dm`     - the `DMSHELL`
- `decomp` - the routine to create the decomposition

Level: advanced

-seealso: `DM`, `DMSHELL`, `DMCreateFieldDecomposition()`, `DMShellSetContext()`, `DMShellGetContext()`

# External Links
$(_doc_external("Dm/DMShellSetCreateFieldDecomposition"))
"""
function DMShellSetCreateFieldDecomposition(petsclib::PetscLibType, dm::PetscDM, decomp::external) end

@for_petsc function DMShellSetCreateFieldDecomposition(petsclib::$UnionPetscLib, dm::PetscDM, decomp::external )

    @chk ccall(
               (:DMShellSetCreateFieldDecomposition, $petsc_library),
               PetscErrorCode,
               (CDM, external),
               dm, decomp,
              )


	return nothing
end 

"""
	DMShellSetCreateDomainDecomposition(petsclib::PetscLibType,dm::PetscDM, decomp::external) 
Set the routine used to create a domain decomposition for the `DMSHELL`

Logically Collective

Input Parameters:
- `dm`     - the `DMSHELL`
- `decomp` - the routine to create the decomposition

Level: advanced

-seealso: `DM`, `DMSHELL`, `DMCreateDomainDecomposition()`, `DMShellSetContext()`, `DMShellGetContext()`

# External Links
$(_doc_external("Dm/DMShellSetCreateDomainDecomposition"))
"""
function DMShellSetCreateDomainDecomposition(petsclib::PetscLibType, dm::PetscDM, decomp::external) end

@for_petsc function DMShellSetCreateDomainDecomposition(petsclib::$UnionPetscLib, dm::PetscDM, decomp::external )

    @chk ccall(
               (:DMShellSetCreateDomainDecomposition, $petsc_library),
               PetscErrorCode,
               (CDM, external),
               dm, decomp,
              )


	return nothing
end 

"""
	DMShellSetCreateDomainDecompositionScatters(petsclib::PetscLibType,dm::PetscDM, scatter::external) 
Set the routine used to create the scatter contexts for domain decomposition with a `DMSHELL`

Logically Collective

Input Parameters:
- `dm`      - the `DMSHELL`
- `scatter` - the routine to create the scatters

Level: advanced

-seealso: `DM`, `DMSHELL`, `DMCreateDomainDecompositionScatters()`, `DMShellSetContext()`, `DMShellGetContext()`

# External Links
$(_doc_external("Dm/DMShellSetCreateDomainDecompositionScatters"))
"""
function DMShellSetCreateDomainDecompositionScatters(petsclib::PetscLibType, dm::PetscDM, scatter::external) end

@for_petsc function DMShellSetCreateDomainDecompositionScatters(petsclib::$UnionPetscLib, dm::PetscDM, scatter::external )

    @chk ccall(
               (:DMShellSetCreateDomainDecompositionScatters, $petsc_library),
               PetscErrorCode,
               (CDM, external),
               dm, scatter,
              )


	return nothing
end 

"""
	DMShellSetCreateSubDM(petsclib::PetscLibType,dm::PetscDM, subdm::external) 
Set the routine used to create a sub `DM` from the `DMSHELL`

Logically Collective

Input Parameters:
- `dm`    - the `DMSHELL`
- `subdm` - the routine to create the decomposition

Level: advanced

-seealso: `DM`, `DMSHELL`, `DMCreateSubDM()`, `DMShellGetCreateSubDM()`, `DMShellSetContext()`, `DMShellGetContext()`

# External Links
$(_doc_external("Dm/DMShellSetCreateSubDM"))
"""
function DMShellSetCreateSubDM(petsclib::PetscLibType, dm::PetscDM, subdm::external) end

@for_petsc function DMShellSetCreateSubDM(petsclib::$UnionPetscLib, dm::PetscDM, subdm::external )

    @chk ccall(
               (:DMShellSetCreateSubDM, $petsc_library),
               PetscErrorCode,
               (CDM, external),
               dm, subdm,
              )


	return nothing
end 

"""
	dm::PetscDM = DMShellCreate(petsclib::PetscLibType,comm::MPI_Comm) 
Creates a `DMSHELL` object, used to manage user

Collective

Input Parameter:
- `comm` - the processors that will share the global vector

Output Parameter:
- `dm` - the `DMSHELL`

Level: advanced

-seealso: `DMDestroy()`, `DMCreateGlobalVector()`, `DMCreateLocalVector()`, `DMShellSetContext()`, `DMShellGetContext()`

# External Links
$(_doc_external("Dm/DMShellCreate"))
"""
function DMShellCreate(petsclib::PetscLibType, comm::MPI_Comm) end

@for_petsc function DMShellCreate(petsclib::$UnionPetscLib, comm::MPI_Comm )
	dm_ = Ref{CDM}()

    @chk ccall(
               (:DMShellCreate, $petsc_library),
               PetscErrorCode,
               (MPI_Comm, Ptr{CDM}),
               comm, dm_,
              )

	dm = PetscDM(dm_[], petsclib)

	return dm
end 

"""
	DMNetworkGetPlex(petsclib::PetscLibType,dm::PetscDM, plexdm::PetscDM) 
Gets the `DMPLEX` associated with this `DMNETWORK`

Not Collective

Input Parameter:
- `dm` - the `DMNETWORK` object

Output Parameter:
- `plexdm` - the `DMPLEX` object

Level: advanced

-seealso: `DM`, `DMNETWORK`, `DMPLEX`, `DMNetworkCreate()`

# External Links
$(_doc_external("Dm/DMNetworkGetPlex"))
"""
function DMNetworkGetPlex(petsclib::PetscLibType, dm::PetscDM, plexdm::PetscDM) end

@for_petsc function DMNetworkGetPlex(petsclib::$UnionPetscLib, dm::PetscDM, plexdm::PetscDM )
	plexdm_ = Ref(plexdm.ptr)

    @chk ccall(
               (:DMNetworkGetPlex, $petsc_library),
               PetscErrorCode,
               (CDM, Ptr{CDM}),
               dm, plexdm_,
              )

	plexdm.ptr = C_NULL

	return nothing
end 

"""
	nsubnet::PetscInt,Nsubnet::PetscInt = DMNetworkGetNumSubNetworks(petsclib::PetscLibType,dm::PetscDM) 
Gets the number of subnetworks

Not Collective

Input Parameter:
- `dm` - the `DMNETWORK` object

Output Parameters:
- `nsubnet` - local number of subnetworks, pass `NULL` if not needed
- `Nsubnet` - global number of subnetworks, pass `NULL` if not needed

Level: beginner

-seealso: `DM`, `DMNETWORK`, `DMNetworkCreate()`, `DMNetworkSetNumSubNetworks()`

# External Links
$(_doc_external("Dm/DMNetworkGetNumSubNetworks"))
"""
function DMNetworkGetNumSubNetworks(petsclib::PetscLibType, dm::PetscDM) end

@for_petsc function DMNetworkGetNumSubNetworks(petsclib::$UnionPetscLib, dm::PetscDM )
	nsubnet_ = Ref{$PetscInt}()
	Nsubnet_ = Ref{$PetscInt}()

    @chk ccall(
               (:DMNetworkGetNumSubNetworks, $petsc_library),
               PetscErrorCode,
               (CDM, Ptr{$PetscInt}, Ptr{$PetscInt}),
               dm, nsubnet_, Nsubnet_,
              )

	nsubnet = nsubnet_[]
	Nsubnet = Nsubnet_[]

	return nsubnet,Nsubnet
end 

"""
	DMNetworkSetNumSubNetworks(petsclib::PetscLibType,dm::PetscDM, nsubnet::PetscInt, Nsubnet::PetscInt) 
Sets the number of subnetworks

Collective

Input Parameters:
- `dm`      - the `DMNETWORK` object
- `nsubnet` - local number of subnetworks
- `Nsubnet` - global number of subnetworks

Level: beginner

-seealso: `DM`, `DMNETWORK`, `DMNetworkCreate()`, `DMNetworkGetNumSubNetworks()`

# External Links
$(_doc_external("Dm/DMNetworkSetNumSubNetworks"))
"""
function DMNetworkSetNumSubNetworks(petsclib::PetscLibType, dm::PetscDM, nsubnet::PetscInt, Nsubnet::PetscInt) end

@for_petsc function DMNetworkSetNumSubNetworks(petsclib::$UnionPetscLib, dm::PetscDM, nsubnet::$PetscInt, Nsubnet::$PetscInt )

    @chk ccall(
               (:DMNetworkSetNumSubNetworks, $petsc_library),
               PetscErrorCode,
               (CDM, $PetscInt, $PetscInt),
               dm, nsubnet, Nsubnet,
              )


	return nothing
end 

"""
	netnum::PetscInt = DMNetworkAddSubnetwork(petsclib::PetscLibType,dm::PetscDM, name::String, ne::PetscInt, edgelist::Vector{PetscInt}) 
Add a subnetwork

Collective

Input Parameters:
- `dm`       - the `DMNETWORK`  object
- `name`     - name of the subnetwork
- `ne`       - number of local edges of this subnetwork
- `edgelist` - list of edges for this subnetwork, this is a one dimensional array with pairs of entries being the two vertices (in global numbering
of the vertices) of each edge: [first vertex of first edge, second vertex of first edge, first vertex of second edge, second vertex of second edge, etc.]

Output Parameter:
- `netnum` - global index of the subnetwork

Level: beginner

-seealso: `DM`, `DMNETWORK`, `DMNetworkCreate()`, `DMNetworkSetNumSubnetworks()`

# External Links
$(_doc_external("Dm/DMNetworkAddSubnetwork"))
"""
function DMNetworkAddSubnetwork(petsclib::PetscLibType, dm::PetscDM, name::String, ne::PetscInt, edgelist::Vector{PetscInt}) end

@for_petsc function DMNetworkAddSubnetwork(petsclib::$UnionPetscLib, dm::PetscDM, name::String, ne::$PetscInt, edgelist::Vector{$PetscInt} )
	netnum_ = Ref{$PetscInt}()

    @chk ccall(
               (:DMNetworkAddSubnetwork, $petsc_library),
               PetscErrorCode,
               (CDM, Ptr{Cchar}, $PetscInt, Ptr{$PetscInt}, Ptr{$PetscInt}),
               dm, name, ne, edgelist, netnum_,
              )

	netnum = netnum_[]

	return netnum
end 

"""
	gidx::PetscInt,n::PetscInt,sv::Vector{PetscInt} = DMNetworkSharedVertexGetInfo(petsclib::PetscLibType,dm::PetscDM, v::PetscInt) 
Get info of a shared vertex struct, see petsc/private/dmnetworkimpl.h

Not Collective

Input Parameters:
- `dm` - the `DM` object
- `v`  - vertex point

Output Parameters:
- `gidx` - global number of this shared vertex in the internal dmplex, pass `NULL` if not needed
- `n`    - number of subnetworks that share this vertex, pass `NULL` if not needed
- `sv`   - array of size `n`: sv[2*i,2*i+1]=(net[i], idx[i]), i=0,...,n-1, pass `NULL` if not needed

Level: intermediate

-seealso: `DM`, `DMNETWORK`, `DMNetworkGetSharedVertices()`

# External Links
$(_doc_external("Dm/DMNetworkSharedVertexGetInfo"))
"""
function DMNetworkSharedVertexGetInfo(petsclib::PetscLibType, dm::PetscDM, v::PetscInt) end

@for_petsc function DMNetworkSharedVertexGetInfo(petsclib::$UnionPetscLib, dm::PetscDM, v::$PetscInt )
	gidx_ = Ref{$PetscInt}()
	n_ = Ref{$PetscInt}()
	sv_ = Ref{Ptr{$PetscInt}}()

    @chk ccall(
               (:DMNetworkSharedVertexGetInfo, $petsc_library),
               PetscErrorCode,
               (CDM, $PetscInt, Ptr{$PetscInt}, Ptr{$PetscInt}, Ptr{Ptr{$PetscInt}}),
               dm, v, gidx_, n_, sv_,
              )

	gidx = gidx_[]
	n = n_[]
	sv = unsafe_wrap(Array, sv_[], VecGetLocalSize(petsclib, x); own = false)

	return gidx,n,sv
end 

"""
	DMNetworkLayoutSetUp(petsclib::PetscLibType,dm::PetscDM) 
Sets up the bare layout (graph) for the network

Not Collective

Input Parameter:
- `dm` - the `DMNETWORK` object

Level: beginner

-seealso: `DM`, `DMNETWORK`, `DMNetworkSetNumSubNetworks()`, `DMNetworkAddSubnetwork()`

# External Links
$(_doc_external("Dm/DMNetworkLayoutSetUp"))
"""
function DMNetworkLayoutSetUp(petsclib::PetscLibType, dm::PetscDM) end

@for_petsc function DMNetworkLayoutSetUp(petsclib::$UnionPetscLib, dm::PetscDM )

    @chk ccall(
               (:DMNetworkLayoutSetUp, $petsc_library),
               PetscErrorCode,
               (CDM,),
               dm,
              )


	return nothing
end 

"""
	nv::PetscInt,ne::PetscInt,vtx::Vector{PetscInt},edge::Vector{PetscInt} = DMNetworkGetSubnetwork(petsclib::PetscLibType,dm::PetscDM, netnum::PetscInt) 
Returns the information about a requested subnetwork

Not Collective

Input Parameters:
- `dm`     - the `DMNETWORK` object
- `netnum` - the global index of the subnetwork

Output Parameters:
- `nv`   - number of vertices (local)
- `ne`   - number of edges (local)
- `vtx`  - local vertices of the subnetwork
- `edge` - local edges of the subnetwork

Level: intermediate

-seealso: `DM`, `DMNETWORK`, `DMNetworkCreate()`, `DMNetworkAddSubnetwork()`, `DMNetworkLayoutSetUp()`

# External Links
$(_doc_external("Dm/DMNetworkGetSubnetwork"))
"""
function DMNetworkGetSubnetwork(petsclib::PetscLibType, dm::PetscDM, netnum::PetscInt) end

@for_petsc function DMNetworkGetSubnetwork(petsclib::$UnionPetscLib, dm::PetscDM, netnum::$PetscInt )
	nv_ = Ref{$PetscInt}()
	ne_ = Ref{$PetscInt}()
	vtx_ = Ref{Ptr{$PetscInt}}()
	edge_ = Ref{Ptr{$PetscInt}}()

    @chk ccall(
               (:DMNetworkGetSubnetwork, $petsc_library),
               PetscErrorCode,
               (CDM, $PetscInt, Ptr{$PetscInt}, Ptr{$PetscInt}, Ptr{Ptr{$PetscInt}}, Ptr{Ptr{$PetscInt}}),
               dm, netnum, nv_, ne_, vtx_, edge_,
              )

	nv = nv_[]
	ne = ne_[]
	vtx = unsafe_wrap(Array, vtx_[], VecGetLocalSize(petsclib, x); own = false)
	edge = unsafe_wrap(Array, edge_[], VecGetLocalSize(petsclib, x); own = false)

	return nv,ne,vtx,edge
end 

"""
	DMNetworkAddSharedVertices(petsclib::PetscLibType,dm::PetscDM, anetnum::PetscInt, bnetnum::PetscInt, nsvtx::PetscInt, asvtx::Vector{PetscInt}, bsvtx::Vector{PetscInt}) 
Add shared vertices that connect two given subnetworks

Collective

Input Parameters:
- `dm`      - the `DMNETWORK` object
- `anetnum` - first subnetwork global numbering returned by `DMNetworkAddSubnetwork()`
- `bnetnum` - second subnetwork global numbering returned by `DMNetworkAddSubnetwork()`
- `nsvtx`   - number of vertices that are shared by the two subnetworks
- `asvtx`   - vertex index in the first subnetwork
- `bsvtx`   - vertex index in the second subnetwork

Level: beginner

-seealso: `DM`, `DMNETWORK`, `DMNetworkCreate()`, `DMNetworkAddSubnetwork()`, `DMNetworkGetSharedVertices()`

# External Links
$(_doc_external("Dm/DMNetworkAddSharedVertices"))
"""
function DMNetworkAddSharedVertices(petsclib::PetscLibType, dm::PetscDM, anetnum::PetscInt, bnetnum::PetscInt, nsvtx::PetscInt, asvtx::Vector{PetscInt}, bsvtx::Vector{PetscInt}) end

@for_petsc function DMNetworkAddSharedVertices(petsclib::$UnionPetscLib, dm::PetscDM, anetnum::$PetscInt, bnetnum::$PetscInt, nsvtx::$PetscInt, asvtx::Vector{$PetscInt}, bsvtx::Vector{$PetscInt} )

    @chk ccall(
               (:DMNetworkAddSharedVertices, $petsc_library),
               PetscErrorCode,
               (CDM, $PetscInt, $PetscInt, $PetscInt, Ptr{$PetscInt}, Ptr{$PetscInt}),
               dm, anetnum, bnetnum, nsvtx, asvtx, bsvtx,
              )


	return nothing
end 

"""
	nsv::PetscInt,svtx::Vector{PetscInt} = DMNetworkGetSharedVertices(petsclib::PetscLibType,dm::PetscDM) 
Returns the info for the shared vertices

Not Collective

Input Parameter:
- `dm` - the `DMNETWORK` object

Output Parameters:
- `nsv`  - number of local shared vertices, pass `NULL` if not needed
- `svtx` - local shared vertices, pass `NULL` if not needed

Level: intermediate

-seealso: `DM`, `DMNETWORK`, `DMNetworkGetSubnetwork()`, `DMNetworkLayoutSetUp()`, `DMNetworkAddSharedVertices()`

# External Links
$(_doc_external("Dm/DMNetworkGetSharedVertices"))
"""
function DMNetworkGetSharedVertices(petsclib::PetscLibType, dm::PetscDM) end

@for_petsc function DMNetworkGetSharedVertices(petsclib::$UnionPetscLib, dm::PetscDM )
	nsv_ = Ref{$PetscInt}()
	svtx_ = Ref{Ptr{$PetscInt}}()

    @chk ccall(
               (:DMNetworkGetSharedVertices, $petsc_library),
               PetscErrorCode,
               (CDM, Ptr{$PetscInt}, Ptr{Ptr{$PetscInt}}),
               dm, nsv_, svtx_,
              )

	nsv = nsv_[]
	svtx = unsafe_wrap(Array, svtx_[], VecGetLocalSize(petsclib, x); own = false)

	return nsv,svtx
end 

"""
	key::PetscInt = DMNetworkRegisterComponent(petsclib::PetscLibType,dm::PetscDM, name::String, size::Csize_t) 
Registers the network component

Logically Collective

Input Parameters:
- `dm`   - the `DMNETWORK` object
- `name` - the component name
- `size` - the storage size in bytes for this component data

Output Parameter:
- `key` - an integer key that defines the component

Level: beginner

-seealso: `DM`, `DMNETWORK`, `DMNetworkCreate()`, `DMNetworkLayoutSetUp()`

# External Links
$(_doc_external("Dm/DMNetworkRegisterComponent"))
"""
function DMNetworkRegisterComponent(petsclib::PetscLibType, dm::PetscDM, name::String, size::Csize_t) end

@for_petsc function DMNetworkRegisterComponent(petsclib::$UnionPetscLib, dm::PetscDM, name::String, size::Csize_t )
	key_ = Ref{$PetscInt}()

    @chk ccall(
               (:DMNetworkRegisterComponent, $petsc_library),
               PetscErrorCode,
               (CDM, Ptr{Cchar}, Csize_t, Ptr{$PetscInt}),
               dm, name, size, key_,
              )

	key = key_[]

	return key
end 

"""
	nVertices::PetscInt,NVertices::PetscInt = DMNetworkGetNumVertices(petsclib::PetscLibType,dm::PetscDM) 
Get the local and global number of vertices for the entire network.

Not Collective

Input Parameter:
- `dm` - the `DMNETWORK` object

Output Parameters:
- `nVertices` - the local number of vertices, pass `NULL` if not needed
- `NVertices` - the global number of vertices, pass `NULL` if not needed

Level: beginner

-seealso: `DM`, `DMNETWORK`, `DMNetworkGetNumEdges()`

# External Links
$(_doc_external("Dm/DMNetworkGetNumVertices"))
"""
function DMNetworkGetNumVertices(petsclib::PetscLibType, dm::PetscDM) end

@for_petsc function DMNetworkGetNumVertices(petsclib::$UnionPetscLib, dm::PetscDM )
	nVertices_ = Ref{$PetscInt}()
	NVertices_ = Ref{$PetscInt}()

    @chk ccall(
               (:DMNetworkGetNumVertices, $petsc_library),
               PetscErrorCode,
               (CDM, Ptr{$PetscInt}, Ptr{$PetscInt}),
               dm, nVertices_, NVertices_,
              )

	nVertices = nVertices_[]
	NVertices = NVertices_[]

	return nVertices,NVertices
end 

"""
	nEdges::PetscInt,NEdges::PetscInt = DMNetworkGetNumEdges(petsclib::PetscLibType,dm::PetscDM) 
Get the local and global number of edges for the entire network.

Not Collective

Input Parameter:
- `dm` - the `DMNETWORK` object

Output Parameters:
- `nEdges` - the local number of edges, pass `NULL` if not needed
- `NEdges` - the global number of edges, pass `NULL` if not needed

Level: beginner

-seealso: `DM`, `DMNETWORK`, `DMNetworkGetNumVertices()`

# External Links
$(_doc_external("Dm/DMNetworkGetNumEdges"))
"""
function DMNetworkGetNumEdges(petsclib::PetscLibType, dm::PetscDM) end

@for_petsc function DMNetworkGetNumEdges(petsclib::$UnionPetscLib, dm::PetscDM )
	nEdges_ = Ref{$PetscInt}()
	NEdges_ = Ref{$PetscInt}()

    @chk ccall(
               (:DMNetworkGetNumEdges, $petsc_library),
               PetscErrorCode,
               (CDM, Ptr{$PetscInt}, Ptr{$PetscInt}),
               dm, nEdges_, NEdges_,
              )

	nEdges = nEdges_[]
	NEdges = NEdges_[]

	return nEdges,NEdges
end 

"""
	vStart::PetscInt,vEnd::PetscInt = DMNetworkGetVertexRange(petsclib::PetscLibType,dm::PetscDM) 
Get the bounds [start, end) for the local vertices

Not Collective

Input Parameter:
- `dm` - the `DMNETWORK` object

Output Parameters:
- `vStart` - the first vertex point, pass `NULL` if not needed
- `vEnd`   - one beyond the last vertex point, pass `NULL` if not needed

Level: beginner

-seealso: `DM`, `DMNETWORK`, `DMNetworkGetEdgeRange()`

# External Links
$(_doc_external("Dm/DMNetworkGetVertexRange"))
"""
function DMNetworkGetVertexRange(petsclib::PetscLibType, dm::PetscDM) end

@for_petsc function DMNetworkGetVertexRange(petsclib::$UnionPetscLib, dm::PetscDM )
	vStart_ = Ref{$PetscInt}()
	vEnd_ = Ref{$PetscInt}()

    @chk ccall(
               (:DMNetworkGetVertexRange, $petsc_library),
               PetscErrorCode,
               (CDM, Ptr{$PetscInt}, Ptr{$PetscInt}),
               dm, vStart_, vEnd_,
              )

	vStart = vStart_[]
	vEnd = vEnd_[]

	return vStart,vEnd
end 

"""
	eStart::PetscInt,eEnd::PetscInt = DMNetworkGetEdgeRange(petsclib::PetscLibType,dm::PetscDM) 
Get the bounds [start, end) for the local edges

Not Collective

Input Parameter:
- `dm` - the `DMNETWORK` object

Output Parameters:
- `eStart` - The first edge point, pass `NULL` if not needed
- `eEnd`   - One beyond the last edge point, pass `NULL` if not needed

Level: beginner

-seealso: `DM`, `DMNETWORK`, `DMNetworkGetVertexRange()`

# External Links
$(_doc_external("Dm/DMNetworkGetEdgeRange"))
"""
function DMNetworkGetEdgeRange(petsclib::PetscLibType, dm::PetscDM) end

@for_petsc function DMNetworkGetEdgeRange(petsclib::$UnionPetscLib, dm::PetscDM )
	eStart_ = Ref{$PetscInt}()
	eEnd_ = Ref{$PetscInt}()

    @chk ccall(
               (:DMNetworkGetEdgeRange, $petsc_library),
               PetscErrorCode,
               (CDM, Ptr{$PetscInt}, Ptr{$PetscInt}),
               dm, eStart_, eEnd_,
              )

	eStart = eStart_[]
	eEnd = eEnd_[]

	return eStart,eEnd
end 

"""
	index::PetscInt = DMNetworkGetGlobalEdgeIndex(petsclib::PetscLibType,dm::PetscDM, p::PetscInt) 
Get the global numbering for the edge on the network

Not Collective

Input Parameters:
- `dm` - `DMNETWORK` object
- `p`  - edge point

Output Parameter:
- `index` - the global numbering for the edge

Level: intermediate

-seealso: `DM`, `DMNETWORK`, `DMNetworkGetGlobalVertexIndex()`

# External Links
$(_doc_external("Dm/DMNetworkGetGlobalEdgeIndex"))
"""
function DMNetworkGetGlobalEdgeIndex(petsclib::PetscLibType, dm::PetscDM, p::PetscInt) end

@for_petsc function DMNetworkGetGlobalEdgeIndex(petsclib::$UnionPetscLib, dm::PetscDM, p::$PetscInt )
	index_ = Ref{$PetscInt}()

    @chk ccall(
               (:DMNetworkGetGlobalEdgeIndex, $petsc_library),
               PetscErrorCode,
               (CDM, $PetscInt, Ptr{$PetscInt}),
               dm, p, index_,
              )

	index = index_[]

	return index
end 

"""
	index::PetscInt = DMNetworkGetGlobalVertexIndex(petsclib::PetscLibType,dm::PetscDM, p::PetscInt) 
Get the global numbering for the vertex on the network

Not Collective

Input Parameters:
- `dm` - `DMNETWORK` object
- `p`  - vertex point

Output Parameter:
- `index` - the global numbering for the vertex

Level: intermediate

-seealso: `DM`, `DMNETWORK`, `DMNetworkGetGlobalEdgeIndex()`, `DMNetworkGetLocalVertexIndex()`

# External Links
$(_doc_external("Dm/DMNetworkGetGlobalVertexIndex"))
"""
function DMNetworkGetGlobalVertexIndex(petsclib::PetscLibType, dm::PetscDM, p::PetscInt) end

@for_petsc function DMNetworkGetGlobalVertexIndex(petsclib::$UnionPetscLib, dm::PetscDM, p::$PetscInt )
	index_ = Ref{$PetscInt}()

    @chk ccall(
               (:DMNetworkGetGlobalVertexIndex, $petsc_library),
               PetscErrorCode,
               (CDM, $PetscInt, Ptr{$PetscInt}),
               dm, p, index_,
              )

	index = index_[]

	return index
end 

"""
	numcomponents::PetscInt = DMNetworkGetNumComponents(petsclib::PetscLibType,dm::PetscDM, p::PetscInt) 
Get the number of components at a vertex/edge

Not Collective

Input Parameters:
- `dm` - the `DMNETWORK` object
- `p`  - vertex/edge point

Output Parameter:
- `numcomponents` - Number of components at the vertex/edge

Level: beginner

-seealso: `DM`, `DMNETWORK`, `DMNetworkRegisterComponent()`, `DMNetworkAddComponent()`

# External Links
$(_doc_external("Dm/DMNetworkGetNumComponents"))
"""
function DMNetworkGetNumComponents(petsclib::PetscLibType, dm::PetscDM, p::PetscInt) end

@for_petsc function DMNetworkGetNumComponents(petsclib::$UnionPetscLib, dm::PetscDM, p::$PetscInt )
	numcomponents_ = Ref{$PetscInt}()

    @chk ccall(
               (:DMNetworkGetNumComponents, $petsc_library),
               PetscErrorCode,
               (CDM, $PetscInt, Ptr{$PetscInt}),
               dm, p, numcomponents_,
              )

	numcomponents = numcomponents_[]

	return numcomponents
end 

"""
	offset::PetscInt = DMNetworkGetLocalVecOffset(petsclib::PetscLibType,dm::PetscDM, p::PetscInt, compnum::PetscInt) 
Get the offset for accessing the variables associated with a component at the given vertex/edge from the local vector

Not Collective

Input Parameters:
- `dm`      - the `DMNETWORK` object
- `p`       - the edge or vertex point
- `compnum` - component number; use ALL_COMPONENTS if no specific component is requested

Output Parameter:
- `offset` - the local offset

Level: intermediate

-seealso: `DM`, `DMNETWORK`, `DMGetLocalVector()`, `DMNetworkGetComponent()`, `DMNetworkGetGlobalVecOffset()`, `DMCreateGlobalVector()`, `VecGetArray()`, `VecSetValuesLocal()`, `MatSetValuesLocal()`

# External Links
$(_doc_external("Dm/DMNetworkGetLocalVecOffset"))
"""
function DMNetworkGetLocalVecOffset(petsclib::PetscLibType, dm::PetscDM, p::PetscInt, compnum::PetscInt) end

@for_petsc function DMNetworkGetLocalVecOffset(petsclib::$UnionPetscLib, dm::PetscDM, p::$PetscInt, compnum::$PetscInt )
	offset_ = Ref{$PetscInt}()

    @chk ccall(
               (:DMNetworkGetLocalVecOffset, $petsc_library),
               PetscErrorCode,
               (CDM, $PetscInt, $PetscInt, Ptr{$PetscInt}),
               dm, p, compnum, offset_,
              )

	offset = offset_[]

	return offset
end 

"""
	offsetg::PetscInt = DMNetworkGetGlobalVecOffset(petsclib::PetscLibType,dm::PetscDM, p::PetscInt, compnum::PetscInt) 
Get the global offset for accessing the variables associated with a component for the given vertex/edge from the global vector

Not Collective

Input Parameters:
- `dm`      - the `DMNETWORK` object
- `p`       - the edge or vertex point
- `compnum` - component number; use ALL_COMPONENTS if no specific component is requested

Output Parameter:
- `offsetg` - the global offset

Level: intermediate

-seealso: `DM`, `DMNETWORK`, `DMNetworkGetLocalVecOffset()`, `DMGetGlobalVector()`, `DMNetworkGetComponent()`, `DMCreateGlobalVector()`, `VecGetArray()`, `VecSetValues()`, `MatSetValues()`

# External Links
$(_doc_external("Dm/DMNetworkGetGlobalVecOffset"))
"""
function DMNetworkGetGlobalVecOffset(petsclib::PetscLibType, dm::PetscDM, p::PetscInt, compnum::PetscInt) end

@for_petsc function DMNetworkGetGlobalVecOffset(petsclib::$UnionPetscLib, dm::PetscDM, p::$PetscInt, compnum::$PetscInt )
	offsetg_ = Ref{$PetscInt}()

    @chk ccall(
               (:DMNetworkGetGlobalVecOffset, $petsc_library),
               PetscErrorCode,
               (CDM, $PetscInt, $PetscInt, Ptr{$PetscInt}),
               dm, p, compnum, offsetg_,
              )

	offsetg = offsetg_[]

	return offsetg
end 

"""
	offset::PetscInt = DMNetworkGetEdgeOffset(petsclib::PetscLibType,dm::PetscDM, p::PetscInt) 
Get the offset for accessing the variables associated with the given edge from the local subvector

Not Collective

Input Parameters:
- `dm` - the `DMNETWORK` object
- `p`  - the edge point

Output Parameter:
- `offset` - the offset

Level: intermediate

-seealso: `DM`, `DMNETWORK`, `DMNetworkGetLocalVecOffset()`, `DMGetLocalVector()`

# External Links
$(_doc_external("Dm/DMNetworkGetEdgeOffset"))
"""
function DMNetworkGetEdgeOffset(petsclib::PetscLibType, dm::PetscDM, p::PetscInt) end

@for_petsc function DMNetworkGetEdgeOffset(petsclib::$UnionPetscLib, dm::PetscDM, p::$PetscInt )
	offset_ = Ref{$PetscInt}()

    @chk ccall(
               (:DMNetworkGetEdgeOffset, $petsc_library),
               PetscErrorCode,
               (CDM, $PetscInt, Ptr{$PetscInt}),
               dm, p, offset_,
              )

	offset = offset_[]

	return offset
end 

"""
	offset::PetscInt = DMNetworkGetVertexOffset(petsclib::PetscLibType,dm::PetscDM, p::PetscInt) 
Get the offset for accessing the variables associated with the given vertex from the local subvector

Not Collective

Input Parameters:
- `dm` - the `DMNETWORK` object
- `p`  - the vertex point

Output Parameter:
- `offset` - the offset

Level: intermediate

-seealso: `DM`, `DMNETWORK`, `DMNetworkGetEdgeOffset()`, `DMGetLocalVector()`

# External Links
$(_doc_external("Dm/DMNetworkGetVertexOffset"))
"""
function DMNetworkGetVertexOffset(petsclib::PetscLibType, dm::PetscDM, p::PetscInt) end

@for_petsc function DMNetworkGetVertexOffset(petsclib::$UnionPetscLib, dm::PetscDM, p::$PetscInt )
	offset_ = Ref{$PetscInt}()

    @chk ccall(
               (:DMNetworkGetVertexOffset, $petsc_library),
               PetscErrorCode,
               (CDM, $PetscInt, Ptr{$PetscInt}),
               dm, p, offset_,
              )

	offset = offset_[]

	return offset
end 

"""
	DMNetworkAddComponent(petsclib::PetscLibType,dm::PetscDM, p::PetscInt, componentkey::PetscInt, compvalue::Cvoid, nvar::PetscInt) 
Adds a network component and number of variables at the given point (vertex/edge)

Collective

Input Parameters:
- `dm`           - the DMNetwork
- `p`            - the vertex/edge point. These points are local indices provided by `DMNetworkGetSubnetwork()`
- `componentkey` - component key returned while registering the component with `DMNetworkRegisterComponent()`
- `compvalue`    - pointer to the data structure for the component, or `NULL` if the component does not require data, this data is not copied so you cannot
free this space until after `DMSetUp()` is called.
- `nvar`         - number of variables for the component at the vertex/edge point, zero if the component does not introduce any degrees of freedom at the point

Level: beginner

-seealso: `DM`, `DMNETWORK`, `DMNetworkGetComponent()`, `DMNetworkGetSubnetwork()`, `DMNetworkIsGhostVertex()`, `DMNetworkLayoutSetUp()`

# External Links
$(_doc_external("Dm/DMNetworkAddComponent"))
"""
function DMNetworkAddComponent(petsclib::PetscLibType, dm::PetscDM, p::PetscInt, componentkey::PetscInt, compvalue::Cvoid, nvar::PetscInt) end

@for_petsc function DMNetworkAddComponent(petsclib::$UnionPetscLib, dm::PetscDM, p::$PetscInt, componentkey::$PetscInt, compvalue::Cvoid, nvar::$PetscInt )

    @chk ccall(
               (:DMNetworkAddComponent, $petsc_library),
               PetscErrorCode,
               (CDM, $PetscInt, $PetscInt, Ptr{Cvoid}, $PetscInt),
               dm, p, componentkey, compvalue, nvar,
              )


	return nothing
end 

"""
	compkey::PetscInt,nvar::PetscInt = DMNetworkGetComponent(petsclib::PetscLibType,dm::PetscDM, p::PetscInt, compnum::PetscInt, component::PeCtx) 
Gets the component key, the component data, and the number of variables at a given network point

Not Collective

Input Parameters:
- `dm`      - the `DMNETWORK` object
- `p`       - vertex/edge point
- `compnum` - component number; use ALL_COMPONENTS if sum up all the components

Output Parameters:
- `compkey`   - the key obtained when registering the component (use `NULL` if not required)
- `component` - the component data (use `NULL` if not required)
- `nvar`      - number of variables (use `NULL` if not required)

Level: beginner

-seealso: `DM`, `DMNETWORK`, `DMNetworkAddComponent()`, `DMNetworkGetNumComponents()`

# External Links
$(_doc_external("Dm/DMNetworkGetComponent"))
"""
function DMNetworkGetComponent(petsclib::PetscLibType, dm::PetscDM, p::PetscInt, compnum::PetscInt, component::PeCtx) end

@for_petsc function DMNetworkGetComponent(petsclib::$UnionPetscLib, dm::PetscDM, p::$PetscInt, compnum::$PetscInt, component::PeCtx )
	compkey_ = Ref{$PetscInt}()
	nvar_ = Ref{$PetscInt}()

    @chk ccall(
               (:DMNetworkGetComponent, $petsc_library),
               PetscErrorCode,
               (CDM, $PetscInt, $PetscInt, Ptr{$PetscInt}, PeCtx, Ptr{$PetscInt}),
               dm, p, compnum, compkey_, component, nvar_,
              )

	compkey = compkey_[]
	nvar = nvar_[]

	return compkey,nvar
end 

"""
	DMNetworkAssembleGraphStructures(petsclib::PetscLibType,dm::PetscDM) 
Assembles vertex and edge data structures. Must be called after `DMNetworkDistribute()`

Collective

Input Parameter:
- `dm` - the `DMNETWORK` Object

Level: intermediate

-seealso: `DMNetworkDistribute()`

# External Links
$(_doc_external("Dm/DMNetworkAssembleGraphStructures"))
"""
function DMNetworkAssembleGraphStructures(petsclib::PetscLibType, dm::PetscDM) end

@for_petsc function DMNetworkAssembleGraphStructures(petsclib::$UnionPetscLib, dm::PetscDM )

    @chk ccall(
               (:DMNetworkAssembleGraphStructures, $petsc_library),
               PetscErrorCode,
               (CDM,),
               dm,
              )


	return nothing
end 

"""
	DMNetworkDistribute(petsclib::PetscLibType,dm::PetscDM, overlap::PetscInt) 
Distributes the network and moves associated component data

Collective

Input Parameters:
- `dm`      - the `DMNETWORK` object
- `overlap` - the overlap of partitions, 0 is the default

Options Database Keys:
- `-dmnetwork_view`              - Calls `DMView()` at the conclusion of `DMSetUp()`
- `-dmnetwork_view_distributed`  - Calls `DMView()` at the conclusion of `DMNetworkDistribute()`
- `-dmnetwork_view_tmpdir`       - Sets the temporary directory to use when viewing with the `draw` option
- `-dmnetwork_view_all_ranks`    - Displays all of the subnetworks for each MPI rank
- `-dmnetwork_view_rank_range`   - Displays the subnetworks for the ranks in a comma-separated list
- `-dmnetwork_view_no_vertices`  - Disables displaying the vertices in the network visualization
- `-dmnetwork_view_no_numbering` - Disables displaying the numbering of edges and vertices in the network visualization

Level: intermediate

-seealso: `DM`, `DMNETWORK`, `DMNetworkCreate()`

# External Links
$(_doc_external("Dm/DMNetworkDistribute"))
"""
function DMNetworkDistribute(petsclib::PetscLibType, dm::PetscDM, overlap::PetscInt) end

@for_petsc function DMNetworkDistribute(petsclib::$UnionPetscLib, dm::PetscDM, overlap::$PetscInt )
	dm_ = Ref(dm.ptr)

    @chk ccall(
               (:DMNetworkDistribute, $petsc_library),
               PetscErrorCode,
               (Ptr{CDM}, $PetscInt),
               dm_, overlap,
              )

	dm.ptr = C_NULL

	return nothing
end 

"""
	nedges::PetscInt,edges::Vector{PetscInt} = DMNetworkGetSupportingEdges(petsclib::PetscLibType,dm::PetscDM, vertex::PetscInt) 
Return the supporting edges for this vertex point

Not Collective

Input Parameters:
- `dm`     - the `DMNETWORK` object
- `vertex` - the vertex point

Output Parameters:
- `nedges` - number of edges connected to this vertex point
- `edges`  - list of edge points, pass `NULL` if not needed

Level: beginner

-seealso: `DM`, `DMNETWORK`, `DMNetworkCreate()`, `DMNetworkGetConnectedVertices()`

# External Links
$(_doc_external("Dm/DMNetworkGetSupportingEdges"))
"""
function DMNetworkGetSupportingEdges(petsclib::PetscLibType, dm::PetscDM, vertex::PetscInt) end

@for_petsc function DMNetworkGetSupportingEdges(petsclib::$UnionPetscLib, dm::PetscDM, vertex::$PetscInt )
	nedges_ = Ref{$PetscInt}()
	edges_ = Ref{Ptr{$PetscInt}}()

    @chk ccall(
               (:DMNetworkGetSupportingEdges, $petsc_library),
               PetscErrorCode,
               (CDM, $PetscInt, Ptr{$PetscInt}, Ptr{Ptr{$PetscInt}}),
               dm, vertex, nedges_, edges_,
              )

	nedges = nedges_[]
	edges = unsafe_wrap(Array, edges_[], VecGetLocalSize(petsclib, x); own = false)

	return nedges,edges
end 

"""
	vertices::Vector{PetscInt} = DMNetworkGetConnectedVertices(petsclib::PetscLibType,dm::PetscDM, edge::PetscInt) 
Return the connected vertices for this edge point

Not Collective

Input Parameters:
- `dm`   - the `DMNETWORK` object
- `edge` - the edge point

Output Parameter:
- `vertices` - vertices connected to this edge

Level: beginner

-seealso: `DM`, `DMNETWORK`, `DMNetworkCreate()`, `DMNetworkGetSupportingEdges()`

# External Links
$(_doc_external("Dm/DMNetworkGetConnectedVertices"))
"""
function DMNetworkGetConnectedVertices(petsclib::PetscLibType, dm::PetscDM, edge::PetscInt) end

@for_petsc function DMNetworkGetConnectedVertices(petsclib::$UnionPetscLib, dm::PetscDM, edge::$PetscInt )
	vertices_ = Ref{Ptr{$PetscInt}}()

    @chk ccall(
               (:DMNetworkGetConnectedVertices, $petsc_library),
               PetscErrorCode,
               (CDM, $PetscInt, Ptr{Ptr{$PetscInt}}),
               dm, edge, vertices_,
              )

	vertices = unsafe_wrap(Array, vertices_[], VecGetLocalSize(petsclib, x); own = false)

	return vertices
end 

"""
	flag::PetscBool = DMNetworkIsSharedVertex(petsclib::PetscLibType,dm::PetscDM, p::PetscInt) 
Returns `PETSC_TRUE` if the vertex is shared by subnetworks

Not Collective

Input Parameters:
- `dm` - the `DMNETWORK` object
- `p`  - the vertex point

Output Parameter:
- `flag` - `PETSC_TRUE` if the vertex is shared by subnetworks

Level: beginner

-seealso: `DM`, `DMNETWORK`, `DMNetworkAddSharedVertices()`, `DMNetworkIsGhostVertex()`

# External Links
$(_doc_external("Dm/DMNetworkIsSharedVertex"))
"""
function DMNetworkIsSharedVertex(petsclib::PetscLibType, dm::PetscDM, p::PetscInt) end

@for_petsc function DMNetworkIsSharedVertex(petsclib::$UnionPetscLib, dm::PetscDM, p::$PetscInt )
	flag_ = Ref{PetscBool}()

    @chk ccall(
               (:DMNetworkIsSharedVertex, $petsc_library),
               PetscErrorCode,
               (CDM, $PetscInt, Ptr{PetscBool}),
               dm, p, flag_,
              )

	flag = flag_[]

	return flag
end 

"""
	isghost::PetscBool = DMNetworkIsGhostVertex(petsclib::PetscLibType,dm::PetscDM, p::PetscInt) 
Returns `PETSC_TRUE` if the vertex is a ghost vertex

Not Collective

Input Parameters:
- `dm` - the `DMNETWORK` object
- `p`  - the vertex point

Output Parameter:
- `isghost` - `PETSC_TRUE` if the vertex is a ghost point

Level: beginner

-seealso: `DM`, `DMNETWORK`, `DMNetworkGetConnectedVertices()`, `DMNetworkGetVertexRange()`, `DMNetworkIsSharedVertex()`

# External Links
$(_doc_external("Dm/DMNetworkIsGhostVertex"))
"""
function DMNetworkIsGhostVertex(petsclib::PetscLibType, dm::PetscDM, p::PetscInt) end

@for_petsc function DMNetworkIsGhostVertex(petsclib::$UnionPetscLib, dm::PetscDM, p::$PetscInt )
	isghost_ = Ref{PetscBool}()

    @chk ccall(
               (:DMNetworkIsGhostVertex, $petsc_library),
               PetscErrorCode,
               (CDM, $PetscInt, Ptr{PetscBool}),
               dm, p, isghost_,
              )

	isghost = isghost_[]

	return isghost
end 

"""
	DMNetworkHasJacobian(petsclib::PetscLibType,dm::PetscDM, eflg::PetscBool, vflg::PetscBool) 
Sets global flag for using user's sub Jacobian matrices
-- `replaced by DMNetworkSetOption(network,userjacobian,PETSC_TRUE)?`

Collective

Input Parameters:
- `dm`   - the `DMNETWORK` object
- `eflg` - turn the option on (`PETSC_TRUE`) or off (`PETSC_FALSE`) if user provides Jacobian for edges
- `vflg` - turn the option on (`PETSC_TRUE`) or off (`PETSC_FALSE`) if user provides Jacobian for vertices

Level: intermediate

-seealso: `DMNetworkSetOption()`

# External Links
$(_doc_external("Dm/DMNetworkHasJacobian"))
"""
function DMNetworkHasJacobian(petsclib::PetscLibType, dm::PetscDM, eflg::PetscBool, vflg::PetscBool) end

@for_petsc function DMNetworkHasJacobian(petsclib::$UnionPetscLib, dm::PetscDM, eflg::PetscBool, vflg::PetscBool )

    @chk ccall(
               (:DMNetworkHasJacobian, $petsc_library),
               PetscErrorCode,
               (CDM, PetscBool, PetscBool),
               dm, eflg, vflg,
              )


	return nothing
end 

"""
	DMNetworkEdgeSetMatrix(petsclib::PetscLibType,dm::PetscDM, p::PetscInt, J::Vector{PetscMat}) 
Sets user

Not Collective

Input Parameters:
- `dm` - the `DMNETWORK` object
- `p`  - the edge point
- `J`  - array (size = 3) of Jacobian submatrices for this edge point:
J[0]: this edge
J[1] and J[2]: connected vertices, obtained by calling `DMNetworkGetConnectedVertices()`

Level: advanced

-seealso: `DM`, `DMNETWORK`, `DMNetworkVertexSetMatrix()`

# External Links
$(_doc_external("Dm/DMNetworkEdgeSetMatrix"))
"""
function DMNetworkEdgeSetMatrix(petsclib::PetscLibType, dm::PetscDM, p::PetscInt, J::Vector{PetscMat}) end

@for_petsc function DMNetworkEdgeSetMatrix(petsclib::$UnionPetscLib, dm::PetscDM, p::$PetscInt, J::Vector{PetscMat} )

    @chk ccall(
               (:DMNetworkEdgeSetMatrix, $petsc_library),
               PetscErrorCode,
               (CDM, $PetscInt, Ptr{CMat}),
               dm, p, J,
              )


	return nothing
end 

"""
	DMNetworkVertexSetMatrix(petsclib::PetscLibType,dm::PetscDM, p::PetscInt, J::Vector{PetscMat}) 
Sets user

Not Collective

Input Parameters:
- `dm` - The `DMNETWORK` object
- `p`  - the vertex point
- `J`  - array of Jacobian (size = 2*(num of supporting edges) + 1) submatrices for this vertex point:
J[0]:       this vertex
J[1+2*i]:   i-th supporting edge
J[1+2*i+1]: i-th connected vertex

Level: advanced

-seealso: `DM`, `DMNETWORK`, `DMNetworkEdgeSetMatrix()`

# External Links
$(_doc_external("Dm/DMNetworkVertexSetMatrix"))
"""
function DMNetworkVertexSetMatrix(petsclib::PetscLibType, dm::PetscDM, p::PetscInt, J::Vector{PetscMat}) end

@for_petsc function DMNetworkVertexSetMatrix(petsclib::$UnionPetscLib, dm::PetscDM, p::$PetscInt, J::Vector{PetscMat} )

    @chk ccall(
               (:DMNetworkVertexSetMatrix, $petsc_library),
               PetscErrorCode,
               (CDM, $PetscInt, Ptr{CMat}),
               dm, p, J,
              )


	return nothing
end 

"""
	vg::PetscInt = DMNetworkGetVertexLocalToGlobalOrdering(petsclib::PetscLibType,dm::PetscDM, vloc::PetscInt) 
Get vertex global index

Not Collective

Input Parameters:
- `dm`   - the `DMNETWORK` object
- `vloc` - local vertex ordering, start from 0

Output Parameter:
- `vg` - global vertex ordering, start from 0

Level: advanced

-seealso: `DM`, `DMNETWORK`, `DMNetworkSetVertexLocalToGlobalOrdering()`

# External Links
$(_doc_external("Dm/DMNetworkGetVertexLocalToGlobalOrdering"))
"""
function DMNetworkGetVertexLocalToGlobalOrdering(petsclib::PetscLibType, dm::PetscDM, vloc::PetscInt) end

@for_petsc function DMNetworkGetVertexLocalToGlobalOrdering(petsclib::$UnionPetscLib, dm::PetscDM, vloc::$PetscInt )
	vg_ = Ref{$PetscInt}()

    @chk ccall(
               (:DMNetworkGetVertexLocalToGlobalOrdering, $petsc_library),
               PetscErrorCode,
               (CDM, $PetscInt, Ptr{$PetscInt}),
               dm, vloc, vg_,
              )

	vg = vg_[]

	return vg
end 

"""
	DMNetworkSetVertexLocalToGlobalOrdering(petsclib::PetscLibType,dm::PetscDM) 
Create and setup vertex local to global map

Collective

Input Parameters:
- `dm` - the `DMNETWORK` object

Level: advanced

-seealso: `DM`, `DMNETWORK`, `DMNetworkGetGlobalVertexIndex()`

# External Links
$(_doc_external("Dm/DMNetworkSetVertexLocalToGlobalOrdering"))
"""
function DMNetworkSetVertexLocalToGlobalOrdering(petsclib::PetscLibType, dm::PetscDM) end

@for_petsc function DMNetworkSetVertexLocalToGlobalOrdering(petsclib::$UnionPetscLib, dm::PetscDM )

    @chk ccall(
               (:DMNetworkSetVertexLocalToGlobalOrdering, $petsc_library),
               PetscErrorCode,
               (CDM,),
               dm,
              )


	return nothing
end 

"""
	is::IS = DMNetworkCreateIS(petsclib::PetscLibType,dm::PetscDM, numkeys::PetscInt, keys::Vector{PetscInt}, blocksize::Vector{PetscInt}, nselectedvar::Vector{PetscInt}, selectedvar::Vector{PetscInt}) 
Create an index set object from the global vector of the network

Collective

Input Parameters:
- `dm`           - `DMNETWORK` object
- `numkeys`      - number of keys
- `keys`         - array of keys that define the components of the variables you wish to extract
- `blocksize`    - block size of the variables associated to the component
- `nselectedvar` - number of variables in each block to select
- `selectedvar`  - the offset into the block of each variable in each block to select

Output Parameter:
- `is` - the index set

Level: advanced

-seealso: `DM`, `DMNETWORK`, `DMNetworkCreate()`, `ISCreateGeneral()`, `DMNetworkCreateLocalIS()`

# External Links
$(_doc_external("Dm/DMNetworkCreateIS"))
"""
function DMNetworkCreateIS(petsclib::PetscLibType, dm::PetscDM, numkeys::PetscInt, keys::Vector{PetscInt}, blocksize::Vector{PetscInt}, nselectedvar::Vector{PetscInt}, selectedvar::Vector{PetscInt}) end

@for_petsc function DMNetworkCreateIS(petsclib::$UnionPetscLib, dm::PetscDM, numkeys::$PetscInt, keys::Vector{$PetscInt}, blocksize::Vector{$PetscInt}, nselectedvar::Vector{$PetscInt}, selectedvar::Vector{$PetscInt} )
	selectedvar_ = Ref(pointer(selectedvar))
	is_ = Ref{IS}()

    @chk ccall(
               (:DMNetworkCreateIS, $petsc_library),
               PetscErrorCode,
               (CDM, $PetscInt, Ptr{$PetscInt}, Ptr{$PetscInt}, Ptr{$PetscInt}, Ptr{Ptr{$PetscInt}}, Ptr{IS}),
               dm, numkeys, keys, blocksize, nselectedvar, selectedvar_, is_,
              )

	is = is_[]

	return is
end 

"""
	is::IS = DMNetworkCreateLocalIS(petsclib::PetscLibType,dm::PetscDM, numkeys::PetscInt, keys::Vector{PetscInt}, blocksize::Vector{PetscInt}, nselectedvar::Vector{PetscInt}, selectedvar::Vector{PetscInt}) 
Create an index set object from the local vector of the network

Not Collective

Input Parameters:
- `dm`           - `DMNETWORK` object
- `numkeys`      - number of keys
- `keys`         - array of keys that define the components of the variables you wish to extract
- `blocksize`    - block size of the variables associated to the component
- `nselectedvar` - number of variables in each block to select
- `selectedvar`  - the offset into the block of each variable in each block to select

Output Parameter:
- `is` - the index set

Level: advanced

-seealso: `DM`, `DMNETWORK`, `DMNetworkCreate()`, `DMNetworkCreateIS()`, `ISCreateGeneral()`

# External Links
$(_doc_external("Dm/DMNetworkCreateLocalIS"))
"""
function DMNetworkCreateLocalIS(petsclib::PetscLibType, dm::PetscDM, numkeys::PetscInt, keys::Vector{PetscInt}, blocksize::Vector{PetscInt}, nselectedvar::Vector{PetscInt}, selectedvar::Vector{PetscInt}) end

@for_petsc function DMNetworkCreateLocalIS(petsclib::$UnionPetscLib, dm::PetscDM, numkeys::$PetscInt, keys::Vector{$PetscInt}, blocksize::Vector{$PetscInt}, nselectedvar::Vector{$PetscInt}, selectedvar::Vector{$PetscInt} )
	selectedvar_ = Ref(pointer(selectedvar))
	is_ = Ref{IS}()

    @chk ccall(
               (:DMNetworkCreateLocalIS, $petsc_library),
               PetscErrorCode,
               (CDM, $PetscInt, Ptr{$PetscInt}, Ptr{$PetscInt}, Ptr{$PetscInt}, Ptr{Ptr{$PetscInt}}, Ptr{IS}),
               dm, numkeys, keys, blocksize, nselectedvar, selectedvar_, is_,
              )

	is = is_[]

	return is
end 

"""
	DMNetworkFinalizeComponents(petsclib::PetscLibType,dm::PetscDM) 
Sets up internal data structures for the sections and components. It is called after registering new components and adding all components
to the cloned network. After calling this subroutine, no new components can be added to the network.

Collective

Input Parameter:
- `dm` - the `DMNETWORK` object

Level: beginner

-seealso: `DM`, `DMNETWORK`, `DMNetworkAddComponent()`, `DMNetworkRegisterComponent()`, `DMSetUp()`

# External Links
$(_doc_external("Dm/DMNetworkFinalizeComponents"))
"""
function DMNetworkFinalizeComponents(petsclib::PetscLibType, dm::PetscDM) end

@for_petsc function DMNetworkFinalizeComponents(petsclib::$UnionPetscLib, dm::PetscDM )

    @chk ccall(
               (:DMNetworkFinalizeComponents, $petsc_library),
               PetscErrorCode,
               (CDM,),
               dm,
              )


	return nothing
end 

"""
	network::PetscDM = DMNetworkCreate(petsclib::PetscLibType,comm::MPI_Comm) 
Creates a DMNetwork object, which encapsulates an unstructured network.

Collective

Input Parameter:
- `comm` - The communicator for the DMNetwork object

Output Parameter:
- `network` - The DMNetwork object

Level: beginner

-seealso: `DMCreate()`

# External Links
$(_doc_external("Dm/DMNetworkCreate"))
"""
function DMNetworkCreate(petsclib::PetscLibType, comm::MPI_Comm) end

@for_petsc function DMNetworkCreate(petsclib::$UnionPetscLib, comm::MPI_Comm )
	network_ = Ref{CDM}()

    @chk ccall(
               (:DMNetworkCreate, $petsc_library),
               PetscErrorCode,
               (MPI_Comm, Ptr{CDM}),
               comm, network_,
              )

	network = PetscDM(network_[], petsclib)

	return network
end 

"""
	showranks::PetscBool = DMNetworkViewSetShowRanks(petsclib::PetscLibType,dm::PetscDM) 
Sets viewing the `DMETNWORK` on each rank individually.

Logically Collective

Input Parameter:
- `dm` - the `DMNETWORK` object

Output Parameter:
- `showranks` - `PETSC_TRUE` if viewing each rank's sub network individually

Level: beginner

-seealso: `DM`, `DMNETWORK`, `DMNetworkViewSetShowGlobal()`, `DMNetworkViewSetShowVertices()`, `DMNetworkViewSetShowNumbering()`, `DMNetworkViewSetViewRanks()`

# External Links
$(_doc_external("Dm/DMNetworkViewSetShowRanks"))
"""
function DMNetworkViewSetShowRanks(petsclib::PetscLibType, dm::PetscDM) end

@for_petsc function DMNetworkViewSetShowRanks(petsclib::$UnionPetscLib, dm::PetscDM )
	showranks_ = Ref{PetscBool}()

    @chk ccall(
               (:DMNetworkViewSetShowRanks, $petsc_library),
               PetscErrorCode,
               (CDM, PetscBool),
               dm, showranks_,
              )

	showranks = showranks_[]

	return showranks
end 

"""
	showglobal::PetscBool = DMNetworkViewSetShowGlobal(petsclib::PetscLibType,dm::PetscDM) 
Set viewing the global network.

Logically Collective

Input Parameter:
- `dm` - the `DMNETWORK` object

Output Parameter:
- `showglobal` - `PETSC_TRUE` if viewing the global network

Level: beginner

-seealso: `DM`, `DMNETWORK`, `DMNetworkViewSetShowRanks()`, `DMNetworkViewSetShowVertices()`, `DMNetworkViewSetShowNumbering()`, `DMNetworkViewSetViewRanks()`

# External Links
$(_doc_external("Dm/DMNetworkViewSetShowGlobal"))
"""
function DMNetworkViewSetShowGlobal(petsclib::PetscLibType, dm::PetscDM) end

@for_petsc function DMNetworkViewSetShowGlobal(petsclib::$UnionPetscLib, dm::PetscDM )
	showglobal_ = Ref{PetscBool}()

    @chk ccall(
               (:DMNetworkViewSetShowGlobal, $petsc_library),
               PetscErrorCode,
               (CDM, PetscBool),
               dm, showglobal_,
              )

	showglobal = showglobal_[]

	return showglobal
end 

"""
	showvertices::PetscBool = DMNetworkViewSetShowVertices(petsclib::PetscLibType,dm::PetscDM) 
Sets whether to display the vertices in viewing routines.

Logically Collective

Input Parameter:
- `dm` - the `DMNETWORK` object

Output Parameter:
- `showvertices` - `PETSC_TRUE` if visualizing the vertices

Level: beginner

-seealso: `DM`, `DMNETWORK`, `DMNetworkViewSetShowRanks()`, `DMNetworkViewSetShowGlobal()`, `DMNetworkViewSetShowNumbering()`, `DMNetworkViewSetViewRanks()`

# External Links
$(_doc_external("Dm/DMNetworkViewSetShowVertices"))
"""
function DMNetworkViewSetShowVertices(petsclib::PetscLibType, dm::PetscDM) end

@for_petsc function DMNetworkViewSetShowVertices(petsclib::$UnionPetscLib, dm::PetscDM )
	showvertices_ = Ref{PetscBool}()

    @chk ccall(
               (:DMNetworkViewSetShowVertices, $petsc_library),
               PetscErrorCode,
               (CDM, PetscBool),
               dm, showvertices_,
              )

	showvertices = showvertices_[]

	return showvertices
end 

"""
	shownumbering::PetscBool = DMNetworkViewSetShowNumbering(petsclib::PetscLibType,dm::PetscDM) 
Set displaying the numbering of edges and vertices in viewing routines.

Logically Collective

Input Parameter:
- `dm` - the `DMNETWORK` object

Output Parameter:
- `shownumbering` - `PETSC_TRUE` if displaying the numbering of edges and vertices

Level: beginner

-seealso: `DM`, `DMNETWORK`, `DMNetworkViewSetShowRanks()`, `DMNetworkViewSetShowGlobal()`, `DMNetworkViewSetShowVertices()`, `DMNetworkViewSetViewRanks()`

# External Links
$(_doc_external("Dm/DMNetworkViewSetShowNumbering"))
"""
function DMNetworkViewSetShowNumbering(petsclib::PetscLibType, dm::PetscDM) end

@for_petsc function DMNetworkViewSetShowNumbering(petsclib::$UnionPetscLib, dm::PetscDM )
	shownumbering_ = Ref{PetscBool}()

    @chk ccall(
               (:DMNetworkViewSetShowNumbering, $petsc_library),
               PetscErrorCode,
               (CDM, PetscBool),
               dm, shownumbering_,
              )

	shownumbering = shownumbering_[]

	return shownumbering
end 

"""
	DMNetworkViewSetViewRanks(petsclib::PetscLibType,dm::PetscDM, viewranks::IS) 
View the `DMNETWORK` on each of the specified ranks individually.

Collective

Input Parameter:
- `dm` - the `DMNETWORK` object

Output Parameter:
- `viewranks` - set of ranks to view the `DMNETWORK` on individually

Level: beginner

-seealso: `DM`, `DMNETWORK`, `DMNetworkViewSetShowRanks()`, `DMNetworkViewSetShowGlobal()`, `DMNetworkViewSetShowVertices()`, `DMNetworkViewSetShowNumbering()`

# External Links
$(_doc_external("Dm/DMNetworkViewSetViewRanks"))
"""
function DMNetworkViewSetViewRanks(petsclib::PetscLibType, dm::PetscDM, viewranks::IS) end

@for_petsc function DMNetworkViewSetViewRanks(petsclib::$UnionPetscLib, dm::PetscDM, viewranks::IS )

    @chk ccall(
               (:DMNetworkViewSetViewRanks, $petsc_library),
               PetscErrorCode,
               (CDM, IS),
               dm, viewranks,
              )


	return nothing
end 

"""
	DMProductGetDM(petsclib::PetscLibType,dm::PetscDM, slot::PetscInt, subdm::PetscDM) 
Get sub

Not Collective

Input Parameters:
- `dm`   - the` DMPRODUCT`
- `slot` - which dimension within `DMPRODUCT` whose coordinates is being provided, in the range 0 to dim-1

Output Parameter:
- `subdm` - the sub-`DM`

Level: advanced

-seealso: `DMPRODUCT`, `DMProductSetDM()`, `DMProductGetDimensionIndex()`, `DMProductSetDimensionIndex()`

# External Links
$(_doc_external("Dm/DMProductGetDM"))
"""
function DMProductGetDM(petsclib::PetscLibType, dm::PetscDM, slot::PetscInt, subdm::PetscDM) end

@for_petsc function DMProductGetDM(petsclib::$UnionPetscLib, dm::PetscDM, slot::$PetscInt, subdm::PetscDM )
	subdm_ = Ref(subdm.ptr)

    @chk ccall(
               (:DMProductGetDM, $petsc_library),
               PetscErrorCode,
               (CDM, $PetscInt, Ptr{CDM}),
               dm, slot, subdm_,
              )

	subdm.ptr = C_NULL

	return nothing
end 

"""
	DMProductSetDM(petsclib::PetscLibType,dm::PetscDM, slot::PetscInt, subdm::PetscDM) 
Set sub

Not Collective

Input Parameters:
- `dm`    - the `DMPRODUCT`
- `slot`  - which dimension within `DMPRODUCT` whose coordinates is being provided, in the range 0 to dim-1
- `subdm` - the sub-`DM`

Level: advanced

-seealso: `DMPRODUCT`, `DMProductGetDM()`, `DMProductSetDimensionIndex()`, `DMProductGetDimensionIndex()`

# External Links
$(_doc_external("Dm/DMProductSetDM"))
"""
function DMProductSetDM(petsclib::PetscLibType, dm::PetscDM, slot::PetscInt, subdm::PetscDM) end

@for_petsc function DMProductSetDM(petsclib::$UnionPetscLib, dm::PetscDM, slot::$PetscInt, subdm::PetscDM )

    @chk ccall(
               (:DMProductSetDM, $petsc_library),
               PetscErrorCode,
               (CDM, $PetscInt, CDM),
               dm, slot, subdm,
              )


	return nothing
end 

"""
	DMProductSetDimensionIndex(petsclib::PetscLibType,dm::PetscDM, slot::PetscInt, idx::PetscInt) 
Set which dimension `idx` of the sub

Not Collective

Input Parameters:
- `dm`   - the `DMPRODUCT`
- `slot` - which dimension, in the range 0 to dim-1 you are providing to the `dm`
- `idx`  - the dimension of the sub-`DM` to use

Level: advanced

-seealso: `DMPRODUCT`, `DMProductGetDM()`, `DMProductGetDimensionIndex()`

# External Links
$(_doc_external("Dm/DMProductSetDimensionIndex"))
"""
function DMProductSetDimensionIndex(petsclib::PetscLibType, dm::PetscDM, slot::PetscInt, idx::PetscInt) end

@for_petsc function DMProductSetDimensionIndex(petsclib::$UnionPetscLib, dm::PetscDM, slot::$PetscInt, idx::$PetscInt )

    @chk ccall(
               (:DMProductSetDimensionIndex, $petsc_library),
               PetscErrorCode,
               (CDM, $PetscInt, $PetscInt),
               dm, slot, idx,
              )


	return nothing
end 

"""
	idx::PetscInt = DMProductGetDimensionIndex(petsclib::PetscLibType,dm::PetscDM, slot::PetscInt) 
Get which dimension `idx` of the sub

Not Collective

Input Parameters:
- `dm`   - the `DMPRODUCT`
- `slot` - which dimension, in the range 0 to dim-1 of `dm`

Output Parameter:
- `idx` - the dimension of the sub-`DM`

Level: advanced

-seealso: `DMPRODUCT`, `DMProductGetDM()`, `DMProductSetDimensionIndex()`

# External Links
$(_doc_external("Dm/DMProductGetDimensionIndex"))
"""
function DMProductGetDimensionIndex(petsclib::PetscLibType, dm::PetscDM, slot::PetscInt) end

@for_petsc function DMProductGetDimensionIndex(petsclib::$UnionPetscLib, dm::PetscDM, slot::$PetscInt )
	idx_ = Ref{$PetscInt}()

    @chk ccall(
               (:DMProductGetDimensionIndex, $petsc_library),
               PetscErrorCode,
               (CDM, $PetscInt, Ptr{$PetscInt}),
               dm, slot, idx_,
              )

	idx = idx_[]

	return idx
end 

"""
	DMCompositeSetCoupling(petsclib::PetscLibType,dm::PetscDM, FormCoupleLocations::external) 
Sets user provided routines that compute the coupling between the
separate components `DM` in a `DMCOMPOSITE` to build the correct matrix nonzero structure.

Logically Collective; No Fortran Support

Input Parameters:
- `dm`                  - the composite object
- `FormCoupleLocations` - routine to set the nonzero locations in the matrix

Level: advanced

-seealso: `DMCOMPOSITE`, `DM`

# External Links
$(_doc_external("Dm/DMCompositeSetCoupling"))
"""
function DMCompositeSetCoupling(petsclib::PetscLibType, dm::PetscDM, FormCoupleLocations::external) end

@for_petsc function DMCompositeSetCoupling(petsclib::$UnionPetscLib, dm::PetscDM, FormCoupleLocations::external )

    @chk ccall(
               (:DMCompositeSetCoupling, $petsc_library),
               PetscErrorCode,
               (CDM, external),
               dm, FormCoupleLocations,
              )


	return nothing
end 

"""
	nDM::PetscInt = DMCompositeGetNumberDM(petsclib::PetscLibType,dm::PetscDM) 
Gets the number of `DM` objects in the `DMCOMPOSITE`
representation.

Not Collective

Input Parameter:
- `dm` - the `DMCOMPOSITE` object

Output Parameter:
- `nDM` - the number of `DM`

Level: beginner

-seealso: `DMCOMPOSITE`, `DM`

# External Links
$(_doc_external("Dm/DMCompositeGetNumberDM"))
"""
function DMCompositeGetNumberDM(petsclib::PetscLibType, dm::PetscDM) end

@for_petsc function DMCompositeGetNumberDM(petsclib::$UnionPetscLib, dm::PetscDM )
	nDM_ = Ref{$PetscInt}()

    @chk ccall(
               (:DMCompositeGetNumberDM, $petsc_library),
               PetscErrorCode,
               (CDM, Ptr{$PetscInt}),
               dm, nDM_,
              )

	nDM = nDM_[]

	return nDM
end 

"""
	DMCompositeGetAccessArray(petsclib::PetscLibType,dm::PetscDM, pvec::PetscVec, nwanted::PetscInt, wanted::Vector{PetscInt}, vecs::Vector{PetscVec}) 
Allows one to access the individual packed vectors in their global
representation.

Collective

Input Parameters:
- `dm`      - the `DMCOMPOSITE`
- `pvec`    - packed vector
- `nwanted` - number of vectors wanted
- `wanted`  - sorted array of integers indicating thde vectors wanted, or `NULL` to get all vectors, length `nwanted`

Output Parameter:
- `vecs` - array of requested global vectors (must be previously allocated and of length `nwanted`)

Level: advanced

-seealso: `DMCOMPOSITE`, `DM`, `DMCompositeGetAccess()`, `DMCompositeGetEntries()`, `DMCompositeScatter()`, `DMCompositeGather()`

# External Links
$(_doc_external("Dm/DMCompositeGetAccessArray"))
"""
function DMCompositeGetAccessArray(petsclib::PetscLibType, dm::PetscDM, pvec::PetscVec, nwanted::PetscInt, wanted::Vector{PetscInt}, vecs::Vector{PetscVec}) end

@for_petsc function DMCompositeGetAccessArray(petsclib::$UnionPetscLib, dm::PetscDM, pvec::PetscVec, nwanted::$PetscInt, wanted::Vector{$PetscInt}, vecs::Vector{PetscVec} )

    @chk ccall(
               (:DMCompositeGetAccessArray, $petsc_library),
               PetscErrorCode,
               (CDM, CVec, $PetscInt, Ptr{$PetscInt}, Ptr{CVec}),
               dm, pvec, nwanted, wanted, vecs,
              )


	return nothing
end 

"""
	DMCompositeGetLocalAccessArray(petsclib::PetscLibType,dm::PetscDM, pvec::PetscVec, nwanted::PetscInt, wanted::Vector{PetscInt}, vecs::Vector{PetscVec}) 
Allows one to access the individual
packed vectors in their local representation.

Collective

Input Parameters:
- `dm`      - the `DMCOMPOSITE`
- `pvec`    - packed vector
- `nwanted` - number of vectors wanted
- `wanted`  - sorted array of vectors wanted, or `NULL` to get all vectors, length `nwanted`

Output Parameter:
- `vecs` - array of requested local vectors (must be allocated and of length `nwanted`)

Level: advanced

-seealso: `DMCOMPOSITE`, `DM`, `DMCompositeRestoreLocalAccessArray()`, `DMCompositeGetAccess()`,
`DMCompositeGetEntries()`, `DMCompositeScatter()`, `DMCompositeGather()`

# External Links
$(_doc_external("Dm/DMCompositeGetLocalAccessArray"))
"""
function DMCompositeGetLocalAccessArray(petsclib::PetscLibType, dm::PetscDM, pvec::PetscVec, nwanted::PetscInt, wanted::Vector{PetscInt}, vecs::Vector{PetscVec}) end

@for_petsc function DMCompositeGetLocalAccessArray(petsclib::$UnionPetscLib, dm::PetscDM, pvec::PetscVec, nwanted::$PetscInt, wanted::Vector{$PetscInt}, vecs::Vector{PetscVec} )

    @chk ccall(
               (:DMCompositeGetLocalAccessArray, $petsc_library),
               PetscErrorCode,
               (CDM, CVec, $PetscInt, Ptr{$PetscInt}, Ptr{CVec}),
               dm, pvec, nwanted, wanted, vecs,
              )


	return nothing
end 

"""
	DMCompositeRestoreAccessArray(petsclib::PetscLibType,dm::PetscDM, pvec::PetscVec, nwanted::PetscInt, wanted::Vector{PetscInt}, vecs::Vector{PetscVec}) 
Returns the vectors obtained with `DMCompositeGetAccessArray()`

Collective

Input Parameters:
- `dm`      - the `DMCOMPOSITE` object
- `pvec`    - packed vector
- `nwanted` - number of vectors wanted
- `wanted`  - sorted array of vectors wanted, or `NULL` to restore all vectors
- `vecs`    - array of global vectors

Level: advanced

-seealso: `DMCOMPOSITE`, `DM`, `DMCompositeRestoreAccess()`, `DMCompositeRestoreEntries()`, `DMCompositeScatter()`, `DMCompositeGather()`

# External Links
$(_doc_external("Dm/DMCompositeRestoreAccessArray"))
"""
function DMCompositeRestoreAccessArray(petsclib::PetscLibType, dm::PetscDM, pvec::PetscVec, nwanted::PetscInt, wanted::Vector{PetscInt}, vecs::Vector{PetscVec}) end

@for_petsc function DMCompositeRestoreAccessArray(petsclib::$UnionPetscLib, dm::PetscDM, pvec::PetscVec, nwanted::$PetscInt, wanted::Vector{$PetscInt}, vecs::Vector{PetscVec} )

    @chk ccall(
               (:DMCompositeRestoreAccessArray, $petsc_library),
               PetscErrorCode,
               (CDM, CVec, $PetscInt, Ptr{$PetscInt}, Ptr{CVec}),
               dm, pvec, nwanted, wanted, vecs,
              )


	return nothing
end 

"""
	DMCompositeRestoreLocalAccessArray(petsclib::PetscLibType,dm::PetscDM, pvec::PetscVec, nwanted::PetscInt, wanted::Vector{PetscInt}, vecs::PetscVec) 
Returns the vectors obtained with `DMCompositeGetLocalAccessArray()`.

Collective

Input Parameters:
- `dm`      - the `DMCOMPOSITE` object
- `pvec`    - packed vector
- `nwanted` - number of vectors wanted
- `wanted`  - sorted array of vectors wanted, or `NULL` to restore all vectors
- `vecs`    - array of local vectors

Level: advanced

-seealso: `DMCOMPOSITE`, `DM`, `DMCompositeGetLocalAccessArray()`, `DMCompositeRestoreAccessArray()`,
`DMCompositeRestoreAccess()`, `DMCompositeRestoreEntries()`,
`DMCompositeScatter()`, `DMCompositeGather()`

# External Links
$(_doc_external("Dm/DMCompositeRestoreLocalAccessArray"))
"""
function DMCompositeRestoreLocalAccessArray(petsclib::PetscLibType, dm::PetscDM, pvec::PetscVec, nwanted::PetscInt, wanted::Vector{PetscInt}, vecs::PetscVec) end

@for_petsc function DMCompositeRestoreLocalAccessArray(petsclib::$UnionPetscLib, dm::PetscDM, pvec::PetscVec, nwanted::$PetscInt, wanted::Vector{$PetscInt}, vecs::PetscVec )
	vecs_ = Ref(vecs.ptr)

    @chk ccall(
               (:DMCompositeRestoreLocalAccessArray, $petsc_library),
               PetscErrorCode,
               (CDM, CVec, $PetscInt, Ptr{$PetscInt}, Ptr{CVec}),
               dm, pvec, nwanted, wanted, vecs_,
              )

	vecs.ptr = C_NULL

	return nothing
end 

"""
	DMCompositeScatterArray(petsclib::PetscLibType,dm::PetscDM, gvec::PetscVec, lvecs::PetscVec) 
Scatters from a global packed vector into its individual local vectors

Collective

Input Parameters:
- `dm`    - the `DMCOMPOSITE` object
- `gvec`  - the global vector
- `lvecs` - array of local vectors, NULL for any that are not needed

Level: advanced

-seealso: `DMCOMPOSITE`, `DM`, `DMDestroy()`, `DMCompositeAddDM()`, `DMCreateGlobalVector()`
`DMCompositeGather()`, `DMCompositeCreate()`, `DMCompositeGetISLocalToGlobalMappings()`, `DMCompositeGetAccess()`,
`DMCompositeGetLocalVectors()`, `DMCompositeRestoreLocalVectors()`, `DMCompositeGetEntries()`

# External Links
$(_doc_external("Dm/DMCompositeScatterArray"))
"""
function DMCompositeScatterArray(petsclib::PetscLibType, dm::PetscDM, gvec::PetscVec, lvecs::PetscVec) end

@for_petsc function DMCompositeScatterArray(petsclib::$UnionPetscLib, dm::PetscDM, gvec::PetscVec, lvecs::PetscVec )
	lvecs_ = Ref(lvecs.ptr)

    @chk ccall(
               (:DMCompositeScatterArray, $petsc_library),
               PetscErrorCode,
               (CDM, CVec, Ptr{CVec}),
               dm, gvec, lvecs_,
              )

	lvecs.ptr = C_NULL

	return nothing
end 

"""
	DMCompositeGatherArray(petsclib::PetscLibType,dm::PetscDM, imode::InsertMode, gvec::PetscVec, lvecs::PetscVec) 
Gathers into a global packed vector from its individual local vectors

Collective

Input Parameters:
- `dm`    - the `DMCOMPOSITE` object
- `gvec`  - the global vector
- `imode` - `INSERT_VALUES` or `ADD_VALUES`
- `lvecs` - the individual sequential vectors, NULL for any that are not needed

Level: advanced

-seealso: `DMCOMPOSITE`, `DM`, `DMDestroy()`, `DMCompositeAddDM()`, `DMCreateGlobalVector()`,
`DMCompositeScatter()`, `DMCompositeCreate()`, `DMCompositeGetISLocalToGlobalMappings()`, `DMCompositeGetAccess()`,
`DMCompositeGetLocalVectors()`, `DMCompositeRestoreLocalVectors()`, `DMCompositeGetEntries()`,

# External Links
$(_doc_external("Dm/DMCompositeGatherArray"))
"""
function DMCompositeGatherArray(petsclib::PetscLibType, dm::PetscDM, imode::InsertMode, gvec::PetscVec, lvecs::PetscVec) end

@for_petsc function DMCompositeGatherArray(petsclib::$UnionPetscLib, dm::PetscDM, imode::InsertMode, gvec::PetscVec, lvecs::PetscVec )
	lvecs_ = Ref(lvecs.ptr)

    @chk ccall(
               (:DMCompositeGatherArray, $petsc_library),
               PetscErrorCode,
               (CDM, InsertMode, CVec, Ptr{CVec}),
               dm, imode, gvec, lvecs_,
              )

	lvecs.ptr = C_NULL

	return nothing
end 

"""
	DMCompositeAddDM(petsclib::PetscLibType,dmc::PetscDM, dm::PetscDM) 
adds a `DM` vector to a `DMCOMPOSITE`

Collective

Input Parameters:
- `dmc` - the  `DMCOMPOSITE` object
- `dm`  - the `DM` object

Level: advanced

-seealso: `DMCOMPOSITE`, `DM`, `DMDestroy()`, `DMCompositeGather()`, `DMCreateGlobalVector()`,
`DMCompositeScatter()`, `DMCompositeCreate()`, `DMCompositeGetISLocalToGlobalMappings()`, `DMCompositeGetAccess()`,
`DMCompositeGetLocalVectors()`, `DMCompositeRestoreLocalVectors()`, `DMCompositeGetEntries()`

# External Links
$(_doc_external("Dm/DMCompositeAddDM"))
"""
function DMCompositeAddDM(petsclib::PetscLibType, dmc::PetscDM, dm::PetscDM) end

@for_petsc function DMCompositeAddDM(petsclib::$UnionPetscLib, dmc::PetscDM, dm::PetscDM )

    @chk ccall(
               (:DMCompositeAddDM, $petsc_library),
               PetscErrorCode,
               (CDM, CDM),
               dmc, dm,
              )


	return nothing
end 

"""
	DMCompositeGetISLocalToGlobalMappings(petsclib::PetscLibType,dm::PetscDM, ltogs::Vector{ISLocalToGlobalMapping}) 
gets an `ISLocalToGlobalMapping` for each `DM` in the `DMCOMPOSITE`, maps to the composite global space

Collective; No Fortran Support

Input Parameter:
- `dm` - the `DMCOMPOSITE` object

Output Parameter:
- `ltogs` - the individual mappings for each packed vector. Note that this includes
all the ghost points that individual ghosted `DMDA` may have.

Level: advanced

-seealso: `DMCOMPOSITE`, `DM`, `DMDestroy()`, `DMCompositeAddDM()`, `DMCreateGlobalVector()`,
`DMCompositeGather()`, `DMCompositeCreate()`, `DMCompositeGetAccess()`, `DMCompositeScatter()`,
`DMCompositeGetLocalVectors()`, `DMCompositeRestoreLocalVectors()`, `DMCompositeGetEntries()`

# External Links
$(_doc_external("Dm/DMCompositeGetISLocalToGlobalMappings"))
"""
function DMCompositeGetISLocalToGlobalMappings(petsclib::PetscLibType, dm::PetscDM, ltogs::Vector{ISLocalToGlobalMapping}) end

@for_petsc function DMCompositeGetISLocalToGlobalMappings(petsclib::$UnionPetscLib, dm::PetscDM, ltogs::Vector{ISLocalToGlobalMapping} )
	ltogs_ = Ref(pointer(ltogs))

    @chk ccall(
               (:DMCompositeGetISLocalToGlobalMappings, $petsc_library),
               PetscErrorCode,
               (CDM, Ptr{Ptr{ISLocalToGlobalMapping}}),
               dm, ltogs_,
              )


	return nothing
end 

"""
	DMCompositeGetLocalISs(petsclib::PetscLibType,dm::PetscDM, is::Vector{IS}) 
Gets index sets for each component of a composite local vector

Not Collective; No Fortran Support

Input Parameter:
- `dm` - the `DMCOMPOSITE`

Output Parameter:
- `is` - array of serial index sets for each component of the `DMCOMPOSITE`

Level: intermediate

-seealso: `DMCOMPOSITE`, `DM`, `DMCompositeGetGlobalISs()`, `DMCompositeGetISLocalToGlobalMappings()`, `MatGetLocalSubMatrix()`,
`MatCreateLocalRef()`, `DMCompositeGetNumberDM()`

# External Links
$(_doc_external("Dm/DMCompositeGetLocalISs"))
"""
function DMCompositeGetLocalISs(petsclib::PetscLibType, dm::PetscDM, is::Vector{IS}) end

@for_petsc function DMCompositeGetLocalISs(petsclib::$UnionPetscLib, dm::PetscDM, is::Vector{IS} )
	is_ = Ref(pointer(is))

    @chk ccall(
               (:DMCompositeGetLocalISs, $petsc_library),
               PetscErrorCode,
               (CDM, Ptr{Ptr{IS}}),
               dm, is_,
              )


	return nothing
end 

"""
	DMCompositeGetGlobalISs(petsclib::PetscLibType,dm::PetscDM, is::Vector{IS}) 
Gets the index sets for each composed object in a `DMCOMPOSITE`

Collective

Input Parameter:
- `dm` - the `DMCOMPOSITE` object

Output Parameter:
- `is` - the array of index sets

Level: advanced

-seealso: `DMCOMPOSITE`, `DM`, `DMDestroy()`, `DMCompositeAddDM()`, `DMCreateGlobalVector()`,
`DMCompositeGather()`, `DMCompositeCreate()`, `DMCompositeGetAccess()`, `DMCompositeScatter()`,
`DMCompositeGetLocalVectors()`, `DMCompositeRestoreLocalVectors()`, `DMCompositeGetEntries()`

# External Links
$(_doc_external("Dm/DMCompositeGetGlobalISs"))
"""
function DMCompositeGetGlobalISs(petsclib::PetscLibType, dm::PetscDM, is::Vector{IS}) end

@for_petsc function DMCompositeGetGlobalISs(petsclib::$UnionPetscLib, dm::PetscDM, is::Vector{IS} )
	is_ = Ref(pointer(is))

    @chk ccall(
               (:DMCompositeGetGlobalISs, $petsc_library),
               PetscErrorCode,
               (CDM, Ptr{Ptr{IS}}),
               dm, is_,
              )


	return nothing
end 

"""
	DMCompositeGetEntriesArray(petsclib::PetscLibType,dm::PetscDM, dms::Vector{PetscDM}) 
Gets the DM for each entry in a `DMCOMPOSITE`

Not Collective

Input Parameter:
- `dm` - the `DMCOMPOSITE` object

Output Parameter:
- `dms` - array of sufficient length (see `DMCompositeGetNumberDM()`) to hold the individual `DM`

Level: advanced

-seealso: `DMCOMPOSITE`, `DM`, `DMDestroy()`, `DMCompositeAddDM()`, `DMCreateGlobalVector()`, `DMCompositeGetEntries()`
`DMCompositeGather()`, `DMCompositeCreate()`, `DMCompositeGetISLocalToGlobalMappings()`, `DMCompositeGetAccess()`,
`DMCompositeRestoreLocalVectors()`, `DMCompositeGetLocalVectors()`, `DMCompositeScatter()`

# External Links
$(_doc_external("Dm/DMCompositeGetEntriesArray"))
"""
function DMCompositeGetEntriesArray(petsclib::PetscLibType, dm::PetscDM, dms::Vector{PetscDM}) end

@for_petsc function DMCompositeGetEntriesArray(petsclib::$UnionPetscLib, dm::PetscDM, dms::Vector{PetscDM} )

    @chk ccall(
               (:DMCompositeGetEntriesArray, $petsc_library),
               PetscErrorCode,
               (CDM, Ptr{CDM}),
               dm, dms,
              )


	return nothing
end 

"""
	packer::PetscDM = DMCompositeCreate(petsclib::PetscLibType,comm::MPI_Comm) 
Creates a `DMCOMPOSITE`, used to generate "composite"
vectors made up of several subvectors.

Collective

Input Parameter:
- `comm` - the processors that will share the global vector

Output Parameter:
- `packer` - the `DMCOMPOSITE` object

Level: advanced

-seealso: `DMCOMPOSITE`, `DM`, `DMDestroy()`, `DMCompositeAddDM()`, `DMCompositeScatter()`, `DMCreate()`
`DMCompositeGather()`, `DMCreateGlobalVector()`, `DMCompositeGetISLocalToGlobalMappings()`, `DMCompositeGetAccess()`
`DMCompositeGetLocalVectors()`, `DMCompositeRestoreLocalVectors()`, `DMCompositeGetEntries()`

# External Links
$(_doc_external("Dm/DMCompositeCreate"))
"""
function DMCompositeCreate(petsclib::PetscLibType, comm::MPI_Comm) end

@for_petsc function DMCompositeCreate(petsclib::$UnionPetscLib, comm::MPI_Comm )
	packer_ = Ref{CDM}()

    @chk ccall(
               (:DMCompositeCreate, $petsc_library),
               PetscErrorCode,
               (MPI_Comm, Ptr{CDM}),
               comm, packer_,
              )

	packer = PetscDM(packer_[], petsclib)

	return packer
end 

"""
	dm::PetscDM = DMStagCreate1d(petsclib::PetscLibType,comm::MPI_Comm, bndx::DMBoundaryType, M::PetscInt, dof0::PetscInt, dof1::PetscInt, stencilType::DMStagStencilType, stencilWidth::PetscInt, lx::Vector{PetscInt}) 
Create an object to manage data living on the elements and vertices of a parallelized regular 1D grid.

Collective

Input Parameters:
- `comm`         - MPI communicator
- `bndx`         - boundary type: `DM_BOUNDARY_NONE`, `DM_BOUNDARY_PERIODIC`, or `DM_BOUNDARY_GHOSTED`
- `M`            - global number of elements
- `dof0`         - number of degrees of freedom per vertex/0-cell
- `dof1`         - number of degrees of freedom per element/1-cell
- `stencilType`  - ghost/halo region type: `DMSTAG_STENCIL_BOX` or `DMSTAG_STENCIL_NONE`
- `stencilWidth` - width, in elements, of halo/ghost region
- `lx`           - array of local sizes, of length equal to the comm size, summing to `M` or `NULL`

Output Parameter:
- `dm` - the new `DMSTAG` object

Options Database Keys:
- `-dm_view`                                      - calls `DMViewFromOptions()` at the conclusion of `DMSetUp()`
- `-stag_grid_x <nx>`                             - number of elements in the x direction
- `-stag_ghost_stencil_width`                     - width of ghost region, in elements
- `-stag_boundary_type_x <none,ghosted,periodic>` - `DMBoundaryType` value

Level: beginner

Notes:
You must call `DMSetUp()` after this call before using the `DM`.
If you wish to use the options database (see the keys above) to change values in the `DMSTAG`, you must call
`DMSetFromOptions()` after this function but before `DMSetUp()`.

See also: 
=== 
`DMSTAG`, `DMStagCreate2d()`, `DMStagCreate3d()`, `DMDestroy()`, `DMView()`, `DMCreateGlobalVector()`, `DMCreateLocalVector()`, `DMLocalToGlobalBegin()`, `DMDACreate1d()`

# External Links
$(_doc_external("Dm/DMStagCreate1d"))
"""
function DMStagCreate1d(petsclib::PetscLibType, comm::MPI_Comm, bndx::DMBoundaryType, M::PetscInt, dof0::PetscInt, dof1::PetscInt, stencilType::DMStagStencilType, stencilWidth::PetscInt, lx::Vector{PetscInt}) end

@for_petsc function DMStagCreate1d(petsclib::$UnionPetscLib, comm::MPI_Comm, bndx::DMBoundaryType, M::$PetscInt, dof0::$PetscInt, dof1::$PetscInt, stencilType::DMStagStencilType, stencilWidth::$PetscInt, lx::Vector{$PetscInt} )
	dm_ = Ref{CDM}()

    @chk ccall(
               (:DMStagCreate1d, $petsc_library),
               PetscErrorCode,
               (MPI_Comm, DMBoundaryType, $PetscInt, $PetscInt, $PetscInt, DMStagStencilType, $PetscInt, Ptr{$PetscInt}, Ptr{CDM}),
               comm, bndx, M, dof0, dof1, stencilType, stencilWidth, lx, dm_,
              )

	dm = PetscDM(dm_[], petsclib)

	return dm
end 

"""
	DMStagVecSplitToDMDA(petsclib::PetscLibType,dm::PetscDM, vec::PetscVec, loc::DMStagStencilLocation, c::PetscInt, pda::PetscDM, pdavec::PetscVec) 
create a `DMDA` and `Vec` from a subgrid of a `DMSTAG` and its `Vec`

Collective

Input Parameters:
- `dm`  - the `DMSTAG` object
- `vec` - `Vec` object associated with `dm`
- `loc` - which subgrid to extract (see `DMStagStencilLocation`)
- `c`   - which component to extract (see note below)

Output Parameters:
- `pda`    - the `DMDA`
- `pdavec` - the new `Vec`

Level: advanced

Notes:
If a `c` value of `-k` is provided, the first `k` DOF for that position are extracted,
padding with zero values if needed. If a non-negative value is provided, a single
DOF is extracted.

The caller is responsible for destroying the created `DMDA` and `Vec`.

See also: 
=== 
`DMSTAG`, `DMDA`, `DMStagStencilLocation`, `DM`, `Vec`, `DMStagMigrateVec()`, `DMStagCreateCompatibleDMStag()`

# External Links
$(_doc_external("Dm/DMStagVecSplitToDMDA"))
"""
function DMStagVecSplitToDMDA(petsclib::PetscLibType, dm::PetscDM, vec::PetscVec, loc::DMStagStencilLocation, c::PetscInt, pda::PetscDM, pdavec::PetscVec) end

@for_petsc function DMStagVecSplitToDMDA(petsclib::$UnionPetscLib, dm::PetscDM, vec::PetscVec, loc::DMStagStencilLocation, c::$PetscInt, pda::PetscDM, pdavec::PetscVec )
	pda_ = Ref(pda.ptr)
	pdavec_ = Ref(pdavec.ptr)

    @chk ccall(
               (:DMStagVecSplitToDMDA, $petsc_library),
               PetscErrorCode,
               (CDM, CVec, DMStagStencilLocation, $PetscInt, Ptr{CDM}, Ptr{CVec}),
               dm, vec, loc, c, pda_, pdavec_,
              )

	pda.ptr = C_NULL
	pdavec.ptr = C_NULL

	return nothing
end 

"""
	is::IS = DMStagCreateISFromStencils(petsclib::PetscLibType,dm::PetscDM, n_stencil::PetscInt, stencils::Vector{DMStagStencil}) 
Create an `IS`, using global numberings, for a subset of DOF in a `DMSTAG` object

Collective

Input Parameters:
- `dm`        - the `DMSTAG` object
- `n_stencil` - the number of stencils provided
- `stencils`  - an array of `DMStagStencil` objects (`i`, `j`, and `k` are ignored)

Output Parameter:
- `is` - the global `IS`

Note:
Redundant entries in the stencils argument are ignored

Level: advanced

See also: 
=== 
`DMSTAG`, `IS`, `DMStagStencil`, `DMCreateGlobalVector`

# External Links
$(_doc_external("Dm/DMStagCreateISFromStencils"))
"""
function DMStagCreateISFromStencils(petsclib::PetscLibType, dm::PetscDM, n_stencil::PetscInt, stencils::Vector{DMStagStencil}) end

@for_petsc function DMStagCreateISFromStencils(petsclib::$UnionPetscLib, dm::PetscDM, n_stencil::$PetscInt, stencils::Vector{DMStagStencil} )
	is_ = Ref{IS}()

    @chk ccall(
               (:DMStagCreateISFromStencils, $petsc_library),
               PetscErrorCode,
               (CDM, $PetscInt, Ptr{DMStagStencil}, Ptr{IS}),
               dm, n_stencil, stencils, is_,
              )

	is = is_[]

	return is
end 

"""
	dof::PetscInt = DMStagGetLocationDOF(petsclib::PetscLibType,dm::PetscDM, loc::DMStagStencilLocation) 
Get number of DOF associated with a given point in a `DMSTAG` grid

Not Collective

Input Parameters:
- `dm`  - the `DMSTAG` object
- `loc` - grid point (see `DMStagStencilLocation`)

Output Parameter:
- `dof` - the number of DOF (components) living at `loc` in `dm`

Level: intermediate

See also: 
=== 
`DMSTAG`, `DMStagStencilLocation`, `DMStagStencil`, `DMDAGetDof()`

# External Links
$(_doc_external("Dm/DMStagGetLocationDOF"))
"""
function DMStagGetLocationDOF(petsclib::PetscLibType, dm::PetscDM, loc::DMStagStencilLocation) end

@for_petsc function DMStagGetLocationDOF(petsclib::$UnionPetscLib, dm::PetscDM, loc::DMStagStencilLocation )
	dof_ = Ref{$PetscInt}()

    @chk ccall(
               (:DMStagGetLocationDOF, $petsc_library),
               PetscErrorCode,
               (CDM, DMStagStencilLocation, Ptr{$PetscInt}),
               dm, loc, dof_,
              )

	dof = dof_[]

	return dof
end 

"""
	val::PetscScalar = DMStagMatGetValuesStencil(petsclib::PetscLibType,dm::PetscDM, mat::PetscMat, nRow::PetscInt, posRow::DMStagStencil, nCol::PetscInt, posCol::DMStagStencil) 
retrieve local matrix entries using grid indexing

Not Collective

Input Parameters:
- `dm`     - the `DMSTAG` object
- `mat`    - the matrix
- `nRow`   - number of rows
- `posRow` - grid locations (including components) of rows
- `nCol`   - number of columns
- `posCol` - grid locations (including components) of columns

Output Parameter:
- `val` - logically two-dimensional array of values

Level: advanced

See also: 
=== 
`DMSTAG`, `DMStagStencil`, `DMStagStencilLocation`, `DMStagVecGetValuesStencil()`, `DMStagVecSetValuesStencil()`, `DMStagMatSetValuesStencil()`, `MatSetValuesStencil()`, `MatAssemblyBegin()`, `MatAssemblyEnd()`, `DMCreateMatrix()`

# External Links
$(_doc_external("Dm/DMStagMatGetValuesStencil"))
"""
function DMStagMatGetValuesStencil(petsclib::PetscLibType, dm::PetscDM, mat::PetscMat, nRow::PetscInt, posRow::DMStagStencil, nCol::PetscInt, posCol::DMStagStencil) end

@for_petsc function DMStagMatGetValuesStencil(petsclib::$UnionPetscLib, dm::PetscDM, mat::PetscMat, nRow::$PetscInt, posRow::DMStagStencil, nCol::$PetscInt, posCol::DMStagStencil )
	val_ = Ref{$PetscScalar}()

    @chk ccall(
               (:DMStagMatGetValuesStencil, $petsc_library),
               PetscErrorCode,
               (CDM, CMat, $PetscInt, Ptr{DMStagStencil}, $PetscInt, Ptr{DMStagStencil}, Ptr{$PetscScalar}),
               dm, mat, nRow, posRow, nCol, posCol, val_,
              )

	val = val_[]

	return val
end 

"""
	DMStagMatSetValuesStencil(petsclib::PetscLibType,dm::PetscDM, mat::PetscMat, nRow::PetscInt, posRow::DMStagStencil, nCol::PetscInt, posCol::DMStagStencil, val::PetscScalar, insertMode::InsertMode) 
insert or add matrix entries using grid indexing

Not Collective

Input Parameters:
- `dm`         - the `DMSTAG` object
- `mat`        - the matrix
- `nRow`       - number of rows
- `posRow`     - grid locations (including components) of rows
- `nCol`       - number of columns
- `posCol`     - grid locations (including components) of columns
- `val`        - logically two-dimensional array of values
- `insertMode` - `INSERT_VALUES` or `ADD_VALUES`

Notes:
See notes for `MatSetValuesStencil()`

Level: intermediate

See also: 
=== 
`DMSTAG`, `DMStagStencil`, `DMStagStencilLocation`, `DMStagVecGetValuesStencil()`, `DMStagVecSetValuesStencil()`, `DMStagMatGetValuesStencil()`, `MatSetValuesStencil()`, `MatAssemblyBegin()`, `MatAssemblyEnd()`, `DMCreateMatrix()`

# External Links
$(_doc_external("Dm/DMStagMatSetValuesStencil"))
"""
function DMStagMatSetValuesStencil(petsclib::PetscLibType, dm::PetscDM, mat::PetscMat, nRow::PetscInt, posRow::DMStagStencil, nCol::PetscInt, posCol::DMStagStencil, val::PetscScalar, insertMode::InsertMode) end

@for_petsc function DMStagMatSetValuesStencil(petsclib::$UnionPetscLib, dm::PetscDM, mat::PetscMat, nRow::$PetscInt, posRow::DMStagStencil, nCol::$PetscInt, posCol::DMStagStencil, val::$PetscScalar, insertMode::InsertMode )

    @chk ccall(
               (:DMStagMatSetValuesStencil, $petsc_library),
               PetscErrorCode,
               (CDM, CMat, $PetscInt, Ptr{DMStagStencil}, $PetscInt, Ptr{DMStagStencil}, Ptr{$PetscScalar}, InsertMode),
               dm, mat, nRow, posRow, nCol, posCol, val, insertMode,
              )


	return nothing
end 

"""
	ix::PetscInt = DMStagStencilToIndexLocal(petsclib::PetscLibType,dm::PetscDM, dim::PetscInt, n::PetscInt, pos::DMStagStencil) 
Convert an array of `DMStagStenci`l objects to an array of indices into a local vector.

Not Collective

Input Parameters:
- `dm`  - the `DMSTAG` object
- `dim` - the dimension of the `DMSTAG` object
- `n`   - the number of `DMStagStencil` objects
- `pos` - an array of `n` `DMStagStencil` objects

Output Parameter:
- `ix` - output array of `n` indices

Notes:
The `DMStagStencil` objects in `pos` use global element indices.

The `.c` fields in `pos` must always be set (even if to `0`).

Developer Notes:
This is a "hot" function, and accepts the dimension redundantly to avoid having to perform any error checking inside the function.

Level: developer

See also: 
=== 
`DMSTAG`, `DMStagStencilLocation`, `DMStagStencil`, `DMGetLocalVector`, `DMCreateLocalVector`

# External Links
$(_doc_external("Dm/DMStagStencilToIndexLocal"))
"""
function DMStagStencilToIndexLocal(petsclib::PetscLibType, dm::PetscDM, dim::PetscInt, n::PetscInt, pos::DMStagStencil) end

@for_petsc function DMStagStencilToIndexLocal(petsclib::$UnionPetscLib, dm::PetscDM, dim::$PetscInt, n::$PetscInt, pos::DMStagStencil )
	ix_ = Ref{$PetscInt}()

    @chk ccall(
               (:DMStagStencilToIndexLocal, $petsc_library),
               PetscErrorCode,
               (CDM, $PetscInt, $PetscInt, Ptr{DMStagStencil}, Ptr{$PetscInt}),
               dm, dim, n, pos, ix_,
              )

	ix = ix_[]

	return ix
end 

"""
	val::PetscScalar = DMStagVecGetValuesStencil(petsclib::PetscLibType,dm::PetscDM, vec::PetscVec, n::PetscInt, pos::DMStagStencil) 
get vector values using grid indexing

Not Collective

Input Parameters:
- `dm`  - the `DMSTAG` object
- `vec` - the vector object
- `n`   - the number of values to obtain
- `pos` - locations to obtain values from (as an array of `DMStagStencil` values)

Output Parameter:
- `val` - value at the point

Notes:
Accepts stencils which refer to global element numbers, but
only allows access to entries in the local representation (including ghosts).

This approach is not as efficient as getting values directly with `DMStagVecGetArray()`,
which is recommended for matrix-free operators.

Level: advanced

See also: 
=== 
`DMSTAG`, `DMStagStencil`, `DMStagStencilLocation`, `DMStagVecSetValuesStencil()`, `DMStagMatSetValuesStencil()`, `DMStagVecGetArray()`

# External Links
$(_doc_external("Dm/DMStagVecGetValuesStencil"))
"""
function DMStagVecGetValuesStencil(petsclib::PetscLibType, dm::PetscDM, vec::PetscVec, n::PetscInt, pos::DMStagStencil) end

@for_petsc function DMStagVecGetValuesStencil(petsclib::$UnionPetscLib, dm::PetscDM, vec::PetscVec, n::$PetscInt, pos::DMStagStencil )
	val_ = Ref{$PetscScalar}()

    @chk ccall(
               (:DMStagVecGetValuesStencil, $petsc_library),
               PetscErrorCode,
               (CDM, CVec, $PetscInt, Ptr{DMStagStencil}, Ptr{$PetscScalar}),
               dm, vec, n, pos, val_,
              )

	val = val_[]

	return val
end 

"""
	DMStagVecSetValuesStencil(petsclib::PetscLibType,dm::PetscDM, vec::PetscVec, n::PetscInt, pos::DMStagStencil, val::PetscScalar, insertMode::InsertMode) 
Set `Vec` values using global grid indexing

Not Collective

Input Parameters:
- `dm`         - the `DMSTAG` object
- `vec`        - the `Vec`
- `n`          - the number of values to set
- `pos`        - the locations to set values, as an array of `DMStagStencil` structs
- `val`        - the values to set
- `insertMode` - `INSERT_VALUES` or `ADD_VALUES`

Notes:
The vector is expected to be a global vector compatible with the DM (usually obtained by `DMGetGlobalVector()` or `DMCreateGlobalVector()`).

This approach is not as efficient as setting values directly with `DMStagVecGetArray()`, which is recommended for matrix-free operators.
For assembling systems, where overhead may be less important than convenience, this routine could be helpful in assembling a righthand side and a matrix (using `DMStagMatSetValuesStencil()`).

Level: advanced

See also: 
=== 
`DMSTAG`, `Vec`, `DMStagStencil`, `DMStagStencilLocation`, `DMStagVecGetValuesStencil()`, `DMStagMatSetValuesStencil()`, `DMCreateGlobalVector()`, `DMGetLocalVector()`, `DMStagVecGetArray()`

# External Links
$(_doc_external("Dm/DMStagVecSetValuesStencil"))
"""
function DMStagVecSetValuesStencil(petsclib::PetscLibType, dm::PetscDM, vec::PetscVec, n::PetscInt, pos::DMStagStencil, val::PetscScalar, insertMode::InsertMode) end

@for_petsc function DMStagVecSetValuesStencil(petsclib::$UnionPetscLib, dm::PetscDM, vec::PetscVec, n::$PetscInt, pos::DMStagStencil, val::$PetscScalar, insertMode::InsertMode )

    @chk ccall(
               (:DMStagVecSetValuesStencil, $petsc_library),
               PetscErrorCode,
               (CDM, CVec, $PetscInt, Ptr{DMStagStencil}, Ptr{$PetscScalar}, InsertMode),
               dm, vec, n, pos, val, insertMode,
              )


	return nothing
end 

"""
	DMStagRestrictSimple(petsclib::PetscLibType,dmf::PetscDM, xf::PetscVec, dmc::PetscDM, xc::PetscVec) 
restricts data from a fine to a coarse `DMSTAG`, in the simplest way

Values on coarse cells are averages of all fine cells that they cover.
Thus, values on vertices are injected, values on edges are averages
of the underlying two fine edges, and values on elements in
d dimensions are averages of 2^d underlying elements.

Input Parameters:
- `dmf` - fine `DM`
- `xf`  - data on fine `DM`
- `dmc` - coarse `DM`

Output Parameter:
- `xc` - data on coarse `DM`

Level: advanced

See also: 
=== 
`DMSTAG`, `DM`, `DMRestrict()`, `DMCoarsen()`, `DMCreateInjection()`

# External Links
$(_doc_external("Dm/DMStagRestrictSimple"))
"""
function DMStagRestrictSimple(petsclib::PetscLibType, dmf::PetscDM, xf::PetscVec, dmc::PetscDM, xc::PetscVec) end

@for_petsc function DMStagRestrictSimple(petsclib::$UnionPetscLib, dmf::PetscDM, xf::PetscVec, dmc::PetscDM, xc::PetscVec )

    @chk ccall(
               (:DMStagRestrictSimple, $petsc_library),
               PetscErrorCode,
               (CDM, CVec, CDM, CVec),
               dmf, xf, dmc, xc,
              )


	return nothing
end 

"""
	dm::PetscDM = DMStagCreate3d(petsclib::PetscLibType,comm::MPI_Comm, bndx::DMBoundaryType, bndy::DMBoundaryType, bndz::DMBoundaryType, M::PetscInt, N::PetscInt, P::PetscInt, m::PetscInt, n::PetscInt, p::PetscInt, dof0::PetscInt, dof1::PetscInt, dof2::PetscInt, dof3::PetscInt, stencilType::DMStagStencilType, stencilWidth::PetscInt, lx::Vector{PetscInt}, ly::Vector{PetscInt}, lz::Vector{PetscInt}) 
Create an object to manage data living on the elements, faces, edges, and vertices of a parallelized regular 3D grid.

Collective

Input Parameters:
- `comm`         - MPI communicator
- `bndx`         - x boundary type, `DM_BOUNDARY_NONE`, `DM_BOUNDARY_PERIODIC`, or `DM_BOUNDARY_GHOSTED`
- `bndy`         - y boundary type, `DM_BOUNDARY_NONE`, `DM_BOUNDARY_PERIODIC`, or `DM_BOUNDARY_GHOSTED`
- `bndz`         - z boundary type, `DM_BOUNDARY_NONE`, `DM_BOUNDARY_PERIODIC`, or `DM_BOUNDARY_GHOSTED`
- `M`            - global number of elements in x direction
- `N`            - global number of elements in y direction
- `P`            - global number of elements in z direction
- `m`            - number of ranks in the x direction (may be `PETSC_DECIDE`)
- `n`            - number of ranks in the y direction (may be `PETSC_DECIDE`)
- `p`            - number of ranks in the z direction (may be `PETSC_DECIDE`)
- `dof0`         - number of degrees of freedom per vertex/0-cell
- `dof1`         - number of degrees of freedom per edge/1-cell
- `dof2`         - number of degrees of freedom per face/2-cell
- `dof3`         - number of degrees of freedom per element/3-cell
- `stencilType`  - ghost/halo region type: `DMSTAG_STENCIL_NONE`, `DMSTAG_STENCIL_BOX`, or `DMSTAG_STENCIL_STAR`
- `stencilWidth` - width, in elements, of halo/ghost region
- `lx`           - array of local x  element counts, of length equal to `m`, summing to `M`, or `NULL`
- `ly`           - arrays of local y element counts, of length equal to `n`, summing to `N`, or `NULL`
- `lz`           - arrays of local z element counts, of length equal to `p`, summing to `P`, or `NULL`

Output Parameter:
- `dm` - the new `DMSTAG` object

Options Database Keys:
- `-dm_view`                                      - calls `DMViewFromOptions()` at the conclusion of `DMSetUp()`
- `-stag_grid_x <nx>`                             - number of elements in the x direction
- `-stag_grid_y <ny>`                             - number of elements in the y direction
- `-stag_grid_z <nz>`                             - number of elements in the z direction
- `-stag_ranks_x <rx>`                            - number of ranks in the x direction
- `-stag_ranks_y <ry>`                            - number of ranks in the y direction
- `-stag_ranks_z <rz>`                            - number of ranks in the z direction
- `-stag_ghost_stencil_width`                     - width of ghost region, in elements
- `-stag_boundary_type x <none,ghosted,periodic>` - `DMBoundaryType` value
- `-stag_boundary_type y <none,ghosted,periodic>` - `DMBoundaryType` value
- `-stag_boundary_type z <none,ghosted,periodic>` - `DMBoundaryType` value

Level: beginner

Notes:
You must call `DMSetUp()` after this call before using the `DM`.
If you wish to use the options database (see the keys above) to change values in the `DMSTAG`, you must call
`DMSetFromOptions()` after this function but before `DMSetUp()`.

See also: 
=== 
`DMSTAG`, `DMStagCreate1d()`, `DMStagCreate2d()`, `DMDestroy()`, `DMView()`, `DMCreateGlobalVector()`, `DMCreateLocalVector()`, `DMLocalToGlobalBegin()`, `DMDACreate3d()`

# External Links
$(_doc_external("Dm/DMStagCreate3d"))
"""
function DMStagCreate3d(petsclib::PetscLibType, comm::MPI_Comm, bndx::DMBoundaryType, bndy::DMBoundaryType, bndz::DMBoundaryType, M::PetscInt, N::PetscInt, P::PetscInt, m::PetscInt, n::PetscInt, p::PetscInt, dof0::PetscInt, dof1::PetscInt, dof2::PetscInt, dof3::PetscInt, stencilType::DMStagStencilType, stencilWidth::PetscInt, lx::Vector{PetscInt}, ly::Vector{PetscInt}, lz::Vector{PetscInt}) end

@for_petsc function DMStagCreate3d(petsclib::$UnionPetscLib, comm::MPI_Comm, bndx::DMBoundaryType, bndy::DMBoundaryType, bndz::DMBoundaryType, M::$PetscInt, N::$PetscInt, P::$PetscInt, m::$PetscInt, n::$PetscInt, p::$PetscInt, dof0::$PetscInt, dof1::$PetscInt, dof2::$PetscInt, dof3::$PetscInt, stencilType::DMStagStencilType, stencilWidth::$PetscInt, lx::Vector{$PetscInt}, ly::Vector{$PetscInt}, lz::Vector{$PetscInt} )
	dm_ = Ref{CDM}()

    @chk ccall(
               (:DMStagCreate3d, $petsc_library),
               PetscErrorCode,
               (MPI_Comm, DMBoundaryType, DMBoundaryType, DMBoundaryType, $PetscInt, $PetscInt, $PetscInt, $PetscInt, $PetscInt, $PetscInt, $PetscInt, $PetscInt, $PetscInt, $PetscInt, DMStagStencilType, $PetscInt, Ptr{$PetscInt}, Ptr{$PetscInt}, Ptr{$PetscInt}, Ptr{CDM}),
               comm, bndx, bndy, bndz, M, N, P, m, n, p, dof0, dof1, dof2, dof3, stencilType, stencilWidth, lx, ly, lz, dm_,
              )

	dm = PetscDM(dm_[], petsclib)

	return dm
end 

"""
	boundaryTypeX::DMBoundaryType,boundaryTypeY::DMBoundaryType,boundaryTypeZ::DMBoundaryType = DMStagGetBoundaryTypes(petsclib::PetscLibType,dm::PetscDM) 
get boundary types

Not Collective

Input Parameter:
- `dm` - the `DMSTAG` object

Output Parameters:
- `boundaryTypeX` - boundary type for x direction
- `boundaryTypeY` - boundary type for y direction, not set for one dimensional problems
- `boundaryTypeZ` - boundary type for z direction, not set for one and two dimensional problems

Level: intermediate

See also: 
=== 
`DMSTAG`, `DMBoundaryType`

# External Links
$(_doc_external("Dm/DMStagGetBoundaryTypes"))
"""
function DMStagGetBoundaryTypes(petsclib::PetscLibType, dm::PetscDM) end

@for_petsc function DMStagGetBoundaryTypes(petsclib::$UnionPetscLib, dm::PetscDM )
	boundaryTypeX_ = Ref{DMBoundaryType}()
	boundaryTypeY_ = Ref{DMBoundaryType}()
	boundaryTypeZ_ = Ref{DMBoundaryType}()

    @chk ccall(
               (:DMStagGetBoundaryTypes, $petsc_library),
               PetscErrorCode,
               (CDM, Ptr{DMBoundaryType}, Ptr{DMBoundaryType}, Ptr{DMBoundaryType}),
               dm, boundaryTypeX_, boundaryTypeY_, boundaryTypeZ_,
              )

	boundaryTypeX = unsafe_string(boundaryTypeX_[])
	boundaryTypeY = unsafe_string(boundaryTypeY_[])
	boundaryTypeZ = unsafe_string(boundaryTypeZ_[])

	return boundaryTypeX,boundaryTypeY,boundaryTypeZ
end 

"""
	DMStagGetProductCoordinateArrays(petsclib::PetscLibType,dm::PetscDM, arrX::Cvoid, arrY::Cvoid, arrZ::Cvoid) 
extract local product coordinate arrays, one per dimension

Logically Collective

Input Parameter:
- `dm` - the `DMSTAG` object

Output Parameters:
- `arrX` - local 1D coordinate arrays for x direction
- `arrY` - local 1D coordinate arrays for y direction, not set for one dimensional problems
- `arrZ` - local 1D coordinate arrays for z direction, not set for one and two dimensional problems

Level: intermediate

Notes:
A high-level helper function to quickly extract local coordinate arrays.

Note that 2-dimensional arrays are returned. See
`DMStagVecGetArray()`, which is called internally to produce these arrays
representing coordinates on elements and vertices (element boundaries)
for a 1-dimensional `DMSTAG` in each coordinate direction.

One should use `DMStagGetProductCoordinateLocationSlot()` to determine appropriate
indices for the second dimension in these returned arrays. This function
checks that the coordinate array is a suitable product of 1-dimensional
`DMSTAG` objects.

See also: 
=== 
`DMSTAG`, `DMPRODUCT`, `DMStagGetProductCoordinateArraysRead()`, `DMStagSetUniformCoordinates()`, `DMStagSetUniformCoordinatesProduct()`, `DMStagGetProductCoordinateLocationSlot()`

# External Links
$(_doc_external("Dm/DMStagGetProductCoordinateArrays"))
"""
function DMStagGetProductCoordinateArrays(petsclib::PetscLibType, dm::PetscDM, arrX::Cvoid, arrY::Cvoid, arrZ::Cvoid) end

@for_petsc function DMStagGetProductCoordinateArrays(petsclib::$UnionPetscLib, dm::PetscDM, arrX::Cvoid, arrY::Cvoid, arrZ::Cvoid )

    @chk ccall(
               (:DMStagGetProductCoordinateArrays, $petsc_library),
               PetscErrorCode,
               (CDM, Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}),
               dm, arrX, arrY, arrZ,
              )


	return nothing
end 

"""
	DMStagGetProductCoordinateArraysRead(petsclib::PetscLibType,dm::PetscDM, arrX::Cvoid, arrY::Cvoid, arrZ::Cvoid) 
extract product coordinate arrays, read

Logically Collective

Input Parameter:
- `dm` - the `DMSTAG` object

Output Parameters:
- `arrX` - local 1D coordinate arrays for `x` direction
- `arrY` - local 1D coordinate arrays for `y` direction, not set for one dimensional problems
- `arrZ` - local 1D coordinate arrays for `z` direction, not set for one and two dimensional problems

Level: intermediate

Note:
See `DMStagGetProductCoordinateArrays()` for more information.

See also: 
=== 
`DMSTAG`, `DMPRODUCT`, `DMStagGetProductCoordinateArrays()`, `DMStagSetUniformCoordinates()`, `DMStagSetUniformCoordinatesProduct()`, `DMStagGetProductCoordinateLocationSlot()`

# External Links
$(_doc_external("Dm/DMStagGetProductCoordinateArraysRead"))
"""
function DMStagGetProductCoordinateArraysRead(petsclib::PetscLibType, dm::PetscDM, arrX::Cvoid, arrY::Cvoid, arrZ::Cvoid) end

@for_petsc function DMStagGetProductCoordinateArraysRead(petsclib::$UnionPetscLib, dm::PetscDM, arrX::Cvoid, arrY::Cvoid, arrZ::Cvoid )

    @chk ccall(
               (:DMStagGetProductCoordinateArraysRead, $petsc_library),
               PetscErrorCode,
               (CDM, Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}),
               dm, arrX, arrY, arrZ,
              )


	return nothing
end 

"""
	x::PetscInt,y::PetscInt,z::PetscInt,m::PetscInt,n::PetscInt,p::PetscInt,nExtrax::PetscInt,nExtray::PetscInt,nExtraz::PetscInt = DMStagGetCorners(petsclib::PetscLibType,dm::PetscDM) 
return global element indices of the local region (excluding ghost points)

Not Collective

Input Parameter:
- `dm` - the `DMSTAG` object

Output Parameters:
- `x`       - starting element index in first direction
- `y`       - starting element index in second direction
- `z`       - starting element index in third direction
- `m`       - element width in first direction
- `n`       - element width in second direction
- `p`       - element width in third direction
- `nExtrax` - number of extra partial elements in first direction
- `nExtray` - number of extra partial elements in second direction
- `nExtraz` - number of extra partial elements in third direction

Level: beginner

Notes:
Arguments corresponding to higher dimensions are ignored for 1D and 2D grids. These arguments may be set to `NULL` in this case.

The number of extra partial elements is either 1 or 0.
The value is 1 on right, top, and front non-periodic domain ("physical") boundaries,
in the x, y, and z directions respectively, and otherwise 0.

See also: 
=== 
`DMSTAG`, `DMStagGetGhostCorners()`, `DMDAGetCorners()`

# External Links
$(_doc_external("Dm/DMStagGetCorners"))
"""
function DMStagGetCorners(petsclib::PetscLibType, dm::PetscDM) end

@for_petsc function DMStagGetCorners(petsclib::$UnionPetscLib, dm::PetscDM )
	x_ = Ref{$PetscInt}()
	y_ = Ref{$PetscInt}()
	z_ = Ref{$PetscInt}()
	m_ = Ref{$PetscInt}()
	n_ = Ref{$PetscInt}()
	p_ = Ref{$PetscInt}()
	nExtrax_ = Ref{$PetscInt}()
	nExtray_ = Ref{$PetscInt}()
	nExtraz_ = Ref{$PetscInt}()

    @chk ccall(
               (:DMStagGetCorners, $petsc_library),
               PetscErrorCode,
               (CDM, Ptr{$PetscInt}, Ptr{$PetscInt}, Ptr{$PetscInt}, Ptr{$PetscInt}, Ptr{$PetscInt}, Ptr{$PetscInt}, Ptr{$PetscInt}, Ptr{$PetscInt}, Ptr{$PetscInt}),
               dm, x_, y_, z_, m_, n_, p_, nExtrax_, nExtray_, nExtraz_,
              )

	x = x_[]
	y = y_[]
	z = z_[]
	m = m_[]
	n = n_[]
	p = p_[]
	nExtrax = nExtrax_[]
	nExtray = nExtray_[]
	nExtraz = nExtraz_[]

	return x,y,z,m,n,p,nExtrax,nExtray,nExtraz
end 

"""
	dof0::PetscInt,dof1::PetscInt,dof2::PetscInt,dof3::PetscInt = DMStagGetDOF(petsclib::PetscLibType,dm::PetscDM) 
get number of DOF associated with each stratum of the grid

Not Collective

Input Parameter:
- `dm` - the `DMSTAG` object

Output Parameters:
- `dof0` - the number of points per 0-cell (vertex/node)
- `dof1` - the number of points per 1-cell (element in 1D, edge in 2D and 3D)
- `dof2` - the number of points per 2-cell (element in 2D, face in 3D)
- `dof3` - the number of points per 3-cell (element in 3D)

Level: beginner

See also: 
=== 
`DMSTAG`, `DMStagGetCorners()`, `DMStagGetGhostCorners()`, `DMStagGetGlobalSizes()`, `DMStagGetStencilWidth()`, `DMStagGetBoundaryTypes()`, `DMStagGetLocationDOF()`, `DMDAGetDof()`

# External Links
$(_doc_external("Dm/DMStagGetDOF"))
"""
function DMStagGetDOF(petsclib::PetscLibType, dm::PetscDM) end

@for_petsc function DMStagGetDOF(petsclib::$UnionPetscLib, dm::PetscDM )
	dof0_ = Ref{$PetscInt}()
	dof1_ = Ref{$PetscInt}()
	dof2_ = Ref{$PetscInt}()
	dof3_ = Ref{$PetscInt}()

    @chk ccall(
               (:DMStagGetDOF, $petsc_library),
               PetscErrorCode,
               (CDM, Ptr{$PetscInt}, Ptr{$PetscInt}, Ptr{$PetscInt}, Ptr{$PetscInt}),
               dm, dof0_, dof1_, dof2_, dof3_,
              )

	dof0 = dof0_[]
	dof1 = dof1_[]
	dof2 = dof2_[]
	dof3 = dof3_[]

	return dof0,dof1,dof2,dof3
end 

"""
	x::PetscInt,y::PetscInt,z::PetscInt,m::PetscInt,n::PetscInt,p::PetscInt = DMStagGetGhostCorners(petsclib::PetscLibType,dm::PetscDM) 
return global element indices of the local region, including ghost points

Not Collective

Input Parameter:
- `dm` - the `DMSTAG` object

Output Parameters:
- `x` - the starting element index in the first direction
- `y` - the starting element index in the second direction
- `z` - the starting element index in the third direction
- `m` - the element width in the first direction
- `n` - the element width in the second direction
- `p` - the element width in the third direction

Level: beginner

Note:
Arguments corresponding to higher dimensions are ignored for 1D and 2D grids. These arguments may be set to `NULL` in this case.

See also: 
=== 
`DMSTAG`, `DMStagGetCorners()`, `DMDAGetGhostCorners()`

# External Links
$(_doc_external("Dm/DMStagGetGhostCorners"))
"""
function DMStagGetGhostCorners(petsclib::PetscLibType, dm::PetscDM) end

@for_petsc function DMStagGetGhostCorners(petsclib::$UnionPetscLib, dm::PetscDM )
	x_ = Ref{$PetscInt}()
	y_ = Ref{$PetscInt}()
	z_ = Ref{$PetscInt}()
	m_ = Ref{$PetscInt}()
	n_ = Ref{$PetscInt}()
	p_ = Ref{$PetscInt}()

    @chk ccall(
               (:DMStagGetGhostCorners, $petsc_library),
               PetscErrorCode,
               (CDM, Ptr{$PetscInt}, Ptr{$PetscInt}, Ptr{$PetscInt}, Ptr{$PetscInt}, Ptr{$PetscInt}, Ptr{$PetscInt}),
               dm, x_, y_, z_, m_, n_, p_,
              )

	x = x_[]
	y = y_[]
	z = z_[]
	m = m_[]
	n = n_[]
	p = p_[]

	return x,y,z,m,n,p
end 

"""
	M::PetscInt,N::PetscInt,P::PetscInt = DMStagGetGlobalSizes(petsclib::PetscLibType,dm::PetscDM) 
get global element counts

Not Collective

Input Parameter:
- `dm` - the `DMSTAG` object

Output Parameters:
- `M` - global element counts in the x direction
- `N` - global element counts in the y direction
- `P` - global element counts in the z direction

Level: beginner

Note:
Arguments corresponding to higher dimensions are ignored for 1D and 2D grids. These arguments may be set to `NULL` in this case.

See also: 
=== 
`DMSTAG`, `DMStagGetLocalSizes()`, `DMDAGetInfo()`

# External Links
$(_doc_external("Dm/DMStagGetGlobalSizes"))
"""
function DMStagGetGlobalSizes(petsclib::PetscLibType, dm::PetscDM) end

@for_petsc function DMStagGetGlobalSizes(petsclib::$UnionPetscLib, dm::PetscDM )
	M_ = Ref{$PetscInt}()
	N_ = Ref{$PetscInt}()
	P_ = Ref{$PetscInt}()

    @chk ccall(
               (:DMStagGetGlobalSizes, $petsc_library),
               PetscErrorCode,
               (CDM, Ptr{$PetscInt}, Ptr{$PetscInt}, Ptr{$PetscInt}),
               dm, M_, N_, P_,
              )

	M = M_[]
	N = N_[]
	P = P_[]

	return M,N,P
end 

"""
	isFirstRank0::PetscBool,isFirstRank1::PetscBool,isFirstRank2::PetscBool = DMStagGetIsFirstRank(petsclib::PetscLibType,dm::PetscDM) 
get boolean value for whether this rank is first in each direction in the rank grid

Not Collective

Input Parameter:
- `dm` - the `DMSTAG` object

Output Parameters:
- `isFirstRank0` - whether this rank is first in the x direction
- `isFirstRank1` - whether this rank is first in the y direction
- `isFirstRank2` - whether this rank is first in the z direction

Level: intermediate

Note:
Arguments corresponding to higher dimensions are ignored for 1D and 2D grids. These arguments may be set to `NULL` in this case.

See also: 
=== 
`DMSTAG`, `DMStagGetIsLastRank()`

# External Links
$(_doc_external("Dm/DMStagGetIsFirstRank"))
"""
function DMStagGetIsFirstRank(petsclib::PetscLibType, dm::PetscDM) end

@for_petsc function DMStagGetIsFirstRank(petsclib::$UnionPetscLib, dm::PetscDM )
	isFirstRank0_ = Ref{PetscBool}()
	isFirstRank1_ = Ref{PetscBool}()
	isFirstRank2_ = Ref{PetscBool}()

    @chk ccall(
               (:DMStagGetIsFirstRank, $petsc_library),
               PetscErrorCode,
               (CDM, Ptr{PetscBool}, Ptr{PetscBool}, Ptr{PetscBool}),
               dm, isFirstRank0_, isFirstRank1_, isFirstRank2_,
              )

	isFirstRank0 = isFirstRank0_[]
	isFirstRank1 = isFirstRank1_[]
	isFirstRank2 = isFirstRank2_[]

	return isFirstRank0,isFirstRank1,isFirstRank2
end 

"""
	isLastRank0::PetscBool,isLastRank1::PetscBool,isLastRank2::PetscBool = DMStagGetIsLastRank(petsclib::PetscLibType,dm::PetscDM) 
get boolean value for whether this rank is last in each direction in the rank grid

Not Collective

Input Parameter:
- `dm` - the `DMSTAG` object

Output Parameters:
- `isLastRank0` - whether this rank is last in the x direction
- `isLastRank1` - whether this rank is last in the y direction
- `isLastRank2` - whether this rank is last in the z direction

Level: intermediate

Note:
Arguments corresponding to higher dimensions are ignored for 1D and 2D grids. These arguments may be set to `NULL` in this case.

See also: 
=== 
`DMSTAG`, `DMStagGetIsFirstRank()`

# External Links
$(_doc_external("Dm/DMStagGetIsLastRank"))
"""
function DMStagGetIsLastRank(petsclib::PetscLibType, dm::PetscDM) end

@for_petsc function DMStagGetIsLastRank(petsclib::$UnionPetscLib, dm::PetscDM )
	isLastRank0_ = Ref{PetscBool}()
	isLastRank1_ = Ref{PetscBool}()
	isLastRank2_ = Ref{PetscBool}()

    @chk ccall(
               (:DMStagGetIsLastRank, $petsc_library),
               PetscErrorCode,
               (CDM, Ptr{PetscBool}, Ptr{PetscBool}, Ptr{PetscBool}),
               dm, isLastRank0_, isLastRank1_, isLastRank2_,
              )

	isLastRank0 = isLastRank0_[]
	isLastRank1 = isLastRank1_[]
	isLastRank2 = isLastRank2_[]

	return isLastRank0,isLastRank1,isLastRank2
end 

"""
	m::PetscInt,n::PetscInt,p::PetscInt = DMStagGetLocalSizes(petsclib::PetscLibType,dm::PetscDM) 
get local elementwise sizes

Not Collective

Input Parameter:
- `dm` - the `DMSTAG` object

Output Parameters:
- `m` - local element counts (excluding ghosts) in the x direction
- `n` - local element counts (excluding ghosts) in the y direction
- `p` - local element counts (excluding ghosts) in the z direction

Level: beginner

Note:
Arguments corresponding to higher dimensions are ignored for 1D and 2D grids. These arguments may be set to `NULL` in this case.

See also: 
=== 
`DMSTAG`, `DMStagGetGlobalSizes()`, `DMStagGetDOF()`, `DMStagGetNumRanks()`, `DMDAGetLocalInfo()`

# External Links
$(_doc_external("Dm/DMStagGetLocalSizes"))
"""
function DMStagGetLocalSizes(petsclib::PetscLibType, dm::PetscDM) end

@for_petsc function DMStagGetLocalSizes(petsclib::$UnionPetscLib, dm::PetscDM )
	m_ = Ref{$PetscInt}()
	n_ = Ref{$PetscInt}()
	p_ = Ref{$PetscInt}()

    @chk ccall(
               (:DMStagGetLocalSizes, $petsc_library),
               PetscErrorCode,
               (CDM, Ptr{$PetscInt}, Ptr{$PetscInt}, Ptr{$PetscInt}),
               dm, m_, n_, p_,
              )

	m = m_[]
	n = n_[]
	p = p_[]

	return m,n,p
end 

"""
	nRanks0::PetscInt,nRanks1::PetscInt,nRanks2::PetscInt = DMStagGetNumRanks(petsclib::PetscLibType,dm::PetscDM) 
get number of ranks in each direction in the global grid decomposition

Not Collective

Input Parameter:
- `dm` - the `DMSTAG` object

Output Parameters:
- `nRanks0` - number of ranks in the x direction in the grid decomposition
- `nRanks1` - number of ranks in the y direction in the grid decomposition
- `nRanks2` - number of ranks in the z direction in the grid decomposition

Level: intermediate

See also: 
=== 
`DMSTAG`, `DMStagGetGlobalSizes()`, `DMStagGetLocalSize()`, `DMStagSetNumRanks()`, `DMDAGetInfo()`

# External Links
$(_doc_external("Dm/DMStagGetNumRanks"))
"""
function DMStagGetNumRanks(petsclib::PetscLibType, dm::PetscDM) end

@for_petsc function DMStagGetNumRanks(petsclib::$UnionPetscLib, dm::PetscDM )
	nRanks0_ = Ref{$PetscInt}()
	nRanks1_ = Ref{$PetscInt}()
	nRanks2_ = Ref{$PetscInt}()

    @chk ccall(
               (:DMStagGetNumRanks, $petsc_library),
               PetscErrorCode,
               (CDM, Ptr{$PetscInt}, Ptr{$PetscInt}, Ptr{$PetscInt}),
               dm, nRanks0_, nRanks1_, nRanks2_,
              )

	nRanks0 = nRanks0_[]
	nRanks1 = nRanks1_[]
	nRanks2 = nRanks2_[]

	return nRanks0,nRanks1,nRanks2
end 

"""
	entries::PetscInt = DMStagGetEntries(petsclib::PetscLibType,dm::PetscDM) 
get number of native entries in the global representation

Not Collective

Input Parameter:
- `dm` - the `DMSTAG` object

Output Parameter:
- `entries` - number of rank-native entries in the global representation

Level: developer

Note:
This is the number of entries on this rank for a global vector associated with `dm`.
That is, it is value of `size` returned by `VecGetLocalSize(vec,&size)` when
`DMCreateGlobalVector(dm,&vec) is used to create a `Vec`. Users would typically
use these functions.

See also: 
=== 
`DMSTAG`, `DMStagGetDOF()`, `DMStagGetEntriesLocal()`, `DMStagGetEntriesPerElement()`, `DMCreateLocalVector()`

# External Links
$(_doc_external("Dm/DMStagGetEntries"))
"""
function DMStagGetEntries(petsclib::PetscLibType, dm::PetscDM) end

@for_petsc function DMStagGetEntries(petsclib::$UnionPetscLib, dm::PetscDM )
	entries_ = Ref{$PetscInt}()

    @chk ccall(
               (:DMStagGetEntries, $petsc_library),
               PetscErrorCode,
               (CDM, Ptr{$PetscInt}),
               dm, entries_,
              )

	entries = entries_[]

	return entries
end 

"""
	entries::PetscInt = DMStagGetEntriesLocal(petsclib::PetscLibType,dm::PetscDM) 
get number of entries in the local representation

Not Collective

Input Parameter:
- `dm` - the `DMSTAG` object

Output Parameter:
- `entries` - number of entries in the local representation

Level: developer

Note:
This is the number of entries on this rank in the local representation.
That is, it is value of `size` returned by `VecGetSize(vec,&size)` or
`VecGetLocalSize(vec,&size)` when `DMCreateLocalVector(dm,&vec)` is used to
create a `Vec`. Users would typically use these functions.

See also: 
=== 
`DMSTAG`, `DMStagGetDOF()`, `DMStagGetEntries()`, `DMStagGetEntriesPerElement()`, `DMCreateLocalVector()`

# External Links
$(_doc_external("Dm/DMStagGetEntriesLocal"))
"""
function DMStagGetEntriesLocal(petsclib::PetscLibType, dm::PetscDM) end

@for_petsc function DMStagGetEntriesLocal(petsclib::$UnionPetscLib, dm::PetscDM )
	entries_ = Ref{$PetscInt}()

    @chk ccall(
               (:DMStagGetEntriesLocal, $petsc_library),
               PetscErrorCode,
               (CDM, Ptr{$PetscInt}),
               dm, entries_,
              )

	entries = entries_[]

	return entries
end 

"""
	entriesPerElement::PetscInt = DMStagGetEntriesPerElement(petsclib::PetscLibType,dm::PetscDM) 
get number of entries per element in the local representation

Not Collective

Input Parameter:
- `dm` - the `DMSTAG` object

Output Parameter:
- `entriesPerElement` - number of entries associated with each element in the local representation

Level: developer

Notes:
This is the natural block size for most local operations. In 1D it is equal to `dof0` + `dof1`,
in 2D it is equal to `dof0` + 2`dof1` + `dof2`, and in 3D it is equal to `dof0` + 3`dof1` + 3`dof2` + `dof3`

See also: 
=== 
`DMSTAG`, `DMStagGetDOF()`

# External Links
$(_doc_external("Dm/DMStagGetEntriesPerElement"))
"""
function DMStagGetEntriesPerElement(petsclib::PetscLibType, dm::PetscDM) end

@for_petsc function DMStagGetEntriesPerElement(petsclib::$UnionPetscLib, dm::PetscDM )
	entriesPerElement_ = Ref{$PetscInt}()

    @chk ccall(
               (:DMStagGetEntriesPerElement, $petsc_library),
               PetscErrorCode,
               (CDM, Ptr{$PetscInt}),
               dm, entriesPerElement_,
              )

	entriesPerElement = entriesPerElement_[]

	return entriesPerElement
end 

"""
	stencilType::DMStagStencilType = DMStagGetStencilType(petsclib::PetscLibType,dm::PetscDM) 
get elementwise ghost/halo stencil type

Not Collective

Input Parameter:
- `dm` - the `DMSTAG` object

Output Parameter:
- `stencilType` - the elementwise ghost stencil type: `DMSTAG_STENCIL_BOX`, `DMSTAG_STENCIL_STAR`, or `DMSTAG_STENCIL_NONE`

Level: beginner

See also: 
=== 
`DMSTAG`, `DMStagSetStencilType()`, `DMStagGetStencilWidth`, `DMStagStencilType`

# External Links
$(_doc_external("Dm/DMStagGetStencilType"))
"""
function DMStagGetStencilType(petsclib::PetscLibType, dm::PetscDM) end

@for_petsc function DMStagGetStencilType(petsclib::$UnionPetscLib, dm::PetscDM )
	stencilType_ = Ref{DMStagStencilType}()

    @chk ccall(
               (:DMStagGetStencilType, $petsc_library),
               PetscErrorCode,
               (CDM, Ptr{DMStagStencilType}),
               dm, stencilType_,
              )

	stencilType = unsafe_string(stencilType_[])

	return stencilType
end 

"""
	stencilWidth::PetscInt = DMStagGetStencilWidth(petsclib::PetscLibType,dm::PetscDM) 
get elementwise stencil width

Not Collective

Input Parameter:
- `dm` - the `DMSTAG` object

Output Parameter:
- `stencilWidth` - stencil/halo/ghost width in elements

Level: beginner

See also: 
=== 
`DMSTAG`, `DMStagSetStencilWidth()`, `DMStagGetStencilType()`, `DMDAGetStencilType()`

# External Links
$(_doc_external("Dm/DMStagGetStencilWidth"))
"""
function DMStagGetStencilWidth(petsclib::PetscLibType, dm::PetscDM) end

@for_petsc function DMStagGetStencilWidth(petsclib::$UnionPetscLib, dm::PetscDM )
	stencilWidth_ = Ref{$PetscInt}()

    @chk ccall(
               (:DMStagGetStencilWidth, $petsc_library),
               PetscErrorCode,
               (CDM, Ptr{$PetscInt}),
               dm, stencilWidth_,
              )

	stencilWidth = stencilWidth_[]

	return stencilWidth
end 

"""
	lx::Vector{PetscInt},ly::Vector{PetscInt},lz::Vector{PetscInt} = DMStagGetOwnershipRanges(petsclib::PetscLibType,dm::PetscDM) 
get elements per rank in each direction

Not Collective

Input Parameter:
- `dm` - the `DMSTAG` object

Output Parameters:
- `lx` - ownership along x direction (optional)
- `ly` - ownership along y direction (optional)
- `lz` - ownership along z direction (optional)

Level: intermediate

Notes:
These correspond to the optional final arguments passed to `DMStagCreate1d()`, `DMStagCreate2d()`, and `DMStagCreate3d()`.

Arguments corresponding to higher dimensions are ignored for 1D and 2D grids. These arguments may be set to `NULL` in this case.

In C you should not free these arrays, nor change the values in them.
They will only have valid values while the `DMSTAG` they came from still exists (has not been destroyed).

See also: 
=== 
`DMSTAG`, `DMStagSetGlobalSizes()`, `DMStagSetOwnershipRanges()`, `DMStagCreate1d()`, `DMStagCreate2d()`, `DMStagCreate3d()`, `DMDAGetOwnershipRanges()`

# External Links
$(_doc_external("Dm/DMStagGetOwnershipRanges"))
"""
function DMStagGetOwnershipRanges(petsclib::PetscLibType, dm::PetscDM) end

@for_petsc function DMStagGetOwnershipRanges(petsclib::$UnionPetscLib, dm::PetscDM )
	lx_ = Ref{Ptr{$PetscInt}}()
	ly_ = Ref{Ptr{$PetscInt}}()
	lz_ = Ref{Ptr{$PetscInt}}()

    @chk ccall(
               (:DMStagGetOwnershipRanges, $petsc_library),
               PetscErrorCode,
               (CDM, Ptr{Ptr{$PetscInt}}, Ptr{Ptr{$PetscInt}}, Ptr{Ptr{$PetscInt}}),
               dm, lx_, ly_, lz_,
              )

	lx = unsafe_wrap(Array, lx_[], VecGetLocalSize(petsclib, x); own = false)
	ly = unsafe_wrap(Array, ly_[], VecGetLocalSize(petsclib, x); own = false)
	lz = unsafe_wrap(Array, lz_[], VecGetLocalSize(petsclib, x); own = false)

	return lx,ly,lz
end 

"""
	newdm::PetscDM = DMStagCreateCompatibleDMStag(petsclib::PetscLibType,dm::PetscDM, dof0::PetscInt, dof1::PetscInt, dof2::PetscInt, dof3::PetscInt) 
create a compatible `DMSTAG` with different dof/stratum

Collective

Input Parameters:
- `dm`   - the `DMSTAG` object
- `dof0` - number of dof on the first stratum in the new `DMSTAG`
- `dof1` - number of dof on the second stratum in the new `DMSTAG`
- `dof2` - number of dof on the third stratum in the new `DMSTAG`
- `dof3` - number of dof on the fourth stratum in the new `DMSTAG`

Output Parameter:
- `newdm` - the new, compatible `DMSTAG`

Level: intermediate

Notes:
DOF supplied for strata too big for the dimension are ignored; these may be set to `0`.
For example, for a 2-dimensional `DMSTAG`, `dof2` sets the number of dof per element,
and `dof3` is unused. For a 3-dimensional `DMSTAG`, `dof3` sets the number of DOF per element.

In contrast to `DMDACreateCompatibleDMDA()`, coordinates are not reused.

See also: 
=== 
`DMSTAG`, `DMDACreateCompatibleDMDA()`, `DMGetCompatibility()`, `DMStagMigrateVec()`

# External Links
$(_doc_external("Dm/DMStagCreateCompatibleDMStag"))
"""
function DMStagCreateCompatibleDMStag(petsclib::PetscLibType, dm::PetscDM, dof0::PetscInt, dof1::PetscInt, dof2::PetscInt, dof3::PetscInt) end

@for_petsc function DMStagCreateCompatibleDMStag(petsclib::$UnionPetscLib, dm::PetscDM, dof0::$PetscInt, dof1::$PetscInt, dof2::$PetscInt, dof3::$PetscInt )
	newdm_ = Ref{CDM}()

    @chk ccall(
               (:DMStagCreateCompatibleDMStag, $petsc_library),
               PetscErrorCode,
               (CDM, $PetscInt, $PetscInt, $PetscInt, $PetscInt, Ptr{CDM}),
               dm, dof0, dof1, dof2, dof3, newdm_,
              )

	newdm = PetscDM(newdm_[], petsclib)

	return newdm
end 

"""
	slot::PetscInt = DMStagGetLocationSlot(petsclib::PetscLibType,dm::PetscDM, loc::DMStagStencilLocation, c::PetscInt) 
get index to use in accessing raw local arrays

Not Collective

Input Parameters:
- `dm`  - the `DMSTAG` object
- `loc` - location relative to an element
- `c`   - component

Output Parameter:
- `slot` - index to use

Level: beginner

Notes:
Provides an appropriate index to use with `DMStagVecGetArray()` and friends.
This is required so that the user doesn't need to know about the ordering of
dof associated with each local element.

See also: 
=== 
`DMSTAG`, `DMStagVecGetArray()`, `DMStagVecGetArrayRead()`, `DMStagGetDOF()`, `DMStagGetEntriesPerElement()`

# External Links
$(_doc_external("Dm/DMStagGetLocationSlot"))
"""
function DMStagGetLocationSlot(petsclib::PetscLibType, dm::PetscDM, loc::DMStagStencilLocation, c::PetscInt) end

@for_petsc function DMStagGetLocationSlot(petsclib::$UnionPetscLib, dm::PetscDM, loc::DMStagStencilLocation, c::$PetscInt )
	slot_ = Ref{$PetscInt}()

    @chk ccall(
               (:DMStagGetLocationSlot, $petsc_library),
               PetscErrorCode,
               (CDM, DMStagStencilLocation, $PetscInt, Ptr{$PetscInt}),
               dm, loc, c, slot_,
              )

	slot = slot_[]

	return slot
end 

"""
	refine_x::PetscInt,refine_y::PetscInt,refine_z::PetscInt = DMStagGetRefinementFactor(petsclib::PetscLibType,dm::PetscDM) 
get refinement ratios in each direction

Not Collective

Input Parameter:
- `dm` - the `DMSTAG` object

Output Parameters:
- `refine_x` - ratio of fine grid to coarse in x-direction (2 by default)
- `refine_y` - ratio of fine grid to coarse in y-direction (2 by default)
- `refine_z` - ratio of fine grid to coarse in z-direction (2 by default)

Level: intermediate

See also: 
=== 
`DMSTAG`, `DMRefine()`, `DMCoarsen()`, `DMStagSetRefinementFactor()`, `DMDASetRefinementFactor()`

# External Links
$(_doc_external("Dm/DMStagGetRefinementFactor"))
"""
function DMStagGetRefinementFactor(petsclib::PetscLibType, dm::PetscDM) end

@for_petsc function DMStagGetRefinementFactor(petsclib::$UnionPetscLib, dm::PetscDM )
	refine_x_ = Ref{$PetscInt}()
	refine_y_ = Ref{$PetscInt}()
	refine_z_ = Ref{$PetscInt}()

    @chk ccall(
               (:DMStagGetRefinementFactor, $petsc_library),
               PetscErrorCode,
               (CDM, Ptr{$PetscInt}, Ptr{$PetscInt}, Ptr{$PetscInt}),
               dm, refine_x_, refine_y_, refine_z_,
              )

	refine_x = refine_x_[]
	refine_y = refine_y_[]
	refine_z = refine_z_[]

	return refine_x,refine_y,refine_z
end 

"""
	DMStagMigrateVec(petsclib::PetscLibType,dm::PetscDM, vec::PetscVec, dmTo::PetscDM, vecTo::PetscVec) 
transfer a vector associated with a `DMSTAG` to a vector associated with a compatible `DMSTAG`

Collective

Input Parameters:
- `dm`    - the source `DMSTAG` object
- `vec`   - the source vector, compatible with `dm`
- `dmTo`  - the compatible destination `DMSTAG` object
- `vecTo` - the destination vector, compatible with `dmTo`

Level: advanced

Notes:
Extra dof are ignored, and unfilled dof are zeroed.
Currently only implemented to migrate global vectors to global vectors.
For the definition of compatibility of `DM`s, see `DMGetCompatibility()`.

See also: 
=== 
`DMSTAG`, `DMStagCreateCompatibleDMStag()`, `DMGetCompatibility()`, `DMStagVecSplitToDMDA()`

# External Links
$(_doc_external("Dm/DMStagMigrateVec"))
"""
function DMStagMigrateVec(petsclib::PetscLibType, dm::PetscDM, vec::PetscVec, dmTo::PetscDM, vecTo::PetscVec) end

@for_petsc function DMStagMigrateVec(petsclib::$UnionPetscLib, dm::PetscDM, vec::PetscVec, dmTo::PetscDM, vecTo::PetscVec )

    @chk ccall(
               (:DMStagMigrateVec, $petsc_library),
               PetscErrorCode,
               (CDM, CVec, CDM, CVec),
               dm, vec, dmTo, vecTo,
              )


	return nothing
end 

"""
	DMStagPopulateLocalToGlobalInjective(petsclib::PetscLibType,dm::PetscDM) 
populate an internal 1

Collective

Creates an internal object which explicitly maps a single local degree of
freedom to each global degree of freedom. This is used, if populated,
instead of SCATTER_REVERSE_LOCAL with the (1-to-many, in general)
global-to-local map, when DMLocalToGlobal() is called with INSERT_VALUES.
This allows usage, for example, even in the periodic, 1-rank case, where
the inverse of the global-to-local map, even when restricted to on-rank
communication, is non-injective. This is at the cost of storing an additional
VecScatter object inside each `DMSTAG` object.

Input Parameter:
- `dm` - the `DMSTAG` object

Level: developer

Notes:
In normal usage, library users shouldn't be concerned with this function,
as it is called during `DMSetUp()`, when required.

Returns immediately if the internal map is already populated.

Developer Notes:
This could, if desired, be moved up to a general `DM` routine. It would allow,
for example, `DMDA` to support `DMLocalToGlobal()` with `INSERT_VALUES`,
even in the single-rank periodic case.

See also: 
=== 
`DMSTAG`, `DMLocalToGlobal()`, `VecScatter`

# External Links
$(_doc_external("Dm/DMStagPopulateLocalToGlobalInjective"))
"""
function DMStagPopulateLocalToGlobalInjective(petsclib::PetscLibType, dm::PetscDM) end

@for_petsc function DMStagPopulateLocalToGlobalInjective(petsclib::$UnionPetscLib, dm::PetscDM )

    @chk ccall(
               (:DMStagPopulateLocalToGlobalInjective, $petsc_library),
               PetscErrorCode,
               (CDM,),
               dm,
              )


	return nothing
end 

"""
	DMStagRestoreProductCoordinateArrays(petsclib::PetscLibType,dm::PetscDM, arrX::Cvoid, arrY::Cvoid, arrZ::Cvoid) 
restore local array access

Logically Collective

Input Parameter:
- `dm` - the `DMSTAG` object

Output Parameters:
- `arrX` - local 1D coordinate arrays for x direction
- `arrY` - local 1D coordinate arrays for y direction
- `arrZ` - local 1D coordinate arrays for z direction

Level: intermediate

Notes:
This function does not automatically perform a local->global scatter to populate global coordinates from the local coordinates.
Thus, it may be required to explicitly perform these operations in some situations, as in the following partial example:
-vb
PetscCall(DMGetCoordinateDM(dm, &cdm));
for (PetscInt d = 0; d < 3; ++d) {
DM  subdm;
Vec coor, coor_local;

PetscCall(DMProductGetDM(cdm, d, &subdm));
PetscCall(DMGetCoordinates(subdm, &coor));
PetscCall(DMGetCoordinatesLocal(subdm, &coor_local));
PetscCall(DMLocalToGlobal(subdm, coor_local, INSERT_VALUES, coor));
PetscCall(PetscPrintf(PETSC_COMM_WORLD, "Coordinates dim %" PetscInt_FMT ":\n", d));
PetscCall(VecView(coor, PETSC_VIEWER_STDOUT_WORLD));
}
-ve

See also: 
=== 
`DMSTAG`, `DMStagGetProductCoordinateArrays()`, `DMStagGetProductCoordinateArraysRead()`

# External Links
$(_doc_external("Dm/DMStagRestoreProductCoordinateArrays"))
"""
function DMStagRestoreProductCoordinateArrays(petsclib::PetscLibType, dm::PetscDM, arrX::Cvoid, arrY::Cvoid, arrZ::Cvoid) end

@for_petsc function DMStagRestoreProductCoordinateArrays(petsclib::$UnionPetscLib, dm::PetscDM, arrX::Cvoid, arrY::Cvoid, arrZ::Cvoid )

    @chk ccall(
               (:DMStagRestoreProductCoordinateArrays, $petsc_library),
               PetscErrorCode,
               (CDM, Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}),
               dm, arrX, arrY, arrZ,
              )


	return nothing
end 

"""
	DMStagRestoreProductCoordinateArraysRead(petsclib::PetscLibType,dm::PetscDM, arrX::Cvoid, arrY::Cvoid, arrZ::Cvoid) 
restore local product array access, read

Logically Collective

Input Parameters:
- `dm`   - the `DMSTAG` object
- `arrX` - local 1D coordinate arrays for x direction
- `arrY` - local 1D coordinate arrays for y direction
- `arrZ` - local 1D coordinate arrays for z direction

Level: intermediate

See also: 
=== 
`DMSTAG`, `DMStagGetProductCoordinateArrays()`, `DMStagGetProductCoordinateArraysRead()`

# External Links
$(_doc_external("Dm/DMStagRestoreProductCoordinateArraysRead"))
"""
function DMStagRestoreProductCoordinateArraysRead(petsclib::PetscLibType, dm::PetscDM, arrX::Cvoid, arrY::Cvoid, arrZ::Cvoid) end

@for_petsc function DMStagRestoreProductCoordinateArraysRead(petsclib::$UnionPetscLib, dm::PetscDM, arrX::Cvoid, arrY::Cvoid, arrZ::Cvoid )

    @chk ccall(
               (:DMStagRestoreProductCoordinateArraysRead, $petsc_library),
               PetscErrorCode,
               (CDM, Ptr{Cvoid}, Ptr{Cvoid}, Ptr{Cvoid}),
               dm, arrX, arrY, arrZ,
              )


	return nothing
end 

"""
	DMStagSetBoundaryTypes(petsclib::PetscLibType,dm::PetscDM, boundaryType0::DMBoundaryType, boundaryType1::DMBoundaryType, boundaryType2::DMBoundaryType) 
set `DMSTAG` boundary types

Logically Collective; boundaryType0, boundaryType1, and boundaryType2 must contain common values

Input Parameters:
- `dm`            - the `DMSTAG` object
- `boundaryType2` - boundary type for x direction
- `boundaryType1` - boundary type for y direction, not set for one dimensional problems
- `boundaryType0` - boundary type for z direction, not set for one and two dimensional problems

Level: advanced

Note:
Arguments corresponding to higher dimensions are ignored for 1D and 2D grids.

See also: 
=== 
`DMSTAG`, `DMBoundaryType`, `DMStagCreate1d()`, `DMStagCreate2d()`, `DMStagCreate3d()`, `DMDASetBoundaryType()`

# External Links
$(_doc_external("Dm/DMStagSetBoundaryTypes"))
"""
function DMStagSetBoundaryTypes(petsclib::PetscLibType, dm::PetscDM, boundaryType0::DMBoundaryType, boundaryType1::DMBoundaryType, boundaryType2::DMBoundaryType) end

@for_petsc function DMStagSetBoundaryTypes(petsclib::$UnionPetscLib, dm::PetscDM, boundaryType0::DMBoundaryType, boundaryType1::DMBoundaryType, boundaryType2::DMBoundaryType )

    @chk ccall(
               (:DMStagSetBoundaryTypes, $petsc_library),
               PetscErrorCode,
               (CDM, DMBoundaryType, DMBoundaryType, DMBoundaryType),
               dm, boundaryType0, boundaryType1, boundaryType2,
              )


	return nothing
end 

"""
	DMStagSetCoordinateDMType(petsclib::PetscLibType,dm::PetscDM, dmtype::DMType) 
set DM type to store coordinates

Logically Collective; `dmtype` must contain common value

Input Parameters:
- `dm`     - the `DMSTAG` object
- `dmtype` - `DMtype` for coordinates, either `DMSTAG` or `DMPRODUCT`

Level: advanced

See also: 
=== 
`DMSTAG`, `DMPRODUCT`, `DMGetCoordinateDM()`, `DMStagSetUniformCoordinates()`, `DMStagSetUniformCoordinatesExplicit()`, `DMStagSetUniformCoordinatesProduct()`, `DMType`

# External Links
$(_doc_external("Dm/DMStagSetCoordinateDMType"))
"""
function DMStagSetCoordinateDMType(petsclib::PetscLibType, dm::PetscDM, dmtype::DMType) end

@for_petsc function DMStagSetCoordinateDMType(petsclib::$UnionPetscLib, dm::PetscDM, dmtype::DMType )

    @chk ccall(
               (:DMStagSetCoordinateDMType, $petsc_library),
               PetscErrorCode,
               (CDM, DMType),
               dm, dmtype,
              )


	return nothing
end 

"""
	DMStagSetDOF(petsclib::PetscLibType,dm::PetscDM, dof0::PetscInt, dof1::PetscInt, dof2::PetscInt, dof3::PetscInt) 
set dof/stratum

Logically Collective; `dof0`, `dof1`, `dof2`, and `dof3` must contain common values

Input Parameters:
- `dm`   - the `DMSTAG` object
- `dof0` - the number of points per 0-cell (vertex/node)
- `dof1` - the number of points per 1-cell (element in 1D, edge in 2D and 3D)
- `dof2` - the number of points per 2-cell (element in 2D, face in 3D)
- `dof3` - the number of points per 3-cell (element in 3D)

Level: advanced

Note:
Arguments corresponding to higher dimensions are ignored for 1D and 2D grids.

See also: 
=== 
`DMSTAG`, `DMDASetDof()`

# External Links
$(_doc_external("Dm/DMStagSetDOF"))
"""
function DMStagSetDOF(petsclib::PetscLibType, dm::PetscDM, dof0::PetscInt, dof1::PetscInt, dof2::PetscInt, dof3::PetscInt) end

@for_petsc function DMStagSetDOF(petsclib::$UnionPetscLib, dm::PetscDM, dof0::$PetscInt, dof1::$PetscInt, dof2::$PetscInt, dof3::$PetscInt )

    @chk ccall(
               (:DMStagSetDOF, $petsc_library),
               PetscErrorCode,
               (CDM, $PetscInt, $PetscInt, $PetscInt, $PetscInt),
               dm, dof0, dof1, dof2, dof3,
              )


	return nothing
end 

"""
	DMStagSetNumRanks(petsclib::PetscLibType,dm::PetscDM, nRanks0::PetscInt, nRanks1::PetscInt, nRanks2::PetscInt) 
set ranks in each direction in the global rank grid

Logically Collective; `nRanks0`, `nRanks1`, and `nRanks2` must contain common values

Input Parameters:
- `dm`      - the `DMSTAG` object
- `nRanks0` - number of ranks in the x direction
- `nRanks1` - number of ranks in the y direction
- `nRanks2` - number of ranks in the z direction

Level: developer

Note:
Arguments corresponding to higher dimensions are ignored for 1D and 2D grids.

See also: 
=== 
`DMSTAG`, `DMDASetNumProcs()`

# External Links
$(_doc_external("Dm/DMStagSetNumRanks"))
"""
function DMStagSetNumRanks(petsclib::PetscLibType, dm::PetscDM, nRanks0::PetscInt, nRanks1::PetscInt, nRanks2::PetscInt) end

@for_petsc function DMStagSetNumRanks(petsclib::$UnionPetscLib, dm::PetscDM, nRanks0::$PetscInt, nRanks1::$PetscInt, nRanks2::$PetscInt )

    @chk ccall(
               (:DMStagSetNumRanks, $petsc_library),
               PetscErrorCode,
               (CDM, $PetscInt, $PetscInt, $PetscInt),
               dm, nRanks0, nRanks1, nRanks2,
              )


	return nothing
end 

"""
	DMStagSetStencilType(petsclib::PetscLibType,dm::PetscDM, stencilType::DMStagStencilType) 
set elementwise ghost/halo stencil type

Logically Collective; `stencilType` must contain common value

Input Parameters:
- `dm`          - the `DMSTAG` object
- `stencilType` - the elementwise ghost stencil type: `DMSTAG_STENCIL_BOX`, `DMSTAG_STENCIL_STAR`, or `DMSTAG_STENCIL_NONE`

Level: beginner

See also: 
=== 
`DMSTAG`, `DMStagGetStencilType()`, `DMStagSetStencilWidth()`, `DMStagStencilType`

# External Links
$(_doc_external("Dm/DMStagSetStencilType"))
"""
function DMStagSetStencilType(petsclib::PetscLibType, dm::PetscDM, stencilType::DMStagStencilType) end

@for_petsc function DMStagSetStencilType(petsclib::$UnionPetscLib, dm::PetscDM, stencilType::DMStagStencilType )

    @chk ccall(
               (:DMStagSetStencilType, $petsc_library),
               PetscErrorCode,
               (CDM, DMStagStencilType),
               dm, stencilType,
              )


	return nothing
end 

"""
	DMStagSetStencilWidth(petsclib::PetscLibType,dm::PetscDM, stencilWidth::PetscInt) 
set elementwise stencil width

Logically Collective; `stencilWidth` must contain common value

Input Parameters:
- `dm`           - the `DMSTAG` object
- `stencilWidth` - stencil/halo/ghost width in elements

Level: beginner

Note:
The width value is not used when `DMSTAG_STENCIL_NONE` is specified.

See also: 
=== 
`DMSTAG`, `DMStagGetStencilWidth()`, `DMStagGetStencilType()`, `DMStagStencilType`

# External Links
$(_doc_external("Dm/DMStagSetStencilWidth"))
"""
function DMStagSetStencilWidth(petsclib::PetscLibType, dm::PetscDM, stencilWidth::PetscInt) end

@for_petsc function DMStagSetStencilWidth(petsclib::$UnionPetscLib, dm::PetscDM, stencilWidth::$PetscInt )

    @chk ccall(
               (:DMStagSetStencilWidth, $petsc_library),
               PetscErrorCode,
               (CDM, $PetscInt),
               dm, stencilWidth,
              )


	return nothing
end 

"""
	DMStagSetGlobalSizes(petsclib::PetscLibType,dm::PetscDM, N0::PetscInt, N1::PetscInt, N2::PetscInt) 
set global element counts in each direction

Logically Collective; `N0`, `N1`, and `N2` must contain common values

Input Parameters:
- `dm` - the `DMSTAG` object
- `N0` - global elementwise size in the x direction
- `N1` - global elementwise size in the y direction
- `N2` - global elementwise size in the z direction

Level: advanced

Note:
Arguments corresponding to higher dimensions are ignored for 1D and 2D grids.

See also: 
=== 
`DMSTAG`, `DMStagGetGlobalSizes()`, `DMDASetSizes()`

# External Links
$(_doc_external("Dm/DMStagSetGlobalSizes"))
"""
function DMStagSetGlobalSizes(petsclib::PetscLibType, dm::PetscDM, N0::PetscInt, N1::PetscInt, N2::PetscInt) end

@for_petsc function DMStagSetGlobalSizes(petsclib::$UnionPetscLib, dm::PetscDM, N0::$PetscInt, N1::$PetscInt, N2::$PetscInt )

    @chk ccall(
               (:DMStagSetGlobalSizes, $petsc_library),
               PetscErrorCode,
               (CDM, $PetscInt, $PetscInt, $PetscInt),
               dm, N0, N1, N2,
              )


	return nothing
end 

"""
	DMStagSetOwnershipRanges(petsclib::PetscLibType,dm::PetscDM, lx::Vector{PetscInt}, ly::Vector{PetscInt}, lz::Vector{PetscInt}) 
set elements per rank in each direction

Logically Collective; `lx`, `ly`, and `lz` must contain common values

Input Parameters:
- `dm` - the `DMSTAG` object
- `lx` - element counts for each rank in the x direction, may be `NULL`
- `ly` - element counts for each rank in the y direction, may be `NULL`
- `lz` - element counts for each rank in the z direction, may be `NULL`

Level: developer

Note:
Arguments corresponding to higher dimensions are ignored for 1D and 2D grids. These arguments may be set to `NULL` in this case.

See also: 
=== 
`DMSTAG`, `DMStagSetGlobalSizes()`, `DMStagGetOwnershipRanges()`, `DMDASetOwnershipRanges()`

# External Links
$(_doc_external("Dm/DMStagSetOwnershipRanges"))
"""
function DMStagSetOwnershipRanges(petsclib::PetscLibType, dm::PetscDM, lx::Vector{PetscInt}, ly::Vector{PetscInt}, lz::Vector{PetscInt}) end

@for_petsc function DMStagSetOwnershipRanges(petsclib::$UnionPetscLib, dm::PetscDM, lx::Vector{$PetscInt}, ly::Vector{$PetscInt}, lz::Vector{$PetscInt} )

    @chk ccall(
               (:DMStagSetOwnershipRanges, $petsc_library),
               PetscErrorCode,
               (CDM, Ptr{$PetscInt}, Ptr{$PetscInt}, Ptr{$PetscInt}),
               dm, lx, ly, lz,
              )


	return nothing
end 

"""
	DMStagSetRefinementFactor(petsclib::PetscLibType,dm::PetscDM, refine_x::PetscInt, refine_y::PetscInt, refine_z::PetscInt) 
set refinement ratios in each direction

Logically Collective

Input Parameters:
- `dm`       - the `DMSTAG` object
- `refine_x` - ratio of fine grid to coarse in x-direction (2 by default)
- `refine_y` - ratio of fine grid to coarse in y-direction (2 by default)
- `refine_z` - ratio of fine grid to coarse in z-direction (2 by default)

Level: intermediate

Note:
Pass `PETSC_IGNORE` to leave a value unchanged

See also: 
=== 
`DMSTAG`, `DMRefine()`, `DMCoarsen()`, `DMStagGetRefinementFactor()`, `DMDAGetRefinementFactor()`

# External Links
$(_doc_external("Dm/DMStagSetRefinementFactor"))
"""
function DMStagSetRefinementFactor(petsclib::PetscLibType, dm::PetscDM, refine_x::PetscInt, refine_y::PetscInt, refine_z::PetscInt) end

@for_petsc function DMStagSetRefinementFactor(petsclib::$UnionPetscLib, dm::PetscDM, refine_x::$PetscInt, refine_y::$PetscInt, refine_z::$PetscInt )

    @chk ccall(
               (:DMStagSetRefinementFactor, $petsc_library),
               PetscErrorCode,
               (CDM, $PetscInt, $PetscInt, $PetscInt),
               dm, refine_x, refine_y, refine_z,
              )


	return nothing
end 

"""
	DMStagSetUniformCoordinates(petsclib::PetscLibType,dm::PetscDM, xmin::PetscReal, xmax::PetscReal, ymin::PetscReal, ymax::PetscReal, zmin::PetscReal, zmax::PetscReal) 
set `DMSTAG` coordinates to be a uniform grid

Collective

Input Parameters:
- `dm`   - the `DMSTAG` object
- `xmin` - minimum global coordinate value in the `x` direction
- `xmax` - maximum global coordinate values in the `x` direction
- `ymin` - minimum global coordinate value in the `y` direction
- `ymax` - maximum global coordinate value in the `y` direction
- `zmin` - minimum global coordinate value in the `z` direction
- `zmax` - maximum global coordinate value in the `z` direction

Level: advanced

Notes:
`DMSTAG` supports 2 different types of coordinate `DM`: `DMSTAG` and `DMPRODUCT`.
Arguments corresponding to higher dimensions are ignored for 1D and 2D grids.

Local coordinates are populated (using `DMSetCoordinatesLocal()`), linearly
extrapolated to ghost cells, including those outside the physical domain.
This is also done in case of periodic boundaries, meaning that the same
global point may have different coordinates in different local representations,
which are equivalent assuming a periodicity implied by the arguments to this function,
i.e. two points are equivalent if their difference is a multiple of (`xmax` - `xmin` )
in the x direction, ( `ymax` - `ymin` ) in the y direction, and ( `zmax` - `zmin` ) in the z direction.

See also: 
=== 
`DMSTAG`, `DMPRODUCT`, `DMStagSetUniformCoordinatesExplicit()`, `DMStagSetUniformCoordinatesProduct()`, `DMStagSetCoordinateDMType()`, `DMGetCoordinateDM()`, `DMGetCoordinates()`, `DMDASetUniformCoordinates()`, `DMBoundaryType`

# External Links
$(_doc_external("Dm/DMStagSetUniformCoordinates"))
"""
function DMStagSetUniformCoordinates(petsclib::PetscLibType, dm::PetscDM, xmin::PetscReal, xmax::PetscReal, ymin::PetscReal, ymax::PetscReal, zmin::PetscReal, zmax::PetscReal) end

@for_petsc function DMStagSetUniformCoordinates(petsclib::$UnionPetscLib, dm::PetscDM, xmin::$PetscReal, xmax::$PetscReal, ymin::$PetscReal, ymax::$PetscReal, zmin::$PetscReal, zmax::$PetscReal )

    @chk ccall(
               (:DMStagSetUniformCoordinates, $petsc_library),
               PetscErrorCode,
               (CDM, $PetscReal, $PetscReal, $PetscReal, $PetscReal, $PetscReal, $PetscReal),
               dm, xmin, xmax, ymin, ymax, zmin, zmax,
              )


	return nothing
end 

"""
	DMStagSetUniformCoordinatesExplicit(petsclib::PetscLibType,dm::PetscDM, xmin::PetscReal, xmax::PetscReal, ymin::PetscReal, ymax::PetscReal, zmin::PetscReal, zmax::PetscReal) 
set `DMSTAG` coordinates to be a uniform grid, storing all values

Collective

Input Parameters:
- `dm`   - the `DMSTAG` object
- `xmin` - minimum global coordinate value in the `x` direction
- `xmax` - maximum global coordinate value in the `x` direction
- `ymin` - minimum global coordinate value in the `y` direction
- `ymax` - maximum global coordinate value in the `y` direction
- `zmin` - minimum global coordinate value in the `z` direction
- `zmax` - maximum global coordinate value in the `z` direction

Level: beginner

Notes:
`DMSTAG` supports 2 different types of coordinate `DM`: either another `DMSTAG`, or a `DMPRODUCT`.
If the grid is orthogonal, using `DMPRODUCT` should be more efficient.

Arguments corresponding to higher dimensions are ignored for 1D and 2D grids.

See the manual page for `DMStagSetUniformCoordinates()` for information on how
coordinates for dummy cells outside the physical domain boundary are populated.

See also: 
=== 
`DMSTAG`, `DMStagSetUniformCoordinates()`, `DMStagSetUniformCoordinatesProduct()`, `DMStagSetCoordinateDMType()`

# External Links
$(_doc_external("Dm/DMStagSetUniformCoordinatesExplicit"))
"""
function DMStagSetUniformCoordinatesExplicit(petsclib::PetscLibType, dm::PetscDM, xmin::PetscReal, xmax::PetscReal, ymin::PetscReal, ymax::PetscReal, zmin::PetscReal, zmax::PetscReal) end

@for_petsc function DMStagSetUniformCoordinatesExplicit(petsclib::$UnionPetscLib, dm::PetscDM, xmin::$PetscReal, xmax::$PetscReal, ymin::$PetscReal, ymax::$PetscReal, zmin::$PetscReal, zmax::$PetscReal )

    @chk ccall(
               (:DMStagSetUniformCoordinatesExplicit, $petsc_library),
               PetscErrorCode,
               (CDM, $PetscReal, $PetscReal, $PetscReal, $PetscReal, $PetscReal, $PetscReal),
               dm, xmin, xmax, ymin, ymax, zmin, zmax,
              )


	return nothing
end 

"""
	DMStagSetUniformCoordinatesProduct(petsclib::PetscLibType,dm::PetscDM, xmin::PetscReal, xmax::PetscReal, ymin::PetscReal, ymax::PetscReal, zmin::PetscReal, zmax::PetscReal) 
create uniform coordinates, as a product of 1D arrays

Set the coordinate `DM` to be a `DMPRODUCT` of 1D `DMSTAG` objects, each of which have a coordinate `DM` (also a 1d `DMSTAG`) holding uniform coordinates.

Collective

Input Parameters:
- `dm`   - the `DMSTAG` object
- `xmin` - minimum global coordinate value in the `x` direction
- `xmax` - maximum global coordinate value in the `x` direction
- `ymin` - minimum global coordinate value in the `y` direction
- `ymax` - maximum global coordinate value in the `y` direction
- `zmin` - minimum global coordinate value in the `z` direction
- `zmax` - maximum global coordinate value in the `z` direction

Level: intermediate

Notes:
Arguments corresponding to higher dimensions are ignored for 1D and 2D grids.

The per-dimension 1-dimensional `DMSTAG` objects that comprise the product
always have active 0-cells (vertices, element boundaries) and 1-cells
(element centers).

See the manual page for `DMStagSetUniformCoordinates()` for information on how
coordinates for dummy cells outside the physical domain boundary are populated.

See also: 
=== 
`DMSTAG`, `DMPRODUCT`, `DMStagSetUniformCoordinates()`, `DMStagSetUniformCoordinatesExplicit()`, `DMStagSetCoordinateDMType()`

# External Links
$(_doc_external("Dm/DMStagSetUniformCoordinatesProduct"))
"""
function DMStagSetUniformCoordinatesProduct(petsclib::PetscLibType, dm::PetscDM, xmin::PetscReal, xmax::PetscReal, ymin::PetscReal, ymax::PetscReal, zmin::PetscReal, zmax::PetscReal) end

@for_petsc function DMStagSetUniformCoordinatesProduct(petsclib::$UnionPetscLib, dm::PetscDM, xmin::$PetscReal, xmax::$PetscReal, ymin::$PetscReal, ymax::$PetscReal, zmin::$PetscReal, zmax::$PetscReal )

    @chk ccall(
               (:DMStagSetUniformCoordinatesProduct, $petsc_library),
               PetscErrorCode,
               (CDM, $PetscReal, $PetscReal, $PetscReal, $PetscReal, $PetscReal, $PetscReal),
               dm, xmin, xmax, ymin, ymax, zmin, zmax,
              )


	return nothing
end 

"""
	DMStagVecGetArray(petsclib::PetscLibType,dm::PetscDM, vec::PetscVec, array::Cvoid) 
get access to local array

Logically Collective

Input Parameters:
- `dm`  - the `DMSTAG` object
- `vec` - the `Vec` object

Output Parameter:
- `array` - the array

Level: beginner

Note:
This function returns a (dim+1)-dimensional array for a dim-dimensional
`DMSTAG`.

The first 1-3 dimensions indicate an element in the global
numbering, using the standard C ordering.

The final dimension in this array corresponds to a degree
of freedom with respect to this element, for example corresponding to
the element or one of its neighboring faces, edges, or vertices.

For example, for a 3D `DMSTAG`, indexing is `array[k][j][i][idx]`, where `k` is the
index in the z-direction, `j` is the index in the y-direction, and `i` is the
index in the x-direction.

`idx` is obtained with `DMStagGetLocationSlot()`, since the correct offset
into the (d+1)-dimensional C array for a d-dimensional `DMSTAG` depends on the grid size and the number
of DOF stored at each location.

`DMStagVecRestoreArray()` must be called, once finished with the array

See also: 
=== 
`DMSTAG`, `DMStagVecGetArrayRead()`, `DMStagGetLocationSlot()`, `DMGetLocalVector()`, `DMCreateLocalVector()`, `DMGetGlobalVector()`, `DMCreateGlobalVector()`, `DMDAVecGetArray()`, `DMDAVecGetArrayDOF()`

# External Links
$(_doc_external("Dm/DMStagVecGetArray"))
"""
function DMStagVecGetArray(petsclib::PetscLibType, dm::PetscDM, vec::PetscVec, array::Cvoid) end

@for_petsc function DMStagVecGetArray(petsclib::$UnionPetscLib, dm::PetscDM, vec::PetscVec, array::Cvoid )

    @chk ccall(
               (:DMStagVecGetArray, $petsc_library),
               PetscErrorCode,
               (CDM, CVec, Ptr{Cvoid}),
               dm, vec, array,
              )


	return nothing
end 

"""
	DMStagVecGetArrayRead(petsclib::PetscLibType,dm::PetscDM, vec::PetscVec, array::Cvoid) 
get read

Logically Collective

See the man page for `DMStagVecGetArray()` for more information.

Input Parameters:
- `dm`  - the `DMSTAG` object
- `vec` - the `Vec` object

Output Parameter:
- `array` - the read-only array

Level: beginner

Note:
`DMStagVecRestoreArrayRead()` must be called, once finished with the array

See also: 
=== 
`DMSTAG`, `DMStagGetLocationSlot()`, `DMGetLocalVector()`, `DMCreateLocalVector()`, `DMGetGlobalVector()`, `DMCreateGlobalVector()`, `DMDAVecGetArrayRead()`, `DMDAVecGetArrayDOFRead()`

# External Links
$(_doc_external("Dm/DMStagVecGetArrayRead"))
"""
function DMStagVecGetArrayRead(petsclib::PetscLibType, dm::PetscDM, vec::PetscVec, array::Cvoid) end

@for_petsc function DMStagVecGetArrayRead(petsclib::$UnionPetscLib, dm::PetscDM, vec::PetscVec, array::Cvoid )

    @chk ccall(
               (:DMStagVecGetArrayRead, $petsc_library),
               PetscErrorCode,
               (CDM, CVec, Ptr{Cvoid}),
               dm, vec, array,
              )


	return nothing
end 

"""
	DMStagVecRestoreArray(petsclib::PetscLibType,dm::PetscDM, vec::PetscVec, array::Cvoid) 
restore access to a raw array

Logically Collective

Input Parameters:
- `dm`  - the `DMSTAG` object
- `vec` - the `Vec` object

Output Parameter:
- `array` - the array

Level: beginner

See also: 
=== 
`DMSTAG`, `DMStagVecGetArray()`, `DMDAVecRestoreArray()`, `DMDAVecRestoreArrayDOF()`

# External Links
$(_doc_external("Dm/DMStagVecRestoreArray"))
"""
function DMStagVecRestoreArray(petsclib::PetscLibType, dm::PetscDM, vec::PetscVec, array::Cvoid) end

@for_petsc function DMStagVecRestoreArray(petsclib::$UnionPetscLib, dm::PetscDM, vec::PetscVec, array::Cvoid )

    @chk ccall(
               (:DMStagVecRestoreArray, $petsc_library),
               PetscErrorCode,
               (CDM, CVec, Ptr{Cvoid}),
               dm, vec, array,
              )


	return nothing
end 

"""
	DMStagVecRestoreArrayRead(petsclib::PetscLibType,dm::PetscDM, vec::PetscVec, array::Cvoid) 
restore read

Logically Collective

Input Parameters:
- `dm`  - the `DMSTAG` object
- `vec` - the Vec object

Output Parameter:
- `array` - the read-only array

Level: beginner

See also: 
=== 
`DMSTAG`, `DMStagVecGetArrayRead()`, `DMDAVecRestoreArrayRead()`, `DMDAVecRestoreArrayDOFRead()`

# External Links
$(_doc_external("Dm/DMStagVecRestoreArrayRead"))
"""
function DMStagVecRestoreArrayRead(petsclib::PetscLibType, dm::PetscDM, vec::PetscVec, array::Cvoid) end

@for_petsc function DMStagVecRestoreArrayRead(petsclib::$UnionPetscLib, dm::PetscDM, vec::PetscVec, array::Cvoid )

    @chk ccall(
               (:DMStagVecRestoreArrayRead, $petsc_library),
               PetscErrorCode,
               (CDM, CVec, Ptr{Cvoid}),
               dm, vec, array,
              )


	return nothing
end 

"""
	dm::PetscDM = DMStagCreate2d(petsclib::PetscLibType,comm::MPI_Comm, bndx::DMBoundaryType, bndy::DMBoundaryType, M::PetscInt, N::PetscInt, m::PetscInt, n::PetscInt, dof0::PetscInt, dof1::PetscInt, dof2::PetscInt, stencilType::DMStagStencilType, stencilWidth::PetscInt, lx::Vector{PetscInt}, ly::Vector{PetscInt}) 
Create an object to manage data living on the elements, faces, and vertices of a parallelized regular 2D grid.

Collective

Input Parameters:
- `comm`         - MPI communicator
- `bndx`         - x boundary type, `DM_BOUNDARY_NONE`, `DM_BOUNDARY_PERIODIC`, or
`DM_BOUNDARY_GHOSTED`
- `bndy`         - y boundary type, `DM_BOUNDARY_NONE`, `DM_BOUNDARY_PERIODIC`, or `DM_BOUNDARY_GHOSTED`
- `M`            - global number of elements in x direction
- `N`            - global number of elements in y direction
- `m`            - number of ranks in the x direction (may be `PETSC_DECIDE`)
- `n`            - number of ranks in the y direction (may be `PETSC_DECIDE`)
- `dof0`         - number of degrees of freedom per vertex/0-cell
- `dof1`         - number of degrees of freedom per face/1-cell
- `dof2`         - number of degrees of freedom per element/2-cell
- `stencilType`  - ghost/halo region type: `DMSTAG_STENCIL_NONE`, `DMSTAG_STENCIL_BOX`, or `DMSTAG_STENCIL_STAR`
- `stencilWidth` - width, in elements, of halo/ghost region
- `lx`           - array of local x element counts, of length equal to `m`, summing to `M`, or `NULL`
- `ly`           - array of local y element counts, of length equal to `n`, summing to `N`, or `NULL`

Output Parameter:
- `dm` - the new `DMSTAG` object

Options Database Keys:
- `-dm_view`                                      - calls `DMViewFromOptions()` at the conclusion of `DMSetUp()`
- `-stag_grid_x <nx>`                             - number of elements in the x direction
- `-stag_grid_y <ny>`                             - number of elements in the y direction
- `-stag_ranks_x <rx>`                            - number of ranks in the x direction
- `-stag_ranks_y <ry>`                            - number of ranks in the y direction
- `-stag_ghost_stencil_width`                     - width of ghost region, in elements
- `-stag_boundary_type_x <none,ghosted,periodic>` - `DMBoundaryType` value
- `-stag_boundary_type_y <none,ghosted,periodic>` - `DMBoundaryType` value

Level: beginner

Notes:
You must call `DMSetUp()` after this call, before using the `DM`.
If you wish to use the options database (see the keys above) to change values in the `DMSTAG`, you must call
`DMSetFromOptions()` after this function but before `DMSetUp()`.

See also: 
=== 
`DMSTAG`, `DMStagCreate1d()`, `DMStagCreate3d()`, `DMDestroy()`, `DMView()`, `DMCreateGlobalVector()`, `DMCreateLocalVector()`, `DMLocalToGlobalBegin()`, `DMDACreate2d()`

# External Links
$(_doc_external("Dm/DMStagCreate2d"))
"""
function DMStagCreate2d(petsclib::PetscLibType, comm::MPI_Comm, bndx::DMBoundaryType, bndy::DMBoundaryType, M::PetscInt, N::PetscInt, m::PetscInt, n::PetscInt, dof0::PetscInt, dof1::PetscInt, dof2::PetscInt, stencilType::DMStagStencilType, stencilWidth::PetscInt, lx::Vector{PetscInt}, ly::Vector{PetscInt}) end

@for_petsc function DMStagCreate2d(petsclib::$UnionPetscLib, comm::MPI_Comm, bndx::DMBoundaryType, bndy::DMBoundaryType, M::$PetscInt, N::$PetscInt, m::$PetscInt, n::$PetscInt, dof0::$PetscInt, dof1::$PetscInt, dof2::$PetscInt, stencilType::DMStagStencilType, stencilWidth::$PetscInt, lx::Vector{$PetscInt}, ly::Vector{$PetscInt} )
	dm_ = Ref{CDM}()

    @chk ccall(
               (:DMStagCreate2d, $petsc_library),
               PetscErrorCode,
               (MPI_Comm, DMBoundaryType, DMBoundaryType, $PetscInt, $PetscInt, $PetscInt, $PetscInt, $PetscInt, $PetscInt, $PetscInt, DMStagStencilType, $PetscInt, Ptr{$PetscInt}, Ptr{$PetscInt}, Ptr{CDM}),
               comm, bndx, bndy, M, N, m, n, dof0, dof1, dof2, stencilType, stencilWidth, lx, ly, dm_,
              )

	dm = PetscDM(dm_[], petsclib)

	return dm
end 

"""
	DMPatchZoom(petsclib::PetscLibType,dm::PetscDM, lower::MatStencil, upper::MatStencil, commz::MPI_Comm, dmz::PetscDM, sfz::PetscSF, sfzr::PetscSF) 
Create patches of a `DMDA` on subsets of processes, indicated by `commz`

Collective

Input Parameters:
- `dm`    - the `DM`
- `lower` - the lower left corner of the requested patch
- `upper` - the upper right corner of the requested patch
- `commz` - the new communicator for the patch, `MPI_COMM_NULL` indicates that the given rank will not own a patch

Output Parameters:
- `dmz`  - the patch `DM`
- `sfz`  - the `PetscSF` mapping the patch+halo to the zoomed version (optional)
- `sfzr` - the `PetscSF` mapping the patch to the restricted zoomed version

Level: intermediate

-seealso: `DMPatchSolve()`, `DMDACreatePatchIS()`

# External Links
$(_doc_external("Dm/DMPatchZoom"))
"""
function DMPatchZoom(petsclib::PetscLibType, dm::PetscDM, lower::MatStencil, upper::MatStencil, commz::MPI_Comm, dmz::PetscDM, sfz::PetscSF, sfzr::PetscSF) end

@for_petsc function DMPatchZoom(petsclib::$UnionPetscLib, dm::PetscDM, lower::MatStencil, upper::MatStencil, commz::MPI_Comm, dmz::PetscDM, sfz::PetscSF, sfzr::PetscSF )
	dmz_ = Ref(dmz.ptr)

    @chk ccall(
               (:DMPatchZoom, $petsc_library),
               PetscErrorCode,
               (CDM, MatStencil, MatStencil, MPI_Comm, Ptr{CDM}, Ptr{PetscSF}, Ptr{PetscSF}),
               dm, lower, upper, commz, dmz_, sfz, sfzr,
              )

	dmz.ptr = C_NULL

	return nothing
end 

"""
	DMPatchSolve(petsclib::PetscLibType,dm::PetscDM) 

# External Links
$(_doc_external("Dm/DMPatchSolve"))
"""
function DMPatchSolve(petsclib::PetscLibType, dm::PetscDM) end

@for_petsc function DMPatchSolve(petsclib::$UnionPetscLib, dm::PetscDM )

    @chk ccall(
               (:DMPatchSolve, $petsc_library),
               PetscErrorCode,
               (CDM,),
               dm,
              )


	return nothing
end 

"""
	DMPatchGetCoarse(petsclib::PetscLibType,dm::PetscDM, dmCoarse::PetscDM) 

# External Links
$(_doc_external("Dm/DMPatchGetCoarse"))
"""
function DMPatchGetCoarse(petsclib::PetscLibType, dm::PetscDM, dmCoarse::PetscDM) end

@for_petsc function DMPatchGetCoarse(petsclib::$UnionPetscLib, dm::PetscDM, dmCoarse::PetscDM )
	dmCoarse_ = Ref(dmCoarse.ptr)

    @chk ccall(
               (:DMPatchGetCoarse, $petsc_library),
               PetscErrorCode,
               (CDM, Ptr{CDM}),
               dm, dmCoarse_,
              )

	dmCoarse.ptr = C_NULL

	return nothing
end 

"""
	DMPatchGetPatchSize(petsclib::PetscLibType,dm::PetscDM, patchSize::MatStencil) 

# External Links
$(_doc_external("Dm/DMPatchGetPatchSize"))
"""
function DMPatchGetPatchSize(petsclib::PetscLibType, dm::PetscDM, patchSize::MatStencil) end

@for_petsc function DMPatchGetPatchSize(petsclib::$UnionPetscLib, dm::PetscDM, patchSize::MatStencil )

    @chk ccall(
               (:DMPatchGetPatchSize, $petsc_library),
               PetscErrorCode,
               (CDM, Ptr{MatStencil}),
               dm, patchSize,
              )


	return nothing
end 

"""
	DMPatchSetPatchSize(petsclib::PetscLibType,dm::PetscDM, patchSize::MatStencil) 

# External Links
$(_doc_external("Dm/DMPatchSetPatchSize"))
"""
function DMPatchSetPatchSize(petsclib::PetscLibType, dm::PetscDM, patchSize::MatStencil) end

@for_petsc function DMPatchSetPatchSize(petsclib::$UnionPetscLib, dm::PetscDM, patchSize::MatStencil )

    @chk ccall(
               (:DMPatchSetPatchSize, $petsc_library),
               PetscErrorCode,
               (CDM, MatStencil),
               dm, patchSize,
              )


	return nothing
end 

"""
	DMPatchGetCommSize(petsclib::PetscLibType,dm::PetscDM, commSize::MatStencil) 

# External Links
$(_doc_external("Dm/DMPatchGetCommSize"))
"""
function DMPatchGetCommSize(petsclib::PetscLibType, dm::PetscDM, commSize::MatStencil) end

@for_petsc function DMPatchGetCommSize(petsclib::$UnionPetscLib, dm::PetscDM, commSize::MatStencil )

    @chk ccall(
               (:DMPatchGetCommSize, $petsc_library),
               PetscErrorCode,
               (CDM, Ptr{MatStencil}),
               dm, commSize,
              )


	return nothing
end 

"""
	DMPatchSetCommSize(petsclib::PetscLibType,dm::PetscDM, commSize::MatStencil) 

# External Links
$(_doc_external("Dm/DMPatchSetCommSize"))
"""
function DMPatchSetCommSize(petsclib::PetscLibType, dm::PetscDM, commSize::MatStencil) end

@for_petsc function DMPatchSetCommSize(petsclib::$UnionPetscLib, dm::PetscDM, commSize::MatStencil )

    @chk ccall(
               (:DMPatchSetCommSize, $petsc_library),
               PetscErrorCode,
               (CDM, MatStencil),
               dm, commSize,
              )


	return nothing
end 

"""
	mesh::PetscDM = DMPatchCreate(petsclib::PetscLibType,comm::MPI_Comm) 
Creates a DMPatch object, which is a collections of DMs called patches.

Collective

Input Parameter:
- `comm` - The communicator for the DMPatch object

Output Parameter:
- `mesh` - The DMPatch object

-seealso: `DMPatchZoom()`


# External Links
$(_doc_external("Dm/DMPatchCreate"))
"""
function DMPatchCreate(petsclib::PetscLibType, comm::MPI_Comm) end

@for_petsc function DMPatchCreate(petsclib::$UnionPetscLib, comm::MPI_Comm )
	mesh_ = Ref{CDM}()

    @chk ccall(
               (:DMPatchCreate, $petsc_library),
               PetscErrorCode,
               (MPI_Comm, Ptr{CDM}),
               comm, mesh_,
              )

	mesh = PetscDM(mesh_[], petsclib)

	return mesh
end 

"""
	dm::PetscDM = DMPatchCreateGrid(petsclib::PetscLibType,comm::MPI_Comm, dim::PetscInt, patchSize::MatStencil, commSize::MatStencil, gridSize::MatStencil) 

# External Links
$(_doc_external("Dm/DMPatchCreateGrid"))
"""
function DMPatchCreateGrid(petsclib::PetscLibType, comm::MPI_Comm, dim::PetscInt, patchSize::MatStencil, commSize::MatStencil, gridSize::MatStencil) end

@for_petsc function DMPatchCreateGrid(petsclib::$UnionPetscLib, comm::MPI_Comm, dim::$PetscInt, patchSize::MatStencil, commSize::MatStencil, gridSize::MatStencil )
	dm_ = Ref{CDM}()

    @chk ccall(
               (:DMPatchCreateGrid, $petsc_library),
               PetscErrorCode,
               (MPI_Comm, $PetscInt, MatStencil, MatStencil, MatStencil, Ptr{CDM}),
               comm, dim, patchSize, commSize, gridSize, dm_,
              )

	dm = PetscDM(dm_[], petsclib)

	return dm
end 

"""
	DMRedundantSetSize(petsclib::PetscLibType,dm::PetscDM, rank::PetscMPIInt, N::PetscInt) 
Sets the size of a densely coupled redundant object

Collective

Input Parameters:
- `dm`   - `DM` object of type `DMREDUNDANT`
- `rank` - rank of process to own the redundant degrees of freedom
- `N`    - total number of redundant degrees of freedom

Level: advanced

-seealso: `DM`, `DMREDUNDANT`, `DMDestroy()`, `DMCreateGlobalVector()`, `DMRedundantCreate()`, `DMRedundantGetSize()`

# External Links
$(_doc_external("Dm/DMRedundantSetSize"))
"""
function DMRedundantSetSize(petsclib::PetscLibType, dm::PetscDM, rank::PetscMPIInt, N::PetscInt) end

@for_petsc function DMRedundantSetSize(petsclib::$UnionPetscLib, dm::PetscDM, rank::PetscMPIInt, N::$PetscInt )

    @chk ccall(
               (:DMRedundantSetSize, $petsc_library),
               PetscErrorCode,
               (CDM, PetscMPIInt, $PetscInt),
               dm, rank, N,
              )


	return nothing
end 

"""
	N::PetscInt = DMRedundantGetSize(petsclib::PetscLibType,dm::PetscDM, rank::PetscMPIInt) 
Gets the size of a densely coupled redundant object

Not Collective

Input Parameter:
- `dm` - `DM` object of type `DMREDUNDANT`

Output Parameters:
- `rank` - rank of process to own the redundant degrees of freedom (or `NULL`)
- `N`    - total number of redundant degrees of freedom (or `NULL`)

Level: advanced

-seealso: `DM`, `DMREDUNDANT`, `DMDestroy()`, `DMCreateGlobalVector()`, `DMRedundantCreate()`, `DMRedundantSetSize()`

# External Links
$(_doc_external("Dm/DMRedundantGetSize"))
"""
function DMRedundantGetSize(petsclib::PetscLibType, dm::PetscDM, rank::PetscMPIInt) end

@for_petsc function DMRedundantGetSize(petsclib::$UnionPetscLib, dm::PetscDM, rank::PetscMPIInt )
	N_ = Ref{$PetscInt}()

    @chk ccall(
               (:DMRedundantGetSize, $petsc_library),
               PetscErrorCode,
               (CDM, Ptr{PetscMPIInt}, Ptr{$PetscInt}),
               dm, rank, N_,
              )

	N = N_[]

	return N
end 

"""
	dm::PetscDM = DMRedundantCreate(petsclib::PetscLibType,comm::MPI_Comm, rank::PetscMPIInt, N::PetscInt) 
Creates a `DM` object, used to manage data for dense globally coupled variables

Collective

Input Parameters:
- `comm` - the processors that will share the global vector
- `rank` - the MPI rank to own the redundant values
- `N`    - total number of degrees of freedom

Output Parameter:
- `dm` - the `DM` object of type `DMREDUNDANT`

Level: advanced

-seealso: `DM`, `DMREDUNDANT`, `DMDestroy()`, `DMCreateGlobalVector()`, `DMCreateMatrix()`, `DMCompositeAddDM()`, `DMSetType()`, `DMRedundantSetSize()`, `DMRedundantGetSize()`

# External Links
$(_doc_external("Dm/DMRedundantCreate"))
"""
function DMRedundantCreate(petsclib::PetscLibType, comm::MPI_Comm, rank::PetscMPIInt, N::PetscInt) end

@for_petsc function DMRedundantCreate(petsclib::$UnionPetscLib, comm::MPI_Comm, rank::PetscMPIInt, N::$PetscInt )
	dm_ = Ref{CDM}()

    @chk ccall(
               (:DMRedundantCreate, $petsc_library),
               PetscErrorCode,
               (MPI_Comm, PetscMPIInt, $PetscInt, Ptr{CDM}),
               comm, rank, N, dm_,
              )

	dm = PetscDM(dm_[], petsclib)

	return dm
end 

"""
	DMMoabOutput(petsclib::PetscLibType,dm::PetscDM, filename::String, usrwriteopts::String) 

# External Links
$(_doc_external("Dm/DMMoabOutput"))
"""
function DMMoabOutput(petsclib::PetscLibType, dm::PetscDM, filename::String, usrwriteopts::String) end

@for_petsc function DMMoabOutput(petsclib::$UnionPetscLib, dm::PetscDM, filename::String, usrwriteopts::String )

    @chk ccall(
               (:DMMoabOutput, $petsc_library),
               PetscErrorCode,
               (CDM, Ptr{Cchar}, Ptr{Cchar}),
               dm, filename, usrwriteopts,
              )


	return nothing
end 

"""
	coordinates::PetscReal,phypts::PetscReal,jacobian_quadrature_weight_product::PetscReal,fe_basis::PetscReal = DMMoabFEMComputeBasis(petsclib::PetscLibType,dim::PetscInt, nverts::PetscInt, quadrature::PetscQuadrature, fe_basis_derivatives::PetscReal) 

# External Links
$(_doc_external("Dm/DMMoabFEMComputeBasis"))
"""
function DMMoabFEMComputeBasis(petsclib::PetscLibType, dim::PetscInt, nverts::PetscInt, quadrature::PetscQuadrature, fe_basis_derivatives::PetscReal) end

@for_petsc function DMMoabFEMComputeBasis(petsclib::$UnionPetscLib, dim::$PetscInt, nverts::$PetscInt, quadrature::PetscQuadrature, fe_basis_derivatives::$PetscReal )
	coordinates_ = Ref{$PetscReal}()
	phypts_ = Ref{$PetscReal}()
	jacobian_quadrature_weight_product_ = Ref{$PetscReal}()
	fe_basis_ = Ref{$PetscReal}()

    @chk ccall(
               (:DMMoabFEMComputeBasis, $petsc_library),
               PetscErrorCode,
               ($PetscInt, $PetscInt, Ptr{$PetscReal}, PetscQuadrature, Ptr{$PetscReal}, Ptr{$PetscReal}, Ptr{$PetscReal}, $PetscReal),
               dim, nverts, coordinates_, quadrature, phypts_, jacobian_quadrature_weight_product_, fe_basis_, fe_basis_derivatives,
              )

	coordinates = coordinates_[]
	phypts = phypts_[]
	jacobian_quadrature_weight_product = jacobian_quadrature_weight_product_[]
	fe_basis = fe_basis_[]

	return coordinates,phypts,jacobian_quadrature_weight_product,fe_basis
end 

"""
	quadrature::PetscQuadrature = DMMoabFEMCreateQuadratureDefault(petsclib::PetscLibType,dim::PetscInt, nverts::PetscInt) 

# External Links
$(_doc_external("Dm/DMMoabFEMCreateQuadratureDefault"))
"""
function DMMoabFEMCreateQuadratureDefault(petsclib::PetscLibType, dim::PetscInt, nverts::PetscInt) end

@for_petsc function DMMoabFEMCreateQuadratureDefault(petsclib::$UnionPetscLib, dim::$PetscInt, nverts::$PetscInt )
	quadrature_ = Ref{PetscQuadrature}()

    @chk ccall(
               (:DMMoabFEMCreateQuadratureDefault, $petsc_library),
               PetscErrorCode,
               ($PetscInt, $PetscInt, Ptr{PetscQuadrature}),
               dim, nverts, quadrature_,
              )

	quadrature = quadrature_[]

	return quadrature
end 

"""
	coordinates::PetscReal,xphy::PetscReal,natparam::PetscReal,phi::PetscReal = DMMoabPToRMapping(petsclib::PetscLibType,dim::PetscInt, nverts::PetscInt) 

# External Links
$(_doc_external("Dm/DMMoabPToRMapping"))
"""
function DMMoabPToRMapping(petsclib::PetscLibType, dim::PetscInt, nverts::PetscInt) end

@for_petsc function DMMoabPToRMapping(petsclib::$UnionPetscLib, dim::$PetscInt, nverts::$PetscInt )
	coordinates_ = Ref{$PetscReal}()
	xphy_ = Ref{$PetscReal}()
	natparam_ = Ref{$PetscReal}()
	phi_ = Ref{$PetscReal}()

    @chk ccall(
               (:DMMoabPToRMapping, $petsc_library),
               PetscErrorCode,
               ($PetscInt, $PetscInt, Ptr{$PetscReal}, Ptr{$PetscReal}, Ptr{$PetscReal}, Ptr{$PetscReal}),
               dim, nverts, coordinates_, xphy_, natparam_, phi_,
              )

	coordinates = coordinates_[]
	xphy = xphy_[]
	natparam = natparam_[]
	phi = phi_[]

	return coordinates,xphy,natparam,phi
end 

"""
	range::moab_Range,vec::PetscVec = DMMoabCreateVector(petsclib::PetscLibType,dm::PetscDM, tag::moab_Tag, is_global_vec::PetscBool, destroy_tag::PetscBool) 

# External Links
$(_doc_external("Dm/DMMoabCreateVector"))
"""
function DMMoabCreateVector(petsclib::PetscLibType, dm::PetscDM, tag::moab_Tag, is_global_vec::PetscBool, destroy_tag::PetscBool) end

@for_petsc function DMMoabCreateVector(petsclib::$UnionPetscLib, dm::PetscDM, tag::moab_Tag, is_global_vec::PetscBool, destroy_tag::PetscBool )
	range_ = Ref{moab_Range}()
	vec_ = Ref{CVec}()

    @chk ccall(
               (:DMMoabCreateVector, $petsc_library),
               PetscErrorCode,
               (CDM, moab_Tag, Ptr{moab_Range}, PetscBool, PetscBool, Ptr{CVec}),
               dm, tag, range_, is_global_vec, destroy_tag, vec_,
              )

	range = range_[]
	vec = PetscVec(vec_[], petsclib)

	return range,vec
end 

"""
	DMMoabGetVecTag(petsclib::PetscLibType,vec::PetscVec, tag::moab_Tag) 

# External Links
$(_doc_external("Dm/DMMoabGetVecTag"))
"""
function DMMoabGetVecTag(petsclib::PetscLibType, vec::PetscVec, tag::moab_Tag) end

@for_petsc function DMMoabGetVecTag(petsclib::$UnionPetscLib, vec::PetscVec, tag::moab_Tag )

    @chk ccall(
               (:DMMoabGetVecTag, $petsc_library),
               PetscErrorCode,
               (CVec, Ptr{moab_Tag}),
               vec, tag,
              )


	return nothing
end 

"""
	DMMoabGetVecRange(petsclib::PetscLibType,vec::PetscVec, range::moab_Range) 

# External Links
$(_doc_external("Dm/DMMoabGetVecRange"))
"""
function DMMoabGetVecRange(petsclib::PetscLibType, vec::PetscVec, range::moab_Range) end

@for_petsc function DMMoabGetVecRange(petsclib::$UnionPetscLib, vec::PetscVec, range::moab_Range )

    @chk ccall(
               (:DMMoabGetVecRange, $petsc_library),
               PetscErrorCode,
               (CVec, Ptr{moab_Range}),
               vec, range,
              )


	return nothing
end 

"""
	DMMoabVecGetArray(petsclib::PetscLibType,dm::PetscDM, vec::PetscVec, array::Cvoid) 

# External Links
$(_doc_external("Dm/DMMoabVecGetArray"))
"""
function DMMoabVecGetArray(petsclib::PetscLibType, dm::PetscDM, vec::PetscVec, array::Cvoid) end

@for_petsc function DMMoabVecGetArray(petsclib::$UnionPetscLib, dm::PetscDM, vec::PetscVec, array::Cvoid )

    @chk ccall(
               (:DMMoabVecGetArray, $petsc_library),
               PetscErrorCode,
               (CDM, CVec, Ptr{Cvoid}),
               dm, vec, array,
              )


	return nothing
end 

"""
	DMMoabVecRestoreArray(petsclib::PetscLibType,dm::PetscDM, vec::PetscVec, array::Cvoid) 

# External Links
$(_doc_external("Dm/DMMoabVecRestoreArray"))
"""
function DMMoabVecRestoreArray(petsclib::PetscLibType, dm::PetscDM, vec::PetscVec, array::Cvoid) end

@for_petsc function DMMoabVecRestoreArray(petsclib::$UnionPetscLib, dm::PetscDM, vec::PetscVec, array::Cvoid )

    @chk ccall(
               (:DMMoabVecRestoreArray, $petsc_library),
               PetscErrorCode,
               (CDM, CVec, Ptr{Cvoid}),
               dm, vec, array,
              )


	return nothing
end 

"""
	DMMoabVecGetArrayRead(petsclib::PetscLibType,dm::PetscDM, vec::PetscVec, array::Cvoid) 

# External Links
$(_doc_external("Dm/DMMoabVecGetArrayRead"))
"""
function DMMoabVecGetArrayRead(petsclib::PetscLibType, dm::PetscDM, vec::PetscVec, array::Cvoid) end

@for_petsc function DMMoabVecGetArrayRead(petsclib::$UnionPetscLib, dm::PetscDM, vec::PetscVec, array::Cvoid )

    @chk ccall(
               (:DMMoabVecGetArrayRead, $petsc_library),
               PetscErrorCode,
               (CDM, CVec, Ptr{Cvoid}),
               dm, vec, array,
              )


	return nothing
end 

"""
	DMMoabVecRestoreArrayRead(petsclib::PetscLibType,dm::PetscDM, vec::PetscVec, array::Cvoid) 

# External Links
$(_doc_external("Dm/DMMoabVecRestoreArrayRead"))
"""
function DMMoabVecRestoreArrayRead(petsclib::PetscLibType, dm::PetscDM, vec::PetscVec, array::Cvoid) end

@for_petsc function DMMoabVecRestoreArrayRead(petsclib::$UnionPetscLib, dm::PetscDM, vec::PetscVec, array::Cvoid )

    @chk ccall(
               (:DMMoabVecRestoreArrayRead, $petsc_library),
               PetscErrorCode,
               (CDM, CVec, Ptr{Cvoid}),
               dm, vec, array,
              )


	return nothing
end 

"""
	ldegrees::PetscInt = DMMoabGenerateHierarchy(petsclib::PetscLibType,dm::PetscDM, nlevels::PetscInt) 

# External Links
$(_doc_external("Dm/DMMoabGenerateHierarchy"))
"""
function DMMoabGenerateHierarchy(petsclib::PetscLibType, dm::PetscDM, nlevels::PetscInt) end

@for_petsc function DMMoabGenerateHierarchy(petsclib::$UnionPetscLib, dm::PetscDM, nlevels::$PetscInt )
	ldegrees_ = Ref{$PetscInt}()

    @chk ccall(
               (:DMMoabGenerateHierarchy, $petsc_library),
               PetscErrorCode,
               (CDM, $PetscInt, Ptr{$PetscInt}),
               dm, nlevels, ldegrees_,
              )

	ldegrees = ldegrees_[]

	return ldegrees
end 

"""
	bounds::PetscReal,dm::PetscDM = DMMoabCreateBoxMesh(petsclib::PetscLibType,comm::MPI_Comm, dim::PetscInt, useSimplex::PetscBool, nele::PetscInt, nghost::PetscInt) 

# External Links
$(_doc_external("Dm/DMMoabCreateBoxMesh"))
"""
function DMMoabCreateBoxMesh(petsclib::PetscLibType, comm::MPI_Comm, dim::PetscInt, useSimplex::PetscBool, nele::PetscInt, nghost::PetscInt) end

@for_petsc function DMMoabCreateBoxMesh(petsclib::$UnionPetscLib, comm::MPI_Comm, dim::$PetscInt, useSimplex::PetscBool, nele::$PetscInt, nghost::$PetscInt )
	bounds_ = Ref{$PetscReal}()
	dm_ = Ref{CDM}()

    @chk ccall(
               (:DMMoabCreateBoxMesh, $petsc_library),
               PetscErrorCode,
               (MPI_Comm, $PetscInt, PetscBool, Ptr{$PetscReal}, $PetscInt, $PetscInt, Ptr{CDM}),
               comm, dim, useSimplex, bounds_, nele, nghost, dm_,
              )

	bounds = bounds_[]
	dm = PetscDM(dm_[], petsclib)

	return bounds,dm
end 

"""
	DMMoabLoadFromFile(petsclib::PetscLibType,comm::MPI_Comm, dim::PetscInt, nghost::PetscInt, filename::String, usrreadopts::String, dm::PetscDM) 

# External Links
$(_doc_external("Dm/DMMoabLoadFromFile"))
"""
function DMMoabLoadFromFile(petsclib::PetscLibType, comm::MPI_Comm, dim::PetscInt, nghost::PetscInt, filename::String, usrreadopts::String, dm::PetscDM) end

@for_petsc function DMMoabLoadFromFile(petsclib::$UnionPetscLib, comm::MPI_Comm, dim::$PetscInt, nghost::$PetscInt, filename::String, usrreadopts::String, dm::PetscDM )
	dm_ = Ref(dm.ptr)

    @chk ccall(
               (:DMMoabLoadFromFile, $petsc_library),
               PetscErrorCode,
               (MPI_Comm, $PetscInt, $PetscInt, Ptr{Cchar}, Ptr{Cchar}, Ptr{CDM}),
               comm, dim, nghost, filename, usrreadopts, dm_,
              )

	dm.ptr = C_NULL

	return nothing
end 

"""
	DMMoabRenumberMeshEntities(petsclib::PetscLibType,dm::PetscDM) 

# External Links
$(_doc_external("Dm/DMMoabRenumberMeshEntities"))
"""
function DMMoabRenumberMeshEntities(petsclib::PetscLibType, dm::PetscDM) end

@for_petsc function DMMoabRenumberMeshEntities(petsclib::$UnionPetscLib, dm::PetscDM )

    @chk ccall(
               (:DMMoabRenumberMeshEntities, $petsc_library),
               PetscErrorCode,
               (CDM,),
               dm,
              )


	return nothing
end 

"""
	DMMoabSetFieldVector(petsclib::PetscLibType,dm::PetscDM, ifield::PetscInt, fvec::PetscVec) 

# External Links
$(_doc_external("Dm/DMMoabSetFieldVector"))
"""
function DMMoabSetFieldVector(petsclib::PetscLibType, dm::PetscDM, ifield::PetscInt, fvec::PetscVec) end

@for_petsc function DMMoabSetFieldVector(petsclib::$UnionPetscLib, dm::PetscDM, ifield::$PetscInt, fvec::PetscVec )

    @chk ccall(
               (:DMMoabSetFieldVector, $petsc_library),
               PetscErrorCode,
               (CDM, $PetscInt, CVec),
               dm, ifield, fvec,
              )


	return nothing
end 

"""
	DMMoabSetGlobalFieldVector(petsclib::PetscLibType,dm::PetscDM, fvec::PetscVec) 

# External Links
$(_doc_external("Dm/DMMoabSetGlobalFieldVector"))
"""
function DMMoabSetGlobalFieldVector(petsclib::PetscLibType, dm::PetscDM, fvec::PetscVec) end

@for_petsc function DMMoabSetGlobalFieldVector(petsclib::$UnionPetscLib, dm::PetscDM, fvec::PetscVec )

    @chk ccall(
               (:DMMoabSetGlobalFieldVector, $petsc_library),
               PetscErrorCode,
               (CDM, CVec),
               dm, fvec,
              )


	return nothing
end 

"""
	DMMoabSetFieldNames(petsclib::PetscLibType,dm::PetscDM, numFields::PetscInt, fields::String) 

# External Links
$(_doc_external("Dm/DMMoabSetFieldNames"))
"""
function DMMoabSetFieldNames(petsclib::PetscLibType, dm::PetscDM, numFields::PetscInt, fields::String) end

@for_petsc function DMMoabSetFieldNames(petsclib::$UnionPetscLib, dm::PetscDM, numFields::$PetscInt, fields::String )
	fields_ = Ref(pointer(fields))

    @chk ccall(
               (:DMMoabSetFieldNames, $petsc_library),
               PetscErrorCode,
               (CDM, $PetscInt, Ptr{Ptr{Cchar}}),
               dm, numFields, fields_,
              )


	return nothing
end 

"""
	DMMoabGetFieldName(petsclib::PetscLibType,dm::PetscDM, field::PetscInt, fieldName::String) 

# External Links
$(_doc_external("Dm/DMMoabGetFieldName"))
"""
function DMMoabGetFieldName(petsclib::PetscLibType, dm::PetscDM, field::PetscInt, fieldName::String) end

@for_petsc function DMMoabGetFieldName(petsclib::$UnionPetscLib, dm::PetscDM, field::$PetscInt, fieldName::String )
	fieldName_ = Ref(pointer(fieldName))

    @chk ccall(
               (:DMMoabGetFieldName, $petsc_library),
               PetscErrorCode,
               (CDM, $PetscInt, Ptr{Ptr{Cchar}}),
               dm, field, fieldName_,
              )


	return nothing
end 

"""
	DMMoabSetFieldName(petsclib::PetscLibType,dm::PetscDM, field::PetscInt, fieldName::String) 

# External Links
$(_doc_external("Dm/DMMoabSetFieldName"))
"""
function DMMoabSetFieldName(petsclib::PetscLibType, dm::PetscDM, field::PetscInt, fieldName::String) end

@for_petsc function DMMoabSetFieldName(petsclib::$UnionPetscLib, dm::PetscDM, field::$PetscInt, fieldName::String )

    @chk ccall(
               (:DMMoabSetFieldName, $petsc_library),
               PetscErrorCode,
               (CDM, $PetscInt, Ptr{Cchar}),
               dm, field, fieldName,
              )


	return nothing
end 

"""
	dof::PetscInt = DMMoabGetFieldDof(petsclib::PetscLibType,dm::PetscDM, point::moab_EntityHandle, field::PetscInt) 

# External Links
$(_doc_external("Dm/DMMoabGetFieldDof"))
"""
function DMMoabGetFieldDof(petsclib::PetscLibType, dm::PetscDM, point::moab_EntityHandle, field::PetscInt) end

@for_petsc function DMMoabGetFieldDof(petsclib::$UnionPetscLib, dm::PetscDM, point::moab_EntityHandle, field::$PetscInt )
	dof_ = Ref{$PetscInt}()

    @chk ccall(
               (:DMMoabGetFieldDof, $petsc_library),
               PetscErrorCode,
               (CDM, moab_EntityHandle, $PetscInt, Ptr{$PetscInt}),
               dm, point, field, dof_,
              )

	dof = dof_[]

	return dof
end 

"""
	dof::PetscInt = DMMoabGetFieldDofs(petsclib::PetscLibType,dm::PetscDM, npoints::PetscInt, points::moab_EntityHandle, field::PetscInt) 

# External Links
$(_doc_external("Dm/DMMoabGetFieldDofs"))
"""
function DMMoabGetFieldDofs(petsclib::PetscLibType, dm::PetscDM, npoints::PetscInt, points::moab_EntityHandle, field::PetscInt) end

@for_petsc function DMMoabGetFieldDofs(petsclib::$UnionPetscLib, dm::PetscDM, npoints::$PetscInt, points::moab_EntityHandle, field::$PetscInt )
	dof_ = Ref{$PetscInt}()

    @chk ccall(
               (:DMMoabGetFieldDofs, $petsc_library),
               PetscErrorCode,
               (CDM, $PetscInt, Ptr{moab_EntityHandle}, $PetscInt, Ptr{$PetscInt}),
               dm, npoints, points, field, dof_,
              )

	dof = dof_[]

	return dof
end 

"""
	dof::PetscInt = DMMoabGetFieldDofsLocal(petsclib::PetscLibType,dm::PetscDM, npoints::PetscInt, points::moab_EntityHandle, field::PetscInt) 

# External Links
$(_doc_external("Dm/DMMoabGetFieldDofsLocal"))
"""
function DMMoabGetFieldDofsLocal(petsclib::PetscLibType, dm::PetscDM, npoints::PetscInt, points::moab_EntityHandle, field::PetscInt) end

@for_petsc function DMMoabGetFieldDofsLocal(petsclib::$UnionPetscLib, dm::PetscDM, npoints::$PetscInt, points::moab_EntityHandle, field::$PetscInt )
	dof_ = Ref{$PetscInt}()

    @chk ccall(
               (:DMMoabGetFieldDofsLocal, $petsc_library),
               PetscErrorCode,
               (CDM, $PetscInt, Ptr{moab_EntityHandle}, $PetscInt, Ptr{$PetscInt}),
               dm, npoints, points, field, dof_,
              )

	dof = dof_[]

	return dof
end 

"""
	dof::PetscInt = DMMoabGetDofs(petsclib::PetscLibType,dm::PetscDM, npoints::PetscInt, points::moab_EntityHandle) 

# External Links
$(_doc_external("Dm/DMMoabGetDofs"))
"""
function DMMoabGetDofs(petsclib::PetscLibType, dm::PetscDM, npoints::PetscInt, points::moab_EntityHandle) end

@for_petsc function DMMoabGetDofs(petsclib::$UnionPetscLib, dm::PetscDM, npoints::$PetscInt, points::moab_EntityHandle )
	dof_ = Ref{$PetscInt}()

    @chk ccall(
               (:DMMoabGetDofs, $petsc_library),
               PetscErrorCode,
               (CDM, $PetscInt, Ptr{moab_EntityHandle}, Ptr{$PetscInt}),
               dm, npoints, points, dof_,
              )

	dof = dof_[]

	return dof
end 

"""
	dof::PetscInt = DMMoabGetDofsLocal(petsclib::PetscLibType,dm::PetscDM, npoints::PetscInt, points::moab_EntityHandle) 

# External Links
$(_doc_external("Dm/DMMoabGetDofsLocal"))
"""
function DMMoabGetDofsLocal(petsclib::PetscLibType, dm::PetscDM, npoints::PetscInt, points::moab_EntityHandle) end

@for_petsc function DMMoabGetDofsLocal(petsclib::$UnionPetscLib, dm::PetscDM, npoints::$PetscInt, points::moab_EntityHandle )
	dof_ = Ref{$PetscInt}()

    @chk ccall(
               (:DMMoabGetDofsLocal, $petsc_library),
               PetscErrorCode,
               (CDM, $PetscInt, Ptr{moab_EntityHandle}, Ptr{$PetscInt}),
               dm, npoints, points, dof_,
              )

	dof = dof_[]

	return dof
end 

"""
	dof::PetscInt = DMMoabGetDofsBlocked(petsclib::PetscLibType,dm::PetscDM, npoints::PetscInt, points::moab_EntityHandle) 

# External Links
$(_doc_external("Dm/DMMoabGetDofsBlocked"))
"""
function DMMoabGetDofsBlocked(petsclib::PetscLibType, dm::PetscDM, npoints::PetscInt, points::moab_EntityHandle) end

@for_petsc function DMMoabGetDofsBlocked(petsclib::$UnionPetscLib, dm::PetscDM, npoints::$PetscInt, points::moab_EntityHandle )
	dof_ = Ref{$PetscInt}()

    @chk ccall(
               (:DMMoabGetDofsBlocked, $petsc_library),
               PetscErrorCode,
               (CDM, $PetscInt, Ptr{moab_EntityHandle}, Ptr{$PetscInt}),
               dm, npoints, points, dof_,
              )

	dof = dof_[]

	return dof
end 

"""
	dof::PetscInt = DMMoabGetDofsBlockedLocal(petsclib::PetscLibType,dm::PetscDM, npoints::PetscInt, points::moab_EntityHandle) 

# External Links
$(_doc_external("Dm/DMMoabGetDofsBlockedLocal"))
"""
function DMMoabGetDofsBlockedLocal(petsclib::PetscLibType, dm::PetscDM, npoints::PetscInt, points::moab_EntityHandle) end

@for_petsc function DMMoabGetDofsBlockedLocal(petsclib::$UnionPetscLib, dm::PetscDM, npoints::$PetscInt, points::moab_EntityHandle )
	dof_ = Ref{$PetscInt}()

    @chk ccall(
               (:DMMoabGetDofsBlockedLocal, $petsc_library),
               PetscErrorCode,
               (CDM, $PetscInt, Ptr{moab_EntityHandle}, Ptr{$PetscInt}),
               dm, npoints, points, dof_,
              )

	dof = dof_[]

	return dof
end 

"""
	DMMoabGetVertexDofsBlocked(petsclib::PetscLibType,dm::PetscDM, dof::PetscInt) 

# External Links
$(_doc_external("Dm/DMMoabGetVertexDofsBlocked"))
"""
function DMMoabGetVertexDofsBlocked(petsclib::PetscLibType, dm::PetscDM, dof::PetscInt) end

@for_petsc function DMMoabGetVertexDofsBlocked(petsclib::$UnionPetscLib, dm::PetscDM, dof::$PetscInt )

    @chk ccall(
               (:DMMoabGetVertexDofsBlocked, $petsc_library),
               PetscErrorCode,
               (CDM, $PetscInt),
               dm, dof,
              )


	return nothing
end 

"""
	DMMoabGetVertexDofsBlockedLocal(petsclib::PetscLibType,dm::PetscDM, dof::PetscInt) 

# External Links
$(_doc_external("Dm/DMMoabGetVertexDofsBlockedLocal"))
"""
function DMMoabGetVertexDofsBlockedLocal(petsclib::PetscLibType, dm::PetscDM, dof::PetscInt) end

@for_petsc function DMMoabGetVertexDofsBlockedLocal(petsclib::$UnionPetscLib, dm::PetscDM, dof::$PetscInt )

    @chk ccall(
               (:DMMoabGetVertexDofsBlockedLocal, $petsc_library),
               PetscErrorCode,
               (CDM, $PetscInt),
               dm, dof,
              )


	return nothing
end 

"""
	dmb::PetscDM = DMMoabCreate(petsclib::PetscLibType,comm::MPI_Comm) 

# External Links
$(_doc_external("Dm/DMMoabCreate"))
"""
function DMMoabCreate(petsclib::PetscLibType, comm::MPI_Comm) end

@for_petsc function DMMoabCreate(petsclib::$UnionPetscLib, comm::MPI_Comm )
	dmb_ = Ref{CDM}()

    @chk ccall(
               (:DMMoabCreate, $petsc_library),
               PetscErrorCode,
               (MPI_Comm, Ptr{CDM}),
               comm, dmb_,
              )

	dmb = PetscDM(dmb_[], petsclib)

	return dmb
end 

"""
	mbiface::moab_Interface,ltog_tag::moab_Tag,range::moab_Range,dmb::PetscDM = DMMoabCreateMoab(petsclib::PetscLibType,comm::MPI_Comm) 

# External Links
$(_doc_external("Dm/DMMoabCreateMoab"))
"""
function DMMoabCreateMoab(petsclib::PetscLibType, comm::MPI_Comm) end

@for_petsc function DMMoabCreateMoab(petsclib::$UnionPetscLib, comm::MPI_Comm )
	mbiface_ = Ref{moab_Interface}()
	ltog_tag_ = Ref{moab_Tag}()
	range_ = Ref{moab_Range}()
	dmb_ = Ref{CDM}()

    @chk ccall(
               (:DMMoabCreateMoab, $petsc_library),
               PetscErrorCode,
               (MPI_Comm, Ptr{moab_Interface}, Ptr{moab_Tag}, Ptr{moab_Range}, Ptr{CDM}),
               comm, mbiface_, ltog_tag_, range_, dmb_,
              )

	mbiface = mbiface_[]
	ltog_tag = ltog_tag_[]
	range = range_[]
	dmb = PetscDM(dmb_[], petsclib)

	return mbiface,ltog_tag,range,dmb
end 

"""
	DMMoabGetParallelComm(petsclib::PetscLibType,dm::PetscDM, pcomm::moab_ParallelComm) 

# External Links
$(_doc_external("Dm/DMMoabGetParallelComm"))
"""
function DMMoabGetParallelComm(petsclib::PetscLibType, dm::PetscDM, pcomm::moab_ParallelComm) end

@for_petsc function DMMoabGetParallelComm(petsclib::$UnionPetscLib, dm::PetscDM, pcomm::moab_ParallelComm )

    @chk ccall(
               (:DMMoabGetParallelComm, $petsc_library),
               PetscErrorCode,
               (CDM, moab_ParallelComm),
               dm, pcomm,
              )


	return nothing
end 

"""
	DMMoabSetInterface(petsclib::PetscLibType,dm::PetscDM, mbiface::moab_Interface) 

# External Links
$(_doc_external("Dm/DMMoabSetInterface"))
"""
function DMMoabSetInterface(petsclib::PetscLibType, dm::PetscDM, mbiface::moab_Interface) end

@for_petsc function DMMoabSetInterface(petsclib::$UnionPetscLib, dm::PetscDM, mbiface::moab_Interface )

    @chk ccall(
               (:DMMoabSetInterface, $petsc_library),
               PetscErrorCode,
               (CDM, Ptr{moab_Interface}),
               dm, mbiface,
              )


	return nothing
end 

"""
	DMMoabGetInterface(petsclib::PetscLibType,dm::PetscDM, mbiface::moab_Interface) 

# External Links
$(_doc_external("Dm/DMMoabGetInterface"))
"""
function DMMoabGetInterface(petsclib::PetscLibType, dm::PetscDM, mbiface::moab_Interface) end

@for_petsc function DMMoabGetInterface(petsclib::$UnionPetscLib, dm::PetscDM, mbiface::moab_Interface )

    @chk ccall(
               (:DMMoabGetInterface, $petsc_library),
               PetscErrorCode,
               (CDM, moab_Interface),
               dm, mbiface,
              )


	return nothing
end 

"""
	DMMoabSetLocalVertices(petsclib::PetscLibType,dm::PetscDM, range::moab_Range) 

# External Links
$(_doc_external("Dm/DMMoabSetLocalVertices"))
"""
function DMMoabSetLocalVertices(petsclib::PetscLibType, dm::PetscDM, range::moab_Range) end

@for_petsc function DMMoabSetLocalVertices(petsclib::$UnionPetscLib, dm::PetscDM, range::moab_Range )

    @chk ccall(
               (:DMMoabSetLocalVertices, $petsc_library),
               PetscErrorCode,
               (CDM, Ptr{moab_Range}),
               dm, range,
              )


	return nothing
end 

"""
	DMMoabGetAllVertices(petsclib::PetscLibType,dm::PetscDM, loc::moab_Range) 

# External Links
$(_doc_external("Dm/DMMoabGetAllVertices"))
"""
function DMMoabGetAllVertices(petsclib::PetscLibType, dm::PetscDM, loc::moab_Range) end

@for_petsc function DMMoabGetAllVertices(petsclib::$UnionPetscLib, dm::PetscDM, loc::moab_Range )

    @chk ccall(
               (:DMMoabGetAllVertices, $petsc_library),
               PetscErrorCode,
               (CDM, Ptr{moab_Range}),
               dm, loc,
              )


	return nothing
end 

"""
	DMMoabGetLocalVertices(petsclib::PetscLibType,dm::PetscDM, owned::moab_Range, ghost::moab_Range) 

# External Links
$(_doc_external("Dm/DMMoabGetLocalVertices"))
"""
function DMMoabGetLocalVertices(petsclib::PetscLibType, dm::PetscDM, owned::moab_Range, ghost::moab_Range) end

@for_petsc function DMMoabGetLocalVertices(petsclib::$UnionPetscLib, dm::PetscDM, owned::moab_Range, ghost::moab_Range )

    @chk ccall(
               (:DMMoabGetLocalVertices, $petsc_library),
               PetscErrorCode,
               (CDM, moab_Range, moab_Range),
               dm, owned, ghost,
              )


	return nothing
end 

"""
	DMMoabGetLocalElements(petsclib::PetscLibType,dm::PetscDM, range::moab_Range) 

# External Links
$(_doc_external("Dm/DMMoabGetLocalElements"))
"""
function DMMoabGetLocalElements(petsclib::PetscLibType, dm::PetscDM, range::moab_Range) end

@for_petsc function DMMoabGetLocalElements(petsclib::$UnionPetscLib, dm::PetscDM, range::moab_Range )

    @chk ccall(
               (:DMMoabGetLocalElements, $petsc_library),
               PetscErrorCode,
               (CDM, moab_Range),
               dm, range,
              )


	return nothing
end 

"""
	DMMoabSetLocalElements(petsclib::PetscLibType,dm::PetscDM, range::moab_Range) 

# External Links
$(_doc_external("Dm/DMMoabSetLocalElements"))
"""
function DMMoabSetLocalElements(petsclib::PetscLibType, dm::PetscDM, range::moab_Range) end

@for_petsc function DMMoabSetLocalElements(petsclib::$UnionPetscLib, dm::PetscDM, range::moab_Range )

    @chk ccall(
               (:DMMoabSetLocalElements, $petsc_library),
               PetscErrorCode,
               (CDM, Ptr{moab_Range}),
               dm, range,
              )


	return nothing
end 

"""
	DMMoabSetLocalToGlobalTag(petsclib::PetscLibType,dm::PetscDM, ltogtag::moab_Tag) 

# External Links
$(_doc_external("Dm/DMMoabSetLocalToGlobalTag"))
"""
function DMMoabSetLocalToGlobalTag(petsclib::PetscLibType, dm::PetscDM, ltogtag::moab_Tag) end

@for_petsc function DMMoabSetLocalToGlobalTag(petsclib::$UnionPetscLib, dm::PetscDM, ltogtag::moab_Tag )

    @chk ccall(
               (:DMMoabSetLocalToGlobalTag, $petsc_library),
               PetscErrorCode,
               (CDM, moab_Tag),
               dm, ltogtag,
              )


	return nothing
end 

"""
	DMMoabGetLocalToGlobalTag(petsclib::PetscLibType,dm::PetscDM, ltog_tag::moab_Tag) 

# External Links
$(_doc_external("Dm/DMMoabGetLocalToGlobalTag"))
"""
function DMMoabGetLocalToGlobalTag(petsclib::PetscLibType, dm::PetscDM, ltog_tag::moab_Tag) end

@for_petsc function DMMoabGetLocalToGlobalTag(petsclib::$UnionPetscLib, dm::PetscDM, ltog_tag::moab_Tag )

    @chk ccall(
               (:DMMoabGetLocalToGlobalTag, $petsc_library),
               PetscErrorCode,
               (CDM, Ptr{moab_Tag}),
               dm, ltog_tag,
              )


	return nothing
end 

"""
	DMMoabSetBlockSize(petsclib::PetscLibType,dm::PetscDM, bs::PetscInt) 

# External Links
$(_doc_external("Dm/DMMoabSetBlockSize"))
"""
function DMMoabSetBlockSize(petsclib::PetscLibType, dm::PetscDM, bs::PetscInt) end

@for_petsc function DMMoabSetBlockSize(petsclib::$UnionPetscLib, dm::PetscDM, bs::$PetscInt )

    @chk ccall(
               (:DMMoabSetBlockSize, $petsc_library),
               PetscErrorCode,
               (CDM, $PetscInt),
               dm, bs,
              )


	return nothing
end 

"""
	bs::PetscInt = DMMoabGetBlockSize(petsclib::PetscLibType,dm::PetscDM) 

# External Links
$(_doc_external("Dm/DMMoabGetBlockSize"))
"""
function DMMoabGetBlockSize(petsclib::PetscLibType, dm::PetscDM) end

@for_petsc function DMMoabGetBlockSize(petsclib::$UnionPetscLib, dm::PetscDM )
	bs_ = Ref{$PetscInt}()

    @chk ccall(
               (:DMMoabGetBlockSize, $petsc_library),
               PetscErrorCode,
               (CDM, Ptr{$PetscInt}),
               dm, bs_,
              )

	bs = bs_[]

	return bs
end 

"""
	neg::PetscInt,nvg::PetscInt = DMMoabGetSize(petsclib::PetscLibType,dm::PetscDM) 

# External Links
$(_doc_external("Dm/DMMoabGetSize"))
"""
function DMMoabGetSize(petsclib::PetscLibType, dm::PetscDM) end

@for_petsc function DMMoabGetSize(petsclib::$UnionPetscLib, dm::PetscDM )
	neg_ = Ref{$PetscInt}()
	nvg_ = Ref{$PetscInt}()

    @chk ccall(
               (:DMMoabGetSize, $petsc_library),
               PetscErrorCode,
               (CDM, Ptr{$PetscInt}, Ptr{$PetscInt}),
               dm, neg_, nvg_,
              )

	neg = neg_[]
	nvg = nvg_[]

	return neg,nvg
end 

"""
	nel::PetscInt,neg::PetscInt,nvl::PetscInt,nvg::PetscInt = DMMoabGetLocalSize(petsclib::PetscLibType,dm::PetscDM) 

# External Links
$(_doc_external("Dm/DMMoabGetLocalSize"))
"""
function DMMoabGetLocalSize(petsclib::PetscLibType, dm::PetscDM) end

@for_petsc function DMMoabGetLocalSize(petsclib::$UnionPetscLib, dm::PetscDM )
	nel_ = Ref{$PetscInt}()
	neg_ = Ref{$PetscInt}()
	nvl_ = Ref{$PetscInt}()
	nvg_ = Ref{$PetscInt}()

    @chk ccall(
               (:DMMoabGetLocalSize, $petsc_library),
               PetscErrorCode,
               (CDM, Ptr{$PetscInt}, Ptr{$PetscInt}, Ptr{$PetscInt}, Ptr{$PetscInt}),
               dm, nel_, neg_, nvl_, nvg_,
              )

	nel = nel_[]
	neg = neg_[]
	nvl = nvl_[]
	nvg = nvg_[]

	return nel,neg,nvl,nvg
end 

"""
	offset::PetscInt = DMMoabGetOffset(petsclib::PetscLibType,dm::PetscDM) 

# External Links
$(_doc_external("Dm/DMMoabGetOffset"))
"""
function DMMoabGetOffset(petsclib::PetscLibType, dm::PetscDM) end

@for_petsc function DMMoabGetOffset(petsclib::$UnionPetscLib, dm::PetscDM )
	offset_ = Ref{$PetscInt}()

    @chk ccall(
               (:DMMoabGetOffset, $petsc_library),
               PetscErrorCode,
               (CDM, Ptr{$PetscInt}),
               dm, offset_,
              )

	offset = offset_[]

	return offset
end 

"""
	dim::PetscInt = DMMoabGetDimension(petsclib::PetscLibType,dm::PetscDM) 

# External Links
$(_doc_external("Dm/DMMoabGetDimension"))
"""
function DMMoabGetDimension(petsclib::PetscLibType, dm::PetscDM) end

@for_petsc function DMMoabGetDimension(petsclib::$UnionPetscLib, dm::PetscDM )
	dim_ = Ref{$PetscInt}()

    @chk ccall(
               (:DMMoabGetDimension, $petsc_library),
               PetscErrorCode,
               (CDM, Ptr{$PetscInt}),
               dm, dim_,
              )

	dim = dim_[]

	return dim
end 

"""
	nlevel::PetscInt = DMMoabGetHierarchyLevel(petsclib::PetscLibType,dm::PetscDM) 

# External Links
$(_doc_external("Dm/DMMoabGetHierarchyLevel"))
"""
function DMMoabGetHierarchyLevel(petsclib::PetscLibType, dm::PetscDM) end

@for_petsc function DMMoabGetHierarchyLevel(petsclib::$UnionPetscLib, dm::PetscDM )
	nlevel_ = Ref{$PetscInt}()

    @chk ccall(
               (:DMMoabGetHierarchyLevel, $petsc_library),
               PetscErrorCode,
               (CDM, Ptr{$PetscInt}),
               dm, nlevel_,
              )

	nlevel = nlevel_[]

	return nlevel
end 

"""
	mat::PetscInt = DMMoabGetMaterialBlock(petsclib::PetscLibType,dm::PetscDM, ehandle::moab_EntityHandle) 

# External Links
$(_doc_external("Dm/DMMoabGetMaterialBlock"))
"""
function DMMoabGetMaterialBlock(petsclib::PetscLibType, dm::PetscDM, ehandle::moab_EntityHandle) end

@for_petsc function DMMoabGetMaterialBlock(petsclib::$UnionPetscLib, dm::PetscDM, ehandle::moab_EntityHandle )
	mat_ = Ref{$PetscInt}()

    @chk ccall(
               (:DMMoabGetMaterialBlock, $petsc_library),
               PetscErrorCode,
               (CDM, moab_EntityHandle, Ptr{$PetscInt}),
               dm, ehandle, mat_,
              )

	mat = mat_[]

	return mat
end 

"""
	vpos::PetscReal = DMMoabGetVertexCoordinates(petsclib::PetscLibType,dm::PetscDM, nconn::PetscInt, conn::moab_EntityHandle) 

# External Links
$(_doc_external("Dm/DMMoabGetVertexCoordinates"))
"""
function DMMoabGetVertexCoordinates(petsclib::PetscLibType, dm::PetscDM, nconn::PetscInt, conn::moab_EntityHandle) end

@for_petsc function DMMoabGetVertexCoordinates(petsclib::$UnionPetscLib, dm::PetscDM, nconn::$PetscInt, conn::moab_EntityHandle )
	vpos_ = Ref{$PetscReal}()

    @chk ccall(
               (:DMMoabGetVertexCoordinates, $petsc_library),
               PetscErrorCode,
               (CDM, $PetscInt, Ptr{moab_EntityHandle}, Ptr{$PetscReal}),
               dm, nconn, conn, vpos_,
              )

	vpos = vpos_[]

	return vpos
end 

"""
	nconn::PetscInt = DMMoabGetVertexConnectivity(petsclib::PetscLibType,dm::PetscDM, vhandle::moab_EntityHandle, conn::moab_EntityHandle) 

# External Links
$(_doc_external("Dm/DMMoabGetVertexConnectivity"))
"""
function DMMoabGetVertexConnectivity(petsclib::PetscLibType, dm::PetscDM, vhandle::moab_EntityHandle, conn::moab_EntityHandle) end

@for_petsc function DMMoabGetVertexConnectivity(petsclib::$UnionPetscLib, dm::PetscDM, vhandle::moab_EntityHandle, conn::moab_EntityHandle )
	nconn_ = Ref{$PetscInt}()

    @chk ccall(
               (:DMMoabGetVertexConnectivity, $petsc_library),
               PetscErrorCode,
               (CDM, moab_EntityHandle, Ptr{$PetscInt}, moab_EntityHandle),
               dm, vhandle, nconn_, conn,
              )

	nconn = nconn_[]

	return nconn
end 

"""
	nconn::PetscInt = DMMoabRestoreVertexConnectivity(petsclib::PetscLibType,dm::PetscDM, ehandle::moab_EntityHandle, conn::moab_EntityHandle) 

# External Links
$(_doc_external("Dm/DMMoabRestoreVertexConnectivity"))
"""
function DMMoabRestoreVertexConnectivity(petsclib::PetscLibType, dm::PetscDM, ehandle::moab_EntityHandle, conn::moab_EntityHandle) end

@for_petsc function DMMoabRestoreVertexConnectivity(petsclib::$UnionPetscLib, dm::PetscDM, ehandle::moab_EntityHandle, conn::moab_EntityHandle )
	nconn_ = Ref{$PetscInt}()

    @chk ccall(
               (:DMMoabRestoreVertexConnectivity, $petsc_library),
               PetscErrorCode,
               (CDM, moab_EntityHandle, Ptr{$PetscInt}, moab_EntityHandle),
               dm, ehandle, nconn_, conn,
              )

	nconn = nconn_[]

	return nconn
end 

"""
	nconn::PetscInt = DMMoabGetElementConnectivity(petsclib::PetscLibType,dm::PetscDM, ehandle::moab_EntityHandle, conn::moab_EntityHandle) 

# External Links
$(_doc_external("Dm/DMMoabGetElementConnectivity"))
"""
function DMMoabGetElementConnectivity(petsclib::PetscLibType, dm::PetscDM, ehandle::moab_EntityHandle, conn::moab_EntityHandle) end

@for_petsc function DMMoabGetElementConnectivity(petsclib::$UnionPetscLib, dm::PetscDM, ehandle::moab_EntityHandle, conn::moab_EntityHandle )
	nconn_ = Ref{$PetscInt}()

    @chk ccall(
               (:DMMoabGetElementConnectivity, $petsc_library),
               PetscErrorCode,
               (CDM, moab_EntityHandle, Ptr{$PetscInt}, moab_EntityHandle),
               dm, ehandle, nconn_, conn,
              )

	nconn = nconn_[]

	return nconn
end 

"""
	ent_on_boundary::PetscBool = DMMoabIsEntityOnBoundary(petsclib::PetscLibType,dm::PetscDM, ent::moab_EntityHandle) 

# External Links
$(_doc_external("Dm/DMMoabIsEntityOnBoundary"))
"""
function DMMoabIsEntityOnBoundary(petsclib::PetscLibType, dm::PetscDM, ent::moab_EntityHandle) end

@for_petsc function DMMoabIsEntityOnBoundary(petsclib::$UnionPetscLib, dm::PetscDM, ent::moab_EntityHandle )
	ent_on_boundary_ = Ref{PetscBool}()

    @chk ccall(
               (:DMMoabIsEntityOnBoundary, $petsc_library),
               PetscErrorCode,
               (CDM, moab_EntityHandle, Ptr{PetscBool}),
               dm, ent, ent_on_boundary_,
              )

	ent_on_boundary = ent_on_boundary_[]

	return ent_on_boundary
end 

"""
	isbdvtx::PetscBool = DMMoabCheckBoundaryVertices(petsclib::PetscLibType,dm::PetscDM, nconn::PetscInt, cnt::moab_EntityHandle) 

# External Links
$(_doc_external("Dm/DMMoabCheckBoundaryVertices"))
"""
function DMMoabCheckBoundaryVertices(petsclib::PetscLibType, dm::PetscDM, nconn::PetscInt, cnt::moab_EntityHandle) end

@for_petsc function DMMoabCheckBoundaryVertices(petsclib::$UnionPetscLib, dm::PetscDM, nconn::$PetscInt, cnt::moab_EntityHandle )
	isbdvtx_ = Ref{PetscBool}()

    @chk ccall(
               (:DMMoabCheckBoundaryVertices, $petsc_library),
               PetscErrorCode,
               (CDM, $PetscInt, Ptr{moab_EntityHandle}, Ptr{PetscBool}),
               dm, nconn, cnt, isbdvtx_,
              )

	isbdvtx = isbdvtx_[]

	return isbdvtx
end 

"""
	DMMoabGetBoundaryMarkers(petsclib::PetscLibType,dm::PetscDM, bdvtx::moab_Range, bdelems::moab_Range, bdfaces::moab_Range) 

# External Links
$(_doc_external("Dm/DMMoabGetBoundaryMarkers"))
"""
function DMMoabGetBoundaryMarkers(petsclib::PetscLibType, dm::PetscDM, bdvtx::moab_Range, bdelems::moab_Range, bdfaces::moab_Range) end

@for_petsc function DMMoabGetBoundaryMarkers(petsclib::$UnionPetscLib, dm::PetscDM, bdvtx::moab_Range, bdelems::moab_Range, bdfaces::moab_Range )

    @chk ccall(
               (:DMMoabGetBoundaryMarkers, $petsc_library),
               PetscErrorCode,
               (CDM, moab_Range, moab_Range, moab_Range),
               dm, bdvtx, bdelems, bdfaces,
              )


	return nothing
end 

"""
	coords::PetscReal,overts::moab_Range = DMMoabCreateVertices(petsclib::PetscLibType,dm::PetscDM, nverts::PetscInt) 

# External Links
$(_doc_external("Dm/DMMoabCreateVertices"))
"""
function DMMoabCreateVertices(petsclib::PetscLibType, dm::PetscDM, nverts::PetscInt) end

@for_petsc function DMMoabCreateVertices(petsclib::$UnionPetscLib, dm::PetscDM, nverts::$PetscInt )
	coords_ = Ref{$PetscReal}()
	overts_ = Ref{moab_Range}()

    @chk ccall(
               (:DMMoabCreateVertices, $petsc_library),
               PetscErrorCode,
               (CDM, Ptr{$PetscReal}, $PetscInt, Ptr{moab_Range}),
               dm, coords_, nverts, overts_,
              )

	coords = coords_[]
	overts = overts_[]

	return coords,overts
end 

"""
	conn::moab_EntityHandle,oelem::moab_EntityHandle = DMMoabCreateElement(petsclib::PetscLibType,dm::PetscDM, type::moab_EntityType, nverts::PetscInt) 

# External Links
$(_doc_external("Dm/DMMoabCreateElement"))
"""
function DMMoabCreateElement(petsclib::PetscLibType, dm::PetscDM, type::moab_EntityType, nverts::PetscInt) end

@for_petsc function DMMoabCreateElement(petsclib::$UnionPetscLib, dm::PetscDM, type::moab_EntityType, nverts::$PetscInt )
	conn_ = Ref{moab_EntityHandle}()
	oelem_ = Ref{moab_EntityHandle}()

    @chk ccall(
               (:DMMoabCreateElement, $petsc_library),
               PetscErrorCode,
               (CDM, moab_EntityType, Ptr{moab_EntityHandle}, $PetscInt, Ptr{moab_EntityHandle}),
               dm, type, conn_, nverts, oelem_,
              )

	conn = conn_[]
	oelem = oelem_[]

	return conn,oelem
end 

"""
	newdm::PetscDM = DMMoabCreateSubmesh(petsclib::PetscLibType,dm::PetscDM) 

# External Links
$(_doc_external("Dm/DMMoabCreateSubmesh"))
"""
function DMMoabCreateSubmesh(petsclib::PetscLibType, dm::PetscDM) end

@for_petsc function DMMoabCreateSubmesh(petsclib::$UnionPetscLib, dm::PetscDM )
	newdm_ = Ref{CDM}()

    @chk ccall(
               (:DMMoabCreateSubmesh, $petsc_library),
               PetscErrorCode,
               (CDM, Ptr{CDM}),
               dm, newdm_,
              )

	newdm = PetscDM(newdm_[], petsclib)

	return newdm
end 

"""
	dfill::PetscInt,ofill::PetscInt = DMMoabSetBlockFills(petsclib::PetscLibType,dm::PetscDM) 

# External Links
$(_doc_external("Dm/DMMoabSetBlockFills"))
"""
function DMMoabSetBlockFills(petsclib::PetscLibType, dm::PetscDM) end

@for_petsc function DMMoabSetBlockFills(petsclib::$UnionPetscLib, dm::PetscDM )
	dfill_ = Ref{$PetscInt}()
	ofill_ = Ref{$PetscInt}()

    @chk ccall(
               (:DMMoabSetBlockFills, $petsc_library),
               PetscErrorCode,
               (CDM, Ptr{$PetscInt}, Ptr{$PetscInt}),
               dm, dfill_, ofill_,
              )

	dfill = dfill_[]
	ofill = ofill_[]

	return dfill,ofill
end 

"""
	point::PetscInt = DMPlexGetActivePoint(petsclib::PetscLibType,dm::PetscDM) 
Get the point on which projection is currently working

Not Collective

Input Parameter:
- `dm` - the `DM`

Output Parameter:
- `point` - The mesh point involved in the current projection

Level: developer

-seealso: [](ch_unstructured), `DM`, `DMPLEX`, `DMPlexSetActivePoint()`

# External Links
$(_doc_external("Dm/DMPlexGetActivePoint"))
"""
function DMPlexGetActivePoint(petsclib::PetscLibType, dm::PetscDM) end

@for_petsc function DMPlexGetActivePoint(petsclib::$UnionPetscLib, dm::PetscDM )
	point_ = Ref{$PetscInt}()

    @chk ccall(
               (:DMPlexGetActivePoint, $petsc_library),
               PetscErrorCode,
               (CDM, Ptr{$PetscInt}),
               dm, point_,
              )

	point = point_[]

	return point
end 

"""
	DMPlexSetActivePoint(petsclib::PetscLibType,dm::PetscDM, point::PetscInt) 
Set the point on which projection is currently working

Not Collective

Input Parameters:
- `dm`    - the `DM`
- `point` - The mesh point involved in the current projection

Level: developer

-seealso: [](ch_unstructured), `DM`, `DMPLEX`, `DMPlexGetActivePoint()`

# External Links
$(_doc_external("Dm/DMPlexSetActivePoint"))
"""
function DMPlexSetActivePoint(petsclib::PetscLibType, dm::PetscDM, point::PetscInt) end

@for_petsc function DMPlexSetActivePoint(petsclib::$UnionPetscLib, dm::PetscDM, point::$PetscInt )

    @chk ccall(
               (:DMPlexSetActivePoint, $petsc_library),
               PetscErrorCode,
               (CDM, $PetscInt),
               dm, point,
              )


	return nothing
end 

"""
	point::PetscInt = DMGetFirstLabeledPoint(petsclib::PetscLibType,dm::PetscDM, odm::PetscDM, label::DMLabel, numIds::PetscInt, ids::Vector{PetscInt}, height::PetscInt, ds::PetscDS) 
Find first labeled `point` in `odm` such that the corresponding point in `dm` has the specified `height`. Return `point` and the corresponding `ds`.

Input Parameters:
- `dm`     - the `DM`
- `odm`    - the enclosing `DM`
- `label`  - label for `DM` domain, or `NULL` for whole domain
- `numIds` - the number of `ids`
- `ids`    - An array of the label ids in sequence for the domain
- `height` - Height of target cells in `DMPLEX` topology

Output Parameters:
- `point` - the first labeled point
- `ds`    - the `PetscDS` corresponding to the first labeled point

Level: developer

-seealso: [](ch_unstructured), `DM`, `DMPLEX`, `DMPlexSetActivePoint()`, `DMLabel`, `PetscDS`

# External Links
$(_doc_external("Dm/DMGetFirstLabeledPoint"))
"""
function DMGetFirstLabeledPoint(petsclib::PetscLibType, dm::PetscDM, odm::PetscDM, label::DMLabel, numIds::PetscInt, ids::Vector{PetscInt}, height::PetscInt, ds::PetscDS) end

@for_petsc function DMGetFirstLabeledPoint(petsclib::$UnionPetscLib, dm::PetscDM, odm::PetscDM, label::DMLabel, numIds::$PetscInt, ids::Vector{$PetscInt}, height::$PetscInt, ds::PetscDS )
	point_ = Ref{$PetscInt}()

    @chk ccall(
               (:DMGetFirstLabeledPoint, $petsc_library),
               PetscErrorCode,
               (CDM, CDM, DMLabel, $PetscInt, Ptr{$PetscInt}, $PetscInt, Ptr{$PetscInt}, Ptr{PetscDS}),
               dm, odm, label, numIds, ids, height, point_, ds,
              )

	point = point_[]

	return point
end 

"""
	DMPlexSetMigrationSF(petsclib::PetscLibType,dm::PetscDM, migrationSF::PetscSF) 
Sets the `PetscSF` for migrating from a parent `DM` into this `DM`

Logically Collective

Input Parameters:
- `dm`          - The `DM`
- `migrationSF` - The `PetscSF`

Level: intermediate

-seealso: [](ch_unstructured), `DM`, `DMPLEX`, `PetscSF`, `DMPlexDistribute()`, `DMPlexDistributeField()`, `DMPlexCreateMigrationSF()`, `DMPlexGetMigrationSF()`

# External Links
$(_doc_external("Dm/DMPlexSetMigrationSF"))
"""
function DMPlexSetMigrationSF(petsclib::PetscLibType, dm::PetscDM, migrationSF::PetscSF) end

@for_petsc function DMPlexSetMigrationSF(petsclib::$UnionPetscLib, dm::PetscDM, migrationSF::PetscSF )

    @chk ccall(
               (:DMPlexSetMigrationSF, $petsc_library),
               PetscErrorCode,
               (CDM, PetscSF),
               dm, migrationSF,
              )


	return nothing
end 

"""
	DMPlexGetMigrationSF(petsclib::PetscLibType,dm::PetscDM, migrationSF::PetscSF) 
Gets the `PetscSF` for migrating from a parent `DM` into this `DM`

Note Collective

Input Parameter:
- `dm` - The `DM`

Output Parameter:
- `migrationSF` - The `PetscSF`

Level: intermediate

-seealso: [](ch_unstructured), `DM`, `DMPLEX`, `PetscSF`, `DMPlexDistribute()`, `DMPlexDistributeField()`, `DMPlexCreateMigrationSF()`, `DMPlexSetMigrationSF`

# External Links
$(_doc_external("Dm/DMPlexGetMigrationSF"))
"""
function DMPlexGetMigrationSF(petsclib::PetscLibType, dm::PetscDM, migrationSF::PetscSF) end

@for_petsc function DMPlexGetMigrationSF(petsclib::$UnionPetscLib, dm::PetscDM, migrationSF::PetscSF )

    @chk ccall(
               (:DMPlexGetMigrationSF, $petsc_library),
               PetscErrorCode,
               (CDM, Ptr{PetscSF}),
               dm, migrationSF,
              )


	return nothing
end 

"""
	sfNatural::PetscSF = DMPlexCreateGlobalToNaturalSF(petsclib::PetscLibType,dm::PetscDM, section::PetscSection, sfMigration::PetscSF) 
Creates the `PetscSF` for mapping Global `Vec` to the Natural `Vec`

Input Parameters:
- `dm`          - The redistributed `DM`
- `section`     - The local `PetscSection` describing the `Vec` before the mesh was distributed, or `NULL` if not available
- `sfMigration` - The `PetscSF` used to distribute the mesh, or `NULL` if it cannot be computed

Output Parameter:
- `sfNatural` - `PetscSF` for mapping the `Vec` in PETSc ordering to the canonical ordering

Level: intermediate

-seealso: [](ch_unstructured), `DM`, `DMPLEX`, `PetscSF`, `PetscSection`, `DMPlexDistribute()`, `DMPlexDistributeField()`

# External Links
$(_doc_external("Dm/DMPlexCreateGlobalToNaturalSF"))
"""
function DMPlexCreateGlobalToNaturalSF(petsclib::PetscLibType, dm::PetscDM, section::PetscSection, sfMigration::PetscSF) end

@for_petsc function DMPlexCreateGlobalToNaturalSF(petsclib::$UnionPetscLib, dm::PetscDM, section::PetscSection, sfMigration::PetscSF )
	sfNatural_ = Ref{PetscSF}()

    @chk ccall(
               (:DMPlexCreateGlobalToNaturalSF, $petsc_library),
               PetscErrorCode,
               (CDM, PetscSection, PetscSF, Ptr{PetscSF}),
               dm, section, sfMigration, sfNatural_,
              )

	sfNatural = sfNatural_[]

	return sfNatural
end 

"""
	DMPlexMigrateGlobalToNaturalSF(petsclib::PetscLibType,dmOld::PetscDM, dmNew::PetscDM, sfNaturalOld::PetscSF, sfMigration::PetscSF, sfNaturalNew::PetscSF) 
Migrates the input `sfNatural` based on sfMigration

Input Parameters:
- `dmOld`        - The original `DM`
- `dmNew`        - The `DM` to be migrated to
- `sfNaturalOld` - The sfNatural for the `dmOld`
- `sfMigration`  - The `PetscSF` used to distribute the mesh, or `NULL` if it cannot be computed

Output Parameter:
- `sfNaturalNew` - `PetscSF` for mapping the `Vec` in PETSc ordering to the canonical ordering

Level: intermediate

-seealso: [](ch_unstructured), `DM`, `DMPLEX`, `PetscSF`, `PetscSection`, `DMPlexDistribute()`, `DMPlexDistributeField()`

# External Links
$(_doc_external("Dm/DMPlexMigrateGlobalToNaturalSF"))
"""
function DMPlexMigrateGlobalToNaturalSF(petsclib::PetscLibType, dmOld::PetscDM, dmNew::PetscDM, sfNaturalOld::PetscSF, sfMigration::PetscSF, sfNaturalNew::PetscSF) end

@for_petsc function DMPlexMigrateGlobalToNaturalSF(petsclib::$UnionPetscLib, dmOld::PetscDM, dmNew::PetscDM, sfNaturalOld::PetscSF, sfMigration::PetscSF, sfNaturalNew::PetscSF )

    @chk ccall(
               (:DMPlexMigrateGlobalToNaturalSF, $petsc_library),
               PetscErrorCode,
               (CDM, CDM, PetscSF, PetscSF, Ptr{PetscSF}),
               dmOld, dmNew, sfNaturalOld, sfMigration, sfNaturalNew,
              )


	return nothing
end 

"""
	DMPlexGlobalToNaturalBegin(petsclib::PetscLibType,dm::PetscDM, gv::PetscVec, nv::PetscVec) 
Rearranges a global `Vec` in the natural order.

Collective

Input Parameters:
- `dm` - The distributed `DMPLEX`
- `gv` - The global `Vec`

Output Parameter:
- `nv` - `Vec` in the canonical ordering distributed over all processors associated with `gv`

Level: intermediate

-seealso: [](ch_unstructured), `DM`, `DMPLEX`, `Vec`, `DMPlexDistribute()`, `DMPlexDistributeField()`, `DMPlexNaturalToGlobalBegin()`, `DMPlexGlobalToNaturalEnd()`

# External Links
$(_doc_external("Dm/DMPlexGlobalToNaturalBegin"))
"""
function DMPlexGlobalToNaturalBegin(petsclib::PetscLibType, dm::PetscDM, gv::PetscVec, nv::PetscVec) end

@for_petsc function DMPlexGlobalToNaturalBegin(petsclib::$UnionPetscLib, dm::PetscDM, gv::PetscVec, nv::PetscVec )

    @chk ccall(
               (:DMPlexGlobalToNaturalBegin, $petsc_library),
               PetscErrorCode,
               (CDM, CVec, CVec),
               dm, gv, nv,
              )


	return nothing
end 

"""
	DMPlexGlobalToNaturalEnd(petsclib::PetscLibType,dm::PetscDM, gv::PetscVec, nv::PetscVec) 
Rearranges a global `Vec` in the natural order.

Collective

Input Parameters:
- `dm` - The distributed `DMPLEX`
- `gv` - The global `Vec`

Output Parameter:
- `nv` - The natural `Vec`

Level: intermediate

-seealso: [](ch_unstructured), `DM`, `DMPLEX`, `Vec`, `DMPlexDistribute()`, `DMPlexDistributeField()`, `DMPlexNaturalToGlobalBegin()`, `DMPlexGlobalToNaturalBegin()`

# External Links
$(_doc_external("Dm/DMPlexGlobalToNaturalEnd"))
"""
function DMPlexGlobalToNaturalEnd(petsclib::PetscLibType, dm::PetscDM, gv::PetscVec, nv::PetscVec) end

@for_petsc function DMPlexGlobalToNaturalEnd(petsclib::$UnionPetscLib, dm::PetscDM, gv::PetscVec, nv::PetscVec )

    @chk ccall(
               (:DMPlexGlobalToNaturalEnd, $petsc_library),
               PetscErrorCode,
               (CDM, CVec, CVec),
               dm, gv, nv,
              )


	return nothing
end 

"""
	DMPlexNaturalToGlobalBegin(petsclib::PetscLibType,dm::PetscDM, nv::PetscVec, gv::PetscVec) 
Rearranges a `Vec` in the natural order to the Global order.

Collective

Input Parameters:
- `dm` - The distributed `DMPLEX`
- `nv` - The natural `Vec`

Output Parameter:
- `gv` - The global `Vec`

Level: intermediate

-seealso: [](ch_unstructured), `DM`, `DMPLEX`, `Vec`, `DMPlexDistribute()`, `DMPlexDistributeField()`, `DMPlexGlobalToNaturalEnd()`

# External Links
$(_doc_external("Dm/DMPlexNaturalToGlobalBegin"))
"""
function DMPlexNaturalToGlobalBegin(petsclib::PetscLibType, dm::PetscDM, nv::PetscVec, gv::PetscVec) end

@for_petsc function DMPlexNaturalToGlobalBegin(petsclib::$UnionPetscLib, dm::PetscDM, nv::PetscVec, gv::PetscVec )

    @chk ccall(
               (:DMPlexNaturalToGlobalBegin, $petsc_library),
               PetscErrorCode,
               (CDM, CVec, CVec),
               dm, nv, gv,
              )


	return nothing
end 

"""
	DMPlexNaturalToGlobalEnd(petsclib::PetscLibType,dm::PetscDM, nv::PetscVec, gv::PetscVec) 
Rearranges a `Vec` in the natural order to the Global order.

Collective

Input Parameters:
- `dm` - The distributed `DMPLEX`
- `nv` - The natural `Vec`

Output Parameter:
- `gv` - The global `Vec`

Level: intermediate

-seealso: [](ch_unstructured), `DM`, `DMPLEX`, `Vec`, `DMPlexDistribute()`, `DMPlexDistributeField()`, `DMPlexNaturalToGlobalBegin()`, `DMPlexGlobalToNaturalBegin()`

# External Links
$(_doc_external("Dm/DMPlexNaturalToGlobalEnd"))
"""
function DMPlexNaturalToGlobalEnd(petsclib::PetscLibType, dm::PetscDM, nv::PetscVec, gv::PetscVec) end

@for_petsc function DMPlexNaturalToGlobalEnd(petsclib::$UnionPetscLib, dm::PetscDM, nv::PetscVec, gv::PetscVec )

    @chk ccall(
               (:DMPlexNaturalToGlobalEnd, $petsc_library),
               PetscErrorCode,
               (CDM, CVec, CVec),
               dm, nv, gv,
              )


	return nothing
end 

"""
	nv::PetscVec = DMPlexCreateNaturalVector(petsclib::PetscLibType,dm::PetscDM) 
Provide a `Vec` capable of holding the natural ordering and distribution.

Collective

Input Parameter:
- `dm` - The distributed `DMPLEX`

Output Parameter:
- `nv` - The natural `Vec`

Level: intermediate

-seealso: [](ch_unstructured), `DM`, `DMPLEX`, `Vec`, `DMPlexDistribute()`, `DMPlexNaturalToGlobalBegin()`, `DMPlexGlobalToNaturalBegin()`

# External Links
$(_doc_external("Dm/DMPlexCreateNaturalVector"))
"""
function DMPlexCreateNaturalVector(petsclib::PetscLibType, dm::PetscDM) end

@for_petsc function DMPlexCreateNaturalVector(petsclib::$UnionPetscLib, dm::PetscDM )
	nv_ = Ref{CVec}()

    @chk ccall(
               (:DMPlexCreateNaturalVector, $petsc_library),
               PetscErrorCode,
               (CDM, Ptr{CVec}),
               dm, nv_,
              )

	nv = PetscVec(nv_[], petsclib)

	return nv
end 

"""
	processRanks::IS,sfProcess::PetscSF = DMPlexCreateProcessSF(petsclib::PetscLibType,dm::PetscDM, sfPoint::PetscSF) 
Create an `PetscSF` which just has process connectivity

Collective

Input Parameters:
- `dm`      - The `DM`
- `sfPoint` - The `PetscSF` which encodes point connectivity

Output Parameters:
- `processRanks` - A list of process neighbors, or `NULL`
- `sfProcess`    - An `PetscSF` encoding the process connectivity, or `NULL`

Level: developer

-seealso: [](ch_unstructured), `DM`, `DMPLEX`, `PetscSF`, `PetscSFCreate()`, `DMPlexCreateTwoSidedProcessSF()`

# External Links
$(_doc_external("Dm/DMPlexCreateProcessSF"))
"""
function DMPlexCreateProcessSF(petsclib::PetscLibType, dm::PetscDM, sfPoint::PetscSF) end

@for_petsc function DMPlexCreateProcessSF(petsclib::$UnionPetscLib, dm::PetscDM, sfPoint::PetscSF )
	processRanks_ = Ref{IS}()
	sfProcess_ = Ref{PetscSF}()

    @chk ccall(
               (:DMPlexCreateProcessSF, $petsc_library),
               PetscErrorCode,
               (CDM, PetscSF, Ptr{IS}, Ptr{PetscSF}),
               dm, sfPoint, processRanks_, sfProcess_,
              )

	processRanks = processRanks_[]
	sfProcess = sfProcess_[]

	return processRanks,sfProcess
end 

"""
	fpointIS::IS = DMPlexCreateCoarsePointIS(petsclib::PetscLibType,dm::PetscDM) 
Creates an `IS` covering the coarse `DM` chart with the fine points as data

Collective

Input Parameter:
- `dm` - The coarse `DM`

Output Parameter:
- `fpointIS` - The `IS` of all the fine points which exist in the original coarse mesh

Level: developer

-seealso: [](ch_unstructured), `DM`, `DMPLEX`, `IS`, `DMRefine()`, `DMPlexSetRefinementUniform()`, `DMPlexGetSubpointIS()`

# External Links
$(_doc_external("Dm/DMPlexCreateCoarsePointIS"))
"""
function DMPlexCreateCoarsePointIS(petsclib::PetscLibType, dm::PetscDM) end

@for_petsc function DMPlexCreateCoarsePointIS(petsclib::$UnionPetscLib, dm::PetscDM )
	fpointIS_ = Ref{IS}()

    @chk ccall(
               (:DMPlexCreateCoarsePointIS, $petsc_library),
               PetscErrorCode,
               (CDM, Ptr{IS}),
               dm, fpointIS_,
              )

	fpointIS = fpointIS_[]

	return fpointIS
end 

"""
	DMPlexSetTransformType(petsclib::PetscLibType,dm::PetscDM, type::DMPlexTransformType) 
Set the transform type for uniform refinement

Input Parameters:
- `dm`   - The `DM`
- `type` - The transform type for uniform refinement

Level: developer

-seealso: [](ch_unstructured), `DM`, `DMPLEX`, `DMPlexTransformType`, `DMRefine()`, `DMPlexGetTransformType()`, `DMPlexSetRefinementUniform()`

# External Links
$(_doc_external("Dm/DMPlexSetTransformType"))
"""
function DMPlexSetTransformType(petsclib::PetscLibType, dm::PetscDM, type::DMPlexTransformType) end

@for_petsc function DMPlexSetTransformType(petsclib::$UnionPetscLib, dm::PetscDM, type::DMPlexTransformType )

    @chk ccall(
               (:DMPlexSetTransformType, $petsc_library),
               PetscErrorCode,
               (CDM, DMPlexTransformType),
               dm, type,
              )


	return nothing
end 

"""
	type::DMPlexTransformType = DMPlexGetTransformType(petsclib::PetscLibType,dm::PetscDM) 
Retrieve the transform type for uniform refinement

Input Parameter:
- `dm` - The `DM`

Output Parameter:
- `type` - The transform type for uniform refinement

Level: developer

-seealso: [](ch_unstructured), `DM`, `DMPLEX`, `DMPlexTransformType`, `DMRefine()`, `DMPlexSetTransformType()`, `DMPlexGetRefinementUniform()`

# External Links
$(_doc_external("Dm/DMPlexGetTransformType"))
"""
function DMPlexGetTransformType(petsclib::PetscLibType, dm::PetscDM) end

@for_petsc function DMPlexGetTransformType(petsclib::$UnionPetscLib, dm::PetscDM )
	type_ = Ref{DMPlexTransformType}()

    @chk ccall(
               (:DMPlexGetTransformType, $petsc_library),
               PetscErrorCode,
               (CDM, Ptr{DMPlexTransformType}),
               dm, type_,
              )

	type = unsafe_string(type_[])

	return type
end 

"""
	DMPlexSetTransform(petsclib::PetscLibType,dm::PetscDM, tr::DMPlexTransform) 

# External Links
$(_doc_external("Dm/DMPlexSetTransform"))
"""
function DMPlexSetTransform(petsclib::PetscLibType, dm::PetscDM, tr::DMPlexTransform) end

@for_petsc function DMPlexSetTransform(petsclib::$UnionPetscLib, dm::PetscDM, tr::DMPlexTransform )

    @chk ccall(
               (:DMPlexSetTransform, $petsc_library),
               PetscErrorCode,
               (CDM, DMPlexTransform),
               dm, tr,
              )


	return nothing
end 

"""
	DMPlexGetTransform(petsclib::PetscLibType,dm::PetscDM, tr::DMPlexTransform) 

# External Links
$(_doc_external("Dm/DMPlexGetTransform"))
"""
function DMPlexGetTransform(petsclib::PetscLibType, dm::PetscDM, tr::DMPlexTransform) end

@for_petsc function DMPlexGetTransform(petsclib::$UnionPetscLib, dm::PetscDM, tr::DMPlexTransform )

    @chk ccall(
               (:DMPlexGetTransform, $petsc_library),
               PetscErrorCode,
               (CDM, Ptr{DMPlexTransform}),
               dm, tr,
              )


	return nothing
end 

"""
	DMPlexSetSaveTransform(petsclib::PetscLibType,dm::PetscDM, save::PetscBool) 

# External Links
$(_doc_external("Dm/DMPlexSetSaveTransform"))
"""
function DMPlexSetSaveTransform(petsclib::PetscLibType, dm::PetscDM, save::PetscBool) end

@for_petsc function DMPlexSetSaveTransform(petsclib::$UnionPetscLib, dm::PetscDM, save::PetscBool )

    @chk ccall(
               (:DMPlexSetSaveTransform, $petsc_library),
               PetscErrorCode,
               (CDM, PetscBool),
               dm, save,
              )


	return nothing
end 

"""
	save::PetscBool = DMPlexGetSaveTransform(petsclib::PetscLibType,dm::PetscDM) 

# External Links
$(_doc_external("Dm/DMPlexGetSaveTransform"))
"""
function DMPlexGetSaveTransform(petsclib::PetscLibType, dm::PetscDM) end

@for_petsc function DMPlexGetSaveTransform(petsclib::$UnionPetscLib, dm::PetscDM )
	save_ = Ref{PetscBool}()

    @chk ccall(
               (:DMPlexGetSaveTransform, $petsc_library),
               PetscErrorCode,
               (CDM, Ptr{PetscBool}),
               dm, save_,
              )

	save = save_[]

	return save
end 

"""
	DMPlexSetRefinementUniform(petsclib::PetscLibType,dm::PetscDM, refinementUniform::PetscBool) 
Set the flag for uniform refinement

Input Parameters:
- `dm`                - The `DM`
- `refinementUniform` - The flag for uniform refinement

Level: developer

-seealso: [](ch_unstructured), `DM`, `DMPLEX`, `DMRefine()`, `DMPlexGetRefinementUniform()`, `DMPlexGetRefinementLimit()`, `DMPlexSetRefinementLimit()`

# External Links
$(_doc_external("Dm/DMPlexSetRefinementUniform"))
"""
function DMPlexSetRefinementUniform(petsclib::PetscLibType, dm::PetscDM, refinementUniform::PetscBool) end

@for_petsc function DMPlexSetRefinementUniform(petsclib::$UnionPetscLib, dm::PetscDM, refinementUniform::PetscBool )

    @chk ccall(
               (:DMPlexSetRefinementUniform, $petsc_library),
               PetscErrorCode,
               (CDM, PetscBool),
               dm, refinementUniform,
              )


	return nothing
end 

"""
	refinementUniform::PetscBool = DMPlexGetRefinementUniform(petsclib::PetscLibType,dm::PetscDM) 
Retrieve the flag for uniform refinement

Input Parameter:
- `dm` - The `DM`

Output Parameter:
- `refinementUniform` - The flag for uniform refinement

Level: developer

-seealso: [](ch_unstructured), `DM`, `DMPLEX`, `DMRefine()`, `DMPlexSetRefinementUniform()`, `DMPlexGetRefinementLimit()`, `DMPlexSetRefinementLimit()`

# External Links
$(_doc_external("Dm/DMPlexGetRefinementUniform"))
"""
function DMPlexGetRefinementUniform(petsclib::PetscLibType, dm::PetscDM) end

@for_petsc function DMPlexGetRefinementUniform(petsclib::$UnionPetscLib, dm::PetscDM )
	refinementUniform_ = Ref{PetscBool}()

    @chk ccall(
               (:DMPlexGetRefinementUniform, $petsc_library),
               PetscErrorCode,
               (CDM, Ptr{PetscBool}),
               dm, refinementUniform_,
              )

	refinementUniform = refinementUniform_[]

	return refinementUniform
end 

"""
	DMPlexSetRefinementLimit(petsclib::PetscLibType,dm::PetscDM, refinementLimit::PetscReal) 
Set the maximum cell volume for refinement

Input Parameters:
- `dm`              - The `DM`
- `refinementLimit` - The maximum cell volume in the refined mesh

Level: developer

-seealso: [](ch_unstructured), `DM`, `DMPLEX`, `DMRefine()`, `DMPlexGetRefinementLimit()`, `DMPlexGetRefinementUniform()`, `DMPlexSetRefinementUniform()`

# External Links
$(_doc_external("Dm/DMPlexSetRefinementLimit"))
"""
function DMPlexSetRefinementLimit(petsclib::PetscLibType, dm::PetscDM, refinementLimit::PetscReal) end

@for_petsc function DMPlexSetRefinementLimit(petsclib::$UnionPetscLib, dm::PetscDM, refinementLimit::$PetscReal )

    @chk ccall(
               (:DMPlexSetRefinementLimit, $petsc_library),
               PetscErrorCode,
               (CDM, $PetscReal),
               dm, refinementLimit,
              )


	return nothing
end 

"""
	refinementLimit::PetscReal = DMPlexGetRefinementLimit(petsclib::PetscLibType,dm::PetscDM) 
Retrieve the maximum cell volume for refinement

Input Parameter:
- `dm` - The `DM`

Output Parameter:
- `refinementLimit` - The maximum cell volume in the refined mesh

Level: developer

-seealso: [](ch_unstructured), `DM`, `DMPLEX`, `DMRefine()`, `DMPlexSetRefinementLimit()`, `DMPlexGetRefinementUniform()`, `DMPlexSetRefinementUniform()`

# External Links
$(_doc_external("Dm/DMPlexGetRefinementLimit"))
"""
function DMPlexGetRefinementLimit(petsclib::PetscLibType, dm::PetscDM) end

@for_petsc function DMPlexGetRefinementLimit(petsclib::$UnionPetscLib, dm::PetscDM )
	refinementLimit_ = Ref{$PetscReal}()

    @chk ccall(
               (:DMPlexGetRefinementLimit, $petsc_library),
               PetscErrorCode,
               (CDM, Ptr{$PetscReal}),
               dm, refinementLimit_,
              )

	refinementLimit = refinementLimit_[]

	return refinementLimit
end 

"""
	DMPlexSetRefinementFunction(petsclib::PetscLibType,dm::PetscDM, refinementFunc::external) 
Set the function giving the maximum cell volume for refinement

Input Parameters:
- `dm`             - The `DM`
- `refinementFunc` - Function giving the maximum cell volume in the refined mesh

Calling Sequence of `refinementFunc`:
- `coords` - Coordinates of the current point, usually a cell centroid
- `limit`  - The maximum cell volume for a cell containing this point

Level: developer

-seealso: [](ch_unstructured), `DM`, `DMPLEX`, `DMRefine()`, `DMPlexGetRefinementFunction()`, `DMPlexGetRefinementUniform()`, `DMPlexSetRefinementUniform()`, `DMPlexGetRefinementLimit()`, `DMPlexSetRefinementLimit()`

# External Links
$(_doc_external("Dm/DMPlexSetRefinementFunction"))
"""
function DMPlexSetRefinementFunction(petsclib::PetscLibType, dm::PetscDM, refinementFunc::external) end

@for_petsc function DMPlexSetRefinementFunction(petsclib::$UnionPetscLib, dm::PetscDM, refinementFunc::external )

    @chk ccall(
               (:DMPlexSetRefinementFunction, $petsc_library),
               PetscErrorCode,
               (CDM, external),
               dm, refinementFunc,
              )


	return nothing
end 

"""
	numVertices::PetscInt,offsets::PetscInt,adjacency::PetscInt,globalNumbering::IS = DMPlexCreatePartitionerGraph(petsclib::PetscLibType,dm::PetscDM, height::PetscInt) 
Create a CSR graph of point connections for the partitioner

Collective

Input Parameters:
- `dm`     - The mesh `DM`
- `height` - Height of the strata from which to construct the graph

Output Parameters:
- `numVertices`     - Number of vertices in the graph
- `offsets`         - Point offsets in the graph
- `adjacency`       - Point connectivity in the graph
- `globalNumbering` - A map from the local cell numbering to the global numbering used in "adjacency".  Negative indicates that the cell is a duplicate from another process.

Options Database Key:
- `-dm_plex_csr_alg <mat,graph,overlap>` - Choose the algorithm for computing the CSR graph

Level: developer

-seealso: [](ch_unstructured), `DM`, `DMPLEX`, `PetscPartitionerGetType()`, `PetscPartitionerCreate()`, `DMSetAdjacency()`

# External Links
$(_doc_external("Dm/DMPlexCreatePartitionerGraph"))
"""
function DMPlexCreatePartitionerGraph(petsclib::PetscLibType, dm::PetscDM, height::PetscInt) end

@for_petsc function DMPlexCreatePartitionerGraph(petsclib::$UnionPetscLib, dm::PetscDM, height::$PetscInt )
	numVertices_ = Ref{$PetscInt}()
	offsets_ = Ref{$PetscInt}()
	adjacency_ = Ref{$PetscInt}()
	globalNumbering_ = Ref{IS}()

    @chk ccall(
               (:DMPlexCreatePartitionerGraph, $petsc_library),
               PetscErrorCode,
               (CDM, $PetscInt, Ptr{$PetscInt}, $PetscInt, $PetscInt, Ptr{IS}),
               dm, height, numVertices_, offsets_, adjacency_, globalNumbering_,
              )

	numVertices = numVertices_[]
	offsets = offsets_[]
	adjacency = adjacency_[]
	globalNumbering = globalNumbering_[]

	return numVertices,offsets,adjacency,globalNumbering
end 

"""
	numVertices::PetscInt,offsets::PetscInt,adjacency::PetscInt = DMPlexCreateNeighborCSR(petsclib::PetscLibType,dm::PetscDM, cellHeight::PetscInt) 
Create a mesh graph (cell

Collective

Input Parameters:
- `dm`         - The `DMPLEX`
- `cellHeight` - The height of mesh points to treat as cells (default should be 0)

Output Parameters:
- `numVertices` - The number of local vertices in the graph, or cells in the mesh.
- `offsets`     - The offset to the adjacency list for each cell
- `adjacency`   - The adjacency list for all cells

Level: advanced

-seealso: [](ch_unstructured), `DM`, `DMPLEX`, `DMPlexCreate()`

# External Links
$(_doc_external("Dm/DMPlexCreateNeighborCSR"))
"""
function DMPlexCreateNeighborCSR(petsclib::PetscLibType, dm::PetscDM, cellHeight::PetscInt) end

@for_petsc function DMPlexCreateNeighborCSR(petsclib::$UnionPetscLib, dm::PetscDM, cellHeight::$PetscInt )
	numVertices_ = Ref{$PetscInt}()
	offsets_ = Ref{$PetscInt}()
	adjacency_ = Ref{$PetscInt}()

    @chk ccall(
               (:DMPlexCreateNeighborCSR, $petsc_library),
               PetscErrorCode,
               (CDM, $PetscInt, Ptr{$PetscInt}, $PetscInt, $PetscInt),
               dm, cellHeight, numVertices_, offsets_, adjacency_,
              )

	numVertices = numVertices_[]
	offsets = offsets_[]
	adjacency = adjacency_[]

	return numVertices,offsets,adjacency
end 

"""
	DMPlexGetPartitioner(petsclib::PetscLibType,dm::PetscDM, part::PetscPartitioner) 
Get the mesh partitioner

Not Collective

Input Parameter:
- `dm` - The `DM`

Output Parameter:
- `part` - The `PetscPartitioner`

Level: developer

-seealso: [](ch_unstructured), `DM`, `DMPLEX`, `PetscPartitioner`, `PetscSection`, `DMPlexDistribute()`, `DMPlexSetPartitioner()`, `PetscPartitionerDMPlexPartition()`, `PetscPartitionerCreate()`

# External Links
$(_doc_external("Dm/DMPlexGetPartitioner"))
"""
function DMPlexGetPartitioner(petsclib::PetscLibType, dm::PetscDM, part::PetscPartitioner) end

@for_petsc function DMPlexGetPartitioner(petsclib::$UnionPetscLib, dm::PetscDM, part::PetscPartitioner )

    @chk ccall(
               (:DMPlexGetPartitioner, $petsc_library),
               PetscErrorCode,
               (CDM, Ptr{PetscPartitioner}),
               dm, part,
              )


	return nothing
end 

"""
	DMPlexSetPartitioner(petsclib::PetscLibType,dm::PetscDM, part::PetscPartitioner) 
Set the mesh partitioner

logically Collective

Input Parameters:
- `dm`   - The `DM`
- `part` - The partitioner

Level: developer

-seealso: [](ch_unstructured), `DM`, `DMPLEX`, `PetscPartitioner`,`DMPlexDistribute()`, `DMPlexGetPartitioner()`, `PetscPartitionerCreate()`

# External Links
$(_doc_external("Dm/DMPlexSetPartitioner"))
"""
function DMPlexSetPartitioner(petsclib::PetscLibType, dm::PetscDM, part::PetscPartitioner) end

@for_petsc function DMPlexSetPartitioner(petsclib::$UnionPetscLib, dm::PetscDM, part::PetscPartitioner )

    @chk ccall(
               (:DMPlexSetPartitioner, $petsc_library),
               PetscErrorCode,
               (CDM, PetscPartitioner),
               dm, part,
              )


	return nothing
end 

"""
	DMPlexPartitionLabelClosure(petsclib::PetscLibType,dm::PetscDM, label::DMLabel) 
Add the closure of all points to the partition label

Input Parameters:
- `dm`    - The `DM`
- `label` - `DMLabel` assigning ranks to remote roots

Level: developer

-seealso: [](ch_unstructured), `DM`, `DMPLEX`, `DMLabel`, `DMPlexPartitionLabelCreateSF()`, `DMPlexDistribute()`

# External Links
$(_doc_external("Dm/DMPlexPartitionLabelClosure"))
"""
function DMPlexPartitionLabelClosure(petsclib::PetscLibType, dm::PetscDM, label::DMLabel) end

@for_petsc function DMPlexPartitionLabelClosure(petsclib::$UnionPetscLib, dm::PetscDM, label::DMLabel )

    @chk ccall(
               (:DMPlexPartitionLabelClosure, $petsc_library),
               PetscErrorCode,
               (CDM, DMLabel),
               dm, label,
              )


	return nothing
end 

"""
	DMPlexPartitionLabelAdjacency(petsclib::PetscLibType,dm::PetscDM, label::DMLabel) 
Add one level of adjacent points to the partition label

Input Parameters:
- `dm`    - The `DM`
- `label` - `DMLabel` assigning ranks to remote roots

Level: developer

-seealso: [](ch_unstructured), `DM`, `DMPLEX`, `DMLabel`, `DMPlexPartitionLabelCreateSF()`, `DMPlexDistribute()`

# External Links
$(_doc_external("Dm/DMPlexPartitionLabelAdjacency"))
"""
function DMPlexPartitionLabelAdjacency(petsclib::PetscLibType, dm::PetscDM, label::DMLabel) end

@for_petsc function DMPlexPartitionLabelAdjacency(petsclib::$UnionPetscLib, dm::PetscDM, label::DMLabel )

    @chk ccall(
               (:DMPlexPartitionLabelAdjacency, $petsc_library),
               PetscErrorCode,
               (CDM, DMLabel),
               dm, label,
              )


	return nothing
end 

"""
	DMPlexPartitionLabelPropagate(petsclib::PetscLibType,dm::PetscDM, label::DMLabel) 
Propagate points in a partition label over the point `PetscSF`

Input Parameters:
- `dm`    - The `DM`
- `label` - `DMLabel` assigning ranks to remote roots

Level: developer

-seealso: [](ch_unstructured), `DM`, `DMPLEX`, `DMLabel`, `DMPlexPartitionLabelCreateSF()`, `DMPlexDistribute()`

# External Links
$(_doc_external("Dm/DMPlexPartitionLabelPropagate"))
"""
function DMPlexPartitionLabelPropagate(petsclib::PetscLibType, dm::PetscDM, label::DMLabel) end

@for_petsc function DMPlexPartitionLabelPropagate(petsclib::$UnionPetscLib, dm::PetscDM, label::DMLabel )

    @chk ccall(
               (:DMPlexPartitionLabelPropagate, $petsc_library),
               PetscErrorCode,
               (CDM, DMLabel),
               dm, label,
              )


	return nothing
end 

"""
	DMPlexPartitionLabelInvert(petsclib::PetscLibType,dm::PetscDM, rootLabel::DMLabel, processSF::PetscSF, leafLabel::DMLabel) 
Create a partition label of remote roots from a local root label

Input Parameters:
- `dm`        - The `DM`
- `rootLabel` - `DMLabel` assigning ranks to local roots
- `processSF` - A star forest mapping into the local index on each remote rank

Output Parameter:
- `leafLabel` - `DMLabel` assigning ranks to remote roots

Level: developer

-seealso: [](ch_unstructured), `DM`, `DMPLEX`, `DMPlexPartitionLabelCreateSF()`, `DMPlexDistribute()`

# External Links
$(_doc_external("Dm/DMPlexPartitionLabelInvert"))
"""
function DMPlexPartitionLabelInvert(petsclib::PetscLibType, dm::PetscDM, rootLabel::DMLabel, processSF::PetscSF, leafLabel::DMLabel) end

@for_petsc function DMPlexPartitionLabelInvert(petsclib::$UnionPetscLib, dm::PetscDM, rootLabel::DMLabel, processSF::PetscSF, leafLabel::DMLabel )

    @chk ccall(
               (:DMPlexPartitionLabelInvert, $petsc_library),
               PetscErrorCode,
               (CDM, DMLabel, PetscSF, DMLabel),
               dm, rootLabel, processSF, leafLabel,
              )


	return nothing
end 

"""
	sf::PetscSF = DMPlexPartitionLabelCreateSF(petsclib::PetscLibType,dm::PetscDM, label::DMLabel, sortRanks::PetscBool) 
Create a star forest from a label that assigns ranks to points

Input Parameters:
- `dm`        - The `DM`
- `label`     - `DMLabel` assigning ranks to remote roots
- `sortRanks` - Whether or not to sort the `PetscSF` leaves by rank

Output Parameter:
- `sf` - The star forest communication context encapsulating the defined mapping

Level: developer

-seealso: [](ch_unstructured), `DM`, `DMPLEX`, `DMLabel`, `PetscSF`, `DMPlexDistribute()`

# External Links
$(_doc_external("Dm/DMPlexPartitionLabelCreateSF"))
"""
function DMPlexPartitionLabelCreateSF(petsclib::PetscLibType, dm::PetscDM, label::DMLabel, sortRanks::PetscBool) end

@for_petsc function DMPlexPartitionLabelCreateSF(petsclib::$UnionPetscLib, dm::PetscDM, label::DMLabel, sortRanks::PetscBool )
	sf_ = Ref{PetscSF}()

    @chk ccall(
               (:DMPlexPartitionLabelCreateSF, $petsc_library),
               PetscErrorCode,
               (CDM, DMLabel, PetscBool, Ptr{PetscSF}),
               dm, label, sortRanks, sf_,
              )

	sf = sf_[]

	return sf
end 

"""
	success::PetscBool = DMPlexRebalanceSharedPoints(petsclib::PetscLibType,dm::PetscDM, entityDepth::PetscInt, useInitialGuess::PetscBool, parallel::PetscBool) 
Redistribute points in the plex that are shared in order to achieve better balancing. This routine updates the `PointSF` of the `DM` inplace.

Input Parameters:
- `dm`              - The `DMPLEX` object.
- `entityDepth`     - depth of the entity to balance (0 -> balance vertices).
- `useInitialGuess` - whether to use the current distribution as initial guess (only used by ParMETIS).
- `parallel`        - whether to use ParMETIS and do the partition in parallel or whether to gather the graph onto a single process and use METIS.

Output Parameter:
- `success` - whether the graph partitioning was successful or not, optional. Unsuccessful simply means no change to the partitioning

Options Database Keys:
- `-dm_plex_rebalance_shared_points_parmetis`             - Use ParMetis instead of Metis for the partitioner
- `-dm_plex_rebalance_shared_points_use_initial_guess`    - Use current partition to bootstrap ParMetis partition
- `-dm_plex_rebalance_shared_points_use_mat_partitioning` - Use the MatPartitioning object to perform the partition, the prefix for those operations is -dm_plex_rebalance_shared_points_
- `-dm_plex_rebalance_shared_points_monitor`              - Monitor the shared points rebalance process

Level: intermediate

-seealso: [](ch_unstructured), `DM`, `DMPLEX`, `DMPlexDistribute()`

# External Links
$(_doc_external("Dm/DMPlexRebalanceSharedPoints"))
"""
function DMPlexRebalanceSharedPoints(petsclib::PetscLibType, dm::PetscDM, entityDepth::PetscInt, useInitialGuess::PetscBool, parallel::PetscBool) end

@for_petsc function DMPlexRebalanceSharedPoints(petsclib::$UnionPetscLib, dm::PetscDM, entityDepth::$PetscInt, useInitialGuess::PetscBool, parallel::PetscBool )
	success_ = Ref{PetscBool}()

    @chk ccall(
               (:DMPlexRebalanceSharedPoints, $petsc_library),
               PetscErrorCode,
               (CDM, $PetscInt, PetscBool, PetscBool, Ptr{PetscBool}),
               dm, entityDepth, useInitialGuess, parallel, success_,
              )

	success = success_[]

	return success
end 

"""
	DMPlexInterpolatePointSF(petsclib::PetscLibType,dm::PetscDM, pointSF::PetscSF) 
Insert interpolated points in the overlap into the `PointSF` in parallel, following local interpolation

Collective

Input Parameters:
- `dm`      - The interpolated `DMPLEX`
- `pointSF` - The initial `PetscSF` without interpolated points

Level: developer

-seealso: `DMPLEX`, `DMPlexInterpolate()`, `DMPlexUninterpolate()`

# External Links
$(_doc_external("Dm/DMPlexInterpolatePointSF"))
"""
function DMPlexInterpolatePointSF(petsclib::PetscLibType, dm::PetscDM, pointSF::PetscSF) end

@for_petsc function DMPlexInterpolatePointSF(petsclib::$UnionPetscLib, dm::PetscDM, pointSF::PetscSF )

    @chk ccall(
               (:DMPlexInterpolatePointSF, $petsc_library),
               PetscErrorCode,
               (CDM, PetscSF),
               dm, pointSF,
              )


	return nothing
end 

"""
	DMPlexInterpolate(petsclib::PetscLibType,dm::PetscDM, dmInt::PetscDM) 
Take in a cell

Collective

Input Parameter:
- `dm` - The `DMPLEX` object with only cells and vertices

Output Parameter:
- `dmInt` - The complete `DMPLEX` object

Level: intermediate

-seealso: `DMPLEX`, `DMPlexUninterpolate()`, `DMPlexCreateFromCellListPetsc()`, `DMPlexCopyCoordinates()`

# External Links
$(_doc_external("Dm/DMPlexInterpolate"))
"""
function DMPlexInterpolate(petsclib::PetscLibType, dm::PetscDM, dmInt::PetscDM) end

@for_petsc function DMPlexInterpolate(petsclib::$UnionPetscLib, dm::PetscDM, dmInt::PetscDM )
	dmInt_ = Ref(dmInt.ptr)

    @chk ccall(
               (:DMPlexInterpolate, $petsc_library),
               PetscErrorCode,
               (CDM, Ptr{CDM}),
               dm, dmInt_,
              )

	dmInt.ptr = C_NULL

	return nothing
end 

"""
	DMPlexCopyCoordinates(petsclib::PetscLibType,dmA::PetscDM, dmB::PetscDM) 
Copy coordinates from one mesh to another with the same vertices

Collective

Input Parameter:
- `dmA` - The `DMPLEX` object with initial coordinates

Output Parameter:
- `dmB` - The `DMPLEX` object with copied coordinates

Level: intermediate

-seealso: `DMPLEX`, `DMCopyLabels()`, `DMGetCoordinates()`, `DMGetCoordinatesLocal()`, `DMGetCoordinateDM()`, `DMGetCoordinateSection()`

# External Links
$(_doc_external("Dm/DMPlexCopyCoordinates"))
"""
function DMPlexCopyCoordinates(petsclib::PetscLibType, dmA::PetscDM, dmB::PetscDM) end

@for_petsc function DMPlexCopyCoordinates(petsclib::$UnionPetscLib, dmA::PetscDM, dmB::PetscDM )

    @chk ccall(
               (:DMPlexCopyCoordinates, $petsc_library),
               PetscErrorCode,
               (CDM, CDM),
               dmA, dmB,
              )


	return nothing
end 

"""
	DMPlexUninterpolate(petsclib::PetscLibType,dm::PetscDM, dmUnint::PetscDM) 
Take in a mesh with all intermediate faces, edges, etc. and return a cell

Collective

Input Parameter:
- `dm` - The complete `DMPLEX` object

Output Parameter:
- `dmUnint` - The `DMPLEX` object with only cells and vertices

Level: intermediate

-seealso: `DMPLEX`, `DMPlexInterpolate()`, `DMPlexCreateFromCellListPetsc()`, `DMPlexCopyCoordinates()`

# External Links
$(_doc_external("Dm/DMPlexUninterpolate"))
"""
function DMPlexUninterpolate(petsclib::PetscLibType, dm::PetscDM, dmUnint::PetscDM) end

@for_petsc function DMPlexUninterpolate(petsclib::$UnionPetscLib, dm::PetscDM, dmUnint::PetscDM )
	dmUnint_ = Ref(dmUnint.ptr)

    @chk ccall(
               (:DMPlexUninterpolate, $petsc_library),
               PetscErrorCode,
               (CDM, Ptr{CDM}),
               dm, dmUnint_,
              )

	dmUnint.ptr = C_NULL

	return nothing
end 

"""
	DMPlexIsInterpolated(petsclib::PetscLibType,dm::PetscDM, interpolated::DMPlexInterpolatedFlag) 
Find out to what extent the `DMPLEX` is topologically interpolated.

Not Collective

Input Parameter:
- `dm` - The `DMPLEX` object

Output Parameter:
- `interpolated` - Flag whether the `DM` is interpolated

Level: intermediate

-seealso: `DMPLEX`, `DMPlexInterpolate()`, `DMPlexIsInterpolatedCollective()`

# External Links
$(_doc_external("Dm/DMPlexIsInterpolated"))
"""
function DMPlexIsInterpolated(petsclib::PetscLibType, dm::PetscDM, interpolated::DMPlexInterpolatedFlag) end

@for_petsc function DMPlexIsInterpolated(petsclib::$UnionPetscLib, dm::PetscDM, interpolated::DMPlexInterpolatedFlag )

    @chk ccall(
               (:DMPlexIsInterpolated, $petsc_library),
               PetscErrorCode,
               (CDM, Ptr{DMPlexInterpolatedFlag}),
               dm, interpolated,
              )


	return nothing
end 

"""
	DMPlexIsInterpolatedCollective(petsclib::PetscLibType,dm::PetscDM, interpolated::DMPlexInterpolatedFlag) 
Find out to what extent the `DMPLEX` is topologically interpolated (in collective manner).

Collective

Input Parameter:
- `dm` - The `DMPLEX` object

Output Parameter:
- `interpolated` - Flag whether the `DM` is interpolated

Level: intermediate

-seealso: `DMPLEX`, `DMPlexInterpolate()`, `DMPlexIsInterpolated()`

# External Links
$(_doc_external("Dm/DMPlexIsInterpolatedCollective"))
"""
function DMPlexIsInterpolatedCollective(petsclib::PetscLibType, dm::PetscDM, interpolated::DMPlexInterpolatedFlag) end

@for_petsc function DMPlexIsInterpolatedCollective(petsclib::$UnionPetscLib, dm::PetscDM, interpolated::DMPlexInterpolatedFlag )

    @chk ccall(
               (:DMPlexIsInterpolatedCollective, $petsc_library),
               PetscErrorCode,
               (CDM, Ptr{DMPlexInterpolatedFlag}),
               dm, interpolated,
              )


	return nothing
end 

"""
	preferTensor::PetscBool = DMPlexGetInterpolatePreferTensor(petsclib::PetscLibType,dm::PetscDM) 
Get the flag to prefer tensor order when interpolating a cell

Not Collective

Input Parameter:
- `dm` - The `DMPLEX` object

Output Parameter:
- `preferTensor` - Flag to prefer tensor order

Level: intermediate

-seealso: `DMPlexSetInterpolatePreferTensor()`, `DMPLEX`, `DMPlexInterpolate()`, `DMPlexIsInterpolatedCollective()`

# External Links
$(_doc_external("Dm/DMPlexGetInterpolatePreferTensor"))
"""
function DMPlexGetInterpolatePreferTensor(petsclib::PetscLibType, dm::PetscDM) end

@for_petsc function DMPlexGetInterpolatePreferTensor(petsclib::$UnionPetscLib, dm::PetscDM )
	preferTensor_ = Ref{PetscBool}()

    @chk ccall(
               (:DMPlexGetInterpolatePreferTensor, $petsc_library),
               PetscErrorCode,
               (CDM, Ptr{PetscBool}),
               dm, preferTensor_,
              )

	preferTensor = preferTensor_[]

	return preferTensor
end 

"""
	DMPlexSetInterpolatePreferTensor(petsclib::PetscLibType,dm::PetscDM, preferTensor::PetscBool) 
Set the flag to prefer tensor order when interpolating a cell

Logically Collective

Input Parameters:
- `dm`           - The `DMPLEX` object
- `preferTensor` - Flag to prefer tensor order

Level: intermediate

-seealso: `DMPlexGetInterpolatePreferTensor()`, `DMPLEX`, `DMPlexInterpolate()`, `DMPlexIsInterpolatedCollective()`

# External Links
$(_doc_external("Dm/DMPlexSetInterpolatePreferTensor"))
"""
function DMPlexSetInterpolatePreferTensor(petsclib::PetscLibType, dm::PetscDM, preferTensor::PetscBool) end

@for_petsc function DMPlexSetInterpolatePreferTensor(petsclib::$UnionPetscLib, dm::PetscDM, preferTensor::PetscBool )

    @chk ccall(
               (:DMPlexSetInterpolatePreferTensor, $petsc_library),
               PetscErrorCode,
               (CDM, PetscBool),
               dm, preferTensor,
              )


	return nothing
end 

"""
	DMPlexMetricSetFromOptions(petsclib::PetscLibType,dm::PetscDM) 

# External Links
$(_doc_external("Dm/DMPlexMetricSetFromOptions"))
"""
function DMPlexMetricSetFromOptions(petsclib::PetscLibType, dm::PetscDM) end

@for_petsc function DMPlexMetricSetFromOptions(petsclib::$UnionPetscLib, dm::PetscDM )

    @chk ccall(
               (:DMPlexMetricSetFromOptions, $petsc_library),
               PetscErrorCode,
               (CDM,),
               dm,
              )


	return nothing
end 

"""
	DMPlexMetricSetIsotropic(petsclib::PetscLibType,dm::PetscDM, isotropic::PetscBool) 
Record whether a metric is isotropic

Input Parameters:
- `dm`        - The `DM`
- `isotropic` - Is the metric isotropic?

Level: beginner

-seealso: `DMPLEX`, `DMPlexMetricIsIsotropic()`, `DMPlexMetricSetUniform()`, `DMPlexMetricSetRestrictAnisotropyFirst()`

# External Links
$(_doc_external("Dm/DMPlexMetricSetIsotropic"))
"""
function DMPlexMetricSetIsotropic(petsclib::PetscLibType, dm::PetscDM, isotropic::PetscBool) end

@for_petsc function DMPlexMetricSetIsotropic(petsclib::$UnionPetscLib, dm::PetscDM, isotropic::PetscBool )

    @chk ccall(
               (:DMPlexMetricSetIsotropic, $petsc_library),
               PetscErrorCode,
               (CDM, PetscBool),
               dm, isotropic,
              )


	return nothing
end 

"""
	isotropic::PetscBool = DMPlexMetricIsIsotropic(petsclib::PetscLibType,dm::PetscDM) 
Is a metric isotropic?

Input Parameters:
- `dm` - The `DM`

Output Parameters:
- `isotropic` - Is the metric isotropic?

Level: beginner

-seealso: `DMPLEX`, `DMPlexMetricSetIsotropic()`, `DMPlexMetricIsUniform()`, `DMPlexMetricRestrictAnisotropyFirst()`

# External Links
$(_doc_external("Dm/DMPlexMetricIsIsotropic"))
"""
function DMPlexMetricIsIsotropic(petsclib::PetscLibType, dm::PetscDM) end

@for_petsc function DMPlexMetricIsIsotropic(petsclib::$UnionPetscLib, dm::PetscDM )
	isotropic_ = Ref{PetscBool}()

    @chk ccall(
               (:DMPlexMetricIsIsotropic, $petsc_library),
               PetscErrorCode,
               (CDM, Ptr{PetscBool}),
               dm, isotropic_,
              )

	isotropic = isotropic_[]

	return isotropic
end 

"""
	DMPlexMetricSetUniform(petsclib::PetscLibType,dm::PetscDM, uniform::PetscBool) 
Record whether a metric is uniform

Input Parameters:
- `dm`      - The `DM`
- `uniform` - Is the metric uniform?

Level: beginner

-seealso: `DMPLEX`, `DMPlexMetricIsUniform()`, `DMPlexMetricSetIsotropic()`, `DMPlexMetricSetRestrictAnisotropyFirst()`

# External Links
$(_doc_external("Dm/DMPlexMetricSetUniform"))
"""
function DMPlexMetricSetUniform(petsclib::PetscLibType, dm::PetscDM, uniform::PetscBool) end

@for_petsc function DMPlexMetricSetUniform(petsclib::$UnionPetscLib, dm::PetscDM, uniform::PetscBool )

    @chk ccall(
               (:DMPlexMetricSetUniform, $petsc_library),
               PetscErrorCode,
               (CDM, PetscBool),
               dm, uniform,
              )


	return nothing
end 

"""
	uniform::PetscBool = DMPlexMetricIsUniform(petsclib::PetscLibType,dm::PetscDM) 
Is a metric uniform?

Input Parameters:
- `dm` - The `DM`

Output Parameters:
- `uniform` - Is the metric uniform?

Level: beginner

-seealso: `DMPLEX`, `DMPlexMetricSetUniform()`, `DMPlexMetricIsIsotropic()`, `DMPlexMetricRestrictAnisotropyFirst()`

# External Links
$(_doc_external("Dm/DMPlexMetricIsUniform"))
"""
function DMPlexMetricIsUniform(petsclib::PetscLibType, dm::PetscDM) end

@for_petsc function DMPlexMetricIsUniform(petsclib::$UnionPetscLib, dm::PetscDM )
	uniform_ = Ref{PetscBool}()

    @chk ccall(
               (:DMPlexMetricIsUniform, $petsc_library),
               PetscErrorCode,
               (CDM, Ptr{PetscBool}),
               dm, uniform_,
              )

	uniform = uniform_[]

	return uniform
end 

"""
	DMPlexMetricSetRestrictAnisotropyFirst(petsclib::PetscLibType,dm::PetscDM, restrictAnisotropyFirst::PetscBool) 
Record whether anisotropy should be restricted before normalization

Input Parameters:
- `dm`                      - The `DM`
- `restrictAnisotropyFirst` - Should anisotropy be normalized first?

Level: beginner

-seealso: `DMPLEX`, `DMPlexMetricSetIsotropic()`, `DMPlexMetricRestrictAnisotropyFirst()`

# External Links
$(_doc_external("Dm/DMPlexMetricSetRestrictAnisotropyFirst"))
"""
function DMPlexMetricSetRestrictAnisotropyFirst(petsclib::PetscLibType, dm::PetscDM, restrictAnisotropyFirst::PetscBool) end

@for_petsc function DMPlexMetricSetRestrictAnisotropyFirst(petsclib::$UnionPetscLib, dm::PetscDM, restrictAnisotropyFirst::PetscBool )

    @chk ccall(
               (:DMPlexMetricSetRestrictAnisotropyFirst, $petsc_library),
               PetscErrorCode,
               (CDM, PetscBool),
               dm, restrictAnisotropyFirst,
              )


	return nothing
end 

"""
	restrictAnisotropyFirst::PetscBool = DMPlexMetricRestrictAnisotropyFirst(petsclib::PetscLibType,dm::PetscDM) 
Is anisotropy restricted before normalization or after?

Input Parameters:
- `dm` - The `DM`

Output Parameters:
- `restrictAnisotropyFirst` - Is anisotropy be normalized first?

Level: beginner

-seealso: `DMPLEX`, `DMPlexMetricIsIsotropic()`, `DMPlexMetricSetRestrictAnisotropyFirst()`

# External Links
$(_doc_external("Dm/DMPlexMetricRestrictAnisotropyFirst"))
"""
function DMPlexMetricRestrictAnisotropyFirst(petsclib::PetscLibType, dm::PetscDM) end

@for_petsc function DMPlexMetricRestrictAnisotropyFirst(petsclib::$UnionPetscLib, dm::PetscDM )
	restrictAnisotropyFirst_ = Ref{PetscBool}()

    @chk ccall(
               (:DMPlexMetricRestrictAnisotropyFirst, $petsc_library),
               PetscErrorCode,
               (CDM, Ptr{PetscBool}),
               dm, restrictAnisotropyFirst_,
              )

	restrictAnisotropyFirst = restrictAnisotropyFirst_[]

	return restrictAnisotropyFirst
end 

"""
	DMPlexMetricSetNoInsertion(petsclib::PetscLibType,dm::PetscDM, noInsert::PetscBool) 
Should node insertion and deletion be turned off?

Input Parameters:
- `dm`       - The `DM`
- `noInsert` - Should node insertion and deletion be turned off?

Level: beginner

-seealso: `DMPLEX`, `DMPlexMetricNoInsertion()`, `DMPlexMetricSetNoSwapping()`, `DMPlexMetricSetNoMovement()`, `DMPlexMetricSetNoSurf()`

# External Links
$(_doc_external("Dm/DMPlexMetricSetNoInsertion"))
"""
function DMPlexMetricSetNoInsertion(petsclib::PetscLibType, dm::PetscDM, noInsert::PetscBool) end

@for_petsc function DMPlexMetricSetNoInsertion(petsclib::$UnionPetscLib, dm::PetscDM, noInsert::PetscBool )

    @chk ccall(
               (:DMPlexMetricSetNoInsertion, $petsc_library),
               PetscErrorCode,
               (CDM, PetscBool),
               dm, noInsert,
              )


	return nothing
end 

"""
	noInsert::PetscBool = DMPlexMetricNoInsertion(petsclib::PetscLibType,dm::PetscDM) 
Are node insertion and deletion turned off?

Input Parameters:
- `dm` - The `DM`

Output Parameters:
- `noInsert` - Are node insertion and deletion turned off?

Level: beginner

-seealso: `DMPLEX`, `DMPlexMetricSetNoInsertion()`, `DMPlexMetricNoSwapping()`, `DMPlexMetricNoMovement()`, `DMPlexMetricNoSurf()`

# External Links
$(_doc_external("Dm/DMPlexMetricNoInsertion"))
"""
function DMPlexMetricNoInsertion(petsclib::PetscLibType, dm::PetscDM) end

@for_petsc function DMPlexMetricNoInsertion(petsclib::$UnionPetscLib, dm::PetscDM )
	noInsert_ = Ref{PetscBool}()

    @chk ccall(
               (:DMPlexMetricNoInsertion, $petsc_library),
               PetscErrorCode,
               (CDM, Ptr{PetscBool}),
               dm, noInsert_,
              )

	noInsert = noInsert_[]

	return noInsert
end 

"""
	DMPlexMetricSetNoSwapping(petsclib::PetscLibType,dm::PetscDM, noSwap::PetscBool) 
Should facet swapping be turned off?

Input Parameters:
- `dm`     - The `DM`
- `noSwap` - Should facet swapping be turned off?

Level: beginner

-seealso: `DMPLEX`, `DMPlexMetricNoSwapping()`, `DMPlexMetricSetNoInsertion()`, `DMPlexMetricSetNoMovement()`, `DMPlexMetricSetNoSurf()`

# External Links
$(_doc_external("Dm/DMPlexMetricSetNoSwapping"))
"""
function DMPlexMetricSetNoSwapping(petsclib::PetscLibType, dm::PetscDM, noSwap::PetscBool) end

@for_petsc function DMPlexMetricSetNoSwapping(petsclib::$UnionPetscLib, dm::PetscDM, noSwap::PetscBool )

    @chk ccall(
               (:DMPlexMetricSetNoSwapping, $petsc_library),
               PetscErrorCode,
               (CDM, PetscBool),
               dm, noSwap,
              )


	return nothing
end 

"""
	noSwap::PetscBool = DMPlexMetricNoSwapping(petsclib::PetscLibType,dm::PetscDM) 
Is facet swapping turned off?

Input Parameters:
- `dm` - The `DM`

Output Parameters:
- `noSwap` - Is facet swapping turned off?

Level: beginner

-seealso: `DMPLEX`, `DMPlexMetricSetNoSwapping()`, `DMPlexMetricNoInsertion()`, `DMPlexMetricNoMovement()`, `DMPlexMetricNoSurf()`

# External Links
$(_doc_external("Dm/DMPlexMetricNoSwapping"))
"""
function DMPlexMetricNoSwapping(petsclib::PetscLibType, dm::PetscDM) end

@for_petsc function DMPlexMetricNoSwapping(petsclib::$UnionPetscLib, dm::PetscDM )
	noSwap_ = Ref{PetscBool}()

    @chk ccall(
               (:DMPlexMetricNoSwapping, $petsc_library),
               PetscErrorCode,
               (CDM, Ptr{PetscBool}),
               dm, noSwap_,
              )

	noSwap = noSwap_[]

	return noSwap
end 

"""
	DMPlexMetricSetNoMovement(petsclib::PetscLibType,dm::PetscDM, noMove::PetscBool) 
Should node movement be turned off?

Input Parameters:
- `dm`     - The `DM`
- `noMove` - Should node movement be turned off?

Level: beginner

-seealso: `DMPLEX`, `DMPlexMetricNoMovement()`, `DMPlexMetricSetNoInsertion()`, `DMPlexMetricSetNoSwapping()`, `DMPlexMetricSetNoSurf()`

# External Links
$(_doc_external("Dm/DMPlexMetricSetNoMovement"))
"""
function DMPlexMetricSetNoMovement(petsclib::PetscLibType, dm::PetscDM, noMove::PetscBool) end

@for_petsc function DMPlexMetricSetNoMovement(petsclib::$UnionPetscLib, dm::PetscDM, noMove::PetscBool )

    @chk ccall(
               (:DMPlexMetricSetNoMovement, $petsc_library),
               PetscErrorCode,
               (CDM, PetscBool),
               dm, noMove,
              )


	return nothing
end 

"""
	noMove::PetscBool = DMPlexMetricNoMovement(petsclib::PetscLibType,dm::PetscDM) 
Is node movement turned off?

Input Parameters:
- `dm` - The `DM`

Output Parameters:
- `noMove` - Is node movement turned off?

Level: beginner

-seealso: `DMPLEX`, `DMPlexMetricSetNoMovement()`, `DMPlexMetricNoInsertion()`, `DMPlexMetricNoSwapping()`, `DMPlexMetricNoSurf()`

# External Links
$(_doc_external("Dm/DMPlexMetricNoMovement"))
"""
function DMPlexMetricNoMovement(petsclib::PetscLibType, dm::PetscDM) end

@for_petsc function DMPlexMetricNoMovement(petsclib::$UnionPetscLib, dm::PetscDM )
	noMove_ = Ref{PetscBool}()

    @chk ccall(
               (:DMPlexMetricNoMovement, $petsc_library),
               PetscErrorCode,
               (CDM, Ptr{PetscBool}),
               dm, noMove_,
              )

	noMove = noMove_[]

	return noMove
end 

"""
	DMPlexMetricSetNoSurf(petsclib::PetscLibType,dm::PetscDM, noSurf::PetscBool) 
Should surface modification be turned off?

Input Parameters:
- `dm`     - The `DM`
- `noSurf` - Should surface modification be turned off?

Level: beginner

-seealso: `DMPLEX`, `DMPlexMetricNoSurf()`, `DMPlexMetricSetNoMovement()`, `DMPlexMetricSetNoInsertion()`, `DMPlexMetricSetNoSwapping()`

# External Links
$(_doc_external("Dm/DMPlexMetricSetNoSurf"))
"""
function DMPlexMetricSetNoSurf(petsclib::PetscLibType, dm::PetscDM, noSurf::PetscBool) end

@for_petsc function DMPlexMetricSetNoSurf(petsclib::$UnionPetscLib, dm::PetscDM, noSurf::PetscBool )

    @chk ccall(
               (:DMPlexMetricSetNoSurf, $petsc_library),
               PetscErrorCode,
               (CDM, PetscBool),
               dm, noSurf,
              )


	return nothing
end 

"""
	noSurf::PetscBool = DMPlexMetricNoSurf(petsclib::PetscLibType,dm::PetscDM) 
Is surface modification turned off?

Input Parameters:
- `dm` - The `DM`

Output Parameters:
- `noSurf` - Is surface modification turned off?

Level: beginner

-seealso: `DMPLEX`, `DMPlexMetricSetNoSurf()`, `DMPlexMetricNoMovement()`, `DMPlexMetricNoInsertion()`, `DMPlexMetricNoSwapping()`

# External Links
$(_doc_external("Dm/DMPlexMetricNoSurf"))
"""
function DMPlexMetricNoSurf(petsclib::PetscLibType, dm::PetscDM) end

@for_petsc function DMPlexMetricNoSurf(petsclib::$UnionPetscLib, dm::PetscDM )
	noSurf_ = Ref{PetscBool}()

    @chk ccall(
               (:DMPlexMetricNoSurf, $petsc_library),
               PetscErrorCode,
               (CDM, Ptr{PetscBool}),
               dm, noSurf_,
              )

	noSurf = noSurf_[]

	return noSurf
end 

"""
	DMPlexMetricSetMinimumMagnitude(petsclib::PetscLibType,dm::PetscDM, h_min::PetscReal) 
Set the minimum tolerated metric magnitude

Input Parameters:
- `dm`    - The `DM`
- `h_min` - The minimum tolerated metric magnitude

Level: beginner

-seealso: `DMPLEX`, `DMPlexMetricGetMinimumMagnitude()`, `DMPlexMetricSetMaximumMagnitude()`

# External Links
$(_doc_external("Dm/DMPlexMetricSetMinimumMagnitude"))
"""
function DMPlexMetricSetMinimumMagnitude(petsclib::PetscLibType, dm::PetscDM, h_min::PetscReal) end

@for_petsc function DMPlexMetricSetMinimumMagnitude(petsclib::$UnionPetscLib, dm::PetscDM, h_min::$PetscReal )

    @chk ccall(
               (:DMPlexMetricSetMinimumMagnitude, $petsc_library),
               PetscErrorCode,
               (CDM, $PetscReal),
               dm, h_min,
              )


	return nothing
end 

"""
	h_min::PetscReal = DMPlexMetricGetMinimumMagnitude(petsclib::PetscLibType,dm::PetscDM) 
Get the minimum tolerated metric magnitude

Input Parameters:
- `dm` - The `DM`

Output Parameters:
- `h_min` - The minimum tolerated metric magnitude

Level: beginner

-seealso: `DMPLEX`, `DMPlexMetricSetMinimumMagnitude()`, `DMPlexMetricGetMaximumMagnitude()`

# External Links
$(_doc_external("Dm/DMPlexMetricGetMinimumMagnitude"))
"""
function DMPlexMetricGetMinimumMagnitude(petsclib::PetscLibType, dm::PetscDM) end

@for_petsc function DMPlexMetricGetMinimumMagnitude(petsclib::$UnionPetscLib, dm::PetscDM )
	h_min_ = Ref{$PetscReal}()

    @chk ccall(
               (:DMPlexMetricGetMinimumMagnitude, $petsc_library),
               PetscErrorCode,
               (CDM, Ptr{$PetscReal}),
               dm, h_min_,
              )

	h_min = h_min_[]

	return h_min
end 

"""
	DMPlexMetricSetMaximumMagnitude(petsclib::PetscLibType,dm::PetscDM, h_max::PetscReal) 
Set the maximum tolerated metric magnitude

Input Parameters:
- `dm`    - The `DM`
- `h_max` - The maximum tolerated metric magnitude

Level: beginner

-seealso: `DMPLEX`, `DMPlexMetricGetMaximumMagnitude()`, `DMPlexMetricSetMinimumMagnitude()`

# External Links
$(_doc_external("Dm/DMPlexMetricSetMaximumMagnitude"))
"""
function DMPlexMetricSetMaximumMagnitude(petsclib::PetscLibType, dm::PetscDM, h_max::PetscReal) end

@for_petsc function DMPlexMetricSetMaximumMagnitude(petsclib::$UnionPetscLib, dm::PetscDM, h_max::$PetscReal )

    @chk ccall(
               (:DMPlexMetricSetMaximumMagnitude, $petsc_library),
               PetscErrorCode,
               (CDM, $PetscReal),
               dm, h_max,
              )


	return nothing
end 

"""
	h_max::PetscReal = DMPlexMetricGetMaximumMagnitude(petsclib::PetscLibType,dm::PetscDM) 
Get the maximum tolerated metric magnitude

Input Parameters:
- `dm` - The `DM`

Output Parameters:
- `h_max` - The maximum tolerated metric magnitude

Level: beginner

-seealso: `DMPLEX`, `DMPlexMetricSetMaximumMagnitude()`, `DMPlexMetricGetMinimumMagnitude()`

# External Links
$(_doc_external("Dm/DMPlexMetricGetMaximumMagnitude"))
"""
function DMPlexMetricGetMaximumMagnitude(petsclib::PetscLibType, dm::PetscDM) end

@for_petsc function DMPlexMetricGetMaximumMagnitude(petsclib::$UnionPetscLib, dm::PetscDM )
	h_max_ = Ref{$PetscReal}()

    @chk ccall(
               (:DMPlexMetricGetMaximumMagnitude, $petsc_library),
               PetscErrorCode,
               (CDM, Ptr{$PetscReal}),
               dm, h_max_,
              )

	h_max = h_max_[]

	return h_max
end 

"""
	DMPlexMetricSetMaximumAnisotropy(petsclib::PetscLibType,dm::PetscDM, a_max::PetscReal) 
Set the maximum tolerated metric anisotropy

Input Parameters:
- `dm`    - The `DM`
- `a_max` - The maximum tolerated metric anisotropy

Level: beginner

-seealso: `DMPLEX`, `DMPlexMetricGetMaximumAnisotropy()`, `DMPlexMetricSetMaximumMagnitude()`

# External Links
$(_doc_external("Dm/DMPlexMetricSetMaximumAnisotropy"))
"""
function DMPlexMetricSetMaximumAnisotropy(petsclib::PetscLibType, dm::PetscDM, a_max::PetscReal) end

@for_petsc function DMPlexMetricSetMaximumAnisotropy(petsclib::$UnionPetscLib, dm::PetscDM, a_max::$PetscReal )

    @chk ccall(
               (:DMPlexMetricSetMaximumAnisotropy, $petsc_library),
               PetscErrorCode,
               (CDM, $PetscReal),
               dm, a_max,
              )


	return nothing
end 

"""
	a_max::PetscReal = DMPlexMetricGetMaximumAnisotropy(petsclib::PetscLibType,dm::PetscDM) 
Get the maximum tolerated metric anisotropy

Input Parameters:
- `dm` - The `DM`

Output Parameters:
- `a_max` - The maximum tolerated metric anisotropy

Level: beginner

-seealso: `DMPLEX`, `DMPlexMetricSetMaximumAnisotropy()`, `DMPlexMetricGetMaximumMagnitude()`

# External Links
$(_doc_external("Dm/DMPlexMetricGetMaximumAnisotropy"))
"""
function DMPlexMetricGetMaximumAnisotropy(petsclib::PetscLibType, dm::PetscDM) end

@for_petsc function DMPlexMetricGetMaximumAnisotropy(petsclib::$UnionPetscLib, dm::PetscDM )
	a_max_ = Ref{$PetscReal}()

    @chk ccall(
               (:DMPlexMetricGetMaximumAnisotropy, $petsc_library),
               PetscErrorCode,
               (CDM, Ptr{$PetscReal}),
               dm, a_max_,
              )

	a_max = a_max_[]

	return a_max
end 

"""
	DMPlexMetricSetTargetComplexity(petsclib::PetscLibType,dm::PetscDM, targetComplexity::PetscReal) 
Set the target metric complexity

Input Parameters:
- `dm`               - The `DM`
- `targetComplexity` - The target metric complexity

Level: beginner

-seealso: `DMPLEX`, `DMPlexMetricGetTargetComplexity()`, `DMPlexMetricSetNormalizationOrder()`

# External Links
$(_doc_external("Dm/DMPlexMetricSetTargetComplexity"))
"""
function DMPlexMetricSetTargetComplexity(petsclib::PetscLibType, dm::PetscDM, targetComplexity::PetscReal) end

@for_petsc function DMPlexMetricSetTargetComplexity(petsclib::$UnionPetscLib, dm::PetscDM, targetComplexity::$PetscReal )

    @chk ccall(
               (:DMPlexMetricSetTargetComplexity, $petsc_library),
               PetscErrorCode,
               (CDM, $PetscReal),
               dm, targetComplexity,
              )


	return nothing
end 

"""
	targetComplexity::PetscReal = DMPlexMetricGetTargetComplexity(petsclib::PetscLibType,dm::PetscDM) 
Get the target metric complexity

Input Parameters:
- `dm` - The `DM`

Output Parameters:
- `targetComplexity` - The target metric complexity

Level: beginner

-seealso: `DMPLEX`, `DMPlexMetricSetTargetComplexity()`, `DMPlexMetricGetNormalizationOrder()`

# External Links
$(_doc_external("Dm/DMPlexMetricGetTargetComplexity"))
"""
function DMPlexMetricGetTargetComplexity(petsclib::PetscLibType, dm::PetscDM) end

@for_petsc function DMPlexMetricGetTargetComplexity(petsclib::$UnionPetscLib, dm::PetscDM )
	targetComplexity_ = Ref{$PetscReal}()

    @chk ccall(
               (:DMPlexMetricGetTargetComplexity, $petsc_library),
               PetscErrorCode,
               (CDM, Ptr{$PetscReal}),
               dm, targetComplexity_,
              )

	targetComplexity = targetComplexity_[]

	return targetComplexity
end 

"""
	DMPlexMetricSetNormalizationOrder(petsclib::PetscLibType,dm::PetscDM, p::PetscReal) 
Set the order p for L

Input Parameters:
- `dm` - The `DM`
- `p`  - The normalization order

Level: beginner

-seealso: `DMPLEX`, `DMPlexMetricGetNormalizationOrder()`, `DMPlexMetricSetTargetComplexity()`

# External Links
$(_doc_external("Dm/DMPlexMetricSetNormalizationOrder"))
"""
function DMPlexMetricSetNormalizationOrder(petsclib::PetscLibType, dm::PetscDM, p::PetscReal) end

@for_petsc function DMPlexMetricSetNormalizationOrder(petsclib::$UnionPetscLib, dm::PetscDM, p::$PetscReal )

    @chk ccall(
               (:DMPlexMetricSetNormalizationOrder, $petsc_library),
               PetscErrorCode,
               (CDM, $PetscReal),
               dm, p,
              )


	return nothing
end 

"""
	p::PetscReal = DMPlexMetricGetNormalizationOrder(petsclib::PetscLibType,dm::PetscDM) 
Get the order p for L

Input Parameters:
- `dm` - The `DM`

Output Parameters:
- `p` - The normalization order

Level: beginner

-seealso: `DMPLEX`, `DMPlexMetricSetNormalizationOrder()`, `DMPlexMetricGetTargetComplexity()`

# External Links
$(_doc_external("Dm/DMPlexMetricGetNormalizationOrder"))
"""
function DMPlexMetricGetNormalizationOrder(petsclib::PetscLibType, dm::PetscDM) end

@for_petsc function DMPlexMetricGetNormalizationOrder(petsclib::$UnionPetscLib, dm::PetscDM )
	p_ = Ref{$PetscReal}()

    @chk ccall(
               (:DMPlexMetricGetNormalizationOrder, $petsc_library),
               PetscErrorCode,
               (CDM, Ptr{$PetscReal}),
               dm, p_,
              )

	p = p_[]

	return p
end 

"""
	DMPlexMetricSetGradationFactor(petsclib::PetscLibType,dm::PetscDM, beta::PetscReal) 
Set the metric gradation factor

Input Parameters:
- `dm`   - The `DM`
- `beta` - The metric gradation factor

Level: beginner

-seealso: `DMPLEX`, `DMPlexMetricGetGradationFactor()`, `DMPlexMetricSetHausdorffNumber()`

# External Links
$(_doc_external("Dm/DMPlexMetricSetGradationFactor"))
"""
function DMPlexMetricSetGradationFactor(petsclib::PetscLibType, dm::PetscDM, beta::PetscReal) end

@for_petsc function DMPlexMetricSetGradationFactor(petsclib::$UnionPetscLib, dm::PetscDM, beta::$PetscReal )

    @chk ccall(
               (:DMPlexMetricSetGradationFactor, $petsc_library),
               PetscErrorCode,
               (CDM, $PetscReal),
               dm, beta,
              )


	return nothing
end 

"""
	beta::PetscReal = DMPlexMetricGetGradationFactor(petsclib::PetscLibType,dm::PetscDM) 
Get the metric gradation factor

Input Parameters:
- `dm` - The `DM`

Output Parameters:
- `beta` - The metric gradation factor

Level: beginner

-seealso: `DMPLEX`, `DMPlexMetricSetGradationFactor()`, `DMPlexMetricGetHausdorffNumber()`

# External Links
$(_doc_external("Dm/DMPlexMetricGetGradationFactor"))
"""
function DMPlexMetricGetGradationFactor(petsclib::PetscLibType, dm::PetscDM) end

@for_petsc function DMPlexMetricGetGradationFactor(petsclib::$UnionPetscLib, dm::PetscDM )
	beta_ = Ref{$PetscReal}()

    @chk ccall(
               (:DMPlexMetricGetGradationFactor, $petsc_library),
               PetscErrorCode,
               (CDM, Ptr{$PetscReal}),
               dm, beta_,
              )

	beta = beta_[]

	return beta
end 

"""
	DMPlexMetricSetHausdorffNumber(petsclib::PetscLibType,dm::PetscDM, hausd::PetscReal) 
Set the metric Hausdorff number

Input Parameters:
- `dm`    - The `DM`
- `hausd` - The metric Hausdorff number

Level: beginner

-seealso: `DMPLEX`, `DMPlexMetricSetGradationFactor()`, `DMPlexMetricGetHausdorffNumber()`

# External Links
$(_doc_external("Dm/DMPlexMetricSetHausdorffNumber"))
"""
function DMPlexMetricSetHausdorffNumber(petsclib::PetscLibType, dm::PetscDM, hausd::PetscReal) end

@for_petsc function DMPlexMetricSetHausdorffNumber(petsclib::$UnionPetscLib, dm::PetscDM, hausd::$PetscReal )

    @chk ccall(
               (:DMPlexMetricSetHausdorffNumber, $petsc_library),
               PetscErrorCode,
               (CDM, $PetscReal),
               dm, hausd,
              )


	return nothing
end 

"""
	hausd::PetscReal = DMPlexMetricGetHausdorffNumber(petsclib::PetscLibType,dm::PetscDM) 
Get the metric Hausdorff number

Input Parameters:
- `dm` - The `DM`

Output Parameters:
- `hausd` - The metric Hausdorff number

Level: beginner

-seealso: `DMPLEX`, `DMPlexMetricGetGradationFactor()`, `DMPlexMetricSetHausdorffNumber()`

# External Links
$(_doc_external("Dm/DMPlexMetricGetHausdorffNumber"))
"""
function DMPlexMetricGetHausdorffNumber(petsclib::PetscLibType, dm::PetscDM) end

@for_petsc function DMPlexMetricGetHausdorffNumber(petsclib::$UnionPetscLib, dm::PetscDM )
	hausd_ = Ref{$PetscReal}()

    @chk ccall(
               (:DMPlexMetricGetHausdorffNumber, $petsc_library),
               PetscErrorCode,
               (CDM, Ptr{$PetscReal}),
               dm, hausd_,
              )

	hausd = hausd_[]

	return hausd
end 

"""
	DMPlexMetricSetVerbosity(petsclib::PetscLibType,dm::PetscDM, verbosity::PetscInt) 
Set the verbosity of the mesh adaptation package

Input Parameters:
- `dm`        - The `DM`
- `verbosity` - The verbosity, where -1 is silent and 10 is maximum

Level: beginner

-seealso: `DMPLEX`, `DMPlexMetricGetVerbosity()`, `DMPlexMetricSetNumIterations()`

# External Links
$(_doc_external("Dm/DMPlexMetricSetVerbosity"))
"""
function DMPlexMetricSetVerbosity(petsclib::PetscLibType, dm::PetscDM, verbosity::PetscInt) end

@for_petsc function DMPlexMetricSetVerbosity(petsclib::$UnionPetscLib, dm::PetscDM, verbosity::$PetscInt )

    @chk ccall(
               (:DMPlexMetricSetVerbosity, $petsc_library),
               PetscErrorCode,
               (CDM, $PetscInt),
               dm, verbosity,
              )


	return nothing
end 

"""
	verbosity::PetscInt = DMPlexMetricGetVerbosity(petsclib::PetscLibType,dm::PetscDM) 
Get the verbosity of the mesh adaptation package

Input Parameters:
- `dm` - The `DM`

Output Parameters:
- `verbosity` - The verbosity, where -1 is silent and 10 is maximum

Level: beginner

-seealso: `DMPLEX`, `DMPlexMetricSetVerbosity()`, `DMPlexMetricGetNumIterations()`

# External Links
$(_doc_external("Dm/DMPlexMetricGetVerbosity"))
"""
function DMPlexMetricGetVerbosity(petsclib::PetscLibType, dm::PetscDM) end

@for_petsc function DMPlexMetricGetVerbosity(petsclib::$UnionPetscLib, dm::PetscDM )
	verbosity_ = Ref{$PetscInt}()

    @chk ccall(
               (:DMPlexMetricGetVerbosity, $petsc_library),
               PetscErrorCode,
               (CDM, Ptr{$PetscInt}),
               dm, verbosity_,
              )

	verbosity = verbosity_[]

	return verbosity
end 

"""
	DMPlexMetricSetNumIterations(petsclib::PetscLibType,dm::PetscDM, numIter::PetscInt) 
Set the number of parallel adaptation iterations

Input Parameters:
- `dm`      - The `DM`
- `numIter` - the number of parallel adaptation iterations

Level: beginner

-seealso: `DMPLEX`, `DMPlexMetricSetVerbosity()`, `DMPlexMetricGetNumIterations()`

# External Links
$(_doc_external("Dm/DMPlexMetricSetNumIterations"))
"""
function DMPlexMetricSetNumIterations(petsclib::PetscLibType, dm::PetscDM, numIter::PetscInt) end

@for_petsc function DMPlexMetricSetNumIterations(petsclib::$UnionPetscLib, dm::PetscDM, numIter::$PetscInt )

    @chk ccall(
               (:DMPlexMetricSetNumIterations, $petsc_library),
               PetscErrorCode,
               (CDM, $PetscInt),
               dm, numIter,
              )


	return nothing
end 

"""
	numIter::PetscInt = DMPlexMetricGetNumIterations(petsclib::PetscLibType,dm::PetscDM) 
Get the number of parallel adaptation iterations

Input Parameters:
- `dm` - The `DM`

Output Parameters:
- `numIter` - the number of parallel adaptation iterations

Level: beginner

-seealso: `DMPLEX`, `DMPlexMetricSetNumIterations()`, `DMPlexMetricGetVerbosity()`

# External Links
$(_doc_external("Dm/DMPlexMetricGetNumIterations"))
"""
function DMPlexMetricGetNumIterations(petsclib::PetscLibType, dm::PetscDM) end

@for_petsc function DMPlexMetricGetNumIterations(petsclib::$UnionPetscLib, dm::PetscDM )
	numIter_ = Ref{$PetscInt}()

    @chk ccall(
               (:DMPlexMetricGetNumIterations, $petsc_library),
               PetscErrorCode,
               (CDM, Ptr{$PetscInt}),
               dm, numIter_,
              )

	numIter = numIter_[]

	return numIter
end 

"""
	metric::PetscVec = DMPlexMetricCreate(petsclib::PetscLibType,dm::PetscDM, f::PetscInt) 
Create a Riemannian metric field

Input Parameters:
- `dm` - The `DM`
- `f`  - The field number to use

Output Parameter:
- `metric` - The metric

Options Database Key:
- `-dm_adaptor <pragmatic/mmg/parmmg>` - specify dm adaptor to use

Options Database Keys for Mmg and ParMmg:
- `-dm_plex_metric_gradation_factor` - Maximum ratio by which edge lengths may grow during gradation
- `-dm_plex_metric_num_iterations`   - Number of parallel mesh adaptation iterations for ParMmg
- `-dm_plex_metric_no_insert`        - Should node insertion/deletion be turned off?
- `-dm_plex_metric_no_swap`          - Should facet swapping be turned off?
- `-dm_plex_metric_no_move`          - Should node movement be turned off?
- `-dm_plex_metric_verbosity`        - Choose a verbosity level from -1 (silent) to 10 (maximum).

Options Database Keys for Riemannian metrics:
- `-dm_plex_metric_isotropic`                 - Is the metric isotropic?
- `-dm_plex_metric_uniform`                   - Is the metric uniform?
- `-dm_plex_metric_restrict_anisotropy_first` - Should anisotropy be restricted before normalization?
- `-dm_plex_metric_h_min`                     - Minimum tolerated metric magnitude
- `-dm_plex_metric_h_max`                     - Maximum tolerated metric magnitude
- `-dm_plex_metric_a_max`                     - Maximum tolerated anisotropy
- `-dm_plex_metric_p`                         - L-p normalization order
- `-dm_plex_metric_target_complexity`         - Target metric complexity

Level: beginner

-seealso: `DMPLEX`, `DMPlexMetricCreateUniform()`, `DMPlexMetricCreateIsotropic()`

# External Links
$(_doc_external("Dm/DMPlexMetricCreate"))
"""
function DMPlexMetricCreate(petsclib::PetscLibType, dm::PetscDM, f::PetscInt) end

@for_petsc function DMPlexMetricCreate(petsclib::$UnionPetscLib, dm::PetscDM, f::$PetscInt )
	metric_ = Ref{CVec}()

    @chk ccall(
               (:DMPlexMetricCreate, $petsc_library),
               PetscErrorCode,
               (CDM, $PetscInt, Ptr{CVec}),
               dm, f, metric_,
              )

	metric = PetscVec(metric_[], petsclib)

	return metric
end 

"""
	metric::PetscVec = DMPlexMetricCreateUniform(petsclib::PetscLibType,dm::PetscDM, f::PetscInt, alpha::PetscReal) 
Construct a uniform isotropic metric

Input Parameters:
- `dm`    - The `DM`
- `f`     - The field number to use
- `alpha` - Scaling parameter for the diagonal

Output Parameter:
- `metric` - The uniform metric

Level: beginner

-seealso: `DMPLEX`, `DMPlexMetricCreate()`, `DMPlexMetricCreateIsotropic()`

# External Links
$(_doc_external("Dm/DMPlexMetricCreateUniform"))
"""
function DMPlexMetricCreateUniform(petsclib::PetscLibType, dm::PetscDM, f::PetscInt, alpha::PetscReal) end

@for_petsc function DMPlexMetricCreateUniform(petsclib::$UnionPetscLib, dm::PetscDM, f::$PetscInt, alpha::$PetscReal )
	metric_ = Ref{CVec}()

    @chk ccall(
               (:DMPlexMetricCreateUniform, $petsc_library),
               PetscErrorCode,
               (CDM, $PetscInt, $PetscReal, Ptr{CVec}),
               dm, f, alpha, metric_,
              )

	metric = PetscVec(metric_[], petsclib)

	return metric
end 

"""
	metric::PetscVec = DMPlexMetricCreateIsotropic(petsclib::PetscLibType,dm::PetscDM, f::PetscInt, indicator::PetscVec) 
Construct an isotropic metric from an error indicator

Input Parameters:
- `dm`        - The `DM`
- `f`         - The field number to use
- `indicator` - The error indicator

Output Parameter:
- `metric` - The isotropic metric

Level: beginner

-seealso: `DMPLEX`, `DMPlexMetricCreate()`, `DMPlexMetricCreateUniform()`

# External Links
$(_doc_external("Dm/DMPlexMetricCreateIsotropic"))
"""
function DMPlexMetricCreateIsotropic(petsclib::PetscLibType, dm::PetscDM, f::PetscInt, indicator::PetscVec) end

@for_petsc function DMPlexMetricCreateIsotropic(petsclib::$UnionPetscLib, dm::PetscDM, f::$PetscInt, indicator::PetscVec )
	metric_ = Ref{CVec}()

    @chk ccall(
               (:DMPlexMetricCreateIsotropic, $petsc_library),
               PetscErrorCode,
               (CDM, $PetscInt, CVec, Ptr{CVec}),
               dm, f, indicator, metric_,
              )

	metric = PetscVec(metric_[], petsclib)

	return metric
end 

"""
	determinant::PetscVec,dmDet::PetscDM = DMPlexMetricDeterminantCreate(petsclib::PetscLibType,dm::PetscDM, f::PetscInt) 
Create the determinant field for a Riemannian metric

Input Parameters:
- `dm` - The `DM` of the metric field
- `f`  - The field number to use

Output Parameters:
- `determinant` - The determinant field
- `dmDet`       - The corresponding `DM`

Level: beginner

-seealso: `DMPLEX`, `DMPlexMetricCreateUniform()`, `DMPlexMetricCreateIsotropic()`, `DMPlexMetricCreate()`

# External Links
$(_doc_external("Dm/DMPlexMetricDeterminantCreate"))
"""
function DMPlexMetricDeterminantCreate(petsclib::PetscLibType, dm::PetscDM, f::PetscInt) end

@for_petsc function DMPlexMetricDeterminantCreate(petsclib::$UnionPetscLib, dm::PetscDM, f::$PetscInt )
	determinant_ = Ref{CVec}()
	dmDet_ = Ref{CDM}()

    @chk ccall(
               (:DMPlexMetricDeterminantCreate, $petsc_library),
               PetscErrorCode,
               (CDM, $PetscInt, Ptr{CVec}, Ptr{CDM}),
               dm, f, determinant_, dmDet_,
              )

	determinant = PetscVec(determinant_[], petsclib)
	dmDet = PetscDM(dmDet_[], petsclib)

	return determinant,dmDet
end 

"""
	DMPlexMetricEnforceSPD(petsclib::PetscLibType,dm::PetscDM, metricIn::PetscVec, restrictSizes::PetscBool, restrictAnisotropy::PetscBool, metricOut::PetscVec, determinant::PetscVec) 
Enforce symmetric positive

Input Parameters:
- `dm`                 - The `DM`
- `metricIn`           - The metric
- `restrictSizes`      - Should maximum/minimum metric magnitudes be enforced?
- `restrictAnisotropy` - Should maximum anisotropy be enforced?

Output Parameters:
- `metricOut`   - The metric
- `determinant` - Its determinant

Options Database Keys:
- `-dm_plex_metric_isotropic` - Is the metric isotropic?
- `-dm_plex_metric_uniform`   - Is the metric uniform?
- `-dm_plex_metric_h_min`     - Minimum tolerated metric magnitude
- `-dm_plex_metric_h_max`     - Maximum tolerated metric magnitude
- `-dm_plex_metric_a_max`     - Maximum tolerated anisotropy

Level: beginner

-seealso: `DMPLEX`, `DMPlexMetricNormalize()`, `DMPlexMetricIntersection()`

# External Links
$(_doc_external("Dm/DMPlexMetricEnforceSPD"))
"""
function DMPlexMetricEnforceSPD(petsclib::PetscLibType, dm::PetscDM, metricIn::PetscVec, restrictSizes::PetscBool, restrictAnisotropy::PetscBool, metricOut::PetscVec, determinant::PetscVec) end

@for_petsc function DMPlexMetricEnforceSPD(petsclib::$UnionPetscLib, dm::PetscDM, metricIn::PetscVec, restrictSizes::PetscBool, restrictAnisotropy::PetscBool, metricOut::PetscVec, determinant::PetscVec )

    @chk ccall(
               (:DMPlexMetricEnforceSPD, $petsc_library),
               PetscErrorCode,
               (CDM, CVec, PetscBool, PetscBool, CVec, CVec),
               dm, metricIn, restrictSizes, restrictAnisotropy, metricOut, determinant,
              )


	return nothing
end 

"""
	DMPlexMetricNormalize(petsclib::PetscLibType,dm::PetscDM, metricIn::PetscVec, restrictSizes::PetscBool, restrictAnisotropy::PetscBool, metricOut::PetscVec, determinant::PetscVec) 
Apply L

Input Parameters:
- `dm`                 - The `DM`
- `metricIn`           - The unnormalized metric
- `restrictSizes`      - Should maximum/minimum metric magnitudes be enforced?
- `restrictAnisotropy` - Should maximum metric anisotropy be enforced?

Output Parameters:
- `metricOut`   - The normalized metric
- `determinant` - computed determinant

Options Database Keys:
- `-dm_plex_metric_isotropic`                 - Is the metric isotropic?
- `-dm_plex_metric_uniform`                   - Is the metric uniform?
- `-dm_plex_metric_restrict_anisotropy_first` - Should anisotropy be restricted before normalization?
- `-dm_plex_metric_h_min`                     - Minimum tolerated metric magnitude
- `-dm_plex_metric_h_max`                     - Maximum tolerated metric magnitude
- `-dm_plex_metric_a_max`                     - Maximum tolerated anisotropy
- `-dm_plex_metric_p`                         - L-p normalization order
- `-dm_plex_metric_target_complexity`         - Target metric complexity

Level: beginner

-seealso: `DMPLEX`, `DMPlexMetricEnforceSPD()`, `DMPlexMetricIntersection()`

# External Links
$(_doc_external("Dm/DMPlexMetricNormalize"))
"""
function DMPlexMetricNormalize(petsclib::PetscLibType, dm::PetscDM, metricIn::PetscVec, restrictSizes::PetscBool, restrictAnisotropy::PetscBool, metricOut::PetscVec, determinant::PetscVec) end

@for_petsc function DMPlexMetricNormalize(petsclib::$UnionPetscLib, dm::PetscDM, metricIn::PetscVec, restrictSizes::PetscBool, restrictAnisotropy::PetscBool, metricOut::PetscVec, determinant::PetscVec )

    @chk ccall(
               (:DMPlexMetricNormalize, $petsc_library),
               PetscErrorCode,
               (CDM, CVec, PetscBool, PetscBool, CVec, CVec),
               dm, metricIn, restrictSizes, restrictAnisotropy, metricOut, determinant,
              )


	return nothing
end 

"""
	DMPlexMetricAverage(petsclib::PetscLibType,dm::PetscDM, numMetrics::PetscInt, weights::Vector{PetscReal}, metrics::Vector{PetscVec}, metricAvg::PetscVec) 
Compute the average of a list of metrics

Input Parameters:
- `dm`         - The `DM`
- `numMetrics` - The number of metrics to be averaged
- `weights`    - Weights for the average
- `metrics`    - The metrics to be averaged

Output Parameter:
- `metricAvg` - The averaged metric

Level: beginner

-seealso: `DMPLEX`, `DMPlexMetricAverage2()`, `DMPlexMetricAverage3()`, `DMPlexMetricIntersection()`

# External Links
$(_doc_external("Dm/DMPlexMetricAverage"))
"""
function DMPlexMetricAverage(petsclib::PetscLibType, dm::PetscDM, numMetrics::PetscInt, weights::Vector{PetscReal}, metrics::Vector{PetscVec}, metricAvg::PetscVec) end

@for_petsc function DMPlexMetricAverage(petsclib::$UnionPetscLib, dm::PetscDM, numMetrics::$PetscInt, weights::Vector{$PetscReal}, metrics::Vector{PetscVec}, metricAvg::PetscVec )

    @chk ccall(
               (:DMPlexMetricAverage, $petsc_library),
               PetscErrorCode,
               (CDM, $PetscInt, Ptr{$PetscReal}, Ptr{CVec}, CVec),
               dm, numMetrics, weights, metrics, metricAvg,
              )


	return nothing
end 

"""
	DMPlexMetricAverage2(petsclib::PetscLibType,dm::PetscDM, metric1::PetscVec, metric2::PetscVec, metricAvg::PetscVec) 
Compute the unweighted average of two metrics

Input Parameters:
- `dm`      - The `DM`
- `metric1` - The first metric to be averaged
- `metric2` - The second metric to be averaged

Output Parameter:
- `metricAvg` - The averaged metric

Level: beginner

-seealso: `DMPLEX`, `DMPlexMetricAverage()`, `DMPlexMetricAverage3()`

# External Links
$(_doc_external("Dm/DMPlexMetricAverage2"))
"""
function DMPlexMetricAverage2(petsclib::PetscLibType, dm::PetscDM, metric1::PetscVec, metric2::PetscVec, metricAvg::PetscVec) end

@for_petsc function DMPlexMetricAverage2(petsclib::$UnionPetscLib, dm::PetscDM, metric1::PetscVec, metric2::PetscVec, metricAvg::PetscVec )

    @chk ccall(
               (:DMPlexMetricAverage2, $petsc_library),
               PetscErrorCode,
               (CDM, CVec, CVec, CVec),
               dm, metric1, metric2, metricAvg,
              )


	return nothing
end 

"""
	DMPlexMetricAverage3(petsclib::PetscLibType,dm::PetscDM, metric1::PetscVec, metric2::PetscVec, metric3::PetscVec, metricAvg::PetscVec) 
Compute the unweighted average of three metrics

Input Parameters:
- `dm`      - The `DM`
- `metric1` - The first metric to be averaged
- `metric2` - The second metric to be averaged
- `metric3` - The third metric to be averaged

Output Parameter:
- `metricAvg` - The averaged metric

Level: beginner

-seealso: `DMPLEX`, `DMPlexMetricAverage()`, `DMPlexMetricAverage2()`

# External Links
$(_doc_external("Dm/DMPlexMetricAverage3"))
"""
function DMPlexMetricAverage3(petsclib::PetscLibType, dm::PetscDM, metric1::PetscVec, metric2::PetscVec, metric3::PetscVec, metricAvg::PetscVec) end

@for_petsc function DMPlexMetricAverage3(petsclib::$UnionPetscLib, dm::PetscDM, metric1::PetscVec, metric2::PetscVec, metric3::PetscVec, metricAvg::PetscVec )

    @chk ccall(
               (:DMPlexMetricAverage3, $petsc_library),
               PetscErrorCode,
               (CDM, CVec, CVec, CVec, CVec),
               dm, metric1, metric2, metric3, metricAvg,
              )


	return nothing
end 

"""
	DMPlexMetricIntersection(petsclib::PetscLibType,dm::PetscDM, numMetrics::PetscInt, metrics::Vector{PetscVec}, metricInt::PetscVec) 
Compute the intersection of a list of metrics

Input Parameters:
- `dm`         - The `DM`
- `numMetrics` - The number of metrics to be intersected
- `metrics`    - The metrics to be intersected

Output Parameter:
- `metricInt` - The intersected metric

Level: beginner

-seealso: `DMPLEX`, `DMPlexMetricIntersection2()`, `DMPlexMetricIntersection3()`, `DMPlexMetricAverage()`

# External Links
$(_doc_external("Dm/DMPlexMetricIntersection"))
"""
function DMPlexMetricIntersection(petsclib::PetscLibType, dm::PetscDM, numMetrics::PetscInt, metrics::Vector{PetscVec}, metricInt::PetscVec) end

@for_petsc function DMPlexMetricIntersection(petsclib::$UnionPetscLib, dm::PetscDM, numMetrics::$PetscInt, metrics::Vector{PetscVec}, metricInt::PetscVec )

    @chk ccall(
               (:DMPlexMetricIntersection, $petsc_library),
               PetscErrorCode,
               (CDM, $PetscInt, Ptr{CVec}, CVec),
               dm, numMetrics, metrics, metricInt,
              )


	return nothing
end 

"""
	DMPlexMetricIntersection2(petsclib::PetscLibType,dm::PetscDM, metric1::PetscVec, metric2::PetscVec, metricInt::PetscVec) 
Compute the intersection of two metrics

Input Parameters:
- `dm`      - The `DM`
- `metric1` - The first metric to be intersected
- `metric2` - The second metric to be intersected

Output Parameter:
- `metricInt` - The intersected metric

Level: beginner

-seealso: `DMPLEX`, `DMPlexMetricIntersection()`, `DMPlexMetricIntersection3()`

# External Links
$(_doc_external("Dm/DMPlexMetricIntersection2"))
"""
function DMPlexMetricIntersection2(petsclib::PetscLibType, dm::PetscDM, metric1::PetscVec, metric2::PetscVec, metricInt::PetscVec) end

@for_petsc function DMPlexMetricIntersection2(petsclib::$UnionPetscLib, dm::PetscDM, metric1::PetscVec, metric2::PetscVec, metricInt::PetscVec )

    @chk ccall(
               (:DMPlexMetricIntersection2, $petsc_library),
               PetscErrorCode,
               (CDM, CVec, CVec, CVec),
               dm, metric1, metric2, metricInt,
              )


	return nothing
end 

"""
	DMPlexMetricIntersection3(petsclib::PetscLibType,dm::PetscDM, metric1::PetscVec, metric2::PetscVec, metric3::PetscVec, metricInt::PetscVec) 
Compute the intersection of three metrics

Input Parameters:
- `dm`      - The `DM`
- `metric1` - The first metric to be intersected
- `metric2` - The second metric to be intersected
- `metric3` - The third metric to be intersected

Output Parameter:
- `metricInt` - The intersected metric

Level: beginner

-seealso: `DMPLEX`, `DMPlexMetricIntersection()`, `DMPlexMetricIntersection2()`

# External Links
$(_doc_external("Dm/DMPlexMetricIntersection3"))
"""
function DMPlexMetricIntersection3(petsclib::PetscLibType, dm::PetscDM, metric1::PetscVec, metric2::PetscVec, metric3::PetscVec, metricInt::PetscVec) end

@for_petsc function DMPlexMetricIntersection3(petsclib::$UnionPetscLib, dm::PetscDM, metric1::PetscVec, metric2::PetscVec, metric3::PetscVec, metricInt::PetscVec )

    @chk ccall(
               (:DMPlexMetricIntersection3, $petsc_library),
               PetscErrorCode,
               (CDM, CVec, CVec, CVec, CVec),
               dm, metric1, metric2, metric3, metricInt,
              )


	return nothing
end 

"""
	dm::PetscDM = DMPlexCreateGmshFromFile(petsclib::PetscLibType,comm::MPI_Comm, filename::String, interpolate::PetscBool) 
Create a `DMPLEX` mesh from a Gmsh file

Input Parameters:
- `comm`        - The MPI communicator
- `filename`    - Name of the Gmsh file
- `interpolate` - Create faces and edges in the mesh

Output Parameter:
- `dm` - The `DM` object representing the mesh

Level: beginner

-seealso: [](ch_unstructured), `DM`, `DMPLEX`, `DMPlexCreateFromFile()`, `DMPlexCreateGmsh()`, `DMPlexCreate()`

# External Links
$(_doc_external("Dm/DMPlexCreateGmshFromFile"))
"""
function DMPlexCreateGmshFromFile(petsclib::PetscLibType, comm::MPI_Comm, filename::String, interpolate::PetscBool) end

@for_petsc function DMPlexCreateGmshFromFile(petsclib::$UnionPetscLib, comm::MPI_Comm, filename::String, interpolate::PetscBool )
	dm_ = Ref{CDM}()

    @chk ccall(
               (:DMPlexCreateGmshFromFile, $petsc_library),
               PetscErrorCode,
               (MPI_Comm, Ptr{Cchar}, PetscBool, Ptr{CDM}),
               comm, filename, interpolate, dm_,
              )

	dm = PetscDM(dm_[], petsclib)

	return dm
end 

"""
	dm::PetscDM = DMPlexCreateGmsh(petsclib::PetscLibType,comm::MPI_Comm, viewer::PetscViewer, interpolate::PetscBool) 
Create a `DMPLEX` mesh from a Gmsh file viewer

Collective

Input Parameters:
- `comm`        - The MPI communicator
- `viewer`      - The `PetscViewer` associated with a Gmsh file
- `interpolate` - Create faces and edges in the mesh

Output Parameter:
- `dm` - The `DM` object representing the mesh

Options Database Keys:
- `-dm_plex_gmsh_hybrid`               - Force triangular prisms to use tensor order
- `-dm_plex_gmsh_periodic`             - Read Gmsh periodic section and construct a periodic Plex
- `-dm_plex_gmsh_highorder`            - Generate high-order coordinates
- `-dm_plex_gmsh_project`              - Project high-order coordinates to a different space, use the prefix dm_plex_gmsh_project_ to define the space
- `-dm_plex_gmsh_use_generic`          - Generate generic labels, i.e. Cell Sets, Face Sets, etc.
- `-dm_plex_gmsh_use_regions`          - Generate labels with region names
- `-dm_plex_gmsh_mark_vertices`        - Add vertices to generated labels
- `-dm_plex_gmsh_mark_vertices_strict` - Add vertices included in a region to generated labels
- `-dm_plex_gmsh_multiple_tags`        - Allow multiple tags for default labels
- `-dm_plex_gmsh_spacedim <d>`         - Embedding space dimension, if different from topological dimension

Level: beginner

-seealso: [](ch_unstructured), `DM`, `DMPLEX`, `DMCreate()`

# External Links
$(_doc_external("Dm/DMPlexCreateGmsh"))
"""
function DMPlexCreateGmsh(petsclib::PetscLibType, comm::MPI_Comm, viewer::PetscViewer, interpolate::PetscBool) end

@for_petsc function DMPlexCreateGmsh(petsclib::$UnionPetscLib, comm::MPI_Comm, viewer::PetscViewer, interpolate::PetscBool )
	dm_ = Ref{CDM}()

    @chk ccall(
               (:DMPlexCreateGmsh, $petsc_library),
               PetscErrorCode,
               (MPI_Comm, PetscViewer, PetscBool, Ptr{CDM}),
               comm, viewer, interpolate, dm_,
              )

	dm = PetscDM(dm_[], petsclib)

	return dm
end 

"""
	dm::PetscDM = DMPlexCreateCGNSFromFile(petsclib::PetscLibType,comm::MPI_Comm, filename::String, interpolate::PetscBool) 
Create a `DMPLEX` mesh from a CGNS file.

Collective

Input Parameters:
- `comm`        - The MPI communicator
- `filename`    - The name of the CGNS file
- `interpolate` - Create faces and edges in the mesh

Output Parameter:
- `dm` - The `DM` object representing the mesh

Level: beginner

-seealso: [](ch_unstructured), `DM`, `DMPLEX`, `DMPlexCreate()`, `DMPlexCreateCGNS()`, `DMPlexCreateExodus()`

# External Links
$(_doc_external("Dm/DMPlexCreateCGNSFromFile"))
"""
function DMPlexCreateCGNSFromFile(petsclib::PetscLibType, comm::MPI_Comm, filename::String, interpolate::PetscBool) end

@for_petsc function DMPlexCreateCGNSFromFile(petsclib::$UnionPetscLib, comm::MPI_Comm, filename::String, interpolate::PetscBool )
	dm_ = Ref{CDM}()

    @chk ccall(
               (:DMPlexCreateCGNSFromFile, $petsc_library),
               PetscErrorCode,
               (MPI_Comm, Ptr{Cchar}, PetscBool, Ptr{CDM}),
               comm, filename, interpolate, dm_,
              )

	dm = PetscDM(dm_[], petsclib)

	return dm
end 

"""
	dm::PetscDM = DMPlexCreateCGNS(petsclib::PetscLibType,comm::MPI_Comm, cgid::PetscInt, interpolate::PetscBool) 
Create a `DMPLEX` mesh from a CGNS file ID.

Collective

Input Parameters:
- `comm`        - The MPI communicator
- `cgid`        - The CG id associated with a file and obtained using cg_open
- `interpolate` - Create faces and edges in the mesh

Output Parameter:
- `dm` - The `DM` object representing the mesh

Level: beginner

-seealso: [](ch_unstructured), `DM`, `DMPLEX`, `DMPlexCreate()`, `DMPlexCreateExodus()`

# External Links
$(_doc_external("Dm/DMPlexCreateCGNS"))
"""
function DMPlexCreateCGNS(petsclib::PetscLibType, comm::MPI_Comm, cgid::PetscInt, interpolate::PetscBool) end

@for_petsc function DMPlexCreateCGNS(petsclib::$UnionPetscLib, comm::MPI_Comm, cgid::$PetscInt, interpolate::PetscBool )
	dm_ = Ref{CDM}()

    @chk ccall(
               (:DMPlexCreateCGNS, $petsc_library),
               PetscErrorCode,
               (MPI_Comm, $PetscInt, PetscBool, Ptr{CDM}),
               comm, cgid, interpolate, dm_,
              )

	dm = PetscDM(dm_[], petsclib)

	return dm
end 

"""
	DMPlexCreateClosureIndex(petsclib::PetscLibType,dm::PetscDM, section::PetscSection) 
Calculate an index for the given `PetscSection` for the closure operation on the `DM`

Not Collective

Input Parameters:
- `dm`      - The `DM`
- `section` - The section describing the layout in the local vector, or NULL to use the default section

Level: intermediate

-seealso: [](ch_unstructured), `DM`, `DMPLEX`, `PetscSection`, `DMPlexVecGetClosure()`, `DMPlexVecRestoreClosure()`, `DMPlexVecSetClosure()`, `DMPlexMatSetClosure()`

# External Links
$(_doc_external("Dm/DMPlexCreateClosureIndex"))
"""
function DMPlexCreateClosureIndex(petsclib::PetscLibType, dm::PetscDM, section::PetscSection) end

@for_petsc function DMPlexCreateClosureIndex(petsclib::$UnionPetscLib, dm::PetscDM, section::PetscSection )

    @chk ccall(
               (:DMPlexCreateClosureIndex, $petsc_library),
               PetscErrorCode,
               (CDM, PetscSection),
               dm, section,
              )


	return nothing
end 

"""
	dm::PetscDM = DMPlexCreateFluentFromFile(petsclib::PetscLibType,comm::MPI_Comm, filename::String, interpolate::PetscBool) 
Create a `DMPLEX` mesh from a Fluent mesh file

Collective

Input Parameters:
- `comm`        - The MPI communicator
- `filename`    - Name of the Fluent mesh file
- `interpolate` - Create faces and edges in the mesh

Output Parameter:
- `dm` - The `DM` object representing the mesh

Level: beginner

-seealso: [](ch_unstructured), `DM`, `DMPLEX`, `DMPlexCreateFromFile()`, `DMPlexCreateFluent()`, `DMPlexCreate()`

# External Links
$(_doc_external("Dm/DMPlexCreateFluentFromFile"))
"""
function DMPlexCreateFluentFromFile(petsclib::PetscLibType, comm::MPI_Comm, filename::String, interpolate::PetscBool) end

@for_petsc function DMPlexCreateFluentFromFile(petsclib::$UnionPetscLib, comm::MPI_Comm, filename::String, interpolate::PetscBool )
	dm_ = Ref{CDM}()

    @chk ccall(
               (:DMPlexCreateFluentFromFile, $petsc_library),
               PetscErrorCode,
               (MPI_Comm, Ptr{Cchar}, PetscBool, Ptr{CDM}),
               comm, filename, interpolate, dm_,
              )

	dm = PetscDM(dm_[], petsclib)

	return dm
end 

"""
	dm::PetscDM = DMPlexCreateFluent(petsclib::PetscLibType,comm::MPI_Comm, viewer::PetscViewer, interpolate::PetscBool) 
Create a `DMPLEX` mesh from a Fluent mesh file <http://aerojet.engr.ucdavis.edu/fluenthelp/html/ug/node1490.htm>.

Collective

Input Parameters:
- `comm`        - The MPI communicator
- `viewer`      - The `PetscViewer` associated with a Fluent mesh file
- `interpolate` - Create faces and edges in the mesh

Output Parameter:
- `dm` - The `DM` object representing the mesh

Level: beginner

-seealso: [](ch_unstructured), `DM`, `DMPLEX`, `DMCreate()`

# External Links
$(_doc_external("Dm/DMPlexCreateFluent"))
"""
function DMPlexCreateFluent(petsclib::PetscLibType, comm::MPI_Comm, viewer::PetscViewer, interpolate::PetscBool) end

@for_petsc function DMPlexCreateFluent(petsclib::$UnionPetscLib, comm::MPI_Comm, viewer::PetscViewer, interpolate::PetscBool )
	dm_ = Ref{CDM}()

    @chk ccall(
               (:DMPlexCreateFluent, $petsc_library),
               PetscErrorCode,
               (MPI_Comm, PetscViewer, PetscBool, Ptr{CDM}),
               comm, viewer, interpolate, dm_,
              )

	dm = PetscDM(dm_[], petsclib)

	return dm
end 

"""
	simplex::PetscBool = DMPlexIsSimplex(petsclib::PetscLibType,dm::PetscDM) 
Is the first cell in this mesh a simplex?

Input Parameter:
- `dm` - The `DMPLEX` object

Output Parameter:
- `simplex` - Flag checking for a simplex

Level: intermediate

-seealso: [](ch_unstructured), `DM`, `DMPLEX`, `DMPlexGetSimplexOrBoxCells()`, `DMPlexGetCellType()`, `DMPlexGetHeightStratum()`, `DMPolytopeTypeGetNumVertices()`

# External Links
$(_doc_external("Dm/DMPlexIsSimplex"))
"""
function DMPlexIsSimplex(petsclib::PetscLibType, dm::PetscDM) end

@for_petsc function DMPlexIsSimplex(petsclib::$UnionPetscLib, dm::PetscDM )
	simplex_ = Ref{PetscBool}()

    @chk ccall(
               (:DMPlexIsSimplex, $petsc_library),
               PetscErrorCode,
               (CDM, Ptr{PetscBool}),
               dm, simplex_,
              )

	simplex = simplex_[]

	return simplex
end 

"""
	cStart::PetscInt,cEnd::PetscInt = DMPlexGetSimplexOrBoxCells(petsclib::PetscLibType,dm::PetscDM, height::PetscInt) 
Get the range of cells which are neither prisms nor ghost FV cells

Input Parameters:
- `dm`     - The `DMPLEX` object
- `height` - The cell height in the Plex, 0 is the default

Output Parameters:
- `cStart` - The first "normal" cell, pass `NULL` if not needed
- `cEnd`   - The upper bound on "normal" cells, pass `NULL` if not needed

Level: developer

-seealso: [](ch_unstructured), `DM`, `DMPLEX`, `DMPlexConstructGhostCells()`, `DMPlexGetCellTypeStratum()`

# External Links
$(_doc_external("Dm/DMPlexGetSimplexOrBoxCells"))
"""
function DMPlexGetSimplexOrBoxCells(petsclib::PetscLibType, dm::PetscDM, height::PetscInt) end

@for_petsc function DMPlexGetSimplexOrBoxCells(petsclib::$UnionPetscLib, dm::PetscDM, height::$PetscInt )
	cStart_ = Ref{$PetscInt}()
	cEnd_ = Ref{$PetscInt}()

    @chk ccall(
               (:DMPlexGetSimplexOrBoxCells, $petsc_library),
               PetscErrorCode,
               (CDM, $PetscInt, Ptr{$PetscInt}, Ptr{$PetscInt}),
               dm, height, cStart_, cEnd_,
              )

	cStart = cStart_[]
	cEnd = cEnd_[]

	return cStart,cEnd
end 

"""
	DMPlexVecView1D(petsclib::PetscLibType,dm::PetscDM, n::PetscInt, u::Vector{PetscVec}, viewer::PetscViewer) 
Plot many 1D solutions on the same line graph

Collective

Input Parameters:
- `dm`     - The `DMPLEX` object
- `n`      - The number of vectors
- `u`      - The array of local vectors
- `viewer` - The `PetscViewer`

Level: advanced

-seealso: [](ch_unstructured), `DM`, `DMPLEX`, `VecViewFromOptions()`, `VecView()`

# External Links
$(_doc_external("Dm/DMPlexVecView1D"))
"""
function DMPlexVecView1D(petsclib::PetscLibType, dm::PetscDM, n::PetscInt, u::Vector{PetscVec}, viewer::PetscViewer) end

@for_petsc function DMPlexVecView1D(petsclib::$UnionPetscLib, dm::PetscDM, n::$PetscInt, u::Vector{PetscVec}, viewer::PetscViewer )

    @chk ccall(
               (:DMPlexVecView1D, $petsc_library),
               PetscErrorCode,
               (CDM, $PetscInt, Ptr{CVec}, PetscViewer),
               dm, n, u, viewer,
              )


	return nothing
end 

"""
	DMPlexTopologyView(petsclib::PetscLibType,dm::PetscDM, viewer::PetscViewer) 
Saves a `DMPLEX` topology into a file

Collective

Input Parameters:
- `dm`     - The `DM` whose topology is to be saved
- `viewer` - The `PetscViewer` to save it in

Level: advanced

-seealso: [](ch_unstructured), `DM`, `DMPLEX`, `DMView()`, `DMPlexCoordinatesView()`, `DMPlexLabelsView()`, `DMPlexTopologyLoad()`, `PetscViewer`

# External Links
$(_doc_external("Dm/DMPlexTopologyView"))
"""
function DMPlexTopologyView(petsclib::PetscLibType, dm::PetscDM, viewer::PetscViewer) end

@for_petsc function DMPlexTopologyView(petsclib::$UnionPetscLib, dm::PetscDM, viewer::PetscViewer )

    @chk ccall(
               (:DMPlexTopologyView, $petsc_library),
               PetscErrorCode,
               (CDM, PetscViewer),
               dm, viewer,
              )


	return nothing
end 

"""
	DMPlexCoordinatesView(petsclib::PetscLibType,dm::PetscDM, viewer::PetscViewer) 
Saves `DMPLEX` coordinates into a file

Collective

Input Parameters:
- `dm`     - The `DM` whose coordinates are to be saved
- `viewer` - The `PetscViewer` for saving

Level: advanced

-seealso: [](ch_unstructured), `DM`, `DMPLEX`, `DMView()`, `DMPlexTopologyView()`, `DMPlexLabelsView()`, `DMPlexCoordinatesLoad()`, `PetscViewer`

# External Links
$(_doc_external("Dm/DMPlexCoordinatesView"))
"""
function DMPlexCoordinatesView(petsclib::PetscLibType, dm::PetscDM, viewer::PetscViewer) end

@for_petsc function DMPlexCoordinatesView(petsclib::$UnionPetscLib, dm::PetscDM, viewer::PetscViewer )

    @chk ccall(
               (:DMPlexCoordinatesView, $petsc_library),
               PetscErrorCode,
               (CDM, PetscViewer),
               dm, viewer,
              )


	return nothing
end 

"""
	DMPlexLabelsView(petsclib::PetscLibType,dm::PetscDM, viewer::PetscViewer) 
Saves `DMPLEX` labels into a file

Collective

Input Parameters:
- `dm`     - The `DM` whose labels are to be saved
- `viewer` - The `PetscViewer` for saving

Level: advanced

-seealso: [](ch_unstructured), `DM`, `DMPLEX`, `DMView()`, `DMPlexTopologyView()`, `DMPlexCoordinatesView()`, `DMPlexLabelsLoad()`, `PetscViewer`

# External Links
$(_doc_external("Dm/DMPlexLabelsView"))
"""
function DMPlexLabelsView(petsclib::PetscLibType, dm::PetscDM, viewer::PetscViewer) end

@for_petsc function DMPlexLabelsView(petsclib::$UnionPetscLib, dm::PetscDM, viewer::PetscViewer )

    @chk ccall(
               (:DMPlexLabelsView, $petsc_library),
               PetscErrorCode,
               (CDM, PetscViewer),
               dm, viewer,
              )


	return nothing
end 

"""
	DMPlexSectionView(petsclib::PetscLibType,dm::PetscDM, viewer::PetscViewer, sectiondm::PetscDM) 
Saves a section associated with a `DMPLEX`

Collective

Input Parameters:
- `dm`        - The `DM` that contains the topology on which the section to be saved is defined
- `viewer`    - The `PetscViewer` for saving
- `sectiondm` - The `DM` that contains the section to be saved, can be `NULL`

Level: advanced

-seealso: [](ch_unstructured), `DM`, `DMPLEX`, `DMView()`, `DMPlexTopologyView()`, `DMPlexCoordinatesView()`, `DMPlexLabelsView()`, `DMPlexGlobalVectorView()`, `DMPlexLocalVectorView()`, `PetscSectionView()`, `DMPlexSectionLoad()`, `PetscViewer`

# External Links
$(_doc_external("Dm/DMPlexSectionView"))
"""
function DMPlexSectionView(petsclib::PetscLibType, dm::PetscDM, viewer::PetscViewer, sectiondm::PetscDM) end

@for_petsc function DMPlexSectionView(petsclib::$UnionPetscLib, dm::PetscDM, viewer::PetscViewer, sectiondm::PetscDM )

    @chk ccall(
               (:DMPlexSectionView, $petsc_library),
               PetscErrorCode,
               (CDM, PetscViewer, CDM),
               dm, viewer, sectiondm,
              )


	return nothing
end 

"""
	DMPlexGlobalVectorView(petsclib::PetscLibType,dm::PetscDM, viewer::PetscViewer, sectiondm::PetscDM, vec::PetscVec) 
Saves a global vector

Collective

Input Parameters:
- `dm`        - The `DM` that represents the topology
- `viewer`    - The `PetscViewer` to save data with
- `sectiondm` - The `DM` that contains the global section on which vec is defined, can be `NULL`
- `vec`       - The global vector to be saved

Level: advanced

-seealso: [](ch_unstructured), `DM`, `DMPLEX`, `DMPlexTopologyView()`, `DMPlexSectionView()`, `DMPlexLocalVectorView()`, `DMPlexGlobalVectorLoad()`, `DMPlexLocalVectorLoad()`

# External Links
$(_doc_external("Dm/DMPlexGlobalVectorView"))
"""
function DMPlexGlobalVectorView(petsclib::PetscLibType, dm::PetscDM, viewer::PetscViewer, sectiondm::PetscDM, vec::PetscVec) end

@for_petsc function DMPlexGlobalVectorView(petsclib::$UnionPetscLib, dm::PetscDM, viewer::PetscViewer, sectiondm::PetscDM, vec::PetscVec )

    @chk ccall(
               (:DMPlexGlobalVectorView, $petsc_library),
               PetscErrorCode,
               (CDM, PetscViewer, CDM, CVec),
               dm, viewer, sectiondm, vec,
              )


	return nothing
end 

"""
	DMPlexLocalVectorView(petsclib::PetscLibType,dm::PetscDM, viewer::PetscViewer, sectiondm::PetscDM, vec::PetscVec) 
Saves a local vector

Collective

Input Parameters:
- `dm`        - The `DM` that represents the topology
- `viewer`    - The `PetscViewer` to save data with
- `sectiondm` - The `DM` that contains the local section on which `vec` is defined, can be `NULL`
- `vec`       - The local vector to be saved

Level: advanced

-seealso: [](ch_unstructured), `DM`, `DMPLEX`, `DMPlexTopologyView()`, `DMPlexSectionView()`, `DMPlexGlobalVectorView()`, `DMPlexGlobalVectorLoad()`, `DMPlexLocalVectorLoad()`

# External Links
$(_doc_external("Dm/DMPlexLocalVectorView"))
"""
function DMPlexLocalVectorView(petsclib::PetscLibType, dm::PetscDM, viewer::PetscViewer, sectiondm::PetscDM, vec::PetscVec) end

@for_petsc function DMPlexLocalVectorView(petsclib::$UnionPetscLib, dm::PetscDM, viewer::PetscViewer, sectiondm::PetscDM, vec::PetscVec )

    @chk ccall(
               (:DMPlexLocalVectorView, $petsc_library),
               PetscErrorCode,
               (CDM, PetscViewer, CDM, CVec),
               dm, viewer, sectiondm, vec,
              )


	return nothing
end 

"""
	DMPlexTopologyLoad(petsclib::PetscLibType,dm::PetscDM, viewer::PetscViewer, globalToLocalPointSF::PetscSF) 
Loads a topology into a `DMPLEX`

Collective

Input Parameters:
- `dm`     - The `DM` into which the topology is loaded
- `viewer` - The `PetscViewer` for the saved topology

Output Parameter:
- `globalToLocalPointSF` - The `PetscSF` that pushes points in [0, N) to the associated points in the loaded `DMPLEX`, where N is the global number of points;
`NULL` if unneeded

Level: advanced

-seealso: [](ch_unstructured), `DM`, `DMPLEX`, `DMLoad()`, `DMPlexCoordinatesLoad()`, `DMPlexLabelsLoad()`, `DMView()`, `PetscViewerHDF5Open()`, `PetscViewerPushFormat()`,
`PetscViewer`, `PetscSF`

# External Links
$(_doc_external("Dm/DMPlexTopologyLoad"))
"""
function DMPlexTopologyLoad(petsclib::PetscLibType, dm::PetscDM, viewer::PetscViewer, globalToLocalPointSF::PetscSF) end

@for_petsc function DMPlexTopologyLoad(petsclib::$UnionPetscLib, dm::PetscDM, viewer::PetscViewer, globalToLocalPointSF::PetscSF )

    @chk ccall(
               (:DMPlexTopologyLoad, $petsc_library),
               PetscErrorCode,
               (CDM, PetscViewer, Ptr{PetscSF}),
               dm, viewer, globalToLocalPointSF,
              )


	return nothing
end 

"""
	DMPlexCoordinatesLoad(petsclib::PetscLibType,dm::PetscDM, viewer::PetscViewer, globalToLocalPointSF::PetscSF) 
Loads coordinates into a `DMPLEX`

Collective

Input Parameters:
- `dm`                   - The `DM` into which the coordinates are loaded
- `viewer`               - The `PetscViewer` for the saved coordinates
- `globalToLocalPointSF` - The `PetscSF` returned by `DMPlexTopologyLoad()` when loading dm from viewer

Level: advanced

-seealso: [](ch_unstructured), `DM`, `DMPLEX`, `DMLoad()`, `DMPlexTopologyLoad()`, `DMPlexLabelsLoad()`, `DMView()`, `PetscViewerHDF5Open()`, `PetscViewerPushFormat()`,
`PetscSF`, `PetscViewer`

# External Links
$(_doc_external("Dm/DMPlexCoordinatesLoad"))
"""
function DMPlexCoordinatesLoad(petsclib::PetscLibType, dm::PetscDM, viewer::PetscViewer, globalToLocalPointSF::PetscSF) end

@for_petsc function DMPlexCoordinatesLoad(petsclib::$UnionPetscLib, dm::PetscDM, viewer::PetscViewer, globalToLocalPointSF::PetscSF )

    @chk ccall(
               (:DMPlexCoordinatesLoad, $petsc_library),
               PetscErrorCode,
               (CDM, PetscViewer, PetscSF),
               dm, viewer, globalToLocalPointSF,
              )


	return nothing
end 

"""
	DMPlexLabelsLoad(petsclib::PetscLibType,dm::PetscDM, viewer::PetscViewer, globalToLocalPointSF::PetscSF) 
Loads labels into a `DMPLEX`

Collective

Input Parameters:
- `dm`                   - The `DM` into which the labels are loaded
- `viewer`               - The `PetscViewer` for the saved labels
- `globalToLocalPointSF` - The `PetscSF` returned by `DMPlexTopologyLoad()` when loading `dm` from viewer

Level: advanced

-seealso: [](ch_unstructured), `DM`, `DMPLEX`, `DMLoad()`, `DMPlexTopologyLoad()`, `DMPlexCoordinatesLoad()`, `DMView()`, `PetscViewerHDF5Open()`, `PetscViewerPushFormat()`,
`PetscSF`, `PetscViewer`

# External Links
$(_doc_external("Dm/DMPlexLabelsLoad"))
"""
function DMPlexLabelsLoad(petsclib::PetscLibType, dm::PetscDM, viewer::PetscViewer, globalToLocalPointSF::PetscSF) end

@for_petsc function DMPlexLabelsLoad(petsclib::$UnionPetscLib, dm::PetscDM, viewer::PetscViewer, globalToLocalPointSF::PetscSF )

    @chk ccall(
               (:DMPlexLabelsLoad, $petsc_library),
               PetscErrorCode,
               (CDM, PetscViewer, PetscSF),
               dm, viewer, globalToLocalPointSF,
              )


	return nothing
end 

"""
	DMPlexSectionLoad(petsclib::PetscLibType,dm::PetscDM, viewer::PetscViewer, sectiondm::PetscDM, globalToLocalPointSF::PetscSF, globalDofSF::PetscSF, locDofSF::PetscSF) 
Loads section into a `DMPLEX`

Collective

Input Parameters:
- `dm`                   - The `DM` that represents the topology
- `viewer`               - The `PetscViewer` that represents the on-disk section (sectionA)
- `sectiondm`            - The `DM` into which the on-disk section (sectionA) is migrated, can be `NULL`
- `globalToLocalPointSF` - The `PetscSF` returned by `DMPlexTopologyLoad(`) when loading dm from viewer

Output Parameters:
- `globalDofSF` - The `PetscSF` that migrates any on-disk `Vec` data associated with sectionA into a global `Vec` associated with the `sectiondm`'s global section (`NULL` if not needed)
- `localDofSF`  - The `PetscSF` that migrates any on-disk `Vec` data associated with sectionA into a local `Vec` associated with the `sectiondm`'s local section (`NULL` if not needed)

Level: advanced

-seealso: [](ch_unstructured), `DM`, `DMPLEX`, `DMLoad()`, `DMPlexTopologyLoad()`, `DMPlexCoordinatesLoad()`, `DMPlexLabelsLoad()`, `DMPlexGlobalVectorLoad()`, `DMPlexLocalVectorLoad()`, `PetscSectionLoad()`, `DMPlexSectionView()`, `PetscSF`, `PetscViewer`

# External Links
$(_doc_external("Dm/DMPlexSectionLoad"))
"""
function DMPlexSectionLoad(petsclib::PetscLibType, dm::PetscDM, viewer::PetscViewer, sectiondm::PetscDM, globalToLocalPointSF::PetscSF, globalDofSF::PetscSF, locDofSF::PetscSF) end

@for_petsc function DMPlexSectionLoad(petsclib::$UnionPetscLib, dm::PetscDM, viewer::PetscViewer, sectiondm::PetscDM, globalToLocalPointSF::PetscSF, globalDofSF::PetscSF, locDofSF::PetscSF )

    @chk ccall(
               (:DMPlexSectionLoad, $petsc_library),
               PetscErrorCode,
               (CDM, PetscViewer, CDM, PetscSF, Ptr{PetscSF}, Ptr{PetscSF}),
               dm, viewer, sectiondm, globalToLocalPointSF, globalDofSF, locDofSF,
              )


	return nothing
end 

"""
	DMPlexGlobalVectorLoad(petsclib::PetscLibType,dm::PetscDM, viewer::PetscViewer, sectiondm::PetscDM, sf::PetscSF, vec::PetscVec) 
Loads on

Collective

Input Parameters:
- `dm`        - The `DM` that represents the topology
- `viewer`    - The `PetscViewer` that represents the on-disk vector data
- `sectiondm` - The `DM` that contains the global section on which vec is defined, can be `NULL`
- `sf`        - The `PetscSF` that migrates the on-disk vector data into vec
- `vec`       - The global vector to set values of

Level: advanced

-seealso: [](ch_unstructured), `DM`, `DMPLEX`, `DMPlexTopologyLoad()`, `DMPlexSectionLoad()`, `DMPlexLocalVectorLoad()`, `DMPlexGlobalVectorView()`, `DMPlexLocalVectorView()`,
`PetscSF`, `PetscViewer`

# External Links
$(_doc_external("Dm/DMPlexGlobalVectorLoad"))
"""
function DMPlexGlobalVectorLoad(petsclib::PetscLibType, dm::PetscDM, viewer::PetscViewer, sectiondm::PetscDM, sf::PetscSF, vec::PetscVec) end

@for_petsc function DMPlexGlobalVectorLoad(petsclib::$UnionPetscLib, dm::PetscDM, viewer::PetscViewer, sectiondm::PetscDM, sf::PetscSF, vec::PetscVec )

    @chk ccall(
               (:DMPlexGlobalVectorLoad, $petsc_library),
               PetscErrorCode,
               (CDM, PetscViewer, CDM, PetscSF, CVec),
               dm, viewer, sectiondm, sf, vec,
              )


	return nothing
end 

"""
	DMPlexLocalVectorLoad(petsclib::PetscLibType,dm::PetscDM, viewer::PetscViewer, sectiondm::PetscDM, sf::PetscSF, vec::PetscVec) 
Loads on

Collective

Input Parameters:
- `dm`        - The `DM` that represents the topology
- `viewer`    - The `PetscViewer` that represents the on-disk vector data
- `sectiondm` - The `DM` that contains the local section on which vec is defined, can be `NULL`
- `sf`        - The `PetscSF` that migrates the on-disk vector data into vec
- `vec`       - The local vector to set values of

Level: advanced

-seealso: [](ch_unstructured), `DM`, `DMPLEX`, `DMPlexTopologyLoad()`, `DMPlexSectionLoad()`, `DMPlexGlobalVectorLoad()`, `DMPlexGlobalVectorView()`, `DMPlexLocalVectorView()`,
`PetscSF`, `PetscViewer`

# External Links
$(_doc_external("Dm/DMPlexLocalVectorLoad"))
"""
function DMPlexLocalVectorLoad(petsclib::PetscLibType, dm::PetscDM, viewer::PetscViewer, sectiondm::PetscDM, sf::PetscSF, vec::PetscVec) end

@for_petsc function DMPlexLocalVectorLoad(petsclib::$UnionPetscLib, dm::PetscDM, viewer::PetscViewer, sectiondm::PetscDM, sf::PetscSF, vec::PetscVec )

    @chk ccall(
               (:DMPlexLocalVectorLoad, $petsc_library),
               PetscErrorCode,
               (CDM, PetscViewer, CDM, PetscSF, CVec),
               dm, viewer, sectiondm, sf, vec,
              )


	return nothing
end 

"""
	DMPlexGetSubdomainSection(petsclib::PetscLibType,dm::PetscDM, subsection::PetscSection) 
Returns the section associated with the subdomain

Not Collective

Input Parameter:
- `dm` - The `DMPLEX`

Output Parameter:
- `subsection` - The subdomain section

Level: developer

-seealso: [](ch_unstructured), `DM`, `DMPLEX`, `PetscSection`

# External Links
$(_doc_external("Dm/DMPlexGetSubdomainSection"))
"""
function DMPlexGetSubdomainSection(petsclib::PetscLibType, dm::PetscDM, subsection::PetscSection) end

@for_petsc function DMPlexGetSubdomainSection(petsclib::$UnionPetscLib, dm::PetscDM, subsection::PetscSection )

    @chk ccall(
               (:DMPlexGetSubdomainSection, $petsc_library),
               PetscErrorCode,
               (CDM, Ptr{PetscSection}),
               dm, subsection,
              )


	return nothing
end 

"""
	pStart::PetscInt,pEnd::PetscInt = DMPlexGetChart(petsclib::PetscLibType,dm::PetscDM) 
Return the interval for all mesh points [`pStart`, `pEnd`)

Not Collective

Input Parameter:
- `dm` - The `DMPLEX`

Output Parameters:
- `pStart` - The first mesh point
- `pEnd`   - The upper bound for mesh points

Level: beginner

-seealso: [](ch_unstructured), `DM`, `DMPLEX`, `DMPlexCreate()`, `DMPlexSetChart()`

# External Links
$(_doc_external("Dm/DMPlexGetChart"))
"""
function DMPlexGetChart(petsclib::PetscLibType, dm::PetscDM) end

@for_petsc function DMPlexGetChart(petsclib::$UnionPetscLib, dm::PetscDM )
	pStart_ = Ref{$PetscInt}()
	pEnd_ = Ref{$PetscInt}()

    @chk ccall(
               (:DMPlexGetChart, $petsc_library),
               PetscErrorCode,
               (CDM, Ptr{$PetscInt}, Ptr{$PetscInt}),
               dm, pStart_, pEnd_,
              )

	pStart = pStart_[]
	pEnd = pEnd_[]

	return pStart,pEnd
end 

"""
	DMPlexSetChart(petsclib::PetscLibType,dm::PetscDM, pStart::PetscInt, pEnd::PetscInt) 
Set the interval for all mesh points [`pStart`, `pEnd`)

Not Collective

Input Parameters:
- `dm`     - The `DMPLEX`
- `pStart` - The first mesh point
- `pEnd`   - The upper bound for mesh points

Level: beginner

-seealso: [](ch_unstructured), `DM`, `DMPLEX`, `DMPlexCreate()`, `DMPlexGetChart()`

# External Links
$(_doc_external("Dm/DMPlexSetChart"))
"""
function DMPlexSetChart(petsclib::PetscLibType, dm::PetscDM, pStart::PetscInt, pEnd::PetscInt) end

@for_petsc function DMPlexSetChart(petsclib::$UnionPetscLib, dm::PetscDM, pStart::$PetscInt, pEnd::$PetscInt )

    @chk ccall(
               (:DMPlexSetChart, $petsc_library),
               PetscErrorCode,
               (CDM, $PetscInt, $PetscInt),
               dm, pStart, pEnd,
              )


	return nothing
end 

"""
	size::PetscInt = DMPlexGetConeSize(petsclib::PetscLibType,dm::PetscDM, p::PetscInt) 
Return the number of in

Not Collective

Input Parameters:
- `dm` - The `DMPLEX`
- `p`  - The point, which must lie in the chart set with `DMPlexSetChart()`

Output Parameter:
- `size` - The cone size for point `p`

Level: beginner

-seealso: [](ch_unstructured), `DM`, `DMPLEX`, `DMPlexCreate()`, `DMPlexSetConeSize()`, `DMPlexSetChart()`

# External Links
$(_doc_external("Dm/DMPlexGetConeSize"))
"""
function DMPlexGetConeSize(petsclib::PetscLibType, dm::PetscDM, p::PetscInt) end

@for_petsc function DMPlexGetConeSize(petsclib::$UnionPetscLib, dm::PetscDM, p::$PetscInt )
	size_ = Ref{$PetscInt}()

    @chk ccall(
               (:DMPlexGetConeSize, $petsc_library),
               PetscErrorCode,
               (CDM, $PetscInt, Ptr{$PetscInt}),
               dm, p, size_,
              )

	size = size_[]

	return size
end 

"""
	DMPlexSetConeSize(petsclib::PetscLibType,dm::PetscDM, p::PetscInt, size::PetscInt) 
Set the number of in

Not Collective

Input Parameters:
- `dm`   - The `DMPLEX`
- `p`    - The point, which must lie in the chart set with `DMPlexSetChart()`
- `size` - The cone size for point `p`

Level: beginner

-seealso: [](ch_unstructured), `DM`, `DMPLEX`, `DMPlexSetCone()`, `DMPlexCreate()`, `DMPlexGetConeSize()`, `DMPlexSetChart()`

# External Links
$(_doc_external("Dm/DMPlexSetConeSize"))
"""
function DMPlexSetConeSize(petsclib::PetscLibType, dm::PetscDM, p::PetscInt, size::PetscInt) end

@for_petsc function DMPlexSetConeSize(petsclib::$UnionPetscLib, dm::PetscDM, p::$PetscInt, size::$PetscInt )

    @chk ccall(
               (:DMPlexSetConeSize, $petsc_library),
               PetscErrorCode,
               (CDM, $PetscInt, $PetscInt),
               dm, p, size,
              )


	return nothing
end 

"""
	cone::Vector{PetscInt} = DMPlexGetCone(petsclib::PetscLibType,dm::PetscDM, p::PetscInt) 
Return the points on the in

Not Collective

Input Parameters:
- `dm` - The `DMPLEX`
- `p`  - The point, which must lie in the chart set with `DMPlexSetChart()`

Output Parameter:
- `cone` - An array of points which are on the in-edges for point `p`, the length of `cone` is the result of `DMPlexGetConeSize()`

Level: beginner

-seealso: [](ch_unstructured), `DM`, `DMPLEX`, `DMPlexGetConeSize()`, `DMPlexSetCone()`, `DMPlexGetConeTuple()`, `DMPlexSetChart()`, `DMPlexRestoreCone()`

# External Links
$(_doc_external("Dm/DMPlexGetCone"))
"""
function DMPlexGetCone(petsclib::PetscLibType, dm::PetscDM, p::PetscInt) end

@for_petsc function DMPlexGetCone(petsclib::$UnionPetscLib, dm::PetscDM, p::$PetscInt )
	cone_ = Ref{Ptr{$PetscInt}}()

    @chk ccall(
               (:DMPlexGetCone, $petsc_library),
               PetscErrorCode,
               (CDM, $PetscInt, Ptr{Ptr{$PetscInt}}),
               dm, p, cone_,
              )

	cone = unsafe_wrap(Array, cone_[], VecGetLocalSize(petsclib, x); own = false)

	return cone
end 

"""
	DMPlexGetConeTuple(petsclib::PetscLibType,dm::PetscDM, p::IS, pConesSection::PetscSection, pCones::IS) 
Return the points on the in

Not Collective

Input Parameters:
- `dm` - The `DMPLEX`
- `p`  - The `IS` of points, which must lie in the chart set with `DMPlexSetChart()`

Output Parameters:
- `pConesSection` - `PetscSection` describing the layout of `pCones`
- `pCones`        - An `IS` containing the points which are on the in-edges for the point set `p`

Level: intermediate

-seealso: [](ch_unstructured), `DM`, `DMPLEX`, `DMPlexCreate()`, `DMPlexGetCone()`, `DMPlexGetConeRecursive()`, `DMPlexSetChart()`, `PetscSection`, `IS`

# External Links
$(_doc_external("Dm/DMPlexGetConeTuple"))
"""
function DMPlexGetConeTuple(petsclib::PetscLibType, dm::PetscDM, p::IS, pConesSection::PetscSection, pCones::IS) end

@for_petsc function DMPlexGetConeTuple(petsclib::$UnionPetscLib, dm::PetscDM, p::IS, pConesSection::PetscSection, pCones::IS )

    @chk ccall(
               (:DMPlexGetConeTuple, $petsc_library),
               PetscErrorCode,
               (CDM, IS, Ptr{PetscSection}, Ptr{IS}),
               dm, p, pConesSection, pCones,
              )


	return nothing
end 

"""
	DMPlexGetConeRecursiveVertices(petsclib::PetscLibType,dm::PetscDM, points::IS, expandedPoints::IS) 
Expand each given point into its cone points and do that recursively until we end up just with vertices.

Not Collective

Input Parameters:
- `dm`     - The `DMPLEX`
- `points` - The `IS` of points, which must lie in the chart set with `DMPlexSetChart()`

Output Parameter:
- `expandedPoints` - An `IS` containing the of vertices recursively expanded from input points

Level: advanced

-seealso: [](ch_unstructured), `DM`, `DMPLEX`, `DMPlexCreate()`, `DMPlexGetCone()`, `DMPlexGetConeTuple()`, `DMPlexGetConeRecursive()`, `DMPlexRestoreConeRecursive()`,
`DMPlexGetDepth()`, `IS`

# External Links
$(_doc_external("Dm/DMPlexGetConeRecursiveVertices"))
"""
function DMPlexGetConeRecursiveVertices(petsclib::PetscLibType, dm::PetscDM, points::IS, expandedPoints::IS) end

@for_petsc function DMPlexGetConeRecursiveVertices(petsclib::$UnionPetscLib, dm::PetscDM, points::IS, expandedPoints::IS )

    @chk ccall(
               (:DMPlexGetConeRecursiveVertices, $petsc_library),
               PetscErrorCode,
               (CDM, IS, Ptr{IS}),
               dm, points, expandedPoints,
              )


	return nothing
end 

"""
	depth::PetscInt = DMPlexGetConeRecursive(petsclib::PetscLibType,dm::PetscDM, points::IS, expandedPoints::Vector{IS}, sections::Vector{PetscSection}) 
Expand each given point into its cone points and do that recursively until we end up just with vertices
(DAG points of depth 0, i.e., without cones).

Not Collective

Input Parameters:
- `dm`     - The `DMPLEX`
- `points` - The `IS` of points, which must lie in the chart set with `DMPlexSetChart()`

Output Parameters:
- `depth`          - (optional) Size of the output arrays, equal to `DMPLEX` depth, returned by `DMPlexGetDepth()`
- `expandedPoints` - (optional) An array of index sets with recursively expanded cones
- `sections`       - (optional) An array of sections which describe mappings from points to their cone points

Level: advanced

-seealso: [](ch_unstructured), `DM`, `DMPLEX`, `DMPlexCreate()`, `DMPlexGetCone()`, `DMPlexGetConeTuple()`, `DMPlexRestoreConeRecursive()`, `DMPlexGetConeRecursiveVertices()`,
`DMPlexGetDepth()`, `PetscSection`, `IS`

# External Links
$(_doc_external("Dm/DMPlexGetConeRecursive"))
"""
function DMPlexGetConeRecursive(petsclib::PetscLibType, dm::PetscDM, points::IS, expandedPoints::Vector{IS}, sections::Vector{PetscSection}) end

@for_petsc function DMPlexGetConeRecursive(petsclib::$UnionPetscLib, dm::PetscDM, points::IS, expandedPoints::Vector{IS}, sections::Vector{PetscSection} )
	depth_ = Ref{$PetscInt}()
	expandedPoints_ = Ref(pointer(expandedPoints))
	sections_ = Ref(pointer(sections))

    @chk ccall(
               (:DMPlexGetConeRecursive, $petsc_library),
               PetscErrorCode,
               (CDM, IS, Ptr{$PetscInt}, Ptr{Ptr{IS}}, Ptr{Ptr{PetscSection}}),
               dm, points, depth_, expandedPoints_, sections_,
              )

	depth = depth_[]

	return depth
end 

"""
	depth::PetscInt = DMPlexRestoreConeRecursive(petsclib::PetscLibType,dm::PetscDM, points::IS, expandedPoints::Vector{IS}, sections::Vector{PetscSection}) 
Deallocates arrays created by `DMPlexGetConeRecursive()`

Not Collective

Input Parameters:
- `dm`     - The `DMPLEX`
- `points` - The `IS` of points, which must lie in the chart set with `DMPlexSetChart()`

Output Parameters:
- `depth`          - (optional) Size of the output arrays, equal to `DMPLEX` depth, returned by `DMPlexGetDepth()`
- `expandedPoints` - (optional) An array of recursively expanded cones
- `sections`       - (optional) An array of sections which describe mappings from points to their cone points

Level: advanced

-seealso: [](ch_unstructured), `DM`, `DMPLEX`, `DMPlexCreate()`, `DMPlexGetCone()`, `DMPlexGetConeTuple()`, `DMPlexGetConeRecursive()`, `DMPlexGetConeRecursiveVertices()`,
`DMPlexGetDepth()`, `IS`, `PetscSection`

# External Links
$(_doc_external("Dm/DMPlexRestoreConeRecursive"))
"""
function DMPlexRestoreConeRecursive(petsclib::PetscLibType, dm::PetscDM, points::IS, expandedPoints::Vector{IS}, sections::Vector{PetscSection}) end

@for_petsc function DMPlexRestoreConeRecursive(petsclib::$UnionPetscLib, dm::PetscDM, points::IS, expandedPoints::Vector{IS}, sections::Vector{PetscSection} )
	depth_ = Ref{$PetscInt}()
	expandedPoints_ = Ref(pointer(expandedPoints))
	sections_ = Ref(pointer(sections))

    @chk ccall(
               (:DMPlexRestoreConeRecursive, $petsc_library),
               PetscErrorCode,
               (CDM, IS, Ptr{$PetscInt}, Ptr{Ptr{IS}}, Ptr{Ptr{PetscSection}}),
               dm, points, depth_, expandedPoints_, sections_,
              )

	depth = depth_[]

	return depth
end 

"""
	DMPlexSetCone(petsclib::PetscLibType,dm::PetscDM, p::PetscInt, cone::Vector{PetscInt}) 
Set the points on the in

Not Collective

Input Parameters:
- `dm`   - The `DMPLEX`
- `p`    - The point, which must lie in the chart set with `DMPlexSetChart()`
- `cone` - An array of points which are on the in-edges for point `p`, its length must have been previously provided with `DMPlexSetConeSize()`

Level: beginner

-seealso: [](ch_unstructured), `DM`, `DMPLEX`, `DMPlexCreate()`, `DMPlexGetCone()`, `DMPlexSetChart()`, `DMPlexSetConeSize()`, `DMSetUp()`, `DMPlexSetSupport()`, `DMPlexSetSupportSize()`

# External Links
$(_doc_external("Dm/DMPlexSetCone"))
"""
function DMPlexSetCone(petsclib::PetscLibType, dm::PetscDM, p::PetscInt, cone::Vector{PetscInt}) end

@for_petsc function DMPlexSetCone(petsclib::$UnionPetscLib, dm::PetscDM, p::$PetscInt, cone::Vector{$PetscInt} )

    @chk ccall(
               (:DMPlexSetCone, $petsc_library),
               PetscErrorCode,
               (CDM, $PetscInt, Ptr{$PetscInt}),
               dm, p, cone,
              )


	return nothing
end 

"""
	coneOrientation::Vector{PetscInt} = DMPlexGetConeOrientation(petsclib::PetscLibType,dm::PetscDM, p::PetscInt) 
Return the orientations on the in

Not Collective

Input Parameters:
- `dm` - The `DMPLEX`
- `p`  - The point, which must lie in the chart set with `DMPlexSetChart()`

Output Parameter:
- `coneOrientation` - An array of orientations which are on the in-edges for point `p`. An orientation is an
integer giving the prescription for cone traversal. Its length is given by the result of `DMPlexSetConeSize()`

Level: beginner

-seealso: [](ch_unstructured), `DM`, `DMPLEX`, `DMPlexSetConeSize()`, `DMPolytopeTypeComposeOrientation()`, `DMPolytopeTypeComposeOrientationInv()`,
`DMPlexCreate()`, `DMPlexGetCone()`, `DMPlexSetCone()`, `DMPlexSetChart()`

# External Links
$(_doc_external("Dm/DMPlexGetConeOrientation"))
"""
function DMPlexGetConeOrientation(petsclib::PetscLibType, dm::PetscDM, p::PetscInt) end

@for_petsc function DMPlexGetConeOrientation(petsclib::$UnionPetscLib, dm::PetscDM, p::$PetscInt )
	coneOrientation_ = Ref{Ptr{$PetscInt}}()

    @chk ccall(
               (:DMPlexGetConeOrientation, $petsc_library),
               PetscErrorCode,
               (CDM, $PetscInt, Ptr{Ptr{$PetscInt}}),
               dm, p, coneOrientation_,
              )

	coneOrientation = unsafe_wrap(Array, coneOrientation_[], VecGetLocalSize(petsclib, x); own = false)

	return coneOrientation
end 

"""
	DMPlexSetConeOrientation(petsclib::PetscLibType,dm::PetscDM, p::PetscInt, coneOrientation::Vector{PetscInt}) 
Set the orientations on the in

Not Collective

Input Parameters:
- `dm`              - The `DMPLEX`
- `p`               - The point, which must lie in the chart set with `DMPlexSetChart()`
- `coneOrientation` - An array of orientations. Its length is given by the result of `DMPlexSetConeSize()`

Level: beginner

-seealso: [](ch_unstructured), `DM`, `DMPLEX`, `DMPlexCreate()`, `DMPlexGetConeOrientation()`, `DMPlexSetCone()`, `DMPlexSetChart()`, `DMPlexSetConeSize()`, `DMSetUp()`

# External Links
$(_doc_external("Dm/DMPlexSetConeOrientation"))
"""
function DMPlexSetConeOrientation(petsclib::PetscLibType, dm::PetscDM, p::PetscInt, coneOrientation::Vector{PetscInt}) end

@for_petsc function DMPlexSetConeOrientation(petsclib::$UnionPetscLib, dm::PetscDM, p::$PetscInt, coneOrientation::Vector{$PetscInt} )

    @chk ccall(
               (:DMPlexSetConeOrientation, $petsc_library),
               PetscErrorCode,
               (CDM, $PetscInt, Ptr{$PetscInt}),
               dm, p, coneOrientation,
              )


	return nothing
end 

"""
	DMPlexInsertCone(petsclib::PetscLibType,dm::PetscDM, p::PetscInt, conePos::PetscInt, conePoint::PetscInt) 
Insert a point into the in

Not Collective

Input Parameters:
- `dm`        - The `DMPLEX`
- `p`         - The point, which must lie in the chart set with `DMPlexSetChart()`
- `conePos`   - The local index in the cone where the point should be put
- `conePoint` - The mesh point to insert

Level: beginner

-seealso: [](ch_unstructured), `DM`, `DMPLEX`, `DMPlexCreate()`, `DMPlexGetCone()`, `DMPlexSetChart()`, `DMPlexSetConeSize()`, `DMSetUp()`

# External Links
$(_doc_external("Dm/DMPlexInsertCone"))
"""
function DMPlexInsertCone(petsclib::PetscLibType, dm::PetscDM, p::PetscInt, conePos::PetscInt, conePoint::PetscInt) end

@for_petsc function DMPlexInsertCone(petsclib::$UnionPetscLib, dm::PetscDM, p::$PetscInt, conePos::$PetscInt, conePoint::$PetscInt )

    @chk ccall(
               (:DMPlexInsertCone, $petsc_library),
               PetscErrorCode,
               (CDM, $PetscInt, $PetscInt, $PetscInt),
               dm, p, conePos, conePoint,
              )


	return nothing
end 

"""
	DMPlexInsertConeOrientation(petsclib::PetscLibType,dm::PetscDM, p::PetscInt, conePos::PetscInt, coneOrientation::PetscInt) 
Insert a point orientation for the in

Not Collective

Input Parameters:
- `dm`              - The `DMPLEX`
- `p`               - The point, which must lie in the chart set with `DMPlexSetChart()`
- `conePos`         - The local index in the cone where the point should be put
- `coneOrientation` - The point orientation to insert

Level: beginner

-seealso: [](ch_unstructured), `DM`, `DMPLEX`, `DMPlexCreate()`, `DMPlexGetCone()`, `DMPlexSetChart()`, `DMPlexSetConeSize()`, `DMSetUp()`

# External Links
$(_doc_external("Dm/DMPlexInsertConeOrientation"))
"""
function DMPlexInsertConeOrientation(petsclib::PetscLibType, dm::PetscDM, p::PetscInt, conePos::PetscInt, coneOrientation::PetscInt) end

@for_petsc function DMPlexInsertConeOrientation(petsclib::$UnionPetscLib, dm::PetscDM, p::$PetscInt, conePos::$PetscInt, coneOrientation::$PetscInt )

    @chk ccall(
               (:DMPlexInsertConeOrientation, $petsc_library),
               PetscErrorCode,
               (CDM, $PetscInt, $PetscInt, $PetscInt),
               dm, p, conePos, coneOrientation,
              )


	return nothing
end 

"""
	cone::Vector{PetscInt},ornt::Vector{PetscInt} = DMPlexGetOrientedCone(petsclib::PetscLibType,dm::PetscDM, p::PetscInt) 
Return the points and orientations on the in

Not collective

Input Parameters:
- `dm` - The DMPlex
- `p`  - The point, which must lie in the chart set with DMPlexSetChart()

Output Parameters:
- `cone` - An array of points which are on the in-edges for point `p`
- `ornt` - An array of orientations which are on the in-edges for point `p`. An orientation is an
integer giving the prescription for cone traversal.

Level: beginner

-seealso: [](ch_unstructured), `DM`, `DMPLEX`, `DMPlexRestoreOrientedCone()`, `DMPlexGetConeSize()`, `DMPlexGetCone()`, `DMPlexGetChart()`

# External Links
$(_doc_external("Dm/DMPlexGetOrientedCone"))
"""
function DMPlexGetOrientedCone(petsclib::PetscLibType, dm::PetscDM, p::PetscInt) end

@for_petsc function DMPlexGetOrientedCone(petsclib::$UnionPetscLib, dm::PetscDM, p::$PetscInt )
	cone_ = Ref{Ptr{$PetscInt}}()
	ornt_ = Ref{Ptr{$PetscInt}}()

    @chk ccall(
               (:DMPlexGetOrientedCone, $petsc_library),
               PetscErrorCode,
               (CDM, $PetscInt, Ptr{Ptr{$PetscInt}}, Ptr{Ptr{$PetscInt}}),
               dm, p, cone_, ornt_,
              )

	cone = unsafe_wrap(Array, cone_[], VecGetLocalSize(petsclib, x); own = false)
	ornt = unsafe_wrap(Array, ornt_[], VecGetLocalSize(petsclib, x); own = false)

	return cone,ornt
end 

"""
	DMPlexRestoreOrientedCone(petsclib::PetscLibType,dm::PetscDM, p::PetscInt, cone::Vector{PetscInt}, ornt::Vector{PetscInt}) 
Restore the points and orientations on the in

Not Collective

Input Parameters:
- `dm`   - The DMPlex
- `p`    - The point, which must lie in the chart set with `DMPlexSetChart()`
- `cone` - An array of points which are on the in-edges for point p
- `ornt` - An array of orientations which are on the in-edges for point `p`. An orientation is an
integer giving the prescription for cone traversal.

Level: beginner

-seealso: [](ch_unstructured), `DM`, `DMPLEX`, `DMPlexGetOrientedCone()`, `DMPlexGetConeSize()`, `DMPlexGetCone()`, `DMPlexGetChart()`

# External Links
$(_doc_external("Dm/DMPlexRestoreOrientedCone"))
"""
function DMPlexRestoreOrientedCone(petsclib::PetscLibType, dm::PetscDM, p::PetscInt, cone::Vector{PetscInt}, ornt::Vector{PetscInt}) end

@for_petsc function DMPlexRestoreOrientedCone(petsclib::$UnionPetscLib, dm::PetscDM, p::$PetscInt, cone::Vector{$PetscInt}, ornt::Vector{$PetscInt} )
	cone_ = Ref(pointer(cone))
	ornt_ = Ref(pointer(ornt))

    @chk ccall(
               (:DMPlexRestoreOrientedCone, $petsc_library),
               PetscErrorCode,
               (CDM, $PetscInt, Ptr{Ptr{$PetscInt}}, Ptr{Ptr{$PetscInt}}),
               dm, p, cone_, ornt_,
              )


	return nothing
end 

"""
	size::PetscInt = DMPlexGetSupportSize(petsclib::PetscLibType,dm::PetscDM, p::PetscInt) 
Return the number of out

Not Collective

Input Parameters:
- `dm` - The `DMPLEX`
- `p`  - The point, which must lie in the chart set with `DMPlexSetChart()`

Output Parameter:
- `size` - The support size for point `p`

Level: beginner

-seealso: [](ch_unstructured), `DM`, `DMPLEX`, `DMPlexCreate()`, `DMPlexSetConeSize()`, `DMPlexSetChart()`, `DMPlexGetConeSize()`

# External Links
$(_doc_external("Dm/DMPlexGetSupportSize"))
"""
function DMPlexGetSupportSize(petsclib::PetscLibType, dm::PetscDM, p::PetscInt) end

@for_petsc function DMPlexGetSupportSize(petsclib::$UnionPetscLib, dm::PetscDM, p::$PetscInt )
	size_ = Ref{$PetscInt}()

    @chk ccall(
               (:DMPlexGetSupportSize, $petsc_library),
               PetscErrorCode,
               (CDM, $PetscInt, Ptr{$PetscInt}),
               dm, p, size_,
              )

	size = size_[]

	return size
end 

"""
	DMPlexSetSupportSize(petsclib::PetscLibType,dm::PetscDM, p::PetscInt, size::PetscInt) 
Set the number of out

Not Collective

Input Parameters:
- `dm`   - The `DMPLEX`
- `p`    - The point, which must lie in the chart set with `DMPlexSetChart()`
- `size` - The support size for point `p`

Level: beginner

-seealso: [](ch_unstructured), `DM`, `DMPLEX`, `DMPlexCreate()`, `DMPlexGetSupportSize()`, `DMPlexSetChart()`

# External Links
$(_doc_external("Dm/DMPlexSetSupportSize"))
"""
function DMPlexSetSupportSize(petsclib::PetscLibType, dm::PetscDM, p::PetscInt, size::PetscInt) end

@for_petsc function DMPlexSetSupportSize(petsclib::$UnionPetscLib, dm::PetscDM, p::$PetscInt, size::$PetscInt )

    @chk ccall(
               (:DMPlexSetSupportSize, $petsc_library),
               PetscErrorCode,
               (CDM, $PetscInt, $PetscInt),
               dm, p, size,
              )


	return nothing
end 

"""
	support::Vector{PetscInt} = DMPlexGetSupport(petsclib::PetscLibType,dm::PetscDM, p::PetscInt) 
Return the points on the out

Not Collective

Input Parameters:
- `dm` - The `DMPLEX`
- `p`  - The point, which must lie in the chart set with `DMPlexSetChart()`

Output Parameter:
- `support` - An array of points which are on the out-edges for point `p`, its length is that obtained from `DMPlexGetSupportSize()`

Level: beginner

-seealso: [](ch_unstructured), `DM`, `DMPLEX`, `DMPlexGetSupportSize()`, `DMPlexSetSupport()`, `DMPlexGetCone()`, `DMPlexSetChart()`

# External Links
$(_doc_external("Dm/DMPlexGetSupport"))
"""
function DMPlexGetSupport(petsclib::PetscLibType, dm::PetscDM, p::PetscInt) end

@for_petsc function DMPlexGetSupport(petsclib::$UnionPetscLib, dm::PetscDM, p::$PetscInt )
	support_ = Ref{Ptr{$PetscInt}}()

    @chk ccall(
               (:DMPlexGetSupport, $petsc_library),
               PetscErrorCode,
               (CDM, $PetscInt, Ptr{Ptr{$PetscInt}}),
               dm, p, support_,
              )

	support = unsafe_wrap(Array, support_[], VecGetLocalSize(petsclib, x); own = false)

	return support
end 

"""
	DMPlexSetSupport(petsclib::PetscLibType,dm::PetscDM, p::PetscInt, support::Vector{PetscInt}) 
Set the points on the out

Not Collective

Input Parameters:
- `dm`      - The `DMPLEX`
- `p`       - The point, which must lie in the chart set with `DMPlexSetChart()`
- `support` - An array of points which are on the out-edges for point `p`, its length is that obtained from `DMPlexGetSupportSize()`

Level: beginner

-seealso: [](ch_unstructured), `DM`, `DMPLEX`, `DMPlexSetCone()`, `DMPlexSetConeSize()`, `DMPlexCreate()`, `DMPlexGetSupport()`, `DMPlexSetChart()`, `DMPlexSetSupportSize()`, `DMSetUp()`

# External Links
$(_doc_external("Dm/DMPlexSetSupport"))
"""
function DMPlexSetSupport(petsclib::PetscLibType, dm::PetscDM, p::PetscInt, support::Vector{PetscInt}) end

@for_petsc function DMPlexSetSupport(petsclib::$UnionPetscLib, dm::PetscDM, p::$PetscInt, support::Vector{$PetscInt} )

    @chk ccall(
               (:DMPlexSetSupport, $petsc_library),
               PetscErrorCode,
               (CDM, $PetscInt, Ptr{$PetscInt}),
               dm, p, support,
              )


	return nothing
end 

"""
	DMPlexInsertSupport(petsclib::PetscLibType,dm::PetscDM, p::PetscInt, supportPos::PetscInt, supportPoint::PetscInt) 
Insert a point into the out

Not Collective

Input Parameters:
- `dm`           - The `DMPLEX`
- `p`            - The point, which must lie in the chart set with `DMPlexSetChart()`
- `supportPos`   - The local index in the cone where the point should be put
- `supportPoint` - The mesh point to insert

Level: beginner

-seealso: [](ch_unstructured), `DM`, `DMPLEX`, `DMPlexCreate()`, `DMPlexGetCone()`, `DMPlexSetChart()`, `DMPlexSetConeSize()`, `DMSetUp()`

# External Links
$(_doc_external("Dm/DMPlexInsertSupport"))
"""
function DMPlexInsertSupport(petsclib::PetscLibType, dm::PetscDM, p::PetscInt, supportPos::PetscInt, supportPoint::PetscInt) end

@for_petsc function DMPlexInsertSupport(petsclib::$UnionPetscLib, dm::PetscDM, p::$PetscInt, supportPos::$PetscInt, supportPoint::$PetscInt )

    @chk ccall(
               (:DMPlexInsertSupport, $petsc_library),
               PetscErrorCode,
               (CDM, $PetscInt, $PetscInt, $PetscInt),
               dm, p, supportPos, supportPoint,
              )


	return nothing
end 

"""
	numPoints::PetscInt,points::Vector{PetscInt} = DMPlexGetTransitiveClosure(petsclib::PetscLibType,dm::PetscDM, p::PetscInt, useCone::PetscBool) 
Return the points on the transitive closure of the in

Not Collective

Input Parameters:
- `dm`      - The `DMPLEX`
- `p`       - The mesh point
- `useCone` - `PETSC_TRUE` for the closure, otherwise return the star

Input/Output Parameter:
- `points` - The points and point orientations, interleaved as pairs [p0, o0, p1, o1, ...];
if *points is `NULL` on input, internal storage will be returned, use `DMPlexRestoreTransitiveClosure()`,
otherwise the provided array is used to hold the values

Output Parameter:
- `numPoints` - The number of points in the closure, so `points` is of size 2*`numPoints`

Level: beginner

-seealso: [](ch_unstructured), `DM`, `DMPLEX`, `DMPlexRestoreTransitiveClosure()`, `DMPlexCreate()`, `DMPlexSetCone()`, `DMPlexSetChart()`, `DMPlexGetCone()`

# External Links
$(_doc_external("Dm/DMPlexGetTransitiveClosure"))
"""
function DMPlexGetTransitiveClosure(petsclib::PetscLibType, dm::PetscDM, p::PetscInt, useCone::PetscBool) end

@for_petsc function DMPlexGetTransitiveClosure(petsclib::$UnionPetscLib, dm::PetscDM, p::$PetscInt, useCone::PetscBool )
	numPoints_ = Ref{$PetscInt}()
	points_ = Ref{Ptr{$PetscInt}}()

    @chk ccall(
               (:DMPlexGetTransitiveClosure, $petsc_library),
               PetscErrorCode,
               (CDM, $PetscInt, PetscBool, Ptr{$PetscInt}, Ptr{Ptr{$PetscInt}}),
               dm, p, useCone, numPoints_, points_,
              )

	numPoints = numPoints_[]
	points = unsafe_wrap(Array, points_[], VecGetLocalSize(petsclib, x); own = false)

	return numPoints,points
end 

"""
	DMPlexRestoreTransitiveClosure(petsclib::PetscLibType,dm::PetscDM, p::PetscInt, useCone::PetscBool, numPoints::PetscInt, points::Vector{PetscInt}) 
Restore the array of points on the transitive closure of the in

Not Collective

Input Parameters:
- `dm`        - The `DMPLEX`
- `p`         - The mesh point
- `useCone`   - `PETSC_TRUE` for the closure, otherwise return the star
- `numPoints` - The number of points in the closure, so points[] is of size 2*`numPoints`
- `points`    - The points and point orientations, interleaved as pairs [p0, o0, p1, o1, ...]

Level: beginner

-seealso: [](ch_unstructured), `DM`, `DMPLEX`, `DMPlexGetTransitiveClosure()`, `DMPlexCreate()`, `DMPlexSetCone()`, `DMPlexSetChart()`, `DMPlexGetCone()`

# External Links
$(_doc_external("Dm/DMPlexRestoreTransitiveClosure"))
"""
function DMPlexRestoreTransitiveClosure(petsclib::PetscLibType, dm::PetscDM, p::PetscInt, useCone::PetscBool, numPoints::PetscInt, points::Vector{PetscInt}) end

@for_petsc function DMPlexRestoreTransitiveClosure(petsclib::$UnionPetscLib, dm::PetscDM, p::$PetscInt, useCone::PetscBool, numPoints::$PetscInt, points::Vector{$PetscInt} )
	points_ = Ref(pointer(points))

    @chk ccall(
               (:DMPlexRestoreTransitiveClosure, $petsc_library),
               PetscErrorCode,
               (CDM, $PetscInt, PetscBool, Ptr{$PetscInt}, Ptr{Ptr{$PetscInt}}),
               dm, p, useCone, numPoints, points_,
              )


	return nothing
end 

"""
	maxConeSize::PetscInt,maxSupportSize::PetscInt = DMPlexGetMaxSizes(petsclib::PetscLibType,dm::PetscDM) 
Return the maximum number of in

Not Collective

Input Parameter:
- `dm` - The `DMPLEX`

Output Parameters:
- `maxConeSize`    - The maximum number of in-edges
- `maxSupportSize` - The maximum number of out-edges

Level: beginner

-seealso: [](ch_unstructured), `DM`, `DMPLEX`, `DMPlexCreate()`, `DMPlexSetConeSize()`, `DMPlexSetChart()`

# External Links
$(_doc_external("Dm/DMPlexGetMaxSizes"))
"""
function DMPlexGetMaxSizes(petsclib::PetscLibType, dm::PetscDM) end

@for_petsc function DMPlexGetMaxSizes(petsclib::$UnionPetscLib, dm::PetscDM )
	maxConeSize_ = Ref{$PetscInt}()
	maxSupportSize_ = Ref{$PetscInt}()

    @chk ccall(
               (:DMPlexGetMaxSizes, $petsc_library),
               PetscErrorCode,
               (CDM, Ptr{$PetscInt}, Ptr{$PetscInt}),
               dm, maxConeSize_, maxSupportSize_,
              )

	maxConeSize = maxConeSize_[]
	maxSupportSize = maxSupportSize_[]

	return maxConeSize,maxSupportSize
end 

"""
	DMPlexSymmetrize(petsclib::PetscLibType,dm::PetscDM) 
Create support (out

Not Collective

Input Parameter:
- `dm` - The `DMPLEX`

Level: beginner

-seealso: [](ch_unstructured), `DM`, `DMPLEX`, `DMPlexCreate()`, `DMPlexSetChart()`, `DMPlexSetConeSize()`, `DMPlexSetCone()`

# External Links
$(_doc_external("Dm/DMPlexSymmetrize"))
"""
function DMPlexSymmetrize(petsclib::PetscLibType, dm::PetscDM) end

@for_petsc function DMPlexSymmetrize(petsclib::$UnionPetscLib, dm::PetscDM )

    @chk ccall(
               (:DMPlexSymmetrize, $petsc_library),
               PetscErrorCode,
               (CDM,),
               dm,
              )


	return nothing
end 

"""
	DMPlexStratify(petsclib::PetscLibType,dm::PetscDM) 
Computes the strata for all points in the `DMPLEX`

Collective

Input Parameter:
- `dm` - The `DMPLEX`

Level: beginner

-seealso: [](ch_unstructured), `DM`, `DMPLEX`, `DMPlexCreate()`, `DMPlexSymmetrize()`, `DMPlexComputeCellTypes()`

# External Links
$(_doc_external("Dm/DMPlexStratify"))
"""
function DMPlexStratify(petsclib::PetscLibType, dm::PetscDM) end

@for_petsc function DMPlexStratify(petsclib::$UnionPetscLib, dm::PetscDM )

    @chk ccall(
               (:DMPlexStratify, $petsc_library),
               PetscErrorCode,
               (CDM,),
               dm,
              )


	return nothing
end 

"""
	DMPlexComputeCellTypes(petsclib::PetscLibType,dm::PetscDM) 
Infer the polytope type of every cell using its dimension and cone size.

Collective

Input Parameter:
- `dm` - The `DMPLEX`

Level: developer

-seealso: [](ch_unstructured), `DM`, `DMPLEX`, `DMPlexCreate()`, `DMPlexSymmetrize()`, `DMPlexStratify()`, `DMGetLabel()`, `DMCreateLabel()`

# External Links
$(_doc_external("Dm/DMPlexComputeCellTypes"))
"""
function DMPlexComputeCellTypes(petsclib::PetscLibType, dm::PetscDM) end

@for_petsc function DMPlexComputeCellTypes(petsclib::$UnionPetscLib, dm::PetscDM )

    @chk ccall(
               (:DMPlexComputeCellTypes, $petsc_library),
               PetscErrorCode,
               (CDM,),
               dm,
              )


	return nothing
end 

"""
	numCoveredPoints::PetscInt,coveredPoints::Vector{PetscInt} = DMPlexGetJoin(petsclib::PetscLibType,dm::PetscDM, numPoints::PetscInt, points::Vector{PetscInt}) 
Get an array for the join of the set of points

Not Collective

Input Parameters:
- `dm`        - The `DMPLEX` object
- `numPoints` - The number of input points for the join
- `points`    - The input points

Output Parameters:
- `numCoveredPoints` - The number of points in the join
- `coveredPoints`    - The points in the join

Level: intermediate

-seealso: [](ch_unstructured), `DM`, `DMPLEX`, `DMPlexRestoreJoin()`, `DMPlexGetMeet()`

# External Links
$(_doc_external("Dm/DMPlexGetJoin"))
"""
function DMPlexGetJoin(petsclib::PetscLibType, dm::PetscDM, numPoints::PetscInt, points::Vector{PetscInt}) end

@for_petsc function DMPlexGetJoin(petsclib::$UnionPetscLib, dm::PetscDM, numPoints::$PetscInt, points::Vector{$PetscInt} )
	numCoveredPoints_ = Ref{$PetscInt}()
	coveredPoints_ = Ref{Ptr{$PetscInt}}()

    @chk ccall(
               (:DMPlexGetJoin, $petsc_library),
               PetscErrorCode,
               (CDM, $PetscInt, Ptr{$PetscInt}, Ptr{$PetscInt}, Ptr{Ptr{$PetscInt}}),
               dm, numPoints, points, numCoveredPoints_, coveredPoints_,
              )

	numCoveredPoints = numCoveredPoints_[]
	coveredPoints = unsafe_wrap(Array, coveredPoints_[], VecGetLocalSize(petsclib, x); own = false)

	return numCoveredPoints,coveredPoints
end 

"""
	numCoveredPoints::PetscInt,coveredPoints::Vector{PetscInt} = DMPlexRestoreJoin(petsclib::PetscLibType,dm::PetscDM, numPoints::PetscInt, points::Vector{PetscInt}) 
Restore an array for the join of the set of points obtained with `DMPlexGetJoin()`

Not Collective

Input Parameters:
- `dm`        - The `DMPLEX` object
- `numPoints` - The number of input points for the join
- `points`    - The input points

Output Parameters:
- `numCoveredPoints` - The number of points in the join
- `coveredPoints`    - The points in the join

Level: intermediate

-seealso: [](ch_unstructured), `DM`, `DMPLEX`, `DMPlexGetJoin()`, `DMPlexGetFullJoin()`, `DMPlexGetMeet()`

# External Links
$(_doc_external("Dm/DMPlexRestoreJoin"))
"""
function DMPlexRestoreJoin(petsclib::PetscLibType, dm::PetscDM, numPoints::PetscInt, points::Vector{PetscInt}) end

@for_petsc function DMPlexRestoreJoin(petsclib::$UnionPetscLib, dm::PetscDM, numPoints::$PetscInt, points::Vector{$PetscInt} )
	numCoveredPoints_ = Ref{$PetscInt}()
	coveredPoints_ = Ref{Ptr{$PetscInt}}()

    @chk ccall(
               (:DMPlexRestoreJoin, $petsc_library),
               PetscErrorCode,
               (CDM, $PetscInt, Ptr{$PetscInt}, Ptr{$PetscInt}, Ptr{Ptr{$PetscInt}}),
               dm, numPoints, points, numCoveredPoints_, coveredPoints_,
              )

	numCoveredPoints = numCoveredPoints_[]
	coveredPoints = unsafe_wrap(Array, coveredPoints_[], VecGetLocalSize(petsclib, x); own = false)

	return numCoveredPoints,coveredPoints
end 

"""
	numCoveredPoints::PetscInt,coveredPoints::Vector{PetscInt} = DMPlexGetFullJoin(petsclib::PetscLibType,dm::PetscDM, numPoints::PetscInt, points::Vector{PetscInt}) 
Get an array for the join of the set of points

Not Collective

Input Parameters:
- `dm`        - The `DMPLEX` object
- `numPoints` - The number of input points for the join
- `points`    - The input points, its length is `numPoints`

Output Parameters:
- `numCoveredPoints` - The number of points in the join
- `coveredPoints`    - The points in the join, its length is `numCoveredPoints`

Level: intermediate

-seealso: [](ch_unstructured), `DM`, `DMPLEX`, `DMPlexGetJoin()`, `DMPlexRestoreJoin()`, `DMPlexGetMeet()`

# External Links
$(_doc_external("Dm/DMPlexGetFullJoin"))
"""
function DMPlexGetFullJoin(petsclib::PetscLibType, dm::PetscDM, numPoints::PetscInt, points::Vector{PetscInt}) end

@for_petsc function DMPlexGetFullJoin(petsclib::$UnionPetscLib, dm::PetscDM, numPoints::$PetscInt, points::Vector{$PetscInt} )
	numCoveredPoints_ = Ref{$PetscInt}()
	coveredPoints_ = Ref{Ptr{$PetscInt}}()

    @chk ccall(
               (:DMPlexGetFullJoin, $petsc_library),
               PetscErrorCode,
               (CDM, $PetscInt, Ptr{$PetscInt}, Ptr{$PetscInt}, Ptr{Ptr{$PetscInt}}),
               dm, numPoints, points, numCoveredPoints_, coveredPoints_,
              )

	numCoveredPoints = numCoveredPoints_[]
	coveredPoints = unsafe_wrap(Array, coveredPoints_[], VecGetLocalSize(petsclib, x); own = false)

	return numCoveredPoints,coveredPoints
end 

"""
	numCoveringPoints::PetscInt,coveringPoints::Vector{PetscInt} = DMPlexGetMeet(petsclib::PetscLibType,dm::PetscDM, numPoints::PetscInt, points::Vector{PetscInt}) 
Get an array for the meet of the set of points

Not Collective

Input Parameters:
- `dm`        - The `DMPLEX` object
- `numPoints` - The number of input points for the meet
- `points`    - The input points, of length `numPoints`

Output Parameters:
- `numCoveringPoints` - The number of points in the meet
- `coveringPoints`    - The points in the meet, of length `numCoveringPoints`

Level: intermediate

-seealso: [](ch_unstructured), `DM`, `DMPLEX`, `DMPlexRestoreMeet()`, `DMPlexGetJoin()`

# External Links
$(_doc_external("Dm/DMPlexGetMeet"))
"""
function DMPlexGetMeet(petsclib::PetscLibType, dm::PetscDM, numPoints::PetscInt, points::Vector{PetscInt}) end

@for_petsc function DMPlexGetMeet(petsclib::$UnionPetscLib, dm::PetscDM, numPoints::$PetscInt, points::Vector{$PetscInt} )
	numCoveringPoints_ = Ref{$PetscInt}()
	coveringPoints_ = Ref{Ptr{$PetscInt}}()

    @chk ccall(
               (:DMPlexGetMeet, $petsc_library),
               PetscErrorCode,
               (CDM, $PetscInt, Ptr{$PetscInt}, Ptr{$PetscInt}, Ptr{Ptr{$PetscInt}}),
               dm, numPoints, points, numCoveringPoints_, coveringPoints_,
              )

	numCoveringPoints = numCoveringPoints_[]
	coveringPoints = unsafe_wrap(Array, coveringPoints_[], VecGetLocalSize(petsclib, x); own = false)

	return numCoveringPoints,coveringPoints
end 

"""
	numCoveredPoints::PetscInt,coveredPoints::Vector{PetscInt} = DMPlexRestoreMeet(petsclib::PetscLibType,dm::PetscDM, numPoints::PetscInt, points::Vector{PetscInt}) 
Restore an array for the meet of the set of points obtained with `DMPlexGetMeet()`

Not Collective

Input Parameters:
- `dm`        - The `DMPLEX` object
- `numPoints` - The number of input points for the meet
- `points`    - The input points

Output Parameters:
- `numCoveredPoints` - The number of points in the meet
- `coveredPoints`    - The points in the meet

Level: intermediate

-seealso: [](ch_unstructured), `DM`, `DMPLEX`, `DMPlexGetMeet()`, `DMPlexGetFullMeet()`, `DMPlexGetJoin()`

# External Links
$(_doc_external("Dm/DMPlexRestoreMeet"))
"""
function DMPlexRestoreMeet(petsclib::PetscLibType, dm::PetscDM, numPoints::PetscInt, points::Vector{PetscInt}) end

@for_petsc function DMPlexRestoreMeet(petsclib::$UnionPetscLib, dm::PetscDM, numPoints::$PetscInt, points::Vector{$PetscInt} )
	numCoveredPoints_ = Ref{$PetscInt}()
	coveredPoints_ = Ref{Ptr{$PetscInt}}()

    @chk ccall(
               (:DMPlexRestoreMeet, $petsc_library),
               PetscErrorCode,
               (CDM, $PetscInt, Ptr{$PetscInt}, Ptr{$PetscInt}, Ptr{Ptr{$PetscInt}}),
               dm, numPoints, points, numCoveredPoints_, coveredPoints_,
              )

	numCoveredPoints = numCoveredPoints_[]
	coveredPoints = unsafe_wrap(Array, coveredPoints_[], VecGetLocalSize(petsclib, x); own = false)

	return numCoveredPoints,coveredPoints
end 

"""
	numCoveredPoints::PetscInt,coveredPoints::Vector{PetscInt} = DMPlexGetFullMeet(petsclib::PetscLibType,dm::PetscDM, numPoints::PetscInt, points::Vector{PetscInt}) 
Get an array for the meet of the set of points

Not Collective

Input Parameters:
- `dm`        - The `DMPLEX` object
- `numPoints` - The number of input points for the meet
- `points`    - The input points, of length  `numPoints`

Output Parameters:
- `numCoveredPoints` - The number of points in the meet
- `coveredPoints`    - The points in the meet, of length  `numCoveredPoints`

Level: intermediate

-seealso: [](ch_unstructured), `DM`, `DMPLEX`, `DMPlexGetMeet()`, `DMPlexRestoreMeet()`, `DMPlexGetJoin()`

# External Links
$(_doc_external("Dm/DMPlexGetFullMeet"))
"""
function DMPlexGetFullMeet(petsclib::PetscLibType, dm::PetscDM, numPoints::PetscInt, points::Vector{PetscInt}) end

@for_petsc function DMPlexGetFullMeet(petsclib::$UnionPetscLib, dm::PetscDM, numPoints::$PetscInt, points::Vector{$PetscInt} )
	numCoveredPoints_ = Ref{$PetscInt}()
	coveredPoints_ = Ref{Ptr{$PetscInt}}()

    @chk ccall(
               (:DMPlexGetFullMeet, $petsc_library),
               PetscErrorCode,
               (CDM, $PetscInt, Ptr{$PetscInt}, Ptr{$PetscInt}, Ptr{Ptr{$PetscInt}}),
               dm, numPoints, points, numCoveredPoints_, coveredPoints_,
              )

	numCoveredPoints = numCoveredPoints_[]
	coveredPoints = unsafe_wrap(Array, coveredPoints_[], VecGetLocalSize(petsclib, x); own = false)

	return numCoveredPoints,coveredPoints
end 

"""
	equal::PetscBool = DMPlexEqual(petsclib::PetscLibType,dmA::PetscDM, dmB::PetscDM) 
Determine if two `DM` have the same topology

Not Collective

Input Parameters:
- `dmA` - A `DMPLEX` object
- `dmB` - A `DMPLEX` object

Output Parameter:
- `equal` - `PETSC_TRUE` if the topologies are identical

Level: intermediate

-seealso: [](ch_unstructured), `DM`, `DMPLEX`, `DMPlexGetCone()`

# External Links
$(_doc_external("Dm/DMPlexEqual"))
"""
function DMPlexEqual(petsclib::PetscLibType, dmA::PetscDM, dmB::PetscDM) end

@for_petsc function DMPlexEqual(petsclib::$UnionPetscLib, dmA::PetscDM, dmB::PetscDM )
	equal_ = Ref{PetscBool}()

    @chk ccall(
               (:DMPlexEqual, $petsc_library),
               PetscErrorCode,
               (CDM, CDM, Ptr{PetscBool}),
               dmA, dmB, equal_,
              )

	equal = equal_[]

	return equal
end 

"""
	numFaceVertices::PetscInt = DMPlexGetNumFaceVertices(petsclib::PetscLibType,dm::PetscDM, cellDim::PetscInt, numCorners::PetscInt) 
Returns the number of vertices on a face

Not Collective

Input Parameters:
- `dm`         - The `DMPLEX`
- `cellDim`    - The cell dimension
- `numCorners` - The number of vertices on a cell

Output Parameter:
- `numFaceVertices` - The number of vertices on a face

Level: developer

-seealso: [](ch_unstructured), `DM`, `DMPLEX`, `DMPlexGetCone()`

# External Links
$(_doc_external("Dm/DMPlexGetNumFaceVertices"))
"""
function DMPlexGetNumFaceVertices(petsclib::PetscLibType, dm::PetscDM, cellDim::PetscInt, numCorners::PetscInt) end

@for_petsc function DMPlexGetNumFaceVertices(petsclib::$UnionPetscLib, dm::PetscDM, cellDim::$PetscInt, numCorners::$PetscInt )
	numFaceVertices_ = Ref{$PetscInt}()

    @chk ccall(
               (:DMPlexGetNumFaceVertices, $petsc_library),
               PetscErrorCode,
               (CDM, $PetscInt, $PetscInt, Ptr{$PetscInt}),
               dm, cellDim, numCorners, numFaceVertices_,
              )

	numFaceVertices = numFaceVertices_[]

	return numFaceVertices
end 

"""
	DMPlexGetDepthLabel(petsclib::PetscLibType,dm::PetscDM, depthLabel::DMLabel) 
Get the `DMLabel` recording the depth of each point

Not Collective

Input Parameter:
- `dm` - The `DMPLEX` object

Output Parameter:
- `depthLabel` - The `DMLabel` recording point depth

Level: developer

-seealso: [](ch_unstructured), `DM`, `DMPLEX`, `DMPlexGetDepth()`, `DMPlexGetHeightStratum()`, `DMPlexGetDepthStratum()`, `DMPlexGetPointDepth()`,

# External Links
$(_doc_external("Dm/DMPlexGetDepthLabel"))
"""
function DMPlexGetDepthLabel(petsclib::PetscLibType, dm::PetscDM, depthLabel::DMLabel) end

@for_petsc function DMPlexGetDepthLabel(petsclib::$UnionPetscLib, dm::PetscDM, depthLabel::DMLabel )

    @chk ccall(
               (:DMPlexGetDepthLabel, $petsc_library),
               PetscErrorCode,
               (CDM, Ptr{DMLabel}),
               dm, depthLabel,
              )


	return nothing
end 

"""
	depth::PetscInt = DMPlexGetDepth(petsclib::PetscLibType,dm::PetscDM) 
Get the depth of the DAG representing this mesh

Not Collective

Input Parameter:
- `dm` - The `DMPLEX` object

Output Parameter:
- `depth` - The number of strata (breadth first levels) in the DAG

Level: developer

-seealso: [](ch_unstructured), `DM`, `DMPLEX`, `DMPlexGetDepthLabel()`, `DMPlexGetDepthStratum()`, `DMPlexGetPointDepth()`, `DMPlexSymmetrize()`

# External Links
$(_doc_external("Dm/DMPlexGetDepth"))
"""
function DMPlexGetDepth(petsclib::PetscLibType, dm::PetscDM) end

@for_petsc function DMPlexGetDepth(petsclib::$UnionPetscLib, dm::PetscDM )
	depth_ = Ref{$PetscInt}()

    @chk ccall(
               (:DMPlexGetDepth, $petsc_library),
               PetscErrorCode,
               (CDM, Ptr{$PetscInt}),
               dm, depth_,
              )

	depth = depth_[]

	return depth
end 

"""
	start::PetscInt,end_::PetscInt = DMPlexGetDepthStratum(petsclib::PetscLibType,dm::PetscDM, depth::PetscInt) 
Get the bounds [`start`, `end`) for all points at a certain depth.

Not Collective

Input Parameters:
- `dm`    - The `DMPLEX` object
- `depth` - The requested depth

Output Parameters:
- `start` - The first point at this `depth`
- `end`   - One beyond the last point at this `depth`

Level: developer

-seealso: [](ch_unstructured), `DM`, `DMPLEX`, `DMPlexGetHeightStratum()`, `DMPlexGetCellTypeStratum()`, `DMPlexGetDepth()`, `DMPlexGetDepthLabel()`, `DMPlexGetPointDepth()`, `DMPlexSymmetrize()`, `DMPlexInterpolate()`

# External Links
$(_doc_external("Dm/DMPlexGetDepthStratum"))
"""
function DMPlexGetDepthStratum(petsclib::PetscLibType, dm::PetscDM, depth::PetscInt) end

@for_petsc function DMPlexGetDepthStratum(petsclib::$UnionPetscLib, dm::PetscDM, depth::$PetscInt )
	start__ = Ref{$PetscInt}()
	end__ = Ref{$PetscInt}()

    @chk ccall(
               (:DMPlexGetDepthStratum, $petsc_library),
               PetscErrorCode,
               (CDM, $PetscInt, Ptr{$PetscInt}, Ptr{$PetscInt}),
               dm, depth, start__, end__,
              )

	start_ = start__[]
	end_ = end__[]

	return start_,end_
end 

"""
	start::PetscInt,end_::PetscInt = DMPlexGetHeightStratum(petsclib::PetscLibType,dm::PetscDM, height::PetscInt) 
Get the bounds [`start`, `end`) for all points at a certain height.

Not Collective

Input Parameters:
- `dm`     - The `DMPLEX` object
- `height` - The requested height

Output Parameters:
- `start` - The first point at this `height`
- `end`   - One beyond the last point at this `height`

Level: developer

-seealso: [](ch_unstructured), `DM`, `DMPLEX`, `DMPlexGetDepthStratum()`, `DMPlexGetCellTypeStratum()`, `DMPlexGetDepth()`, `DMPlexGetPointHeight()`

# External Links
$(_doc_external("Dm/DMPlexGetHeightStratum"))
"""
function DMPlexGetHeightStratum(petsclib::PetscLibType, dm::PetscDM, height::PetscInt) end

@for_petsc function DMPlexGetHeightStratum(petsclib::$UnionPetscLib, dm::PetscDM, height::$PetscInt )
	start_ = Ref{$PetscInt}()
	end__ = Ref{$PetscInt}()

    @chk ccall(
               (:DMPlexGetHeightStratum, $petsc_library),
               PetscErrorCode,
               (CDM, $PetscInt, Ptr{$PetscInt}, Ptr{$PetscInt}),
               dm, height, start_, end__,
              )

	start = start_[]
	end_ = end__[]

	return start,end_
end 

"""
	depth::PetscInt = DMPlexGetPointDepth(petsclib::PetscLibType,dm::PetscDM, point::PetscInt) 
Get the `depth` of a given point

Not Collective

Input Parameters:
- `dm`    - The `DMPLEX` object
- `point` - The point

Output Parameter:
- `depth` - The depth of the `point`

Level: intermediate

-seealso: [](ch_unstructured), `DM`, `DMPLEX`, `DMPlexGetCellType()`, `DMPlexGetDepthLabel()`, `DMPlexGetDepth()`, `DMPlexGetPointHeight()`

# External Links
$(_doc_external("Dm/DMPlexGetPointDepth"))
"""
function DMPlexGetPointDepth(petsclib::PetscLibType, dm::PetscDM, point::PetscInt) end

@for_petsc function DMPlexGetPointDepth(petsclib::$UnionPetscLib, dm::PetscDM, point::$PetscInt )
	depth_ = Ref{$PetscInt}()

    @chk ccall(
               (:DMPlexGetPointDepth, $petsc_library),
               PetscErrorCode,
               (CDM, $PetscInt, Ptr{$PetscInt}),
               dm, point, depth_,
              )

	depth = depth_[]

	return depth
end 

"""
	height::PetscInt = DMPlexGetPointHeight(petsclib::PetscLibType,dm::PetscDM, point::PetscInt) 
Get the `height` of a given point

Not Collective

Input Parameters:
- `dm`    - The `DMPLEX` object
- `point` - The point

Output Parameter:
- `height` - The height of the `point`

Level: intermediate

-seealso: [](ch_unstructured), `DM`, `DMPLEX`, `DMPlexGetCellType()`, `DMPlexGetDepthLabel()`, `DMPlexGetDepth()`, `DMPlexGetPointDepth()`

# External Links
$(_doc_external("Dm/DMPlexGetPointHeight"))
"""
function DMPlexGetPointHeight(petsclib::PetscLibType, dm::PetscDM, point::PetscInt) end

@for_petsc function DMPlexGetPointHeight(petsclib::$UnionPetscLib, dm::PetscDM, point::$PetscInt )
	height_ = Ref{$PetscInt}()

    @chk ccall(
               (:DMPlexGetPointHeight, $petsc_library),
               PetscErrorCode,
               (CDM, $PetscInt, Ptr{$PetscInt}),
               dm, point, height_,
              )

	height = height_[]

	return height
end 

"""
	celltypeLabel::DMLabel = DMPlexGetCellTypeLabel(petsclib::PetscLibType,dm::PetscDM) 
Get the `DMLabel` recording the polytope type of each cell

Not Collective

Input Parameter:
- `dm` - The `DMPLEX` object

Output Parameter:
- `celltypeLabel` - The `DMLabel` recording cell polytope type

Level: developer

-seealso: [](ch_unstructured), `DM`, `DMPLEX`, `DMPlexGetCellType()`, `DMPlexGetDepthLabel()`, `DMCreateLabel()`

# External Links
$(_doc_external("Dm/DMPlexGetCellTypeLabel"))
"""
function DMPlexGetCellTypeLabel(petsclib::PetscLibType, dm::PetscDM) end

@for_petsc function DMPlexGetCellTypeLabel(petsclib::$UnionPetscLib, dm::PetscDM )
	celltypeLabel_ = Ref{DMLabel}()

    @chk ccall(
               (:DMPlexGetCellTypeLabel, $petsc_library),
               PetscErrorCode,
               (CDM, Ptr{DMLabel}),
               dm, celltypeLabel_,
              )

	celltypeLabel = celltypeLabel_[]

	return celltypeLabel
end 

"""
	celltype::DMPolytopeType = DMPlexGetCellType(petsclib::PetscLibType,dm::PetscDM, cell::PetscInt) 
Get the polytope type of a given cell

Not Collective

Input Parameters:
- `dm`   - The `DMPLEX` object
- `cell` - The cell

Output Parameter:
- `celltype` - The polytope type of the cell

Level: intermediate

-seealso: [](ch_unstructured), `DM`, `DMPLEX`, `DMPolytopeType`, `DMPlexGetCellTypeLabel()`, `DMPlexGetDepthLabel()`, `DMPlexGetDepth()`

# External Links
$(_doc_external("Dm/DMPlexGetCellType"))
"""
function DMPlexGetCellType(petsclib::PetscLibType, dm::PetscDM, cell::PetscInt) end

@for_petsc function DMPlexGetCellType(petsclib::$UnionPetscLib, dm::PetscDM, cell::$PetscInt )
	celltype_ = Ref{DMPolytopeType}()

    @chk ccall(
               (:DMPlexGetCellType, $petsc_library),
               PetscErrorCode,
               (CDM, $PetscInt, Ptr{DMPolytopeType}),
               dm, cell, celltype_,
              )

	celltype = unsafe_string(celltype_[])

	return celltype
end 

"""
	DMPlexSetCellType(petsclib::PetscLibType,dm::PetscDM, cell::PetscInt, celltype::DMPolytopeType) 
Set the polytope type of a given cell

Not Collective

Input Parameters:
- `dm`       - The `DMPLEX` object
- `cell`     - The cell
- `celltype` - The polytope type of the cell

Level: advanced

-seealso: [](ch_unstructured), `DM`, `DMPLEX`, `DMPlexGetCellTypeLabel()`, `DMPlexGetDepthLabel()`, `DMPlexGetDepth()`, `DMPlexComputeCellTypes()`, `DMCreateLabel()`

# External Links
$(_doc_external("Dm/DMPlexSetCellType"))
"""
function DMPlexSetCellType(petsclib::PetscLibType, dm::PetscDM, cell::PetscInt, celltype::DMPolytopeType) end

@for_petsc function DMPlexSetCellType(petsclib::$UnionPetscLib, dm::PetscDM, cell::$PetscInt, celltype::DMPolytopeType )

    @chk ccall(
               (:DMPlexSetCellType, $petsc_library),
               PetscErrorCode,
               (CDM, $PetscInt, DMPolytopeType),
               dm, cell, celltype,
              )


	return nothing
end 

"""
	DMPlexGetConeSection(petsclib::PetscLibType,dm::PetscDM, section::PetscSection) 
Return a section which describes the layout of cone data

Not Collective

Input Parameter:
- `dm` - The `DMPLEX` object

Output Parameter:
- `section` - The `PetscSection` object

Level: developer

-seealso: [](ch_unstructured), `DM`, `DMPLEX`, `DMPlexGetSupportSection()`, `DMPlexGetCones()`, `DMPlexGetConeOrientations()`, `PetscSection`

# External Links
$(_doc_external("Dm/DMPlexGetConeSection"))
"""
function DMPlexGetConeSection(petsclib::PetscLibType, dm::PetscDM, section::PetscSection) end

@for_petsc function DMPlexGetConeSection(petsclib::$UnionPetscLib, dm::PetscDM, section::PetscSection )

    @chk ccall(
               (:DMPlexGetConeSection, $petsc_library),
               PetscErrorCode,
               (CDM, Ptr{PetscSection}),
               dm, section,
              )


	return nothing
end 

"""
	DMPlexGetSupportSection(petsclib::PetscLibType,dm::PetscDM, section::PetscSection) 
Return a section which describes the layout of support data

Not Collective

Input Parameter:
- `dm` - The `DMPLEX` object

Output Parameter:
- `section` - The `PetscSection` object

Level: developer

-seealso: [](ch_unstructured), `DM`, `DMPLEX`, `DMPlexGetConeSection()`, `PetscSection`

# External Links
$(_doc_external("Dm/DMPlexGetSupportSection"))
"""
function DMPlexGetSupportSection(petsclib::PetscLibType, dm::PetscDM, section::PetscSection) end

@for_petsc function DMPlexGetSupportSection(petsclib::$UnionPetscLib, dm::PetscDM, section::PetscSection )

    @chk ccall(
               (:DMPlexGetSupportSection, $petsc_library),
               PetscErrorCode,
               (CDM, Ptr{PetscSection}),
               dm, section,
              )


	return nothing
end 

"""
	cones::Vector{PetscInt} = DMPlexGetCones(petsclib::PetscLibType,dm::PetscDM) 
Return cone data

Not Collective

Input Parameter:
- `dm` - The `DMPLEX` object

Output Parameter:
- `cones` - The cone for each point

Level: developer

-seealso: [](ch_unstructured), `DM`, `DMPLEX`, `DMPlexGetConeSection()`

# External Links
$(_doc_external("Dm/DMPlexGetCones"))
"""
function DMPlexGetCones(petsclib::PetscLibType, dm::PetscDM) end

@for_petsc function DMPlexGetCones(petsclib::$UnionPetscLib, dm::PetscDM )
	cones_ = Ref{Ptr{$PetscInt}}()

    @chk ccall(
               (:DMPlexGetCones, $petsc_library),
               PetscErrorCode,
               (CDM, Ptr{Ptr{$PetscInt}}),
               dm, cones_,
              )

	cones = unsafe_wrap(Array, cones_[], VecGetLocalSize(petsclib, x); own = false)

	return cones
end 

"""
	coneOrientations::Vector{PetscInt} = DMPlexGetConeOrientations(petsclib::PetscLibType,dm::PetscDM) 
Return cone orientation data

Not Collective

Input Parameter:
- `dm` - The `DMPLEX` object

Output Parameter:
- `coneOrientations` - The array of cone orientations for all points

Level: developer

-seealso: [](ch_unstructured), `DM`, `DMPLEX`, `DMPlexGetConeSection()`, `DMPlexGetConeOrientation()`, `PetscSection`

# External Links
$(_doc_external("Dm/DMPlexGetConeOrientations"))
"""
function DMPlexGetConeOrientations(petsclib::PetscLibType, dm::PetscDM) end

@for_petsc function DMPlexGetConeOrientations(petsclib::$UnionPetscLib, dm::PetscDM )
	coneOrientations_ = Ref{Ptr{$PetscInt}}()

    @chk ccall(
               (:DMPlexGetConeOrientations, $petsc_library),
               PetscErrorCode,
               (CDM, Ptr{Ptr{$PetscInt}}),
               dm, coneOrientations_,
              )

	coneOrientations = unsafe_wrap(Array, coneOrientations_[], VecGetLocalSize(petsclib, x); own = false)

	return coneOrientations
end 

"""
	DMPlexSetClosurePermutationTensor(petsclib::PetscLibType,dm::PetscDM, point::PetscInt, section::PetscSection) 
Create a permutation from the default (BFS) point ordering in the closure, to a
lexicographic ordering over the tensor product cell (i.e., line, quad, hex, etc.), and set this permutation in the
section provided (or the section of the `DM`).

Input Parameters:
- `dm`      - The `DM`
- `point`   - Either a cell (highest dim point) or an edge (dim 1 point), or `PETSC_DETERMINE`
- `section` - The `PetscSection` to reorder, or `NULL` for the default section

Example:
A typical interpolated single-quad mesh might order points as
-seealso: [](ch_unstructured), `DM`, `DMPLEX`, `DMGetLocalSection()`, `PetscSectionSetClosurePermutation()`, `DMSetGlobalSection()`

# External Links
$(_doc_external("Dm/DMPlexSetClosurePermutationTensor"))
"""
function DMPlexSetClosurePermutationTensor(petsclib::PetscLibType, dm::PetscDM, point::PetscInt, section::PetscSection) end

@for_petsc function DMPlexSetClosurePermutationTensor(petsclib::$UnionPetscLib, dm::PetscDM, point::$PetscInt, section::PetscSection )

    @chk ccall(
               (:DMPlexSetClosurePermutationTensor, $petsc_library),
               PetscErrorCode,
               (CDM, $PetscInt, PetscSection),
               dm, point, section,
              )


	return nothing
end 

"""
	numPoints::PetscInt = DMPlexGetCompressedClosure(petsclib::PetscLibType,dm::PetscDM, section::PetscSection, point::PetscInt, ornt::PetscInt, points::PetscInt, clSec::PetscSection, clPoints::IS, clp::PetscInt) 

# External Links
$(_doc_external("Dm/DMPlexGetCompressedClosure"))
"""
function DMPlexGetCompressedClosure(petsclib::PetscLibType, dm::PetscDM, section::PetscSection, point::PetscInt, ornt::PetscInt, points::PetscInt, clSec::PetscSection, clPoints::IS, clp::PetscInt) end

@for_petsc function DMPlexGetCompressedClosure(petsclib::$UnionPetscLib, dm::PetscDM, section::PetscSection, point::$PetscInt, ornt::$PetscInt, points::$PetscInt, clSec::PetscSection, clPoints::IS, clp::$PetscInt )
	numPoints_ = Ref{$PetscInt}()

    @chk ccall(
               (:DMPlexGetCompressedClosure, $petsc_library),
               PetscErrorCode,
               (CDM, PetscSection, $PetscInt, $PetscInt, Ptr{$PetscInt}, $PetscInt, Ptr{PetscSection}, Ptr{IS}, $PetscInt),
               dm, section, point, ornt, numPoints_, points, clSec, clPoints, clp,
              )

	numPoints = numPoints_[]

	return numPoints
end 

"""
	numPoints::PetscInt = DMPlexRestoreCompressedClosure(petsclib::PetscLibType,dm::PetscDM, section::PetscSection, point::PetscInt, points::PetscInt, clSec::PetscSection, clPoints::IS, clp::PetscInt) 

# External Links
$(_doc_external("Dm/DMPlexRestoreCompressedClosure"))
"""
function DMPlexRestoreCompressedClosure(petsclib::PetscLibType, dm::PetscDM, section::PetscSection, point::PetscInt, points::PetscInt, clSec::PetscSection, clPoints::IS, clp::PetscInt) end

@for_petsc function DMPlexRestoreCompressedClosure(petsclib::$UnionPetscLib, dm::PetscDM, section::PetscSection, point::$PetscInt, points::$PetscInt, clSec::PetscSection, clPoints::IS, clp::$PetscInt )
	numPoints_ = Ref{$PetscInt}()

    @chk ccall(
               (:DMPlexRestoreCompressedClosure, $petsc_library),
               PetscErrorCode,
               (CDM, PetscSection, $PetscInt, Ptr{$PetscInt}, $PetscInt, Ptr{PetscSection}, Ptr{IS}, $PetscInt),
               dm, section, point, numPoints_, points, clSec, clPoints, clp,
              )

	numPoints = numPoints_[]

	return numPoints
end 

"""
	csize::PetscInt,values::Vector{PetscScalar} = DMPlexVecGetOrientedClosure(petsclib::PetscLibType,dm::PetscDM, section::PetscSection, useClPerm::PetscBool, v::PetscVec, point::PetscInt, ornt::PetscInt) 
Get an array of the values on the closure of 'point' with a given orientation, optionally applying the closure permutation.

Not collective

Input Parameters:
- `dm`        - The `DM`
- `section`   - The section describing the layout in `v`, or `NULL` to use the default section
- `useClPerm` - Flag for whether the provided closure permutation should be applied to the values
- `v`         - The local vector
- `point`     - The point in the `DM`
- `ornt`      - The orientation of the cell, an integer giving the prescription for cone traversal. Typically, this will be 0.

Input/Output Parameters:
- `csize`  - The size of the input values array, or `NULL`; on output the number of values in the closure
- `values` - An array to use for the values, or *values = `NULL` to have it allocated automatically;
if the user provided `NULL`, it is a borrowed array and should not be freed, use  `DMPlexVecRestoreClosure()` to return it

Level: advanced

-seealso: [](ch_unstructured), `DM`, `DMPLEX`, `DMPlexVecGetClosure()`, `DMPlexGetCellCoordinates()`, `DMPlexVecRestoreClosure()`, `DMPlexVecSetClosure()`

# External Links
$(_doc_external("Dm/DMPlexVecGetOrientedClosure"))
"""
function DMPlexVecGetOrientedClosure(petsclib::PetscLibType, dm::PetscDM, section::PetscSection, useClPerm::PetscBool, v::PetscVec, point::PetscInt, ornt::PetscInt) end

@for_petsc function DMPlexVecGetOrientedClosure(petsclib::$UnionPetscLib, dm::PetscDM, section::PetscSection, useClPerm::PetscBool, v::PetscVec, point::$PetscInt, ornt::$PetscInt )
	csize_ = Ref{$PetscInt}()
	values_ = Ref{Ptr{$PetscScalar}}()

    @chk ccall(
               (:DMPlexVecGetOrientedClosure, $petsc_library),
               PetscErrorCode,
               (CDM, PetscSection, PetscBool, CVec, $PetscInt, $PetscInt, Ptr{$PetscInt}, Ptr{Ptr{$PetscScalar}}),
               dm, section, useClPerm, v, point, ornt, csize_, values_,
              )

	csize = csize_[]
	values = unsafe_wrap(Array, values_[], VecGetLocalSize(petsclib, x); own = false)

	return csize,values
end 

"""
	csize::PetscInt,values::Vector{PetscScalar} = DMPlexVecGetClosure(petsclib::PetscLibType,dm::PetscDM, section::PetscSection, v::PetscVec, point::PetscInt) 
Get an array of the values on the closure of 'point'

Not collective

Input Parameters:
- `dm`      - The `DM`
- `section` - The section describing the layout in `v`, or `NULL` to use the default section
- `v`       - The local vector
- `point`   - The point in the `DM`

Input/Output Parameters:
- `csize`  - The size of the input values array, or `NULL`; on output the number of values in the closure
- `values` - An array to use for the values, or *values = `NULL` to have it allocated automatically;
if the user provided `NULL`, it is a borrowed array and should not be freed, use  `DMPlexVecRestoreClosure()` to return it

Level: intermediate

-seealso: [](ch_unstructured), `DM`, `DMPLEX`, `DMPlexVecRestoreClosure()`, `DMPlexVecSetClosure()`, `DMPlexMatSetClosure()`

# External Links
$(_doc_external("Dm/DMPlexVecGetClosure"))
"""
function DMPlexVecGetClosure(petsclib::PetscLibType, dm::PetscDM, section::PetscSection, v::PetscVec, point::PetscInt) end

@for_petsc function DMPlexVecGetClosure(petsclib::$UnionPetscLib, dm::PetscDM, section::PetscSection, v::PetscVec, point::$PetscInt )
	csize_ = Ref{$PetscInt}()
	values_ = Ref{Ptr{$PetscScalar}}()

    @chk ccall(
               (:DMPlexVecGetClosure, $petsc_library),
               PetscErrorCode,
               (CDM, PetscSection, CVec, $PetscInt, Ptr{$PetscInt}, Ptr{Ptr{$PetscScalar}}),
               dm, section, v, point, csize_, values_,
              )

	csize = csize_[]
	values = unsafe_wrap(Array, values_[], VecGetLocalSize(petsclib, x); own = false)

	return csize,values
end 

"""
	DMPlexVecRestoreClosure(petsclib::PetscLibType,dm::PetscDM, section::PetscSection, v::PetscVec, point::PetscInt, csize::PetscInt, values::Vector{PetscScalar}) 
Restore the array of the values on the closure of 'point' obtained with `DMPlexVecGetClosure()`

Not collective

Input Parameters:
- `dm`      - The `DM`
- `section` - The section describing the layout in `v`, or `NULL` to use the default section
- `v`       - The local vector
- `point`   - The point in the `DM`
- `csize`   - The number of values in the closure, or `NULL`
- `values`  - The array of values

Level: intermediate

-seealso: [](ch_unstructured), `DM`, `DMPLEX`, `DMPlexVecGetClosure()`, `DMPlexVecSetClosure()`, `DMPlexMatSetClosure()`

# External Links
$(_doc_external("Dm/DMPlexVecRestoreClosure"))
"""
function DMPlexVecRestoreClosure(petsclib::PetscLibType, dm::PetscDM, section::PetscSection, v::PetscVec, point::PetscInt, csize::PetscInt, values::Vector{PetscScalar}) end

@for_petsc function DMPlexVecRestoreClosure(petsclib::$UnionPetscLib, dm::PetscDM, section::PetscSection, v::PetscVec, point::$PetscInt, csize::$PetscInt, values::Vector{$PetscScalar} )
	values_ = Ref(pointer(values))

    @chk ccall(
               (:DMPlexVecRestoreClosure, $petsc_library),
               PetscErrorCode,
               (CDM, PetscSection, CVec, $PetscInt, Ptr{$PetscInt}, Ptr{Ptr{$PetscScalar}}),
               dm, section, v, point, csize, values_,
              )


	return nothing
end 

"""
	DMPlexVecSetClosure(petsclib::PetscLibType,dm::PetscDM, section::PetscSection, v::PetscVec, point::PetscInt, values::Vector{PetscScalar}, mode::InsertMode) 
Set an array of the values on the closure of `point`

Not collective

Input Parameters:
- `dm`      - The `DM`
- `section` - The section describing the layout in `v`, or `NULL` to use the default section
- `v`       - The local vector
- `point`   - The point in the `DM`
- `values`  - The array of values
- `mode`    - The insert mode. One of `INSERT_ALL_VALUES`, `ADD_ALL_VALUES`, `INSERT_VALUES`, `ADD_VALUES`, `INSERT_BC_VALUES`, and `ADD_BC_VALUES`,
where `INSERT_ALL_VALUES` and `ADD_ALL_VALUES` also overwrite boundary conditions.

Level: intermediate

-seealso: [](ch_unstructured), `DM`, `DMPLEX`, `DMPlexVecGetClosure()`, `DMPlexMatSetClosure()`

# External Links
$(_doc_external("Dm/DMPlexVecSetClosure"))
"""
function DMPlexVecSetClosure(petsclib::PetscLibType, dm::PetscDM, section::PetscSection, v::PetscVec, point::PetscInt, values::Vector{PetscScalar}, mode::InsertMode) end

@for_petsc function DMPlexVecSetClosure(petsclib::$UnionPetscLib, dm::PetscDM, section::PetscSection, v::PetscVec, point::$PetscInt, values::Vector{$PetscScalar}, mode::InsertMode )

    @chk ccall(
               (:DMPlexVecSetClosure, $petsc_library),
               PetscErrorCode,
               (CDM, PetscSection, CVec, $PetscInt, Ptr{$PetscScalar}, InsertMode),
               dm, section, v, point, values, mode,
              )


	return nothing
end 

"""
	numIndices::PetscInt,indices::Vector{PetscInt},outOffsets::Vector{PetscInt},values::Vector{PetscScalar} = DMPlexGetClosureIndices(petsclib::PetscLibType,dm::PetscDM, section::PetscSection, idxSection::PetscSection, point::PetscInt, useClPerm::PetscBool) 
Gets the global dof indices associated with the closure of the given point within the provided sections.

Not collective

Input Parameters:
- `dm`         - The `DM`
- `section`    - The `PetscSection` describing the points (a local section)
- `idxSection` - The `PetscSection` from which to obtain indices (may be local or global)
- `point`      - The point defining the closure
- `useClPerm`  - Use the closure point permutation if available

Output Parameters:
- `numIndices` - The number of dof indices in the closure of point with the input sections
- `indices`    - The dof indices
- `outOffsets` - Array, of length the number of fields plus 1, to write the field offsets into, or `NULL`
- `values`     - The input values, which may be modified if sign flips are induced by the point symmetries, or `NULL`

Level: advanced

-seealso: [](ch_unstructured), `DM`, `DMPLEX`, `DMPlexRestoreClosureIndices()`, `DMPlexVecGetClosure()`, `DMPlexMatSetClosure()`, `DMGetLocalSection()`,
`PetscSection`, `DMGetGlobalSection()`

# External Links
$(_doc_external("Dm/DMPlexGetClosureIndices"))
"""
function DMPlexGetClosureIndices(petsclib::PetscLibType, dm::PetscDM, section::PetscSection, idxSection::PetscSection, point::PetscInt, useClPerm::PetscBool) end

@for_petsc function DMPlexGetClosureIndices(petsclib::$UnionPetscLib, dm::PetscDM, section::PetscSection, idxSection::PetscSection, point::$PetscInt, useClPerm::PetscBool )
	numIndices_ = Ref{$PetscInt}()
	indices_ = Ref{Ptr{$PetscInt}}()
	outOffsets = Vector{$PetscInt}(undef, ni);  # CHECK SIZE!!
	values_ = Ref{Ptr{$PetscScalar}}()

    @chk ccall(
               (:DMPlexGetClosureIndices, $petsc_library),
               PetscErrorCode,
               (CDM, PetscSection, PetscSection, $PetscInt, PetscBool, Ptr{$PetscInt}, Ptr{Ptr{$PetscInt}}, Ptr{$PetscInt}, Ptr{Ptr{$PetscScalar}}),
               dm, section, idxSection, point, useClPerm, numIndices_, indices_, outOffsets, values_,
              )

	numIndices = numIndices_[]
	indices = unsafe_wrap(Array, indices_[], VecGetLocalSize(petsclib, x); own = false)
	values = unsafe_wrap(Array, values_[], VecGetLocalSize(petsclib, x); own = false)

	return numIndices,indices,outOffsets,values
end 

"""
	numIndices::PetscInt,indices::Vector{PetscInt},outOffsets::Vector{PetscInt},values::Vector{PetscScalar} = DMPlexRestoreClosureIndices(petsclib::PetscLibType,dm::PetscDM, section::PetscSection, idxSection::PetscSection, point::PetscInt, useClPerm::PetscBool) 
Restores the global dof indices associated with the closure of the given point within the provided sections.

Not collective

Input Parameters:
- `dm`         - The `DM`
- `section`    - The `PetscSection` describing the points (a local section)
- `idxSection` - The `PetscSection` from which to obtain indices (may be local or global)
- `point`      - The point defining the closure
- `useClPerm`  - Use the closure point permutation if available

Output Parameters:
- `numIndices` - The number of dof indices in the closure of point with the input sections
- `indices`    - The dof indices
- `outOffsets` - Array to write the field offsets into, or `NULL`
- `values`     - The input values, which may be modified if sign flips are induced by the point symmetries, or `NULL`

Level: advanced

-seealso: [](ch_unstructured), `DM`, `DMPLEX`, `DMPlexGetClosureIndices()`, `DMPlexVecGetClosure()`, `DMPlexMatSetClosure()`, `DMGetLocalSection()`, `DMGetGlobalSection()`

# External Links
$(_doc_external("Dm/DMPlexRestoreClosureIndices"))
"""
function DMPlexRestoreClosureIndices(petsclib::PetscLibType, dm::PetscDM, section::PetscSection, idxSection::PetscSection, point::PetscInt, useClPerm::PetscBool) end

@for_petsc function DMPlexRestoreClosureIndices(petsclib::$UnionPetscLib, dm::PetscDM, section::PetscSection, idxSection::PetscSection, point::$PetscInt, useClPerm::PetscBool )
	numIndices_ = Ref{$PetscInt}()
	indices_ = Ref{Ptr{$PetscInt}}()
	outOffsets = Vector{$PetscInt}(undef, ni);  # CHECK SIZE!!
	values_ = Ref{Ptr{$PetscScalar}}()

    @chk ccall(
               (:DMPlexRestoreClosureIndices, $petsc_library),
               PetscErrorCode,
               (CDM, PetscSection, PetscSection, $PetscInt, PetscBool, Ptr{$PetscInt}, Ptr{Ptr{$PetscInt}}, Ptr{$PetscInt}, Ptr{Ptr{$PetscScalar}}),
               dm, section, idxSection, point, useClPerm, numIndices_, indices_, outOffsets, values_,
              )

	numIndices = numIndices_[]
	indices = unsafe_wrap(Array, indices_[], VecGetLocalSize(petsclib, x); own = false)
	values = unsafe_wrap(Array, values_[], VecGetLocalSize(petsclib, x); own = false)

	return numIndices,indices,outOffsets,values
end 

"""
	DMPlexMatSetClosure(petsclib::PetscLibType,dm::PetscDM, section::PetscSection, globalSection::PetscSection, A::PetscMat, point::PetscInt, values::Vector{PetscScalar}, mode::InsertMode) 
Set an array of the values on the closure of 'point'

Not collective

Input Parameters:
- `dm`            - The `DM`
- `section`       - The section describing the layout in `v`, or `NULL` to use the default section
- `globalSection` - The section describing the layout in `v`, or `NULL` to use the default global section
- `A`             - The matrix
- `point`         - The point in the `DM`
- `values`        - The array of values
- `mode`          - The insert mode, where `INSERT_ALL_VALUES` and `ADD_ALL_VALUES` also overwrite boundary conditions

Level: intermediate

-seealso: [](ch_unstructured), `DM`, `DMPLEX`, `DMPlexMatSetClosureGeneral()`, `DMPlexVecGetClosure()`, `DMPlexVecSetClosure()`

# External Links
$(_doc_external("Dm/DMPlexMatSetClosure"))
"""
function DMPlexMatSetClosure(petsclib::PetscLibType, dm::PetscDM, section::PetscSection, globalSection::PetscSection, A::PetscMat, point::PetscInt, values::Vector{PetscScalar}, mode::InsertMode) end

@for_petsc function DMPlexMatSetClosure(petsclib::$UnionPetscLib, dm::PetscDM, section::PetscSection, globalSection::PetscSection, A::PetscMat, point::$PetscInt, values::Vector{$PetscScalar}, mode::InsertMode )

    @chk ccall(
               (:DMPlexMatSetClosure, $petsc_library),
               PetscErrorCode,
               (CDM, PetscSection, PetscSection, CMat, $PetscInt, Ptr{$PetscScalar}, InsertMode),
               dm, section, globalSection, A, point, values, mode,
              )


	return nothing
end 

"""
	DMPlexMatSetClosureGeneral(petsclib::PetscLibType,dmRow::PetscDM, sectionRow::PetscSection, globalSectionRow::PetscSection, useRowPerm::PetscBool, dmCol::PetscDM, sectionCol::PetscSection, globalSectionCol::PetscSection, useColPerm::PetscBool, A::PetscMat, point::PetscInt, values::Vector{PetscScalar}, mode::InsertMode) 
Set an array of the values on the closure of 'point' using a different row and column section

Not collective

Input Parameters:
- `dmRow`            - The `DM` for the row fields
- `sectionRow`       - The section describing the layout, or `NULL` to use the default section in `dmRow`
- `useRowPerm`       - The flag to use the closure permutation of the `dmRow` if available
- `globalSectionRow` - The section describing the layout, or `NULL` to use the default global section in `dmRow`
- `dmCol`            - The `DM` for the column fields
- `sectionCol`       - The section describing the layout, or `NULL` to use the default section in `dmCol`
- `useColPerm`       - The flag to use the closure permutation of the `dmCol` if available
- `globalSectionCol` - The section describing the layout, or `NULL` to use the default global section in `dmCol`
- `A`                - The matrix
- `point`            - The point in the `DM`
- `values`           - The array of values
- `mode`             - The insert mode, where `INSERT_ALL_VALUES` and `ADD_ALL_VALUES` also overwrite boundary conditions

Level: intermediate

-seealso: [](ch_unstructured), `DM`, `DMPLEX`, `DMPlexMatSetClosure()`, `DMPlexVecGetClosure()`, `DMPlexVecSetClosure()`

# External Links
$(_doc_external("Dm/DMPlexMatSetClosureGeneral"))
"""
function DMPlexMatSetClosureGeneral(petsclib::PetscLibType, dmRow::PetscDM, sectionRow::PetscSection, globalSectionRow::PetscSection, useRowPerm::PetscBool, dmCol::PetscDM, sectionCol::PetscSection, globalSectionCol::PetscSection, useColPerm::PetscBool, A::PetscMat, point::PetscInt, values::Vector{PetscScalar}, mode::InsertMode) end

@for_petsc function DMPlexMatSetClosureGeneral(petsclib::$UnionPetscLib, dmRow::PetscDM, sectionRow::PetscSection, globalSectionRow::PetscSection, useRowPerm::PetscBool, dmCol::PetscDM, sectionCol::PetscSection, globalSectionCol::PetscSection, useColPerm::PetscBool, A::PetscMat, point::$PetscInt, values::Vector{$PetscScalar}, mode::InsertMode )

    @chk ccall(
               (:DMPlexMatSetClosureGeneral, $petsc_library),
               PetscErrorCode,
               (CDM, PetscSection, PetscSection, PetscBool, CDM, PetscSection, PetscSection, PetscBool, CMat, $PetscInt, Ptr{$PetscScalar}, InsertMode),
               dmRow, sectionRow, globalSectionRow, useRowPerm, dmCol, sectionCol, globalSectionCol, useColPerm, A, point, values, mode,
              )


	return nothing
end 

"""
	DMPlexMatSetClosureRefined(petsclib::PetscLibType,dmf::PetscDM, fsection::PetscSection, globalFSection::PetscSection, dmc::PetscDM, csection::PetscSection, globalCSection::PetscSection, A::PetscMat, point::PetscInt, values::Vector{PetscScalar}, mode::InsertMode) 

# External Links
$(_doc_external("Dm/DMPlexMatSetClosureRefined"))
"""
function DMPlexMatSetClosureRefined(petsclib::PetscLibType, dmf::PetscDM, fsection::PetscSection, globalFSection::PetscSection, dmc::PetscDM, csection::PetscSection, globalCSection::PetscSection, A::PetscMat, point::PetscInt, values::Vector{PetscScalar}, mode::InsertMode) end

@for_petsc function DMPlexMatSetClosureRefined(petsclib::$UnionPetscLib, dmf::PetscDM, fsection::PetscSection, globalFSection::PetscSection, dmc::PetscDM, csection::PetscSection, globalCSection::PetscSection, A::PetscMat, point::$PetscInt, values::Vector{$PetscScalar}, mode::InsertMode )

    @chk ccall(
               (:DMPlexMatSetClosureRefined, $petsc_library),
               PetscErrorCode,
               (CDM, PetscSection, PetscSection, CDM, PetscSection, PetscSection, CMat, $PetscInt, Ptr{$PetscScalar}, InsertMode),
               dmf, fsection, globalFSection, dmc, csection, globalCSection, A, point, values, mode,
              )


	return nothing
end 

"""
	DMPlexMatGetClosureIndicesRefined(petsclib::PetscLibType,dmf::PetscDM, fsection::PetscSection, globalFSection::PetscSection, dmc::PetscDM, csection::PetscSection, globalCSection::PetscSection, point::PetscInt, cindices::Vector{PetscInt}, findices::Vector{PetscInt}) 

# External Links
$(_doc_external("Dm/DMPlexMatGetClosureIndicesRefined"))
"""
function DMPlexMatGetClosureIndicesRefined(petsclib::PetscLibType, dmf::PetscDM, fsection::PetscSection, globalFSection::PetscSection, dmc::PetscDM, csection::PetscSection, globalCSection::PetscSection, point::PetscInt, cindices::Vector{PetscInt}, findices::Vector{PetscInt}) end

@for_petsc function DMPlexMatGetClosureIndicesRefined(petsclib::$UnionPetscLib, dmf::PetscDM, fsection::PetscSection, globalFSection::PetscSection, dmc::PetscDM, csection::PetscSection, globalCSection::PetscSection, point::$PetscInt, cindices::Vector{$PetscInt}, findices::Vector{$PetscInt} )

    @chk ccall(
               (:DMPlexMatGetClosureIndicesRefined, $petsc_library),
               PetscErrorCode,
               (CDM, PetscSection, PetscSection, CDM, PetscSection, PetscSection, $PetscInt, Ptr{$PetscInt}, Ptr{$PetscInt}),
               dmf, fsection, globalFSection, dmc, csection, globalCSection, point, cindices, findices,
              )


	return nothing
end 

"""
	cellHeight::PetscInt = DMPlexGetVTKCellHeight(petsclib::PetscLibType,dm::PetscDM) 
Returns the height in the DAG used to determine which points are cells (normally 0)

Input Parameter:
- `dm` - The `DMPLEX` object

Output Parameter:
- `cellHeight` - The height of a cell

Level: developer

-seealso: [](ch_unstructured), `DM`, `DMPLEX`, `DMPlexSetVTKCellHeight()`

# External Links
$(_doc_external("Dm/DMPlexGetVTKCellHeight"))
"""
function DMPlexGetVTKCellHeight(petsclib::PetscLibType, dm::PetscDM) end

@for_petsc function DMPlexGetVTKCellHeight(petsclib::$UnionPetscLib, dm::PetscDM )
	cellHeight_ = Ref{$PetscInt}()

    @chk ccall(
               (:DMPlexGetVTKCellHeight, $petsc_library),
               PetscErrorCode,
               (CDM, Ptr{$PetscInt}),
               dm, cellHeight_,
              )

	cellHeight = cellHeight_[]

	return cellHeight
end 

"""
	DMPlexSetVTKCellHeight(petsclib::PetscLibType,dm::PetscDM, cellHeight::PetscInt) 
Sets the height in the DAG used to determine which points are cells (normally 0)

Input Parameters:
- `dm`         - The `DMPLEX` object
- `cellHeight` - The height of a cell

Level: developer

-seealso: [](ch_unstructured), `DM`, `DMPLEX`, `DMPlexGetVTKCellHeight()`

# External Links
$(_doc_external("Dm/DMPlexSetVTKCellHeight"))
"""
function DMPlexSetVTKCellHeight(petsclib::PetscLibType, dm::PetscDM, cellHeight::PetscInt) end

@for_petsc function DMPlexSetVTKCellHeight(petsclib::$UnionPetscLib, dm::PetscDM, cellHeight::$PetscInt )

    @chk ccall(
               (:DMPlexSetVTKCellHeight, $petsc_library),
               PetscErrorCode,
               (CDM, $PetscInt),
               dm, cellHeight,
              )


	return nothing
end 

"""
	start::PetscInt,end_::PetscInt = DMPlexGetCellTypeStratum(petsclib::PetscLibType,dm::PetscDM, ct::DMPolytopeType) 
Get the range of cells of a given celltype

Input Parameters:
- `dm` - The `DMPLEX` object
- `ct` - The `DMPolytopeType` of the cell

Output Parameters:
- `start` - The first cell of this type, or `NULL`
- `end`   - The upper bound on this celltype, or `NULL`

Level: advanced

-seealso: [](ch_unstructured), `DM`, `DMPLEX`, `DMPlexConstructGhostCells()`, `DMPlexGetDepthStratum()`, `DMPlexGetHeightStratum()`

# External Links
$(_doc_external("Dm/DMPlexGetCellTypeStratum"))
"""
function DMPlexGetCellTypeStratum(petsclib::PetscLibType, dm::PetscDM, ct::DMPolytopeType) end

@for_petsc function DMPlexGetCellTypeStratum(petsclib::$UnionPetscLib, dm::PetscDM, ct::DMPolytopeType )
	start_ = Ref{$PetscInt}()
	end__ = Ref{$PetscInt}()

    @chk ccall(
               (:DMPlexGetCellTypeStratum, $petsc_library),
               PetscErrorCode,
               (CDM, DMPolytopeType, Ptr{$PetscInt}, Ptr{$PetscInt}),
               dm, ct, start_, end__,
              )

	start = start_[]
	end_ = end__[]

	return start,end_
end 

"""
	gsize::PetscInt = DMPlexGetDepthStratumGlobalSize(petsclib::PetscLibType,dm::PetscDM, depth::PetscInt) 
Get the global size for a given depth stratum

Input Parameters:
- `dm`    - The `DMPLEX` object
- `depth` - The depth for the given point stratum

Output Parameter:
- `gsize` - The global number of points in the stratum

Level: advanced

-seealso: [](ch_unstructured), `DM`, `DMPLEX`, `DMPlexGetCellNumbering()`, `DMPlexGetVertexNumbering()`, `DMPlexGetDepthStratum()`, `DMPlexGetHeightStratum()`

# External Links
$(_doc_external("Dm/DMPlexGetDepthStratumGlobalSize"))
"""
function DMPlexGetDepthStratumGlobalSize(petsclib::PetscLibType, dm::PetscDM, depth::PetscInt) end

@for_petsc function DMPlexGetDepthStratumGlobalSize(petsclib::$UnionPetscLib, dm::PetscDM, depth::$PetscInt )
	gsize_ = Ref{$PetscInt}()

    @chk ccall(
               (:DMPlexGetDepthStratumGlobalSize, $petsc_library),
               PetscErrorCode,
               (CDM, $PetscInt, Ptr{$PetscInt}),
               dm, depth, gsize_,
              )

	gsize = gsize_[]

	return gsize
end 

"""
	globalCellNumbers::IS = DMPlexCreateCellNumbering(petsclib::PetscLibType,dm::PetscDM, includeAll::PetscBool) 
Get a global cell numbering for all cells on this process

Input Parameters:
- `dm`         - The `DMPLEX` object
- `includeAll` - Whether to include all cells, or just the simplex and box cells

Output Parameter:
- `globalCellNumbers` - Global cell numbers for all cells on this process

Level: developer

-seealso: [](ch_unstructured), `DM`, `DMPLEX`, `DMPlexGetCellNumbering()`, `DMPlexGetVertexNumbering()`

# External Links
$(_doc_external("Dm/DMPlexCreateCellNumbering"))
"""
function DMPlexCreateCellNumbering(petsclib::PetscLibType, dm::PetscDM, includeAll::PetscBool) end

@for_petsc function DMPlexCreateCellNumbering(petsclib::$UnionPetscLib, dm::PetscDM, includeAll::PetscBool )
	globalCellNumbers_ = Ref{IS}()

    @chk ccall(
               (:DMPlexCreateCellNumbering, $petsc_library),
               PetscErrorCode,
               (CDM, PetscBool, Ptr{IS}),
               dm, includeAll, globalCellNumbers_,
              )

	globalCellNumbers = globalCellNumbers_[]

	return globalCellNumbers
end 

"""
	DMPlexGetCellNumbering(petsclib::PetscLibType,dm::PetscDM, globalCellNumbers::IS) 
Get a global cell numbering for all cells on this process

Input Parameter:
- `dm` - The `DMPLEX` object

Output Parameter:
- `globalCellNumbers` - Global cell numbers for all cells on this process

Level: developer

-seealso: [](ch_unstructured), `DM`, `DMPLEX`, `DMPlexCreateCellNumbering()`, `DMPlexGetVertexNumbering()`

# External Links
$(_doc_external("Dm/DMPlexGetCellNumbering"))
"""
function DMPlexGetCellNumbering(petsclib::PetscLibType, dm::PetscDM, globalCellNumbers::IS) end

@for_petsc function DMPlexGetCellNumbering(petsclib::$UnionPetscLib, dm::PetscDM, globalCellNumbers::IS )

    @chk ccall(
               (:DMPlexGetCellNumbering, $petsc_library),
               PetscErrorCode,
               (CDM, Ptr{IS}),
               dm, globalCellNumbers,
              )


	return nothing
end 

"""
	DMPlexGetVertexNumbering(petsclib::PetscLibType,dm::PetscDM, globalVertexNumbers::IS) 
Get a global vertex numbering for all vertices on this process

Input Parameter:
- `dm` - The `DMPLEX` object

Output Parameter:
- `globalVertexNumbers` - Global vertex numbers for all vertices on this process

Level: developer

-seealso: [](ch_unstructured), `DM`, `DMPLEX`, `DMPlexGetCellNumbering()`

# External Links
$(_doc_external("Dm/DMPlexGetVertexNumbering"))
"""
function DMPlexGetVertexNumbering(petsclib::PetscLibType, dm::PetscDM, globalVertexNumbers::IS) end

@for_petsc function DMPlexGetVertexNumbering(petsclib::$UnionPetscLib, dm::PetscDM, globalVertexNumbers::IS )

    @chk ccall(
               (:DMPlexGetVertexNumbering, $petsc_library),
               PetscErrorCode,
               (CDM, Ptr{IS}),
               dm, globalVertexNumbers,
              )


	return nothing
end 

"""
	globalPointNumbers::IS = DMPlexCreatePointNumbering(petsclib::PetscLibType,dm::PetscDM) 
Create a global numbering for all points.

Collective

Input Parameter:
- `dm` - The `DMPLEX` object

Output Parameter:
- `globalPointNumbers` - Global numbers for all points on this process

Level: developer

-seealso: [](ch_unstructured), `DM`, `DMPLEX`, `DMPlexGetCellNumbering()`

# External Links
$(_doc_external("Dm/DMPlexCreatePointNumbering"))
"""
function DMPlexCreatePointNumbering(petsclib::PetscLibType, dm::PetscDM) end

@for_petsc function DMPlexCreatePointNumbering(petsclib::$UnionPetscLib, dm::PetscDM )
	globalPointNumbers_ = Ref{IS}()

    @chk ccall(
               (:DMPlexCreatePointNumbering, $petsc_library),
               PetscErrorCode,
               (CDM, Ptr{IS}),
               dm, globalPointNumbers_,
              )

	globalPointNumbers = globalPointNumbers_[]

	return globalPointNumbers
end 

"""
	globalEdgeNumbers::IS = DMPlexCreateEdgeNumbering(petsclib::PetscLibType,dm::PetscDM) 
Create a global numbering for edges.

Collective

Input Parameter:
- `dm` - The `DMPLEX` object

Output Parameter:
- `globalEdgeNumbers` - Global numbers for all edges on this process

Level: developer

-seealso: [](ch_unstructured), `DM`, `DMPLEX`, `DMPlexGetCellNumbering()`, `DMPlexGetVertexNumbering()`, `DMPlexCreatePointNumbering()`

# External Links
$(_doc_external("Dm/DMPlexCreateEdgeNumbering"))
"""
function DMPlexCreateEdgeNumbering(petsclib::PetscLibType, dm::PetscDM) end

@for_petsc function DMPlexCreateEdgeNumbering(petsclib::$UnionPetscLib, dm::PetscDM )
	globalEdgeNumbers_ = Ref{IS}()

    @chk ccall(
               (:DMPlexCreateEdgeNumbering, $petsc_library),
               PetscErrorCode,
               (CDM, Ptr{IS}),
               dm, globalEdgeNumbers_,
              )

	globalEdgeNumbers = globalEdgeNumbers_[]

	return globalEdgeNumbers
end 

"""
	ranks::PetscVec = DMPlexCreateRankField(petsclib::PetscLibType,dm::PetscDM) 
Create a cell field whose value is the rank of the owner

Input Parameter:
- `dm` - The `DMPLEX` object

Output Parameter:
- `ranks` - The rank field

Options Database Key:
- `-dm_partition_view` - Adds the rank field into the `DM` output from `-dm_view` using the same viewer

Level: intermediate

-seealso: [](ch_unstructured), `DM`, `DMPLEX`, `DMView()`

# External Links
$(_doc_external("Dm/DMPlexCreateRankField"))
"""
function DMPlexCreateRankField(petsclib::PetscLibType, dm::PetscDM) end

@for_petsc function DMPlexCreateRankField(petsclib::$UnionPetscLib, dm::PetscDM )
	ranks_ = Ref{CVec}()

    @chk ccall(
               (:DMPlexCreateRankField, $petsc_library),
               PetscErrorCode,
               (CDM, Ptr{CVec}),
               dm, ranks_,
              )

	ranks = PetscVec(ranks_[], petsclib)

	return ranks
end 

"""
	val::PetscVec = DMPlexCreateLabelField(petsclib::PetscLibType,dm::PetscDM, label::DMLabel) 
Create a field whose value is the label value for that point

Input Parameters:
- `dm`    - The `DMPLEX`
- `label` - The `DMLabel`

Output Parameter:
- `val` - The label value field

Options Database Key:
- `-dm_label_view` - Adds the label value field into the `DM` output from `-dm_view` using the same viewer

Level: intermediate

-seealso: [](ch_unstructured), `DM`, `DMPLEX`, `DMView()`

# External Links
$(_doc_external("Dm/DMPlexCreateLabelField"))
"""
function DMPlexCreateLabelField(petsclib::PetscLibType, dm::PetscDM, label::DMLabel) end

@for_petsc function DMPlexCreateLabelField(petsclib::$UnionPetscLib, dm::PetscDM, label::DMLabel )
	val_ = Ref{CVec}()

    @chk ccall(
               (:DMPlexCreateLabelField, $petsc_library),
               PetscErrorCode,
               (CDM, DMLabel, Ptr{CVec}),
               dm, label, val_,
              )

	val = PetscVec(val_[], petsclib)

	return val
end 

"""
	DMPlexCheckSymmetry(petsclib::PetscLibType,dm::PetscDM) 
Check that the adjacency information in the mesh is symmetric.

Input Parameter:
- `dm` - The `DMPLEX` object

Level: developer

-seealso: [](ch_unstructured), `DM`, `DMPLEX`, `DMCreate()`, `DMSetFromOptions()`

# External Links
$(_doc_external("Dm/DMPlexCheckSymmetry"))
"""
function DMPlexCheckSymmetry(petsclib::PetscLibType, dm::PetscDM) end

@for_petsc function DMPlexCheckSymmetry(petsclib::$UnionPetscLib, dm::PetscDM )

    @chk ccall(
               (:DMPlexCheckSymmetry, $petsc_library),
               PetscErrorCode,
               (CDM,),
               dm,
              )


	return nothing
end 

"""
	DMPlexCheckSkeleton(petsclib::PetscLibType,dm::PetscDM, cellHeight::PetscInt) 
Check that each cell has the correct number of vertices

Input Parameters:
- `dm`         - The `DMPLEX` object
- `cellHeight` - Normally 0

Level: developer

-seealso: [](ch_unstructured), `DM`, `DMPLEX`, `DMCreate()`, `DMSetFromOptions()`

# External Links
$(_doc_external("Dm/DMPlexCheckSkeleton"))
"""
function DMPlexCheckSkeleton(petsclib::PetscLibType, dm::PetscDM, cellHeight::PetscInt) end

@for_petsc function DMPlexCheckSkeleton(petsclib::$UnionPetscLib, dm::PetscDM, cellHeight::$PetscInt )

    @chk ccall(
               (:DMPlexCheckSkeleton, $petsc_library),
               PetscErrorCode,
               (CDM, $PetscInt),
               dm, cellHeight,
              )


	return nothing
end 

"""
	DMPlexCheckFaces(petsclib::PetscLibType,dm::PetscDM, cellHeight::PetscInt) 
Check that the faces of each cell give a vertex order this is consistent with what we expect from the cell type

Collective

Input Parameters:
- `dm`         - The `DMPLEX` object
- `cellHeight` - Normally 0

Level: developer

-seealso: [](ch_unstructured), `DM`, `DMPLEX`, `DMCreate()`, `DMPlexGetVTKCellHeight()`, `DMSetFromOptions()`

# External Links
$(_doc_external("Dm/DMPlexCheckFaces"))
"""
function DMPlexCheckFaces(petsclib::PetscLibType, dm::PetscDM, cellHeight::PetscInt) end

@for_petsc function DMPlexCheckFaces(petsclib::$UnionPetscLib, dm::PetscDM, cellHeight::$PetscInt )

    @chk ccall(
               (:DMPlexCheckFaces, $petsc_library),
               PetscErrorCode,
               (CDM, $PetscInt),
               dm, cellHeight,
              )


	return nothing
end 

"""
	DMPlexCheckGeometry(petsclib::PetscLibType,dm::PetscDM) 
Check the geometry of mesh cells

Input Parameter:
- `dm` - The `DMPLEX` object

Level: developer

-seealso: [](ch_unstructured), `DM`, `DMPLEX`, `DMCreate()`, `DMSetFromOptions()`

# External Links
$(_doc_external("Dm/DMPlexCheckGeometry"))
"""
function DMPlexCheckGeometry(petsclib::PetscLibType, dm::PetscDM) end

@for_petsc function DMPlexCheckGeometry(petsclib::$UnionPetscLib, dm::PetscDM )

    @chk ccall(
               (:DMPlexCheckGeometry, $petsc_library),
               PetscErrorCode,
               (CDM,),
               dm,
              )


	return nothing
end 

"""
	DMPlexCheckPointSF(petsclib::PetscLibType,dm::PetscDM, pointSF::PetscSF, allowExtraRoots::PetscBool) 
Check that several necessary conditions are met for the point `PetscSF` of this plex.

Collective

Input Parameters:
- `dm`              - The `DMPLEX` object
- `pointSF`         - The `PetscSF`, or `NULL` for `PointSF` attached to `DM`
- `allowExtraRoots` - Flag to allow extra points not present in the `DM`

Level: developer

-seealso: [](ch_unstructured), `DM`, `DMPLEX`, `DMGetPointSF()`, `DMSetFromOptions()`

# External Links
$(_doc_external("Dm/DMPlexCheckPointSF"))
"""
function DMPlexCheckPointSF(petsclib::PetscLibType, dm::PetscDM, pointSF::PetscSF, allowExtraRoots::PetscBool) end

@for_petsc function DMPlexCheckPointSF(petsclib::$UnionPetscLib, dm::PetscDM, pointSF::PetscSF, allowExtraRoots::PetscBool )

    @chk ccall(
               (:DMPlexCheckPointSF, $petsc_library),
               PetscErrorCode,
               (CDM, PetscSF, PetscBool),
               dm, pointSF, allowExtraRoots,
              )


	return nothing
end 

"""
	DMPlexCheckOrphanVertices(petsclib::PetscLibType,dm::PetscDM) 
Check that no vertices are disconnected from the mesh, unless the mesh only consists of disconnected vertices.

Collective

Input Parameter:
- `dm` - The `DMPLEX` object

Level: developer

-seealso: [](ch_unstructured), `DM`, `DMPLEX`, `DMPlexCheck()`, `DMSetFromOptions()`

# External Links
$(_doc_external("Dm/DMPlexCheckOrphanVertices"))
"""
function DMPlexCheckOrphanVertices(petsclib::PetscLibType, dm::PetscDM) end

@for_petsc function DMPlexCheckOrphanVertices(petsclib::$UnionPetscLib, dm::PetscDM )

    @chk ccall(
               (:DMPlexCheckOrphanVertices, $petsc_library),
               PetscErrorCode,
               (CDM,),
               dm,
              )


	return nothing
end 

"""
	DMPlexCheck(petsclib::PetscLibType,dm::PetscDM) 
Perform various checks of `DMPLEX` sanity

Input Parameter:
- `dm` - The `DMPLEX` object

Level: developer

-seealso: [](ch_unstructured), `DM`, `DMPLEX`, `DMCreate()`, `DMSetFromOptions()`

# External Links
$(_doc_external("Dm/DMPlexCheck"))
"""
function DMPlexCheck(petsclib::PetscLibType, dm::PetscDM) end

@for_petsc function DMPlexCheck(petsclib::$UnionPetscLib, dm::PetscDM )

    @chk ccall(
               (:DMPlexCheck, $petsc_library),
               PetscErrorCode,
               (CDM,),
               dm,
              )


	return nothing
end 

"""
	DMPlexCheckCellShape(petsclib::PetscLibType,dm::PetscDM, output::PetscBool, condLimit::PetscReal) 
Checks the Jacobian of the mapping from reference to real cells and computes some minimal statistics.

Collective

Input Parameters:
- `dm`        - The `DMPLEX` object
- `output`    - If true, statistics will be displayed on `stdout`
- `condLimit` - Display all cells above this condition number, or `PETSC_DETERMINE` for no cell output

Level: developer

-seealso: [](ch_unstructured), `DM`, `DMPLEX`, `DMSetFromOptions()`, `DMPlexComputeOrthogonalQuality()`

# External Links
$(_doc_external("Dm/DMPlexCheckCellShape"))
"""
function DMPlexCheckCellShape(petsclib::PetscLibType, dm::PetscDM, output::PetscBool, condLimit::PetscReal) end

@for_petsc function DMPlexCheckCellShape(petsclib::$UnionPetscLib, dm::PetscDM, output::PetscBool, condLimit::$PetscReal )

    @chk ccall(
               (:DMPlexCheckCellShape, $petsc_library),
               PetscErrorCode,
               (CDM, PetscBool, $PetscReal),
               dm, output, condLimit,
              )


	return nothing
end 

"""
	DMPlexComputeOrthogonalQuality(petsclib::PetscLibType,dm::PetscDM, fv::PetscFV, atol::PetscReal, OrthQual::PetscVec, OrthQualLabel::DMLabel) 
Compute cell
orthogonal quality below given tolerance.

Collective

Input Parameters:
- `dm`   - The `DMPLEX` object
- `fv`   - Optional `PetscFV` object for pre-computed cell/face centroid information
- `atol` - [0, 1] Absolute tolerance for tagging cells.

Output Parameters:
- `OrthQual`      - `Vec` containing orthogonal quality per cell
- `OrthQualLabel` - `DMLabel` tagging cells below atol with `DM_ADAPT_REFINE`

Options Database Keys:
- `-dm_plex_orthogonal_quality_label_view` - view OrthQualLabel if label is requested. Currently only `PETSCVIEWERASCII` is supported.
- `-dm_plex_orthogonal_quality_vec_view`   - view OrthQual vector.

Level: intermediate

-seealso: [](ch_unstructured), `DM`, `DMPLEX`, `DMPlexCheckCellShape()`, `DMCreateLabel()`, `PetscFV`, `DMLabel`, `Vec`

# External Links
$(_doc_external("Dm/DMPlexComputeOrthogonalQuality"))
"""
function DMPlexComputeOrthogonalQuality(petsclib::PetscLibType, dm::PetscDM, fv::PetscFV, atol::PetscReal, OrthQual::PetscVec, OrthQualLabel::DMLabel) end

@for_petsc function DMPlexComputeOrthogonalQuality(petsclib::$UnionPetscLib, dm::PetscDM, fv::PetscFV, atol::$PetscReal, OrthQual::PetscVec, OrthQualLabel::DMLabel )
	OrthQual_ = Ref(OrthQual.ptr)

    @chk ccall(
               (:DMPlexComputeOrthogonalQuality, $petsc_library),
               PetscErrorCode,
               (CDM, PetscFV, $PetscReal, Ptr{CVec}, Ptr{DMLabel}),
               dm, fv, atol, OrthQual_, OrthQualLabel,
              )

	OrthQual.ptr = C_NULL

	return nothing
end 

"""
	regular::PetscBool = DMPlexGetRegularRefinement(petsclib::PetscLibType,dm::PetscDM) 
Get the flag indicating that this mesh was obtained by regular refinement from its coarse mesh

Input Parameter:
- `dm` - The `DMPLEX` object

Output Parameter:
- `regular` - The flag

Level: intermediate

-seealso: [](ch_unstructured), `DM`, `DMPLEX`, `DMPlexSetRegularRefinement()`

# External Links
$(_doc_external("Dm/DMPlexGetRegularRefinement"))
"""
function DMPlexGetRegularRefinement(petsclib::PetscLibType, dm::PetscDM) end

@for_petsc function DMPlexGetRegularRefinement(petsclib::$UnionPetscLib, dm::PetscDM )
	regular_ = Ref{PetscBool}()

    @chk ccall(
               (:DMPlexGetRegularRefinement, $petsc_library),
               PetscErrorCode,
               (CDM, Ptr{PetscBool}),
               dm, regular_,
              )

	regular = regular_[]

	return regular
end 

"""
	DMPlexSetRegularRefinement(petsclib::PetscLibType,dm::PetscDM, regular::PetscBool) 
Set the flag indicating that this mesh was obtained by regular refinement from its coarse mesh

Input Parameters:
- `dm`      - The `DMPLEX` object
- `regular` - The flag

Level: intermediate

-seealso: [](ch_unstructured), `DM`, `DMPLEX`, `DMPlexGetRegularRefinement()`

# External Links
$(_doc_external("Dm/DMPlexSetRegularRefinement"))
"""
function DMPlexSetRegularRefinement(petsclib::PetscLibType, dm::PetscDM, regular::PetscBool) end

@for_petsc function DMPlexSetRegularRefinement(petsclib::$UnionPetscLib, dm::PetscDM, regular::PetscBool )

    @chk ccall(
               (:DMPlexSetRegularRefinement, $petsc_library),
               PetscErrorCode,
               (CDM, PetscBool),
               dm, regular,
              )


	return nothing
end 

"""
	DMPlexGetAnchors(petsclib::PetscLibType,dm::PetscDM, anchorSection::PetscSection, anchorIS::IS) 
Get the layout of the anchor (point
call DMPlexGetAnchors() directly: if there are anchors, then `DMPlexGetAnchors()` is called during `DMGetDefaultConstraints()`.

Not Collective

Input Parameter:
- `dm` - The `DMPLEX` object

Output Parameters:
- `anchorSection` - If not `NULL`, set to the section describing which points anchor the constrained points.
- `anchorIS`      - If not `NULL`, set to the list of anchors indexed by `anchorSection`

Level: intermediate

-seealso: [](ch_unstructured), `DM`, `DMPLEX`, `DMPlexSetAnchors()`, `DMGetDefaultConstraints()`, `DMSetDefaultConstraints()`, `IS`, `PetscSection`

# External Links
$(_doc_external("Dm/DMPlexGetAnchors"))
"""
function DMPlexGetAnchors(petsclib::PetscLibType, dm::PetscDM, anchorSection::PetscSection, anchorIS::IS) end

@for_petsc function DMPlexGetAnchors(petsclib::$UnionPetscLib, dm::PetscDM, anchorSection::PetscSection, anchorIS::IS )

    @chk ccall(
               (:DMPlexGetAnchors, $petsc_library),
               PetscErrorCode,
               (CDM, Ptr{PetscSection}, Ptr{IS}),
               dm, anchorSection, anchorIS,
              )


	return nothing
end 

"""
	DMPlexSetAnchors(petsclib::PetscLibType,dm::PetscDM, anchorSection::PetscSection, anchorIS::IS) 
Set the layout of the local anchor (point

Collective

Input Parameters:
- `dm`            - The `DMPLEX` object
- `anchorSection` - The section that describes the mapping from constrained points to the anchor points listed in anchorIS.
Must have a local communicator (`PETSC_COMM_SELF` or derivative).
- `anchorIS`      - The list of all anchor points.  Must have a local communicator (`PETSC_COMM_SELF` or derivative).

Level: intermediate

-seealso: [](ch_unstructured), `DM`, `DMPLEX`, `DMPlexGetAnchors()`, `DMGetDefaultConstraints()`, `DMSetDefaultConstraints()`

# External Links
$(_doc_external("Dm/DMPlexSetAnchors"))
"""
function DMPlexSetAnchors(petsclib::PetscLibType, dm::PetscDM, anchorSection::PetscSection, anchorIS::IS) end

@for_petsc function DMPlexSetAnchors(petsclib::$UnionPetscLib, dm::PetscDM, anchorSection::PetscSection, anchorIS::IS )

    @chk ccall(
               (:DMPlexSetAnchors, $petsc_library),
               PetscErrorCode,
               (CDM, PetscSection, IS),
               dm, anchorSection, anchorIS,
              )


	return nothing
end 

"""
	DMPlexMonitorThroughput(petsclib::PetscLibType,dm::PetscDM, dummy::Cvoid) 
Report the cell throughput of FE integration

Input Parameters:
- `dm`    - The `DM`
- `dummy` - unused argument

Options Database Key:
- `-dm_plex_monitor_throughput` - Activate the monitor

Level: developer

-seealso: [](ch_unstructured), `DM`, `DMPLEX`, `DMSetFromOptions()`, `DMPlexCreate()`

# External Links
$(_doc_external("Dm/DMPlexMonitorThroughput"))
"""
function DMPlexMonitorThroughput(petsclib::PetscLibType, dm::PetscDM, dummy::Cvoid) end

@for_petsc function DMPlexMonitorThroughput(petsclib::$UnionPetscLib, dm::PetscDM, dummy::Cvoid )

    @chk ccall(
               (:DMPlexMonitorThroughput, $petsc_library),
               PetscErrorCode,
               (CDM, Ptr{Cvoid}),
               dm, dummy,
              )


	return nothing
end 

"""
	DMPlexSetAdjacencyUser(petsclib::PetscLibType,dm::PetscDM, user::external, ctx::Cvoid) 
Define adjacency in the mesh using a user

Input Parameters:
- `dm`   - The DM object
- `user` - The user callback, may be `NULL` (to clear the callback)
- `ctx`  - context for callback evaluation, may be `NULL`

Level: advanced

-seealso: `DMPLEX`, `DMSetAdjacency()`, `DMPlexDistribute()`, `DMPlexPreallocateOperator()`, `DMPlexGetAdjacency()`, `DMPlexGetAdjacencyUser()`

# External Links
$(_doc_external("Dm/DMPlexSetAdjacencyUser"))
"""
function DMPlexSetAdjacencyUser(petsclib::PetscLibType, dm::PetscDM, user::external, ctx::Cvoid) end

@for_petsc function DMPlexSetAdjacencyUser(petsclib::$UnionPetscLib, dm::PetscDM, user::external, ctx::Cvoid )

    @chk ccall(
               (:DMPlexSetAdjacencyUser, $petsc_library),
               PetscErrorCode,
               (CDM, external, Ptr{Cvoid}),
               dm, user, ctx,
              )


	return nothing
end 

"""
	DMPlexSetAdjacencyUseAnchors(petsclib::PetscLibType,dm::PetscDM, useAnchors::PetscBool) 
Define adjacency in the mesh using the point

Input Parameters:
- `dm`         - The `DM` object
- `useAnchors` - Flag to use the constraints.  If PETSC_TRUE, then constrained points are omitted from DMPlexGetAdjacency(), and their anchor points appear in their place.

Level: intermediate

-seealso: `DMPLEX`, `DMGetAdjacency()`, `DMSetAdjacency()`, `DMPlexDistribute()`, `DMPlexPreallocateOperator()`, `DMPlexSetAnchors()`

# External Links
$(_doc_external("Dm/DMPlexSetAdjacencyUseAnchors"))
"""
function DMPlexSetAdjacencyUseAnchors(petsclib::PetscLibType, dm::PetscDM, useAnchors::PetscBool) end

@for_petsc function DMPlexSetAdjacencyUseAnchors(petsclib::$UnionPetscLib, dm::PetscDM, useAnchors::PetscBool )

    @chk ccall(
               (:DMPlexSetAdjacencyUseAnchors, $petsc_library),
               PetscErrorCode,
               (CDM, PetscBool),
               dm, useAnchors,
              )


	return nothing
end 

"""
	useAnchors::PetscBool = DMPlexGetAdjacencyUseAnchors(petsclib::PetscLibType,dm::PetscDM) 
Query whether adjacency in the mesh uses the point

Input Parameter:
- `dm` - The `DM` object

Output Parameter:
- `useAnchors` - Flag to use the closure.  If PETSC_TRUE, then constrained points are omitted from DMPlexGetAdjacency(), and their anchor points appear in their place.

Level: intermediate

-seealso: `DMPLEX`, `DMPlexSetAdjacencyUseAnchors()`, `DMSetAdjacency()`, `DMGetAdjacency()`, `DMPlexDistribute()`, `DMPlexPreallocateOperator()`, `DMPlexSetAnchors()`

# External Links
$(_doc_external("Dm/DMPlexGetAdjacencyUseAnchors"))
"""
function DMPlexGetAdjacencyUseAnchors(petsclib::PetscLibType, dm::PetscDM) end

@for_petsc function DMPlexGetAdjacencyUseAnchors(petsclib::$UnionPetscLib, dm::PetscDM )
	useAnchors_ = Ref{PetscBool}()

    @chk ccall(
               (:DMPlexGetAdjacencyUseAnchors, $petsc_library),
               PetscErrorCode,
               (CDM, Ptr{PetscBool}),
               dm, useAnchors_,
              )

	useAnchors = useAnchors_[]

	return useAnchors
end 

"""
	adjSize::PetscInt,adj::Vector{PetscInt} = DMPlexGetAdjacency(petsclib::PetscLibType,dm::PetscDM, p::PetscInt) 
Return all points adjacent to the given point

Input Parameters:
- `dm` - The `DM` object
- `p`  - The point

Input/Output Parameters:
- `adjSize` - The maximum size of `adj` if it is non-`NULL`, or `PETSC_DETERMINE`;
on output the number of adjacent points
- `adj`     - Either `NULL` so that the array is allocated, or an existing array with size `adjSize`;
on output contains the adjacent points

Level: advanced

-seealso: `DMPLEX`, `DMSetAdjacency()`, `DMPlexDistribute()`, `DMCreateMatrix()`, `DMPlexPreallocateOperator()`

# External Links
$(_doc_external("Dm/DMPlexGetAdjacency"))
"""
function DMPlexGetAdjacency(petsclib::PetscLibType, dm::PetscDM, p::PetscInt) end

@for_petsc function DMPlexGetAdjacency(petsclib::$UnionPetscLib, dm::PetscDM, p::$PetscInt )
	adjSize_ = Ref{$PetscInt}()
	adj_ = Ref{Ptr{$PetscInt}}()

    @chk ccall(
               (:DMPlexGetAdjacency, $petsc_library),
               PetscErrorCode,
               (CDM, $PetscInt, Ptr{$PetscInt}, Ptr{Ptr{$PetscInt}}),
               dm, p, adjSize_, adj_,
              )

	adjSize = adjSize_[]
	adj = unsafe_wrap(Array, adj_[], VecGetLocalSize(petsclib, x); own = false)

	return adjSize,adj
end 

"""
	processRanks::IS,sfProcess::PetscSF = DMPlexCreateTwoSidedProcessSF(petsclib::PetscLibType,dm::PetscDM, sfPoint::PetscSF, rootRankSection::PetscSection, rootRanks::IS, leafRankSection::PetscSection, leafRanks::IS) 
Create an `PetscSF` which just has process connectivity

Collective

Input Parameters:
- `dm`              - The `DM`
- `sfPoint`         - The `PetscSF` which encodes point connectivity
- `rootRankSection` - to be documented
- `rootRanks`       - to be documented
- `leafRankSection` - to be documented
- `leafRanks`       - to be documented

Output Parameters:
- `processRanks` - A list of process neighbors, or `NULL`
- `sfProcess`    - An `PetscSF` encoding the two-sided process connectivity, or `NULL`

Level: developer

-seealso: `DMPLEX`, `PetscSFCreate()`, `DMPlexCreateProcessSF()`

# External Links
$(_doc_external("Dm/DMPlexCreateTwoSidedProcessSF"))
"""
function DMPlexCreateTwoSidedProcessSF(petsclib::PetscLibType, dm::PetscDM, sfPoint::PetscSF, rootRankSection::PetscSection, rootRanks::IS, leafRankSection::PetscSection, leafRanks::IS) end

@for_petsc function DMPlexCreateTwoSidedProcessSF(petsclib::$UnionPetscLib, dm::PetscDM, sfPoint::PetscSF, rootRankSection::PetscSection, rootRanks::IS, leafRankSection::PetscSection, leafRanks::IS )
	processRanks_ = Ref{IS}()
	sfProcess_ = Ref{PetscSF}()

    @chk ccall(
               (:DMPlexCreateTwoSidedProcessSF, $petsc_library),
               PetscErrorCode,
               (CDM, PetscSF, PetscSection, IS, PetscSection, IS, Ptr{IS}, Ptr{PetscSF}),
               dm, sfPoint, rootRankSection, rootRanks, leafRankSection, leafRanks, processRanks_, sfProcess_,
              )

	processRanks = processRanks_[]
	sfProcess = sfProcess_[]

	return processRanks,sfProcess
end 

"""
	DMPlexDistributeOwnership(petsclib::PetscLibType,dm::PetscDM, rootSection::PetscSection, rootrank::IS, leafSection::PetscSection, leafrank::IS) 
Compute owner information for shared points. This basically gets two

Collective

Input Parameter:
- `dm` - The `DM`

Output Parameters:
- `rootSection` - The number of leaves for a given root point
- `rootrank`    - The rank of each edge into the root point
- `leafSection` - The number of processes sharing a given leaf point
- `leafrank`    - The rank of each process sharing a leaf point

Level: developer

-seealso: `DMPLEX`, `DMPlexCreateOverlapLabel()`, `DMPlexDistribute()`, `DMPlexDistributeOverlap()`

# External Links
$(_doc_external("Dm/DMPlexDistributeOwnership"))
"""
function DMPlexDistributeOwnership(petsclib::PetscLibType, dm::PetscDM, rootSection::PetscSection, rootrank::IS, leafSection::PetscSection, leafrank::IS) end

@for_petsc function DMPlexDistributeOwnership(petsclib::$UnionPetscLib, dm::PetscDM, rootSection::PetscSection, rootrank::IS, leafSection::PetscSection, leafrank::IS )

    @chk ccall(
               (:DMPlexDistributeOwnership, $petsc_library),
               PetscErrorCode,
               (CDM, PetscSection, Ptr{IS}, PetscSection, Ptr{IS}),
               dm, rootSection, rootrank, leafSection, leafrank,
              )


	return nothing
end 

"""
	ovLabel::DMLabel = DMPlexCreateOverlapLabel(petsclib::PetscLibType,dm::PetscDM, levels::PetscInt, rootSection::PetscSection, rootrank::IS, leafSection::PetscSection, leafrank::IS) 
Compute a label indicating what overlap points should be sent to new processes

Collective

Input Parameters:
- `dm`          - The `DM`
- `levels`      - Number of overlap levels
- `rootSection` - The number of leaves for a given root point
- `rootrank`    - The rank of each edge into the root point
- `leafSection` - The number of processes sharing a given leaf point
- `leafrank`    - The rank of each process sharing a leaf point

Output Parameter:
- `ovLabel` - `DMLabel` containing remote overlap contributions as point/rank pairings

Level: developer

-seealso: `DMPLEX`, `DMPlexCreateOverlapLabelFromLabels()`, `DMPlexGetAdjacency()`, `DMPlexDistributeOwnership()`, `DMPlexDistribute()`

# External Links
$(_doc_external("Dm/DMPlexCreateOverlapLabel"))
"""
function DMPlexCreateOverlapLabel(petsclib::PetscLibType, dm::PetscDM, levels::PetscInt, rootSection::PetscSection, rootrank::IS, leafSection::PetscSection, leafrank::IS) end

@for_petsc function DMPlexCreateOverlapLabel(petsclib::$UnionPetscLib, dm::PetscDM, levels::$PetscInt, rootSection::PetscSection, rootrank::IS, leafSection::PetscSection, leafrank::IS )
	ovLabel_ = Ref{DMLabel}()

    @chk ccall(
               (:DMPlexCreateOverlapLabel, $petsc_library),
               PetscErrorCode,
               (CDM, $PetscInt, PetscSection, IS, PetscSection, IS, Ptr{DMLabel}),
               dm, levels, rootSection, rootrank, leafSection, leafrank, ovLabel_,
              )

	ovLabel = ovLabel_[]

	return ovLabel
end 

"""
	ovLabel::DMLabel = DMPlexCreateOverlapLabelFromLabels(petsclib::PetscLibType,dm::PetscDM, numLabels::PetscInt, label::Vector{DMLabel}, value::Vector{PetscInt}, numExLabels::PetscInt, exLabel::Vector{DMLabel}, exValue::Vector{PetscInt}, rootSection::PetscSection, rootrank::IS, leafSection::PetscSection, leafrank::IS) 
Compute a label indicating what overlap points should be sent to new processes

Collective

Input Parameters:
- `dm`          - The `DM`
- `numLabels`   - The number of labels to draw candidate points from
- `label`       - An array of labels containing candidate points
- `value`       - An array of label values marking the candidate points
- `numExLabels` - The number of labels to use for exclusion
- `exLabel`     - An array of labels indicating points to be excluded, or `NULL`
- `exValue`     - An array of label values to be excluded, or `NULL`
- `rootSection` - The number of leaves for a given root point
- `rootrank`    - The rank of each edge into the root point
- `leafSection` - The number of processes sharing a given leaf point
- `leafrank`    - The rank of each process sharing a leaf point

Output Parameter:
- `ovLabel` - `DMLabel` containing remote overlap contributions as point/rank pairings

Level: developer

-seealso: `DMPLEX`, `DMPlexCreateOverlapLabel()`, `DMPlexGetAdjacency()`, `DMPlexDistributeOwnership()`, `DMPlexDistribute()`

# External Links
$(_doc_external("Dm/DMPlexCreateOverlapLabelFromLabels"))
"""
function DMPlexCreateOverlapLabelFromLabels(petsclib::PetscLibType, dm::PetscDM, numLabels::PetscInt, label::Vector{DMLabel}, value::Vector{PetscInt}, numExLabels::PetscInt, exLabel::Vector{DMLabel}, exValue::Vector{PetscInt}, rootSection::PetscSection, rootrank::IS, leafSection::PetscSection, leafrank::IS) end

@for_petsc function DMPlexCreateOverlapLabelFromLabels(petsclib::$UnionPetscLib, dm::PetscDM, numLabels::$PetscInt, label::Vector{DMLabel}, value::Vector{$PetscInt}, numExLabels::$PetscInt, exLabel::Vector{DMLabel}, exValue::Vector{$PetscInt}, rootSection::PetscSection, rootrank::IS, leafSection::PetscSection, leafrank::IS )
	ovLabel_ = Ref{DMLabel}()

    @chk ccall(
               (:DMPlexCreateOverlapLabelFromLabels, $petsc_library),
               PetscErrorCode,
               (CDM, $PetscInt, Ptr{DMLabel}, Ptr{$PetscInt}, $PetscInt, Ptr{DMLabel}, Ptr{$PetscInt}, PetscSection, IS, PetscSection, IS, Ptr{DMLabel}),
               dm, numLabels, label, value, numExLabels, exLabel, exValue, rootSection, rootrank, leafSection, leafrank, ovLabel_,
              )

	ovLabel = ovLabel_[]

	return ovLabel
end 

"""
	migrationSF::PetscSF = DMPlexCreateOverlapMigrationSF(petsclib::PetscLibType,dm::PetscDM, overlapSF::PetscSF) 
Create a `PetscSF` describing the new mesh distribution to make the overlap described by the input `PetscSF`

Collective

Input Parameters:
- `dm`        - The `DM`
- `overlapSF` - The `PetscSF` mapping ghost points in overlap to owner points on other processes

Output Parameter:
- `migrationSF` - A `PetscSF` that maps original points in old locations to points in new locations

Level: developer

-seealso: `DMPLEX`, `DMPlexCreateOverlapLabel()`, `DMPlexDistributeOverlap()`, `DMPlexDistribute()`

# External Links
$(_doc_external("Dm/DMPlexCreateOverlapMigrationSF"))
"""
function DMPlexCreateOverlapMigrationSF(petsclib::PetscLibType, dm::PetscDM, overlapSF::PetscSF) end

@for_petsc function DMPlexCreateOverlapMigrationSF(petsclib::$UnionPetscLib, dm::PetscDM, overlapSF::PetscSF )
	migrationSF_ = Ref{PetscSF}()

    @chk ccall(
               (:DMPlexCreateOverlapMigrationSF, $petsc_library),
               PetscErrorCode,
               (CDM, PetscSF, Ptr{PetscSF}),
               dm, overlapSF, migrationSF_,
              )

	migrationSF = migrationSF_[]

	return migrationSF
end 

"""
	DMPlexStratifyMigrationSF(petsclib::PetscLibType,dm::PetscDM, sf::PetscSF, migrationSF::PetscSF) 
Rearrange the leaves of a migration sf for stratification.

Input Parameters:
- `dm` - The DM
- `sf` - A star forest with non-ordered leaves, usually defining a DM point migration

Output Parameter:
- `migrationSF` - A star forest with added leaf indirection that ensures the resulting DM is stratified

Level: developer

-seealso: `DMPLEX`, `DMPlexPartitionLabelCreateSF()`, `DMPlexDistribute()`, `DMPlexDistributeOverlap()`

# External Links
$(_doc_external("Dm/DMPlexStratifyMigrationSF"))
"""
function DMPlexStratifyMigrationSF(petsclib::PetscLibType, dm::PetscDM, sf::PetscSF, migrationSF::PetscSF) end

@for_petsc function DMPlexStratifyMigrationSF(petsclib::$UnionPetscLib, dm::PetscDM, sf::PetscSF, migrationSF::PetscSF )

    @chk ccall(
               (:DMPlexStratifyMigrationSF, $petsc_library),
               PetscErrorCode,
               (CDM, PetscSF, Ptr{PetscSF}),
               dm, sf, migrationSF,
              )


	return nothing
end 

"""
	DMPlexDistributeField(petsclib::PetscLibType,dm::PetscDM, pointSF::PetscSF, originalSection::PetscSection, originalVec::PetscVec, newSection::PetscSection, newVec::PetscVec) 
Distribute field data to match a given `PetscSF`, usually the `PetscSF` from mesh distribution

Collective

Input Parameters:
- `dm`              - The `DMPLEX` object
- `pointSF`         - The `PetscSF` describing the communication pattern
- `originalSection` - The `PetscSection` for existing data layout
- `originalVec`     - The existing data in a local vector

Output Parameters:
- `newSection` - The `PetscSF` describing the new data layout
- `newVec`     - The new data in a local vector

Level: developer

-seealso: `DMPLEX`, `DMPlexDistribute()`, `DMPlexDistributeFieldIS()`, `DMPlexDistributeData()`

# External Links
$(_doc_external("Dm/DMPlexDistributeField"))
"""
function DMPlexDistributeField(petsclib::PetscLibType, dm::PetscDM, pointSF::PetscSF, originalSection::PetscSection, originalVec::PetscVec, newSection::PetscSection, newVec::PetscVec) end

@for_petsc function DMPlexDistributeField(petsclib::$UnionPetscLib, dm::PetscDM, pointSF::PetscSF, originalSection::PetscSection, originalVec::PetscVec, newSection::PetscSection, newVec::PetscVec )

    @chk ccall(
               (:DMPlexDistributeField, $petsc_library),
               PetscErrorCode,
               (CDM, PetscSF, PetscSection, CVec, PetscSection, CVec),
               dm, pointSF, originalSection, originalVec, newSection, newVec,
              )


	return nothing
end 

"""
	DMPlexDistributeFieldIS(petsclib::PetscLibType,dm::PetscDM, pointSF::PetscSF, originalSection::PetscSection, originalIS::IS, newSection::PetscSection, newIS::IS) 
Distribute field data to match a given `PetscSF`, usually the `PetscSF` from mesh distribution

Collective

Input Parameters:
- `dm`              - The `DMPLEX` object
- `pointSF`         - The `PetscSF` describing the communication pattern
- `originalSection` - The `PetscSection` for existing data layout
- `originalIS`      - The existing data

Output Parameters:
- `newSection` - The `PetscSF` describing the new data layout
- `newIS`      - The new data

Level: developer

-seealso: `DMPLEX`, `DMPlexDistribute()`, `DMPlexDistributeField()`, `DMPlexDistributeData()`

# External Links
$(_doc_external("Dm/DMPlexDistributeFieldIS"))
"""
function DMPlexDistributeFieldIS(petsclib::PetscLibType, dm::PetscDM, pointSF::PetscSF, originalSection::PetscSection, originalIS::IS, newSection::PetscSection, newIS::IS) end

@for_petsc function DMPlexDistributeFieldIS(petsclib::$UnionPetscLib, dm::PetscDM, pointSF::PetscSF, originalSection::PetscSection, originalIS::IS, newSection::PetscSection, newIS::IS )

    @chk ccall(
               (:DMPlexDistributeFieldIS, $petsc_library),
               PetscErrorCode,
               (CDM, PetscSF, PetscSection, IS, PetscSection, Ptr{IS}),
               dm, pointSF, originalSection, originalIS, newSection, newIS,
              )


	return nothing
end 

"""
	DMPlexSetPartitionBalance(petsclib::PetscLibType,dm::PetscDM, flg::PetscBool) 
Should distribution of the `DM` attempt to balance the shared point partition?

Input Parameters:
- `dm`  - The `DMPLEX` object
- `flg` - Balance the partition?

Level: intermediate

-seealso: `DMPLEX`, `DMPlexDistribute()`, `DMPlexGetPartitionBalance()`

# External Links
$(_doc_external("Dm/DMPlexSetPartitionBalance"))
"""
function DMPlexSetPartitionBalance(petsclib::PetscLibType, dm::PetscDM, flg::PetscBool) end

@for_petsc function DMPlexSetPartitionBalance(petsclib::$UnionPetscLib, dm::PetscDM, flg::PetscBool )

    @chk ccall(
               (:DMPlexSetPartitionBalance, $petsc_library),
               PetscErrorCode,
               (CDM, PetscBool),
               dm, flg,
              )


	return nothing
end 

"""
	flg::PetscBool = DMPlexGetPartitionBalance(petsclib::PetscLibType,dm::PetscDM) 
Does distribution of the `DM` attempt to balance the shared point partition?

Input Parameter:
- `dm` - The `DMPLEX` object

Output Parameter:
- `flg` - Balance the partition?

Level: intermediate

-seealso: `DMPLEX`, `DMPlexDistribute()`, `DMPlexSetPartitionBalance()`

# External Links
$(_doc_external("Dm/DMPlexGetPartitionBalance"))
"""
function DMPlexGetPartitionBalance(petsclib::PetscLibType, dm::PetscDM) end

@for_petsc function DMPlexGetPartitionBalance(petsclib::$UnionPetscLib, dm::PetscDM )
	flg_ = Ref{PetscBool}()

    @chk ccall(
               (:DMPlexGetPartitionBalance, $petsc_library),
               PetscErrorCode,
               (CDM, Ptr{PetscBool}),
               dm, flg_,
              )

	flg = flg_[]

	return flg
end 

"""
	pointSF::PetscSF = DMPlexCreatePointSF(petsclib::PetscLibType,dm::PetscDM, migrationSF::PetscSF, ownership::PetscBool) 
Build a point `PetscSF` from an `PetscSF` describing a point migration

Input Parameters:
- `dm`          - The source `DMPLEX` object
- `migrationSF` - The star forest that describes the parallel point remapping
- `ownership`   - Flag causing a vote to determine point ownership

Output Parameter:
- `pointSF` - The star forest describing the point overlap in the remapped `DM`

Level: developer

-seealso: `DMPLEX`, `PetscSF`, `DM`, `DMPlexDistribute()`, `DMPlexDistributeOverlap()`

# External Links
$(_doc_external("Dm/DMPlexCreatePointSF"))
"""
function DMPlexCreatePointSF(petsclib::PetscLibType, dm::PetscDM, migrationSF::PetscSF, ownership::PetscBool) end

@for_petsc function DMPlexCreatePointSF(petsclib::$UnionPetscLib, dm::PetscDM, migrationSF::PetscSF, ownership::PetscBool )
	pointSF_ = Ref{PetscSF}()

    @chk ccall(
               (:DMPlexCreatePointSF, $petsc_library),
               PetscErrorCode,
               (CDM, PetscSF, PetscBool, Ptr{PetscSF}),
               dm, migrationSF, ownership, pointSF_,
              )

	pointSF = pointSF_[]

	return pointSF
end 

"""
	DMPlexMigrate(petsclib::PetscLibType,dm::PetscDM, sf::PetscSF, targetDM::PetscDM) 
Migrates internal `DM` data over the supplied star forest

Collective

Input Parameters:
- `dm` - The source `DMPLEX` object
- `sf` - The star forest communication context describing the migration pattern

Output Parameter:
- `targetDM` - The target `DMPLEX` object

Level: intermediate

-seealso: `DMPLEX`, `PetscSF`, `DM`, `DMPlexDistribute()`, `DMPlexDistributeOverlap()`

# External Links
$(_doc_external("Dm/DMPlexMigrate"))
"""
function DMPlexMigrate(petsclib::PetscLibType, dm::PetscDM, sf::PetscSF, targetDM::PetscDM) end

@for_petsc function DMPlexMigrate(petsclib::$UnionPetscLib, dm::PetscDM, sf::PetscSF, targetDM::PetscDM )

    @chk ccall(
               (:DMPlexMigrate, $petsc_library),
               PetscErrorCode,
               (CDM, PetscSF, CDM),
               dm, sf, targetDM,
              )


	return nothing
end 

"""
	DMPlexRemapMigrationSF(petsclib::PetscLibType,sfOverlap::PetscSF, sfMigration::PetscSF, sfMigrationNew::PetscSF) 
Rewrite the distribution SF to account for overlap

Collective

Input Parameters:
- `sfOverlap`   - The `PetscSF` object just for the overlap
- `sfMigration` - The original distribution `PetscSF` object

Output Parameters:
- `sfMigrationNew` - A rewritten `PetscSF` object that incorporates the overlap

Level: developer

-seealso: `DMPLEX`, `DM`, `DMPlexDistribute()`, `DMPlexDistributeOverlap()`, `DMPlexGetOverlap()`

# External Links
$(_doc_external("Dm/DMPlexRemapMigrationSF"))
"""
function DMPlexRemapMigrationSF(petsclib::PetscLibType, sfOverlap::PetscSF, sfMigration::PetscSF, sfMigrationNew::PetscSF) end

@for_petsc function DMPlexRemapMigrationSF(petsclib::$UnionPetscLib, sfOverlap::PetscSF, sfMigration::PetscSF, sfMigrationNew::PetscSF )

    @chk ccall(
               (:DMPlexRemapMigrationSF, $petsc_library),
               PetscErrorCode,
               (PetscSF, PetscSF, Ptr{PetscSF}),
               sfOverlap, sfMigration, sfMigrationNew,
              )


	return nothing
end 

"""
	DMPlexDistribute(petsclib::PetscLibType,dm::PetscDM, overlap::PetscInt, sf::PetscSF, dmParallel::PetscDM) 
Distributes the mesh and any associated sections.

Collective

Input Parameters:
- `dm`      - The original `DMPLEX` object
- `overlap` - The overlap of partitions, 0 is the default

Output Parameters:
- `sf`         - The `PetscSF` used for point distribution, or `NULL` if not needed
- `dmParallel` - The distributed `DMPLEX` object

Level: intermediate

-seealso: `DMPLEX`, `DM`, `DMPlexCreate()`, `DMSetAdjacency()`, `DMPlexGetOverlap()`

# External Links
$(_doc_external("Dm/DMPlexDistribute"))
"""
function DMPlexDistribute(petsclib::PetscLibType, dm::PetscDM, overlap::PetscInt, sf::PetscSF, dmParallel::PetscDM) end

@for_petsc function DMPlexDistribute(petsclib::$UnionPetscLib, dm::PetscDM, overlap::$PetscInt, sf::PetscSF, dmParallel::PetscDM )
	dmParallel_ = Ref(dmParallel.ptr)

    @chk ccall(
               (:DMPlexDistribute, $petsc_library),
               PetscErrorCode,
               (CDM, $PetscInt, Ptr{PetscSF}, Ptr{CDM}),
               dm, overlap, sf, dmParallel_,
              )

	dmParallel.ptr = C_NULL

	return nothing
end 

"""
	DMPlexDistributeOverlap(petsclib::PetscLibType,dm::PetscDM, overlap::PetscInt, sf::PetscSF, dmOverlap::PetscDM) 
Add partition overlap to a distributed non

Collective

Input Parameters:
- `dm`      - The non-overlapping distributed `DMPLEX` object
- `overlap` - The overlap of partitions (the same on all ranks)

Output Parameters:
- `sf`        - The `PetscSF` used for point distribution, or pass `NULL` if not needed
- `dmOverlap` - The overlapping distributed `DMPLEX` object

Options Database Keys:
- `-dm_plex_overlap_labels <name1,name2,...>` - List of overlap label names
- `-dm_plex_overlap_values <int1,int2,...>`   - List of overlap label values
- `-dm_plex_overlap_exclude_label <name>`     - Label used to exclude points from overlap
- `-dm_plex_overlap_exclude_value <int>`      - Label value used to exclude points from overlap

Level: advanced

-seealso: `DMPLEX`, `PetscSF`, `DM`, `DMPlexCreate()`, `DMSetAdjacency()`, `DMPlexDistribute()`, `DMPlexCreateOverlapLabel()`, `DMPlexGetOverlap()`

# External Links
$(_doc_external("Dm/DMPlexDistributeOverlap"))
"""
function DMPlexDistributeOverlap(petsclib::PetscLibType, dm::PetscDM, overlap::PetscInt, sf::PetscSF, dmOverlap::PetscDM) end

@for_petsc function DMPlexDistributeOverlap(petsclib::$UnionPetscLib, dm::PetscDM, overlap::$PetscInt, sf::PetscSF, dmOverlap::PetscDM )
	dmOverlap_ = Ref(dmOverlap.ptr)

    @chk ccall(
               (:DMPlexDistributeOverlap, $petsc_library),
               PetscErrorCode,
               (CDM, $PetscInt, Ptr{PetscSF}, Ptr{CDM}),
               dm, overlap, sf, dmOverlap_,
              )

	dmOverlap.ptr = C_NULL

	return nothing
end 

"""
	overlap::PetscInt = DMPlexGetOverlap(petsclib::PetscLibType,dm::PetscDM) 
Get the width of the cell overlap

Not Collective

Input Parameter:
- `dm` - The `DM`

Output Parameter:
- `overlap` - the width of the cell overlap

Level: intermediate

-seealso: `DMPLEX`, `DMPlexSetOverlap()`, `DMPlexDistribute()`

# External Links
$(_doc_external("Dm/DMPlexGetOverlap"))
"""
function DMPlexGetOverlap(petsclib::PetscLibType, dm::PetscDM) end

@for_petsc function DMPlexGetOverlap(petsclib::$UnionPetscLib, dm::PetscDM )
	overlap_ = Ref{$PetscInt}()

    @chk ccall(
               (:DMPlexGetOverlap, $petsc_library),
               PetscErrorCode,
               (CDM, Ptr{$PetscInt}),
               dm, overlap_,
              )

	overlap = overlap_[]

	return overlap
end 

"""
	DMPlexSetOverlap(petsclib::PetscLibType,dm::PetscDM, dmSrc::PetscDM, overlap::PetscInt) 
Set the width of the cell overlap

Logically Collective

Input Parameters:
- `dm`      - The `DM`
- `dmSrc`   - The `DM` that produced this one, or `NULL`
- `overlap` - the width of the cell overlap

Level: intermediate

-seealso: `DMPLEX`, `DMPlexGetOverlap()`, `DMPlexDistribute()`

# External Links
$(_doc_external("Dm/DMPlexSetOverlap"))
"""
function DMPlexSetOverlap(petsclib::PetscLibType, dm::PetscDM, dmSrc::PetscDM, overlap::PetscInt) end

@for_petsc function DMPlexSetOverlap(petsclib::$UnionPetscLib, dm::PetscDM, dmSrc::PetscDM, overlap::$PetscInt )

    @chk ccall(
               (:DMPlexSetOverlap, $petsc_library),
               PetscErrorCode,
               (CDM, CDM, $PetscInt),
               dm, dmSrc, overlap,
              )


	return nothing
end 

"""
	DMPlexDistributeSetDefault(petsclib::PetscLibType,dm::PetscDM, dist::PetscBool) 
Set flag indicating whether the `DM` should be distributed by default

Logically Collective

Input Parameters:
- `dm`   - The `DM`
- `dist` - Flag for distribution

Level: intermediate

-seealso: `DMPLEX`, `DMPlexDistributeGetDefault()`, `DMPlexDistribute()`

# External Links
$(_doc_external("Dm/DMPlexDistributeSetDefault"))
"""
function DMPlexDistributeSetDefault(petsclib::PetscLibType, dm::PetscDM, dist::PetscBool) end

@for_petsc function DMPlexDistributeSetDefault(petsclib::$UnionPetscLib, dm::PetscDM, dist::PetscBool )

    @chk ccall(
               (:DMPlexDistributeSetDefault, $petsc_library),
               PetscErrorCode,
               (CDM, PetscBool),
               dm, dist,
              )


	return nothing
end 

"""
	dist::PetscBool = DMPlexDistributeGetDefault(petsclib::PetscLibType,dm::PetscDM) 
Get flag indicating whether the `DM` should be distributed by default

Not Collective

Input Parameter:
- `dm` - The `DM`

Output Parameter:
- `dist` - Flag for distribution

Level: intermediate

-seealso: `DMPLEX`, `DM`, `DMPlexDistributeSetDefault()`, `DMPlexDistribute()`

# External Links
$(_doc_external("Dm/DMPlexDistributeGetDefault"))
"""
function DMPlexDistributeGetDefault(petsclib::PetscLibType, dm::PetscDM) end

@for_petsc function DMPlexDistributeGetDefault(petsclib::$UnionPetscLib, dm::PetscDM )
	dist_ = Ref{PetscBool}()

    @chk ccall(
               (:DMPlexDistributeGetDefault, $petsc_library),
               PetscErrorCode,
               (CDM, Ptr{PetscBool}),
               dm, dist_,
              )

	dist = dist_[]

	return dist
end 

"""
	DMPlexGetGatherDM(petsclib::PetscLibType,dm::PetscDM, sf::PetscSF, gatherMesh::PetscDM) 
Get a copy of the `DMPLEX` that gathers all points on the
root process of the original's communicator.

Collective

Input Parameter:
- `dm` - the original `DMPLEX` object

Output Parameters:
- `sf`         - the `PetscSF` used for point distribution (optional)
- `gatherMesh` - the gathered `DM` object, or `NULL`

Level: intermediate

-seealso: `DMPLEX`, `DM`, `PetscSF`, `DMPlexDistribute()`, `DMPlexGetRedundantDM()`

# External Links
$(_doc_external("Dm/DMPlexGetGatherDM"))
"""
function DMPlexGetGatherDM(petsclib::PetscLibType, dm::PetscDM, sf::PetscSF, gatherMesh::PetscDM) end

@for_petsc function DMPlexGetGatherDM(petsclib::$UnionPetscLib, dm::PetscDM, sf::PetscSF, gatherMesh::PetscDM )
	gatherMesh_ = Ref(gatherMesh.ptr)

    @chk ccall(
               (:DMPlexGetGatherDM, $petsc_library),
               PetscErrorCode,
               (CDM, Ptr{PetscSF}, Ptr{CDM}),
               dm, sf, gatherMesh_,
              )

	gatherMesh.ptr = C_NULL

	return nothing
end 

"""
	DMPlexGetRedundantDM(petsclib::PetscLibType,dm::PetscDM, sf::PetscSF, redundantMesh::PetscDM) 
Get a copy of the `DMPLEX` that is completely copied on each process.

Collective

Input Parameter:
- `dm` - the original `DMPLEX` object

Output Parameters:
- `sf`            - the `PetscSF` used for point distribution (optional)
- `redundantMesh` - the redundant `DM` object, or `NULL`

Level: intermediate

-seealso: `DMPLEX`, `DMPlexDistribute()`, `DMPlexGetGatherDM()`

# External Links
$(_doc_external("Dm/DMPlexGetRedundantDM"))
"""
function DMPlexGetRedundantDM(petsclib::PetscLibType, dm::PetscDM, sf::PetscSF, redundantMesh::PetscDM) end

@for_petsc function DMPlexGetRedundantDM(petsclib::$UnionPetscLib, dm::PetscDM, sf::PetscSF, redundantMesh::PetscDM )
	redundantMesh_ = Ref(redundantMesh.ptr)

    @chk ccall(
               (:DMPlexGetRedundantDM, $petsc_library),
               PetscErrorCode,
               (CDM, Ptr{PetscSF}, Ptr{CDM}),
               dm, sf, redundantMesh_,
              )

	redundantMesh.ptr = C_NULL

	return nothing
end 

"""
	distributed::PetscBool = DMPlexIsDistributed(petsclib::PetscLibType,dm::PetscDM) 
Find out whether this `DM` is distributed, i.e. more than one rank owns some points.

Collective

Input Parameter:
- `dm` - The `DM` object

Output Parameter:
- `distributed` - Flag whether the `DM` is distributed

Level: intermediate

-seealso: `DMPLEX`, `DMPlexDistribute()`, `DMPlexGetOverlap()`, `DMPlexIsInterpolated()`

# External Links
$(_doc_external("Dm/DMPlexIsDistributed"))
"""
function DMPlexIsDistributed(petsclib::PetscLibType, dm::PetscDM) end

@for_petsc function DMPlexIsDistributed(petsclib::$UnionPetscLib, dm::PetscDM )
	distributed_ = Ref{PetscBool}()

    @chk ccall(
               (:DMPlexIsDistributed, $petsc_library),
               PetscErrorCode,
               (CDM, Ptr{PetscBool}),
               dm, distributed_,
              )

	distributed = distributed_[]

	return distributed
end 

"""
	DMPlexDistributionSetName(petsclib::PetscLibType,dm::PetscDM, name::String) 
Set the name of the specific parallel distribution

Input Parameters:
- `dm`   - The `DM`
- `name` - The name of the specific parallel distribution

Level: developer

-seealso: `DMPLEX`, `DMPlexDistributionGetName()`, `DMPlexTopologyView()`, `DMPlexTopologyLoad()`

# External Links
$(_doc_external("Dm/DMPlexDistributionSetName"))
"""
function DMPlexDistributionSetName(petsclib::PetscLibType, dm::PetscDM, name::String) end

@for_petsc function DMPlexDistributionSetName(petsclib::$UnionPetscLib, dm::PetscDM, name::String )

    @chk ccall(
               (:DMPlexDistributionSetName, $petsc_library),
               PetscErrorCode,
               (CDM, Ptr{Cchar}),
               dm, name,
              )


	return nothing
end 

"""
	DMPlexDistributionGetName(petsclib::PetscLibType,dm::PetscDM, name::String) 
Retrieve the name of the specific parallel distribution

Input Parameter:
- `dm` - The `DM`

Output Parameter:
- `name` - The name of the specific parallel distribution

Level: developer

-seealso: `DMPLEX`, `DMPlexDistributionSetName()`, `DMPlexTopologyView()`, `DMPlexTopologyLoad()`

# External Links
$(_doc_external("Dm/DMPlexDistributionGetName"))
"""
function DMPlexDistributionGetName(petsclib::PetscLibType, dm::PetscDM, name::String) end

@for_petsc function DMPlexDistributionGetName(petsclib::$UnionPetscLib, dm::PetscDM, name::String )
	name_ = Ref(pointer(name))

    @chk ccall(
               (:DMPlexDistributionGetName, $petsc_library),
               PetscErrorCode,
               (CDM, Ptr{Ptr{Cchar}}),
               dm, name_,
              )


	return nothing
end 

"""
	DMPlexOrientPoint(petsclib::PetscLibType,dm::PetscDM, p::PetscInt, o::PetscInt) 
Act with the given orientation on the cone points of this mesh point, and update its use in the mesh.

Not Collective

Input Parameters:
- `dm` - The `DM`
- `p`  - The mesh point
- `o`  - The orientation

Level: intermediate

-seealso: [](ch_unstructured), `DM`, `DMPLEX`, `DMPlexOrient()`, `DMPlexGetCone()`, `DMPlexGetConeOrientation()`, `DMPlexInterpolate()`, `DMPlexGetChart()`

# External Links
$(_doc_external("Dm/DMPlexOrientPoint"))
"""
function DMPlexOrientPoint(petsclib::PetscLibType, dm::PetscDM, p::PetscInt, o::PetscInt) end

@for_petsc function DMPlexOrientPoint(petsclib::$UnionPetscLib, dm::PetscDM, p::$PetscInt, o::$PetscInt )

    @chk ccall(
               (:DMPlexOrientPoint, $petsc_library),
               PetscErrorCode,
               (CDM, $PetscInt, $PetscInt),
               dm, p, o,
              )


	return nothing
end 

"""
	DMPlexOrient(petsclib::PetscLibType,dm::PetscDM) 
Give a consistent orientation to the input mesh

Input Parameter:
- `dm` - The `DM`

-seealso: [](ch_unstructured), `DM`, `DMPLEX`, `DMCreate()`

# External Links
$(_doc_external("Dm/DMPlexOrient"))
"""
function DMPlexOrient(petsclib::PetscLibType, dm::PetscDM) end

@for_petsc function DMPlexOrient(petsclib::$UnionPetscLib, dm::PetscDM )

    @chk ccall(
               (:DMPlexOrient, $petsc_library),
               PetscErrorCode,
               (CDM,),
               dm,
              )


	return nothing
end 

"""
	DMPlexOrientLabel(petsclib::PetscLibType,dm::PetscDM, label::DMLabel) 

# External Links
$(_doc_external("Dm/DMPlexOrientLabel"))
"""
function DMPlexOrientLabel(petsclib::PetscLibType, dm::PetscDM, label::DMLabel) end

@for_petsc function DMPlexOrientLabel(petsclib::$UnionPetscLib, dm::PetscDM, label::DMLabel )

    @chk ccall(
               (:DMPlexOrientLabel, $petsc_library),
               PetscErrorCode,
               (CDM, DMLabel),
               dm, label,
              )


	return nothing
end 

"""
	DMPlexSetIsoperiodicFaceSF(petsclib::PetscLibType,dm::PetscDM, num_face_sfs::PetscInt, face_sfs::PetscSF) 
Express periodicity from an existing mesh

Logically Collective

Input Parameters:
- `dm`           - The `DMPLEX` on which to set periodicity
- `num_face_sfs` - Number of `PetscSF`s in `face_sfs`
- `face_sfs`     - Array of `PetscSF` in which roots are (owned) donor faces and leaves are faces that must be matched to a (possibly remote) donor face.

Level: advanced

-seealso: [](ch_unstructured), `DMPLEX`, `DMGetGlobalSection()`, `DMPlexGetIsoperiodicFaceSF()`

# External Links
$(_doc_external("Dm/DMPlexSetIsoperiodicFaceSF"))
"""
function DMPlexSetIsoperiodicFaceSF(petsclib::PetscLibType, dm::PetscDM, num_face_sfs::PetscInt, face_sfs::PetscSF) end

@for_petsc function DMPlexSetIsoperiodicFaceSF(petsclib::$UnionPetscLib, dm::PetscDM, num_face_sfs::$PetscInt, face_sfs::PetscSF )

    @chk ccall(
               (:DMPlexSetIsoperiodicFaceSF, $petsc_library),
               PetscErrorCode,
               (CDM, $PetscInt, Ptr{PetscSF}),
               dm, num_face_sfs, face_sfs,
              )


	return nothing
end 

"""
	num_face_sfs::PetscInt = DMPlexGetIsoperiodicFaceSF(petsclib::PetscLibType,dm::PetscDM, face_sfs::PetscSF) 
Obtain periodicity for a mesh

Logically Collective

Input Parameter:
- `dm` - The `DMPLEX` for which to obtain periodic relation

Output Parameters:
- `num_face_sfs` - Number of `PetscSF`s in the array
- `face_sfs`     - Array of `PetscSF` in which roots are (owned) donor faces and leaves are faces that must be matched to a (possibly remote) donor face.

Level: advanced

-seealso: [](ch_unstructured), `DMPLEX`, `DMGetGlobalSection()`, `DMPlexSetIsoperiodicFaceSF()`

# External Links
$(_doc_external("Dm/DMPlexGetIsoperiodicFaceSF"))
"""
function DMPlexGetIsoperiodicFaceSF(petsclib::PetscLibType, dm::PetscDM, face_sfs::PetscSF) end

@for_petsc function DMPlexGetIsoperiodicFaceSF(petsclib::$UnionPetscLib, dm::PetscDM, face_sfs::PetscSF )
	num_face_sfs_ = Ref{$PetscInt}()

    @chk ccall(
               (:DMPlexGetIsoperiodicFaceSF, $petsc_library),
               PetscErrorCode,
               (CDM, Ptr{$PetscInt}, PetscSF),
               dm, num_face_sfs_, face_sfs,
              )

	num_face_sfs = num_face_sfs_[]

	return num_face_sfs
end 

"""
	DMPlexSetIsoperiodicFaceTransform(petsclib::PetscLibType,dm::PetscDM, n::PetscInt, t::Vector{PetscScalar}) 
set geometric transform from donor to periodic points

Logically Collective

Input Parameters:
- `dm` - `DMPLEX` that has been configured with `DMPlexSetIsoperiodicFaceSF()`
- `n`  - Number of transforms in array
- `t`  - Array of 4x4 affine transformation basis.

Level: advanced

-seealso: [](ch_unstructured), `DMPLEX`, `DMGetGlobalSection()`, `DMPlexSetIsoperiodicFaceSF()`

# External Links
$(_doc_external("Dm/DMPlexSetIsoperiodicFaceTransform"))
"""
function DMPlexSetIsoperiodicFaceTransform(petsclib::PetscLibType, dm::PetscDM, n::PetscInt, t::Vector{PetscScalar}) end

@for_petsc function DMPlexSetIsoperiodicFaceTransform(petsclib::$UnionPetscLib, dm::PetscDM, n::$PetscInt, t::Vector{$PetscScalar} )

    @chk ccall(
               (:DMPlexSetIsoperiodicFaceTransform, $petsc_library),
               PetscErrorCode,
               (CDM, $PetscInt, Ptr{$PetscScalar}),
               dm, n, t,
              )


	return nothing
end 

"""
	start::PetscInt,end_::PetscInt = DMPlexGetPointLocal(petsclib::PetscLibType,dm::PetscDM, point::PetscInt) 
get location of point data in local `Vec`

Not Collective

Input Parameters:
- `dm`    - `DM` defining the topological space
- `point` - topological point

Output Parameters:
- `start` - start of point data
- `end`   - end of point data

Level: intermediate

-seealso: [](ch_unstructured), `DM`, `DMPLEX`, `DMPlexGetPointLocalField()`, `DMGetLocalSection()`, `PetscSectionGetOffset()`, `PetscSectionGetDof()`, `DMPlexPointLocalRead()`, `DMPlexPointLocalRef()`

# External Links
$(_doc_external("Dm/DMPlexGetPointLocal"))
"""
function DMPlexGetPointLocal(petsclib::PetscLibType, dm::PetscDM, point::PetscInt) end

@for_petsc function DMPlexGetPointLocal(petsclib::$UnionPetscLib, dm::PetscDM, point::$PetscInt )
	start_ = Ref{$PetscInt}()
	end__ = Ref{$PetscInt}()

    @chk ccall(
               (:DMPlexGetPointLocal, $petsc_library),
               PetscErrorCode,
               (CDM, $PetscInt, Ptr{$PetscInt}, Ptr{$PetscInt}),
               dm, point, start_, end__,
              )

	start = start_[]
	end_ = end__[]

	return start,end_
end 

"""
	DMPlexPointLocalRead(petsclib::PetscLibType,dm::PetscDM, point::PetscInt, array::PetscScalar, ptr::Cvoid) 
return read access to a point in local array

Not Collective

Input Parameters:
- `dm`    - `DM` defining topological space
- `point` - topological point
- `array` - array to index into

Output Parameter:
- `ptr` - address of read reference to point data, type generic so user can place in structure

Level: intermediate

-seealso: [](ch_unstructured), `DM`, `DMPLEX`, `DMGetLocalSection()`, `PetscSectionGetOffset()`, `PetscSectionGetDof()`, `DMPlexGetPointLocal()`, `DMPlexPointGlobalRead()`

# External Links
$(_doc_external("Dm/DMPlexPointLocalRead"))
"""
function DMPlexPointLocalRead(petsclib::PetscLibType, dm::PetscDM, point::PetscInt, array::PetscScalar, ptr::Cvoid) end

@for_petsc function DMPlexPointLocalRead(petsclib::$UnionPetscLib, dm::PetscDM, point::$PetscInt, array::$PetscScalar, ptr::Cvoid )

    @chk ccall(
               (:DMPlexPointLocalRead, $petsc_library),
               PetscErrorCode,
               (CDM, $PetscInt, Ptr{$PetscScalar}, Ptr{Cvoid}),
               dm, point, array, ptr,
              )


	return nothing
end 

"""
	DMPlexPointLocalRef(petsclib::PetscLibType,dm::PetscDM, point::PetscInt, array::PetscScalar, ptr::Cvoid) 
return read/write access to a point in local array

Not Collective

Input Parameters:
- `dm`    - `DM` defining topological space
- `point` - topological point
- `array` - array to index into

Output Parameter:
- `ptr` - address of reference to point data, type generic so user can place in structure

Level: intermediate

-seealso: [](ch_unstructured), `DM`, `DMPLEX`, `DMGetLocalSection()`, `PetscSectionGetOffset()`, `PetscSectionGetDof()`, `DMPlexGetPointLocal()`, `DMPlexPointGlobalRef()`

# External Links
$(_doc_external("Dm/DMPlexPointLocalRef"))
"""
function DMPlexPointLocalRef(petsclib::PetscLibType, dm::PetscDM, point::PetscInt, array::PetscScalar, ptr::Cvoid) end

@for_petsc function DMPlexPointLocalRef(petsclib::$UnionPetscLib, dm::PetscDM, point::$PetscInt, array::$PetscScalar, ptr::Cvoid )

    @chk ccall(
               (:DMPlexPointLocalRef, $petsc_library),
               PetscErrorCode,
               (CDM, $PetscInt, Ptr{$PetscScalar}, Ptr{Cvoid}),
               dm, point, array, ptr,
              )


	return nothing
end 

"""
	start::PetscInt,end_::PetscInt = DMPlexGetPointLocalField(petsclib::PetscLibType,dm::PetscDM, point::PetscInt, field::PetscInt) 
get location of point field data in local Vec

Not Collective

Input Parameters:
- `dm`    - `DM` defining the topological space
- `point` - topological point
- `field` - the field number

Output Parameters:
- `start` - start of point data
- `end`   - end of point data

Level: intermediate

-seealso: [](ch_unstructured), `DM`, `DMPLEX`, `DMPlexGetPointLocal()`, `DMGetLocalSection()`, `PetscSectionGetOffset()`, `PetscSectionGetDof()`, `DMPlexPointLocalRead()`, `DMPlexPointLocalRef()`

# External Links
$(_doc_external("Dm/DMPlexGetPointLocalField"))
"""
function DMPlexGetPointLocalField(petsclib::PetscLibType, dm::PetscDM, point::PetscInt, field::PetscInt) end

@for_petsc function DMPlexGetPointLocalField(petsclib::$UnionPetscLib, dm::PetscDM, point::$PetscInt, field::$PetscInt )
	start_ = Ref{$PetscInt}()
	end__ = Ref{$PetscInt}()

    @chk ccall(
               (:DMPlexGetPointLocalField, $petsc_library),
               PetscErrorCode,
               (CDM, $PetscInt, $PetscInt, Ptr{$PetscInt}, Ptr{$PetscInt}),
               dm, point, field, start_, end__,
              )

	start = start_[]
	end_ = end__[]

	return start,end_
end 

"""
	DMPlexPointLocalFieldRead(petsclib::PetscLibType,dm::PetscDM, point::PetscInt, field::PetscInt, array::PetscScalar, ptr::Cvoid) 
return read access to a field on a point in local array

Not Collective

Input Parameters:
- `dm`    - `DM` defining topological space
- `point` - topological point
- `field` - field number
- `array` - array to index into

Output Parameter:
- `ptr` - address of read reference to point data, type generic so user can place in structure

Level: intermediate

-seealso: [](ch_unstructured), `DM`, `DMPLEX`, `DMGetLocalSection()`, `PetscSectionGetOffset()`, `PetscSectionGetDof()`, `DMPlexGetPointLocal()`, `DMPlexPointGlobalRef()`

# External Links
$(_doc_external("Dm/DMPlexPointLocalFieldRead"))
"""
function DMPlexPointLocalFieldRead(petsclib::PetscLibType, dm::PetscDM, point::PetscInt, field::PetscInt, array::PetscScalar, ptr::Cvoid) end

@for_petsc function DMPlexPointLocalFieldRead(petsclib::$UnionPetscLib, dm::PetscDM, point::$PetscInt, field::$PetscInt, array::$PetscScalar, ptr::Cvoid )

    @chk ccall(
               (:DMPlexPointLocalFieldRead, $petsc_library),
               PetscErrorCode,
               (CDM, $PetscInt, $PetscInt, Ptr{$PetscScalar}, Ptr{Cvoid}),
               dm, point, field, array, ptr,
              )


	return nothing
end 

"""
	DMPlexPointLocalFieldRef(petsclib::PetscLibType,dm::PetscDM, point::PetscInt, field::PetscInt, array::PetscScalar, ptr::Cvoid) 
return read/write access to a field on a point in local array

Not Collective

Input Parameters:
- `dm`    - `DM` defining topological space
- `point` - topological point
- `field` - field number
- `array` - array to index into

Output Parameter:
- `ptr` - address of reference to point data, type generic so user can place in structure

Level: intermediate

-seealso: [](ch_unstructured), `DM`, `DMPLEX`, `DMGetLocalSection()`, `PetscSectionGetOffset()`, `PetscSectionGetDof()`, `DMPlexGetPointLocal()`, `DMPlexPointGlobalRef()`

# External Links
$(_doc_external("Dm/DMPlexPointLocalFieldRef"))
"""
function DMPlexPointLocalFieldRef(petsclib::PetscLibType, dm::PetscDM, point::PetscInt, field::PetscInt, array::PetscScalar, ptr::Cvoid) end

@for_petsc function DMPlexPointLocalFieldRef(petsclib::$UnionPetscLib, dm::PetscDM, point::$PetscInt, field::$PetscInt, array::$PetscScalar, ptr::Cvoid )

    @chk ccall(
               (:DMPlexPointLocalFieldRef, $petsc_library),
               PetscErrorCode,
               (CDM, $PetscInt, $PetscInt, Ptr{$PetscScalar}, Ptr{Cvoid}),
               dm, point, field, array, ptr,
              )


	return nothing
end 

"""
	start::PetscInt,end_::PetscInt = DMPlexGetPointGlobal(petsclib::PetscLibType,dm::PetscDM, point::PetscInt) 
get location of point data in global Vec

Not Collective

Input Parameters:
- `dm`    - `DM` defining the topological space
- `point` - topological point

Output Parameters:
- `start` - start of point data; returns -(globalStart+1) if point is not owned
- `end`   - end of point data; returns -(globalEnd+1) if point is not owned

Level: intermediate

-seealso: [](ch_unstructured), `DM`, `DMPLEX`, `DMPlexGetPointGlobalField()`, `DMGetLocalSection()`, `PetscSectionGetOffset()`, `PetscSectionGetDof()`, `DMPlexPointGlobalRead()`, `DMPlexGetPointLocal()`, `DMPlexPointGlobalRef()`

# External Links
$(_doc_external("Dm/DMPlexGetPointGlobal"))
"""
function DMPlexGetPointGlobal(petsclib::PetscLibType, dm::PetscDM, point::PetscInt) end

@for_petsc function DMPlexGetPointGlobal(petsclib::$UnionPetscLib, dm::PetscDM, point::$PetscInt )
	start_ = Ref{$PetscInt}()
	end_ = Ref{$PetscInt}()

    @chk ccall(
               (:DMPlexGetPointGlobal, $petsc_library),
               PetscErrorCode,
               (CDM, $PetscInt, Ptr{$PetscInt}, Ptr{$PetscInt}),
               dm, point, start_, end__,
              )

	start = start_[]
	end_ = end__[]

	return start,end_
end 

"""
	DMPlexPointGlobalRead(petsclib::PetscLibType,dm::PetscDM, point::PetscInt, array::PetscScalar, ptr::Cvoid) 
return read access to a point in global array

Not Collective

Input Parameters:
- `dm`    - `DM` defining topological space
- `point` - topological point
- `array` - array to index into

Output Parameter:
- `ptr` - address of read reference to point data, type generic so user can place in structure; returns NULL if global point is not owned

Level: intermediate

-seealso: [](ch_unstructured), `DM`, `DMPLEX`, `DMGetLocalSection()`, `PetscSectionGetOffset()`, `PetscSectionGetDof()`, `DMPlexGetPointGlobal()`, `DMPlexPointLocalRead()`, `DMPlexPointGlobalRef()`

# External Links
$(_doc_external("Dm/DMPlexPointGlobalRead"))
"""
function DMPlexPointGlobalRead(petsclib::PetscLibType, dm::PetscDM, point::PetscInt, array::PetscScalar, ptr::Cvoid) end

@for_petsc function DMPlexPointGlobalRead(petsclib::$UnionPetscLib, dm::PetscDM, point::$PetscInt, array::$PetscScalar, ptr::Cvoid )

    @chk ccall(
               (:DMPlexPointGlobalRead, $petsc_library),
               PetscErrorCode,
               (CDM, $PetscInt, Ptr{$PetscScalar}, Ptr{Cvoid}),
               dm, point, array, ptr,
              )


	return nothing
end 

"""
	DMPlexPointGlobalRef(petsclib::PetscLibType,dm::PetscDM, point::PetscInt, array::PetscScalar, ptr::Cvoid) 
return read/write access to a point in global array

Not Collective

Input Parameters:
- `dm`    - `DM` defining topological space
- `point` - topological point
- `array` - array to index into

Output Parameter:
- `ptr` - address of reference to point data, type generic so user can place in structure; returns NULL if global point is not owned

Level: intermediate

-seealso: [](ch_unstructured), `DM`, `DMPLEX`, `DMGetLocalSection()`, `PetscSectionGetOffset()`, `PetscSectionGetDof()`, `DMPlexGetPointGlobal()`, `DMPlexPointLocalRef()`, `DMPlexPointGlobalRead()`

# External Links
$(_doc_external("Dm/DMPlexPointGlobalRef"))
"""
function DMPlexPointGlobalRef(petsclib::PetscLibType, dm::PetscDM, point::PetscInt, array::PetscScalar, ptr::Cvoid) end

@for_petsc function DMPlexPointGlobalRef(petsclib::$UnionPetscLib, dm::PetscDM, point::$PetscInt, array::$PetscScalar, ptr::Cvoid )

    @chk ccall(
               (:DMPlexPointGlobalRef, $petsc_library),
               PetscErrorCode,
               (CDM, $PetscInt, Ptr{$PetscScalar}, Ptr{Cvoid}),
               dm, point, array, ptr,
              )


	return nothing
end 

"""
	start::PetscInt,end_::PetscInt = DMPlexGetPointGlobalField(petsclib::PetscLibType,dm::PetscDM, point::PetscInt, field::PetscInt) 
get location of point field data in global `Vec`

Not Collective

Input Parameters:
- `dm`    - `DM` defining the topological space
- `point` - topological point
- `field` - the field number

Output Parameters:
- `start` - start of point data; returns -(globalStart+1) if point is not owned
- `end`   - end of point data; returns -(globalEnd+1) if point is not owned

Level: intermediate

-seealso: [](ch_unstructured), `DM`, `DMPLEX`, `DMPlexGetPointGlobal()`, `DMGetLocalSection()`, `PetscSectionGetOffset()`, `PetscSectionGetDof()`, `DMPlexPointGlobalRead()`, `DMPlexGetPointLocal()`, `DMPlexPointGlobalRef()`

# External Links
$(_doc_external("Dm/DMPlexGetPointGlobalField"))
"""
function DMPlexGetPointGlobalField(petsclib::PetscLibType, dm::PetscDM, point::PetscInt, field::PetscInt) end

@for_petsc function DMPlexGetPointGlobalField(petsclib::$UnionPetscLib, dm::PetscDM, point::$PetscInt, field::$PetscInt )
	start_ = Ref{$PetscInt}()
	end__ = Ref{$PetscInt}()

    @chk ccall(
               (:DMPlexGetPointGlobalField, $petsc_library),
               PetscErrorCode,
               (CDM, $PetscInt, $PetscInt, Ptr{$PetscInt}, Ptr{$PetscInt}),
               dm, point, field, start_, end__,
              )

	start = start_[]
	end_ = end__[]

	return start,end_
end 

"""
	DMPlexPointGlobalFieldRead(petsclib::PetscLibType,dm::PetscDM, point::PetscInt, field::PetscInt, array::PetscScalar, ptr::Cvoid) 
return read access to a field on a point in global array

Not Collective

Input Parameters:
- `dm`    - `DM` defining topological space
- `point` - topological point
- `field` - field number
- `array` - array to index into

Output Parameter:
- `ptr` - address of read reference to point data, type generic so user can place in structure; returns NULL if global point is not owned

Level: intermediate

-seealso: [](ch_unstructured), `DM`, `DMPLEX`, `DMGetLocalSection()`, `PetscSectionGetOffset()`, `PetscSectionGetDof()`, `DMPlexGetPointGlobal()`, `DMPlexPointLocalRead()`, `DMPlexPointGlobalRef()`

# External Links
$(_doc_external("Dm/DMPlexPointGlobalFieldRead"))
"""
function DMPlexPointGlobalFieldRead(petsclib::PetscLibType, dm::PetscDM, point::PetscInt, field::PetscInt, array::PetscScalar, ptr::Cvoid) end

@for_petsc function DMPlexPointGlobalFieldRead(petsclib::$UnionPetscLib, dm::PetscDM, point::$PetscInt, field::$PetscInt, array::$PetscScalar, ptr::Cvoid )

    @chk ccall(
               (:DMPlexPointGlobalFieldRead, $petsc_library),
               PetscErrorCode,
               (CDM, $PetscInt, $PetscInt, Ptr{$PetscScalar}, Ptr{Cvoid}),
               dm, point, field, array, ptr,
              )


	return nothing
end 

"""
	DMPlexPointGlobalFieldRef(petsclib::PetscLibType,dm::PetscDM, point::PetscInt, field::PetscInt, array::PetscScalar, ptr::Cvoid) 
return read/write access to a field on a point in global array

Not Collective

Input Parameters:
- `dm`    - `DM` defining topological space
- `point` - topological point
- `field` - field number
- `array` - array to index into

Output Parameter:
- `ptr` - address of reference to point data, type generic so user can place in structure; returns NULL if global point is not owned

Level: intermediate

-seealso: [](ch_unstructured), `DM`, `DMPLEX`, `DMGetLocalSection()`, `PetscSectionGetOffset()`, `PetscSectionGetDof()`, `DMPlexGetPointGlobal()`, `DMPlexPointLocalRef()`, `DMPlexPointGlobalRead()`

# External Links
$(_doc_external("Dm/DMPlexPointGlobalFieldRef"))
"""
function DMPlexPointGlobalFieldRef(petsclib::PetscLibType, dm::PetscDM, point::PetscInt, field::PetscInt, array::PetscScalar, ptr::Cvoid) end

@for_petsc function DMPlexPointGlobalFieldRef(petsclib::$UnionPetscLib, dm::PetscDM, point::$PetscInt, field::$PetscInt, array::$PetscScalar, ptr::Cvoid )

    @chk ccall(
               (:DMPlexPointGlobalFieldRef, $petsc_library),
               PetscErrorCode,
               (CDM, $PetscInt, $PetscInt, Ptr{$PetscScalar}, Ptr{Cvoid}),
               dm, point, field, array, ptr,
              )


	return nothing
end 

"""
	dm::PetscDM = DMPlexCreateExodusFromFile(petsclib::PetscLibType,comm::MPI_Comm, filename::String, interpolate::PetscBool) 
Create a `DMPLEX` mesh from an ExodusII file.

Collective

Input Parameters:
- `comm`        - The MPI communicator
- `filename`    - The name of the ExodusII file
- `interpolate` - Create faces and edges in the mesh

Output Parameter:
- `dm` - The `DM` object representing the mesh

Level: beginner

-seealso: [](ch_unstructured), `DM`, `PETSCVIEWEREXODUSII`, `DMPLEX`, `DMCreate()`, `DMPlexCreateExodus()`

# External Links
$(_doc_external("Dm/DMPlexCreateExodusFromFile"))
"""
function DMPlexCreateExodusFromFile(petsclib::PetscLibType, comm::MPI_Comm, filename::String, interpolate::PetscBool) end

@for_petsc function DMPlexCreateExodusFromFile(petsclib::$UnionPetscLib, comm::MPI_Comm, filename::String, interpolate::PetscBool )
	dm_ = Ref{CDM}()

    @chk ccall(
               (:DMPlexCreateExodusFromFile, $petsc_library),
               PetscErrorCode,
               (MPI_Comm, Ptr{Cchar}, PetscBool, Ptr{CDM}),
               comm, filename, interpolate, dm_,
              )

	dm = PetscDM(dm_[], petsclib)

	return dm
end 

"""
	DMPlexCheckInterfaceCones(petsclib::PetscLibType,dm::PetscDM) 
Check that points on inter

Input Parameter:
- `dm` - The `DMPLEX` object

Level: developer

-seealso: [](ch_unstructured), `DM`, `DMPLEX`, `DMPlexGetCone()`, `DMPlexGetConeSize()`, `DMGetPointSF()`, `DMGetCoordinates()`, `DMSetFromOptions()`

# External Links
$(_doc_external("Dm/DMPlexCheckInterfaceCones"))
"""
function DMPlexCheckInterfaceCones(petsclib::PetscLibType, dm::PetscDM) end

@for_petsc function DMPlexCheckInterfaceCones(petsclib::$UnionPetscLib, dm::PetscDM )

    @chk ccall(
               (:DMPlexCheckInterfaceCones, $petsc_library),
               PetscErrorCode,
               (CDM,),
               dm,
              )


	return nothing
end 

"""
	scale::PetscReal = DMPlexGetScale(petsclib::PetscLibType,dm::PetscDM, unit::PetscUnit) 
Get the scale for the specified fundamental unit

Not Collective

Input Parameters:
- `dm`   - the `DM`
- `unit` - The SI unit

Output Parameter:
- `scale` - The value used to scale all quantities with this unit

Level: advanced

-seealso: [](ch_unstructured), `DM`, `DMPLEX`, `DMPlexSetScale()`, `PetscUnit`

# External Links
$(_doc_external("Dm/DMPlexGetScale"))
"""
function DMPlexGetScale(petsclib::PetscLibType, dm::PetscDM, unit::PetscUnit) end

@for_petsc function DMPlexGetScale(petsclib::$UnionPetscLib, dm::PetscDM, unit::PetscUnit )
	scale_ = Ref{$PetscReal}()

    @chk ccall(
               (:DMPlexGetScale, $petsc_library),
               PetscErrorCode,
               (CDM, PetscUnit, Ptr{$PetscReal}),
               dm, unit, scale_,
              )

	scale = scale_[]

	return scale
end 

"""
	DMPlexSetScale(petsclib::PetscLibType,dm::PetscDM, unit::PetscUnit, scale::PetscReal) 
Set the scale for the specified fundamental unit

Not Collective

Input Parameters:
- `dm`    - the `DM`
- `unit`  - The SI unit
- `scale` - The value used to scale all quantities with this unit

Level: advanced

-seealso: [](ch_unstructured), `DM`, `DMPLEX`, `DMPlexGetScale()`, `PetscUnit`

# External Links
$(_doc_external("Dm/DMPlexSetScale"))
"""
function DMPlexSetScale(petsclib::PetscLibType, dm::PetscDM, unit::PetscUnit, scale::PetscReal) end

@for_petsc function DMPlexSetScale(petsclib::$UnionPetscLib, dm::PetscDM, unit::PetscUnit, scale::$PetscReal )

    @chk ccall(
               (:DMPlexSetScale, $petsc_library),
               PetscErrorCode,
               (CDM, PetscUnit, $PetscReal),
               dm, unit, scale,
              )


	return nothing
end 

"""
	useClPerm::PetscBool = DMPlexGetUseMatClosurePermutation(petsclib::PetscLibType,dm::PetscDM) 
Get flag for using a closure permutation for matrix insertion

Not collective

Input Parameter:
- `dm` - The `DM`

Output Parameter:
- `useClPerm` - The flag

Level: intermediate

-seealso: `DMPlexSetUseMatClosurePermutation()`

# External Links
$(_doc_external("Dm/DMPlexGetUseMatClosurePermutation"))
"""
function DMPlexGetUseMatClosurePermutation(petsclib::PetscLibType, dm::PetscDM) end

@for_petsc function DMPlexGetUseMatClosurePermutation(petsclib::$UnionPetscLib, dm::PetscDM )
	useClPerm_ = Ref{PetscBool}()

    @chk ccall(
               (:DMPlexGetUseMatClosurePermutation, $petsc_library),
               PetscErrorCode,
               (CDM, Ptr{PetscBool}),
               dm, useClPerm_,
              )

	useClPerm = useClPerm_[]

	return useClPerm
end 

"""
	DMPlexSetUseMatClosurePermutation(petsclib::PetscLibType,dm::PetscDM, useClPerm::PetscBool) 
Set flag for using a closure permutation for matrix insertion

Not collective

Input Parameters:
- `dm`        - The `DM`
- `useClPerm` - The flag

Level: intermediate

-seealso: `DMPlexGetUseMatClosurePermutation()`

# External Links
$(_doc_external("Dm/DMPlexSetUseMatClosurePermutation"))
"""
function DMPlexSetUseMatClosurePermutation(petsclib::PetscLibType, dm::PetscDM, useClPerm::PetscBool) end

@for_petsc function DMPlexSetUseMatClosurePermutation(petsclib::$UnionPetscLib, dm::PetscDM, useClPerm::PetscBool )

    @chk ccall(
               (:DMPlexSetUseMatClosurePermutation, $petsc_library),
               PetscErrorCode,
               (CDM, PetscBool),
               dm, useClPerm,
              )


	return nothing
end 

"""
	sp::MatNullSpace = DMPlexCreateRigidBody(petsclib::PetscLibType,dm::PetscDM, field::PetscInt) 
For the default global section, create rigid body modes by function space interpolation

Collective

Input Parameters:
- `dm`    - the `DM`
- `field` - The field number for the rigid body space, or 0 for the default

Output Parameter:
- `sp` - the null space

Level: advanced

-seealso: [](ch_unstructured), `DM`, `DMPLEX`, `MatNullSpaceCreate()`, `PCGAMG`

# External Links
$(_doc_external("Dm/DMPlexCreateRigidBody"))
"""
function DMPlexCreateRigidBody(petsclib::PetscLibType, dm::PetscDM, field::PetscInt) end

@for_petsc function DMPlexCreateRigidBody(petsclib::$UnionPetscLib, dm::PetscDM, field::$PetscInt )
	sp_ = Ref{MatNullSpace}()

    @chk ccall(
               (:DMPlexCreateRigidBody, $petsc_library),
               PetscErrorCode,
               (CDM, $PetscInt, Ptr{MatNullSpace}),
               dm, field, sp_,
              )

	sp = sp_[]

	return sp
end 

"""
	sp::MatNullSpace = DMPlexCreateRigidBodies(petsclib::PetscLibType,dm::PetscDM, nb::PetscInt, label::DMLabel, nids::Vector{PetscInt}, ids::Vector{PetscInt}) 
For the default global section, create rigid body modes by function space interpolation

Collective

Input Parameters:
- `dm`    - the `DM`
- `nb`    - The number of bodies
- `label` - The `DMLabel` marking each domain
- `nids`  - The number of ids per body
- `ids`   - An array of the label ids in sequence for each domain

Output Parameter:
- `sp` - the null space

Level: advanced

-seealso: [](ch_unstructured), `DM`, `DMPLEX`, `MatNullSpaceCreate()`

# External Links
$(_doc_external("Dm/DMPlexCreateRigidBodies"))
"""
function DMPlexCreateRigidBodies(petsclib::PetscLibType, dm::PetscDM, nb::PetscInt, label::DMLabel, nids::Vector{PetscInt}, ids::Vector{PetscInt}) end

@for_petsc function DMPlexCreateRigidBodies(petsclib::$UnionPetscLib, dm::PetscDM, nb::$PetscInt, label::DMLabel, nids::Vector{$PetscInt}, ids::Vector{$PetscInt} )
	sp_ = Ref{MatNullSpace}()

    @chk ccall(
               (:DMPlexCreateRigidBodies, $petsc_library),
               PetscErrorCode,
               (CDM, $PetscInt, DMLabel, Ptr{$PetscInt}, Ptr{$PetscInt}, Ptr{MatNullSpace}),
               dm, nb, label, nids, ids, sp_,
              )

	sp = sp_[]

	return sp
end 

"""
	DMPlexSetMaxProjectionHeight(petsclib::PetscLibType,dm::PetscDM, height::PetscInt) 
In DMPlexProjectXXXLocal() functions, the projected values of a basis function's dofs
are computed by associating the basis function with one of the mesh points in its transitively-closed support, and
evaluating the dual space basis of that point.

Input Parameters:
- `dm`     - the `DMPLEX` object
- `height` - the maximum projection height >= 0

Level: advanced

-seealso: [](ch_unstructured), `DM`, `DMPLEX`, `DMPlexGetMaxProjectionHeight()`, `DMProjectFunctionLocal()`, `DMProjectFunctionLabelLocal()`

# External Links
$(_doc_external("Dm/DMPlexSetMaxProjectionHeight"))
"""
function DMPlexSetMaxProjectionHeight(petsclib::PetscLibType, dm::PetscDM, height::PetscInt) end

@for_petsc function DMPlexSetMaxProjectionHeight(petsclib::$UnionPetscLib, dm::PetscDM, height::$PetscInt )

    @chk ccall(
               (:DMPlexSetMaxProjectionHeight, $petsc_library),
               PetscErrorCode,
               (CDM, $PetscInt),
               dm, height,
              )


	return nothing
end 

"""
	height::PetscInt = DMPlexGetMaxProjectionHeight(petsclib::PetscLibType,dm::PetscDM) 
Get the maximum height (w.r.t. DAG) of mesh points used to evaluate dual bases in
DMPlexProjectXXXLocal() functions.

Input Parameter:
- `dm` - the `DMPLEX` object

Output Parameter:
- `height` - the maximum projection height

Level: intermediate

-seealso: [](ch_unstructured), `DM`, `DMPLEX`, `DMPlexSetMaxProjectionHeight()`, `DMProjectFunctionLocal()`, `DMProjectFunctionLabelLocal()`

# External Links
$(_doc_external("Dm/DMPlexGetMaxProjectionHeight"))
"""
function DMPlexGetMaxProjectionHeight(petsclib::PetscLibType, dm::PetscDM) end

@for_petsc function DMPlexGetMaxProjectionHeight(petsclib::$UnionPetscLib, dm::PetscDM )
	height_ = Ref{$PetscInt}()

    @chk ccall(
               (:DMPlexGetMaxProjectionHeight, $petsc_library),
               PetscErrorCode,
               (CDM, Ptr{$PetscInt}),
               dm, height_,
              )

	height = height_[]

	return height
end 

"""
	DMPlexGlobalToLocalBasis(petsclib::PetscLibType,dm::PetscDM, lv::PetscVec) 
Transform the values in the given local vector from the global basis to the local basis

Input Parameters:
- `dm` - The `DM`
- `lv` - A local vector with values in the global basis

Output Parameter:
- `lv` - A local vector with values in the local basis

Level: developer

-seealso: [](ch_unstructured), `DM`, `DMPLEX`, `DMPlexLocalToGlobalBasis()`, `DMGetLocalSection()`, `DMPlexCreateBasisRotation()`

# External Links
$(_doc_external("Dm/DMPlexGlobalToLocalBasis"))
"""
function DMPlexGlobalToLocalBasis(petsclib::PetscLibType, dm::PetscDM, lv::PetscVec) end

@for_petsc function DMPlexGlobalToLocalBasis(petsclib::$UnionPetscLib, dm::PetscDM, lv::PetscVec )

    @chk ccall(
               (:DMPlexGlobalToLocalBasis, $petsc_library),
               PetscErrorCode,
               (CDM, CVec),
               dm, lv,
              )


	return nothing
end 

"""
	DMPlexLocalToGlobalBasis(petsclib::PetscLibType,dm::PetscDM, lv::PetscVec) 
Transform the values in the given local vector from the local basis to the global basis

Input Parameters:
- `dm` - The `DM`
- `lv` - A local vector with values in the local basis

Output Parameter:
- `lv` - A local vector with values in the global basis

Level: developer

-seealso: [](ch_unstructured), `DM`, `DMPLEX`, `DMPlexGlobalToLocalBasis()`, `DMGetLocalSection()`, `DMPlexCreateBasisRotation()`

# External Links
$(_doc_external("Dm/DMPlexLocalToGlobalBasis"))
"""
function DMPlexLocalToGlobalBasis(petsclib::PetscLibType, dm::PetscDM, lv::PetscVec) end

@for_petsc function DMPlexLocalToGlobalBasis(petsclib::$UnionPetscLib, dm::PetscDM, lv::PetscVec )

    @chk ccall(
               (:DMPlexLocalToGlobalBasis, $petsc_library),
               PetscErrorCode,
               (CDM, CVec),
               dm, lv,
              )


	return nothing
end 

"""
	DMPlexCreateBasisRotation(petsclib::PetscLibType,dm::PetscDM, alpha::PetscReal, beta::PetscReal, gamma::PetscReal) 
Create an internal transformation from the global basis, used to specify boundary conditions
and global solutions, to a local basis, appropriate for discretization integrals and assembly.

Input Parameters:
- `dm`    - The `DM`
- `alpha` - The first Euler angle, and in 2D the only one
- `beta`  - The second Euler angle
- `gamma` - The third Euler angle

Level: developer

-seealso: [](ch_unstructured), `DM`, `DMPLEX`, `DMPlexGlobalToLocalBasis()`, `DMPlexLocalToGlobalBasis()`

# External Links
$(_doc_external("Dm/DMPlexCreateBasisRotation"))
"""
function DMPlexCreateBasisRotation(petsclib::PetscLibType, dm::PetscDM, alpha::PetscReal, beta::PetscReal, gamma::PetscReal) end

@for_petsc function DMPlexCreateBasisRotation(petsclib::$UnionPetscLib, dm::PetscDM, alpha::$PetscReal, beta::$PetscReal, gamma::$PetscReal )

    @chk ccall(
               (:DMPlexCreateBasisRotation, $petsc_library),
               PetscErrorCode,
               (CDM, $PetscReal, $PetscReal, $PetscReal),
               dm, alpha, beta, gamma,
              )


	return nothing
end 

"""
	DMPlexInsertBoundaryValuesEssential(petsclib::PetscLibType,dm::PetscDM, time::PetscReal, field::PetscInt, Nc::PetscInt, comps::Vector{PetscInt}, label::DMLabel, numids::PetscInt, ids::Vector{PetscInt}, func::external, ctx::Cvoid, locX::PetscVec) 
Insert boundary values into a local vector using a function of the coordinates

Input Parameters:
- `dm`     - The `DM`, with a `PetscDS` that matches the problem being constrained
- `time`   - The time
- `field`  - The field to constrain
- `Nc`     - The number of constrained field components, or 0 for all components
- `comps`  - An array of constrained component numbers, or `NULL` for all components
- `label`  - The `DMLabel` defining constrained points
- `numids` - The number of `DMLabel` ids for constrained points
- `ids`    - An array of ids for constrained points
- `func`   - A pointwise function giving boundary values
- `ctx`    - An optional user context for bcFunc

Output Parameter:
- `locX` - A local vector to receives the boundary values

Level: developer

-seealso: [](ch_unstructured), `DM`, `DMPLEX`, `DMLabel`, `DMPlexInsertBoundaryValuesEssentialField()`, `DMPlexInsertBoundaryValuesEssentialBdField()`, `DMAddBoundary()`

# External Links
$(_doc_external("Dm/DMPlexInsertBoundaryValuesEssential"))
"""
function DMPlexInsertBoundaryValuesEssential(petsclib::PetscLibType, dm::PetscDM, time::PetscReal, field::PetscInt, Nc::PetscInt, comps::Vector{PetscInt}, label::DMLabel, numids::PetscInt, ids::Vector{PetscInt}, func::external, ctx::Cvoid, locX::PetscVec) end

@for_petsc function DMPlexInsertBoundaryValuesEssential(petsclib::$UnionPetscLib, dm::PetscDM, time::$PetscReal, field::$PetscInt, Nc::$PetscInt, comps::Vector{$PetscInt}, label::DMLabel, numids::$PetscInt, ids::Vector{$PetscInt}, func::external, ctx::Cvoid, locX::PetscVec )

    @chk ccall(
               (:DMPlexInsertBoundaryValuesEssential, $petsc_library),
               PetscErrorCode,
               (CDM, $PetscReal, $PetscInt, $PetscInt, Ptr{$PetscInt}, DMLabel, $PetscInt, Ptr{$PetscInt}, external, Ptr{Cvoid}, CVec),
               dm, time, field, Nc, comps, label, numids, ids, func, ctx, locX,
              )


	return nothing
end 

"""
	DMPlexInsertBoundaryValuesEssentialField(petsclib::PetscLibType,dm::PetscDM, time::PetscReal, locU::PetscVec, field::PetscInt, Nc::PetscInt, comps::Vector{PetscInt}, label::DMLabel, numids::PetscInt, ids::Vector{PetscInt}, func::external, ctx::Cvoid, locX::PetscVec) 
Insert boundary values into a local vector using a function of the coordinates and field data

Input Parameters:
- `dm`     - The `DM`, with a `PetscDS` that matches the problem being constrained
- `time`   - The time
- `locU`   - A local vector with the input solution values
- `field`  - The field to constrain
- `Nc`     - The number of constrained field components, or 0 for all components
- `comps`  - An array of constrained component numbers, or `NULL` for all components
- `label`  - The `DMLabel` defining constrained points
- `numids` - The number of `DMLabel` ids for constrained points
- `ids`    - An array of ids for constrained points
- `func`   - A pointwise function giving boundary values
- `ctx`    - An optional user context for bcFunc

Output Parameter:
- `locX` - A local vector to receives the boundary values

Level: developer

-seealso: [](ch_unstructured), `DM`, `DMPLEX`, `DMPlexInsertBoundaryValuesEssential()`, `DMPlexInsertBoundaryValuesEssentialBdField()`, `DMAddBoundary()`

# External Links
$(_doc_external("Dm/DMPlexInsertBoundaryValuesEssentialField"))
"""
function DMPlexInsertBoundaryValuesEssentialField(petsclib::PetscLibType, dm::PetscDM, time::PetscReal, locU::PetscVec, field::PetscInt, Nc::PetscInt, comps::Vector{PetscInt}, label::DMLabel, numids::PetscInt, ids::Vector{PetscInt}, func::external, ctx::Cvoid, locX::PetscVec) end

@for_petsc function DMPlexInsertBoundaryValuesEssentialField(petsclib::$UnionPetscLib, dm::PetscDM, time::$PetscReal, locU::PetscVec, field::$PetscInt, Nc::$PetscInt, comps::Vector{$PetscInt}, label::DMLabel, numids::$PetscInt, ids::Vector{$PetscInt}, func::external, ctx::Cvoid, locX::PetscVec )

    @chk ccall(
               (:DMPlexInsertBoundaryValuesEssentialField, $petsc_library),
               PetscErrorCode,
               (CDM, $PetscReal, CVec, $PetscInt, $PetscInt, Ptr{$PetscInt}, DMLabel, $PetscInt, Ptr{$PetscInt}, external, Ptr{Cvoid}, CVec),
               dm, time, locU, field, Nc, comps, label, numids, ids, func, ctx, locX,
              )


	return nothing
end 

"""
	DMPlexInsertBoundaryValuesEssentialBdField(petsclib::PetscLibType,dm::PetscDM, time::PetscReal, locU::PetscVec, field::PetscInt, Nc::PetscInt, comps::Vector{PetscInt}, label::DMLabel, numids::PetscInt, ids::Vector{PetscInt}, func::external, ctx::Cvoid, locX::PetscVec) 
Insert boundary values into a local vector using a function of the coordinates and boundary field data

Collective

Input Parameters:
- `dm`     - The `DM`, with a `PetscDS` that matches the problem being constrained
- `time`   - The time
- `locU`   - A local vector with the input solution values
- `field`  - The field to constrain
- `Nc`     - The number of constrained field components, or 0 for all components
- `comps`  - An array of constrained component numbers, or `NULL` for all components
- `label`  - The `DMLabel` defining constrained points
- `numids` - The number of `DMLabel` ids for constrained points
- `ids`    - An array of ids for constrained points
- `func`   - A pointwise function giving boundary values, the calling sequence is given in `DMProjectBdFieldLabelLocal()`
- `ctx`    - An optional user context for `func`

Output Parameter:
- `locX` - A local vector to receive the boundary values

Level: developer

-seealso: [](ch_unstructured), `DM`, `DMPLEX`, `DMProjectBdFieldLabelLocal()`, `DMPlexInsertBoundaryValuesEssential()`, `DMPlexInsertBoundaryValuesEssentialField()`, `DMAddBoundary()`

# External Links
$(_doc_external("Dm/DMPlexInsertBoundaryValuesEssentialBdField"))
"""
function DMPlexInsertBoundaryValuesEssentialBdField(petsclib::PetscLibType, dm::PetscDM, time::PetscReal, locU::PetscVec, field::PetscInt, Nc::PetscInt, comps::Vector{PetscInt}, label::DMLabel, numids::PetscInt, ids::Vector{PetscInt}, func::external, ctx::Cvoid, locX::PetscVec) end

@for_petsc function DMPlexInsertBoundaryValuesEssentialBdField(petsclib::$UnionPetscLib, dm::PetscDM, time::$PetscReal, locU::PetscVec, field::$PetscInt, Nc::$PetscInt, comps::Vector{$PetscInt}, label::DMLabel, numids::$PetscInt, ids::Vector{$PetscInt}, func::external, ctx::Cvoid, locX::PetscVec )

    @chk ccall(
               (:DMPlexInsertBoundaryValuesEssentialBdField, $petsc_library),
               PetscErrorCode,
               (CDM, $PetscReal, CVec, $PetscInt, $PetscInt, Ptr{$PetscInt}, DMLabel, $PetscInt, Ptr{$PetscInt}, external, Ptr{Cvoid}, CVec),
               dm, time, locU, field, Nc, comps, label, numids, ids, func, ctx, locX,
              )


	return nothing
end 

"""
	DMPlexInsertBoundaryValuesRiemann(petsclib::PetscLibType,dm::PetscDM, time::PetscReal, faceGeometry::PetscVec, cellGeometry::PetscVec, Grad::PetscVec, field::PetscInt, Nc::PetscInt, comps::Vector{PetscInt}, label::DMLabel, numids::PetscInt, ids::Vector{PetscInt}, func::external, ctx::Cvoid, locX::PetscVec) 
Insert boundary values into a local vector

Input Parameters:
- `dm`           - The `DM`, with a `PetscDS` that matches the problem being constrained
- `time`         - The time
- `faceGeometry` - A vector with the FVM face geometry information
- `cellGeometry` - A vector with the FVM cell geometry information
- `Grad`         - A vector with the FVM cell gradient information
- `field`        - The field to constrain
- `Nc`           - The number of constrained field components, or 0 for all components
- `comps`        - An array of constrained component numbers, or `NULL` for all components
- `label`        - The `DMLabel` defining constrained points
- `numids`       - The number of `DMLabel` ids for constrained points
- `ids`          - An array of ids for constrained points
- `func`         - A pointwise function giving boundary values
- `ctx`          - An optional user context for bcFunc

Output Parameter:
- `locX` - A local vector to receives the boundary values

Level: developer

-seealso: [](ch_unstructured), `DM`, `DMPLEX`, `DMPlexInsertBoundaryValuesEssential()`, `DMPlexInsertBoundaryValuesEssentialField()`, `DMAddBoundary()`

# External Links
$(_doc_external("Dm/DMPlexInsertBoundaryValuesRiemann"))
"""
function DMPlexInsertBoundaryValuesRiemann(petsclib::PetscLibType, dm::PetscDM, time::PetscReal, faceGeometry::PetscVec, cellGeometry::PetscVec, Grad::PetscVec, field::PetscInt, Nc::PetscInt, comps::Vector{PetscInt}, label::DMLabel, numids::PetscInt, ids::Vector{PetscInt}, func::external, ctx::Cvoid, locX::PetscVec) end

@for_petsc function DMPlexInsertBoundaryValuesRiemann(petsclib::$UnionPetscLib, dm::PetscDM, time::$PetscReal, faceGeometry::PetscVec, cellGeometry::PetscVec, Grad::PetscVec, field::$PetscInt, Nc::$PetscInt, comps::Vector{$PetscInt}, label::DMLabel, numids::$PetscInt, ids::Vector{$PetscInt}, func::external, ctx::Cvoid, locX::PetscVec )

    @chk ccall(
               (:DMPlexInsertBoundaryValuesRiemann, $petsc_library),
               PetscErrorCode,
               (CDM, $PetscReal, CVec, CVec, CVec, $PetscInt, $PetscInt, Ptr{$PetscInt}, DMLabel, $PetscInt, Ptr{$PetscInt}, external, Ptr{Cvoid}, CVec),
               dm, time, faceGeometry, cellGeometry, Grad, field, Nc, comps, label, numids, ids, func, ctx, locX,
              )


	return nothing
end 

"""
	DMPlexInsertBoundaryValues(petsclib::PetscLibType,dm::PetscDM, insertEssential::PetscBool, locX::PetscVec, time::PetscReal, faceGeomFVM::PetscVec, cellGeomFVM::PetscVec, gradFVM::PetscVec) 
Puts coefficients which represent boundary values into the local solution vector

Not Collective

Input Parameters:
- `dm`              - The `DM`
- `insertEssential` - Should I insert essential (e.g. Dirichlet) or inessential (e.g. Neumann) boundary conditions
- `time`            - The time
- `faceGeomFVM`     - Face geometry data for FV discretizations
- `cellGeomFVM`     - Cell geometry data for FV discretizations
- `gradFVM`         - Gradient reconstruction data for FV discretizations

Output Parameter:
- `locX` - Solution updated with boundary values

Level: intermediate

-seealso: [](ch_unstructured), `DM`, `DMPLEX`, `DMProjectFunctionLabelLocal()`, `DMAddBoundary()`

# External Links
$(_doc_external("Dm/DMPlexInsertBoundaryValues"))
"""
function DMPlexInsertBoundaryValues(petsclib::PetscLibType, dm::PetscDM, insertEssential::PetscBool, locX::PetscVec, time::PetscReal, faceGeomFVM::PetscVec, cellGeomFVM::PetscVec, gradFVM::PetscVec) end

@for_petsc function DMPlexInsertBoundaryValues(petsclib::$UnionPetscLib, dm::PetscDM, insertEssential::PetscBool, locX::PetscVec, time::$PetscReal, faceGeomFVM::PetscVec, cellGeomFVM::PetscVec, gradFVM::PetscVec )

    @chk ccall(
               (:DMPlexInsertBoundaryValues, $petsc_library),
               PetscErrorCode,
               (CDM, PetscBool, CVec, $PetscReal, CVec, CVec, CVec),
               dm, insertEssential, locX, time, faceGeomFVM, cellGeomFVM, gradFVM,
              )


	return nothing
end 

"""
	DMPlexInsertTimeDerivativeBoundaryValues(petsclib::PetscLibType,dm::PetscDM, insertEssential::PetscBool, locX_t::PetscVec, time::PetscReal, faceGeomFVM::PetscVec, cellGeomFVM::PetscVec, gradFVM::PetscVec) 
Puts coefficients which represent boundary values of the time derivative into the local solution vector

Input Parameters:
- `dm`              - The `DM`
- `insertEssential` - Should I insert essential (e.g. Dirichlet) or inessential (e.g. Neumann) boundary conditions
- `time`            - The time
- `faceGeomFVM`     - Face geometry data for FV discretizations
- `cellGeomFVM`     - Cell geometry data for FV discretizations
- `gradFVM`         - Gradient reconstruction data for FV discretizations

Output Parameter:
- `locX_t` - Solution updated with boundary values

Level: developer

-seealso: [](ch_unstructured), `DM`, `DMPLEX`, `DMProjectFunctionLabelLocal()`

# External Links
$(_doc_external("Dm/DMPlexInsertTimeDerivativeBoundaryValues"))
"""
function DMPlexInsertTimeDerivativeBoundaryValues(petsclib::PetscLibType, dm::PetscDM, insertEssential::PetscBool, locX_t::PetscVec, time::PetscReal, faceGeomFVM::PetscVec, cellGeomFVM::PetscVec, gradFVM::PetscVec) end

@for_petsc function DMPlexInsertTimeDerivativeBoundaryValues(petsclib::$UnionPetscLib, dm::PetscDM, insertEssential::PetscBool, locX_t::PetscVec, time::$PetscReal, faceGeomFVM::PetscVec, cellGeomFVM::PetscVec, gradFVM::PetscVec )

    @chk ccall(
               (:DMPlexInsertTimeDerivativeBoundaryValues, $petsc_library),
               PetscErrorCode,
               (CDM, PetscBool, CVec, $PetscReal, CVec, CVec, CVec),
               dm, insertEssential, locX_t, time, faceGeomFVM, cellGeomFVM, gradFVM,
              )


	return nothing
end 

"""
	DMPlexInsertBounds(petsclib::PetscLibType,dm::PetscDM, lower::PetscBool, time::PetscReal, locB::PetscVec) 
Puts coefficients which represent solution bounds into the local bounds vector

Not Collective

Input Parameters:
- `dm`    - The `DM`
- `lower` - If `PETSC_TRUE` use `DM_BC_LOWER_BOUND` conditions, otherwise use `DM_BC_UPPER_BOUND`
- `time`  - The time

Output Parameter:
- `locB` - Bounds vector updated with new bounds

Level: intermediate

-seealso: [](ch_unstructured), `DM`, `DMPLEX`, `DMProjectFunctionLabelLocal()`, `PetscDSAddBoundary()`

# External Links
$(_doc_external("Dm/DMPlexInsertBounds"))
"""
function DMPlexInsertBounds(petsclib::PetscLibType, dm::PetscDM, lower::PetscBool, time::PetscReal, locB::PetscVec) end

@for_petsc function DMPlexInsertBounds(petsclib::$UnionPetscLib, dm::PetscDM, lower::PetscBool, time::$PetscReal, locB::PetscVec )

    @chk ccall(
               (:DMPlexInsertBounds, $petsc_library),
               PetscErrorCode,
               (CDM, PetscBool, $PetscReal, CVec),
               dm, lower, time, locB,
              )


	return nothing
end 

"""
	DMPlexInsertBoundaryValuesFVM(petsclib::PetscLibType,dm::PetscDM, fv::PetscFV, locX::PetscVec, time::PetscReal, locGradient::PetscVec) 

# External Links
$(_doc_external("Dm/DMPlexInsertBoundaryValuesFVM"))
"""
function DMPlexInsertBoundaryValuesFVM(petsclib::PetscLibType, dm::PetscDM, fv::PetscFV, locX::PetscVec, time::PetscReal, locGradient::PetscVec) end

@for_petsc function DMPlexInsertBoundaryValuesFVM(petsclib::$UnionPetscLib, dm::PetscDM, fv::PetscFV, locX::PetscVec, time::$PetscReal, locGradient::PetscVec )
	locGradient_ = Ref(locGradient.ptr)

    @chk ccall(
               (:DMPlexInsertBoundaryValuesFVM, $petsc_library),
               PetscErrorCode,
               (CDM, PetscFV, CVec, $PetscReal, Ptr{CVec}),
               dm, fv, locX, time, locGradient_,
              )

	locGradient.ptr = C_NULL

	return nothing
end 

"""
	DMPlexComputeL2FluxDiffVecLocal(petsclib::PetscLibType,lu::PetscVec, f::PetscInt, lmu::PetscVec, mf::PetscInt, eFlux::PetscVec) 
This function computes the integral of the difference between the gradient of field `f`in `u` and field `mf` in `mu`

Collective

Input Parameters:
- `lu`  - The local `Vec` containing the primal solution
- `f`   - The field number for the potential
- `lmu` - The local `Vec` containing the mixed solution
- `mf`  - The field number for the flux

Output Parameter:
- `eFlux` - A global `Vec` which holds

Level: advanced

-seealso: [](ch_unstructured), `DM`, `DMPLEX`, `DMPlexComputeL2FluxDiffVec()`, `DMProjectFunction()`, `DMComputeL2Diff()`, `DMPlexComputeL2FieldDiff()`, `DMComputeL2GradientDiff()`

# External Links
$(_doc_external("Dm/DMPlexComputeL2FluxDiffVecLocal"))
"""
function DMPlexComputeL2FluxDiffVecLocal(petsclib::PetscLibType, lu::PetscVec, f::PetscInt, lmu::PetscVec, mf::PetscInt, eFlux::PetscVec) end

@for_petsc function DMPlexComputeL2FluxDiffVecLocal(petsclib::$UnionPetscLib, lu::PetscVec, f::$PetscInt, lmu::PetscVec, mf::$PetscInt, eFlux::PetscVec )

    @chk ccall(
               (:DMPlexComputeL2FluxDiffVecLocal, $petsc_library),
               PetscErrorCode,
               (CVec, $PetscInt, CVec, $PetscInt, CVec),
               lu, f, lmu, mf, eFlux,
              )


	return nothing
end 

"""
	DMPlexComputeL2FluxDiffVec(petsclib::PetscLibType,u::PetscVec, f::PetscInt, mu::PetscVec, mf::PetscInt, eFlux::PetscVec) 
This function computes the integral of the difference between the gradient of field `f`in `u` and field `mf` in `mu`

Collective

Input Parameters:
- `u`  - The global `Vec` containing the primal solution
- `f`  - The field number for the potential
- `mu` - The global `Vec` containing the mixed solution
- `mf` - The field number for the flux

Output Parameter:
- `eFlux` - A global `Vec` which holds

Level: advanced

-seealso: [](ch_unstructured), `DM`, `DMPLEX`, `DMPlexComputeL2FluxDiffVecLocal()`, `DMProjectFunction()`, `DMComputeL2Diff()`, `DMPlexComputeL2FieldDiff()`, `DMComputeL2GradientDiff()`

# External Links
$(_doc_external("Dm/DMPlexComputeL2FluxDiffVec"))
"""
function DMPlexComputeL2FluxDiffVec(petsclib::PetscLibType, u::PetscVec, f::PetscInt, mu::PetscVec, mf::PetscInt, eFlux::PetscVec) end

@for_petsc function DMPlexComputeL2FluxDiffVec(petsclib::$UnionPetscLib, u::PetscVec, f::$PetscInt, mu::PetscVec, mf::$PetscInt, eFlux::PetscVec )

    @chk ccall(
               (:DMPlexComputeL2FluxDiffVec, $petsc_library),
               PetscErrorCode,
               (CVec, $PetscInt, CVec, $PetscInt, CVec),
               u, f, mu, mf, eFlux,
              )


	return nothing
end 

"""
	DMPlexComputeClementInterpolant(petsclib::PetscLibType,dm::PetscDM, locX::PetscVec, locC::PetscVec) 
This function computes the L2 projection of the cellwise values of a function u onto P1

Collective

Input Parameters:
- `dm`   - The `DM`
- `locX` - The coefficient vector u_h

Output Parameter:
- `locC` - A `Vec` which holds the Clement interpolant of the function

Level: developer

-seealso: [](ch_unstructured), `DM`, `DMPLEX`, `DMProjectFunction()`, `DMComputeL2Diff()`, `DMPlexComputeL2FieldDiff()`, `DMComputeL2GradientDiff()`

# External Links
$(_doc_external("Dm/DMPlexComputeClementInterpolant"))
"""
function DMPlexComputeClementInterpolant(petsclib::PetscLibType, dm::PetscDM, locX::PetscVec, locC::PetscVec) end

@for_petsc function DMPlexComputeClementInterpolant(petsclib::$UnionPetscLib, dm::PetscDM, locX::PetscVec, locC::PetscVec )

    @chk ccall(
               (:DMPlexComputeClementInterpolant, $petsc_library),
               PetscErrorCode,
               (CDM, CVec, CVec),
               dm, locX, locC,
              )


	return nothing
end 

"""
	DMPlexComputeGradientClementInterpolant(petsclib::PetscLibType,dm::PetscDM, locX::PetscVec, locC::PetscVec) 
This function computes the L2 projection of the cellwise gradient of a function u onto P1

Collective

Input Parameters:
- `dm`   - The `DM`
- `locX` - The coefficient vector u_h

Output Parameter:
- `locC` - A `Vec` which holds the Clement interpolant of the gradient

Level: developer

-seealso: [](ch_unstructured), `DM`, `DMPLEX`, `DMProjectFunction()`, `DMComputeL2Diff()`, `DMPlexComputeL2FieldDiff()`, `DMComputeL2GradientDiff()`

# External Links
$(_doc_external("Dm/DMPlexComputeGradientClementInterpolant"))
"""
function DMPlexComputeGradientClementInterpolant(petsclib::PetscLibType, dm::PetscDM, locX::PetscVec, locC::PetscVec) end

@for_petsc function DMPlexComputeGradientClementInterpolant(petsclib::$UnionPetscLib, dm::PetscDM, locX::PetscVec, locC::PetscVec )

    @chk ccall(
               (:DMPlexComputeGradientClementInterpolant, $petsc_library),
               PetscErrorCode,
               (CDM, CVec, CVec),
               dm, locX, locC,
              )


	return nothing
end 

"""
	integral::PetscScalar = DMPlexComputeIntegralFEM(petsclib::PetscLibType,dm::PetscDM, X::PetscVec, user::Cvoid) 
Form the integral over the domain from the global input X using pointwise functions specified by the user

Input Parameters:
- `dm`   - The mesh
- `X`    - Global input vector
- `user` - The user context

Output Parameter:
- `integral` - Integral for each field

Level: developer

-seealso: [](ch_unstructured), `DM`, `DMPLEX`, `DMPlexSNESComputeResidualFEM()`

# External Links
$(_doc_external("Dm/DMPlexComputeIntegralFEM"))
"""
function DMPlexComputeIntegralFEM(petsclib::PetscLibType, dm::PetscDM, X::PetscVec, user::Cvoid) end

@for_petsc function DMPlexComputeIntegralFEM(petsclib::$UnionPetscLib, dm::PetscDM, X::PetscVec, user::Cvoid )
	integral_ = Ref{$PetscScalar}()

    @chk ccall(
               (:DMPlexComputeIntegralFEM, $petsc_library),
               PetscErrorCode,
               (CDM, CVec, Ptr{$PetscScalar}, Ptr{Cvoid}),
               dm, X, integral_, user,
              )

	integral = integral_[]

	return integral
end 

"""
	DMPlexComputeCellwiseIntegralFEM(petsclib::PetscLibType,dm::PetscDM, X::PetscVec, F::PetscVec, user::Cvoid) 
Form the vector of cellwise integrals F from the global input X using pointwise functions specified by the user

Input Parameters:
- `dm`   - The mesh
- `X`    - Global input vector
- `user` - The user context

Output Parameter:
- `F` - Cellwise integrals for each field

Level: developer

-seealso: [](ch_unstructured), `DM`, `DMPLEX`, `DMPlexSNESComputeResidualFEM()`

# External Links
$(_doc_external("Dm/DMPlexComputeCellwiseIntegralFEM"))
"""
function DMPlexComputeCellwiseIntegralFEM(petsclib::PetscLibType, dm::PetscDM, X::PetscVec, F::PetscVec, user::Cvoid) end

@for_petsc function DMPlexComputeCellwiseIntegralFEM(petsclib::$UnionPetscLib, dm::PetscDM, X::PetscVec, F::PetscVec, user::Cvoid )

    @chk ccall(
               (:DMPlexComputeCellwiseIntegralFEM, $petsc_library),
               PetscErrorCode,
               (CDM, CVec, CVec, Ptr{Cvoid}),
               dm, X, F, user,
              )


	return nothing
end 

#=
"""
	DMPlexComputeBdIntegral(petsclib::PetscLibType,dm::PetscDM, X::PetscVec, label::DMLabel, numVals::PetscInt, vals::Vector{PetscInt}, ::Cvoid(funcs) 
Form the integral over the specified boundary from the global input X using pointwise functions specified by the user

Input Parameters:
- `dm`      - The mesh
- `X`       - Global input vector
- `label`   - The boundary `DMLabel`
- `numVals` - The number of label values to use, or `PETSC_DETERMINE` for all values
- `vals`    - The label values to use, or NULL for all values
- `funcs`   - The functions to integrate along the boundary for each field
- `user`    - The user context

Output Parameter:
- `integral` - Integral for each field

Level: developer

-seealso: [](ch_unstructured), `DM`, `DMPLEX`, `DMPlexComputeIntegralFEM()`, `DMPlexComputeBdResidualFEM()`

# External Links
$(_doc_external("Dm/DMPlexComputeBdIntegral"))
"""
function DMPlexComputeBdIntegral(petsclib::PetscLibType, dm::PetscDM, X::PetscVec, label::DMLabel, numVals::PetscInt, vals::Vector{PetscInt}, ::Cvoid(funcs) end

@for_petsc function DMPlexComputeBdIntegral(petsclib::$UnionPetscLib, dm::PetscDM, X::PetscVec, label::DMLabel, numVals::$PetscInt, vals::Vector{$PetscInt}, ::Cvoid(funcs )

    @chk ccall(
               (:DMPlexComputeBdIntegral, $petsc_library),
               PetscErrorCode,
               (CDM, CVec, DMLabel, $PetscInt, Ptr{$PetscInt}, Cvoid(funcs),
               dm, X, label, numVals, vals, ,
              )


	return nothing
end 
=#

"""
	DMPlexComputeInterpolatorNested(petsclib::PetscLibType,dmc::PetscDM, dmf::PetscDM, isRefined::PetscBool, In::PetscMat, user::Cvoid) 
Form the local portion of the interpolation matrix from the coarse `DM` to a uniformly refined `DM`.

Input Parameters:
- `dmc`       - The coarse mesh
- `dmf`       - The fine mesh
- `isRefined` - Flag indicating regular refinement, rather than the same topology
- `user`      - The user context

Output Parameter:
- `In` - The interpolation matrix

Level: developer

-seealso: [](ch_unstructured), `DM`, `DMPLEX`, `DMPlexComputeInterpolatorGeneral()`

# External Links
$(_doc_external("Dm/DMPlexComputeInterpolatorNested"))
"""
function DMPlexComputeInterpolatorNested(petsclib::PetscLibType, dmc::PetscDM, dmf::PetscDM, isRefined::PetscBool, In::PetscMat, user::Cvoid) end

@for_petsc function DMPlexComputeInterpolatorNested(petsclib::$UnionPetscLib, dmc::PetscDM, dmf::PetscDM, isRefined::PetscBool, In::PetscMat, user::Cvoid )

    @chk ccall(
               (:DMPlexComputeInterpolatorNested, $petsc_library),
               PetscErrorCode,
               (CDM, CDM, PetscBool, CMat, Ptr{Cvoid}),
               dmc, dmf, isRefined, In, user,
              )


	return nothing
end 

"""
	DMPlexComputeMassMatrixNested(petsclib::PetscLibType,dmc::PetscDM, dmf::PetscDM, mass::PetscMat, user::Cvoid) 

# External Links
$(_doc_external("Dm/DMPlexComputeMassMatrixNested"))
"""
function DMPlexComputeMassMatrixNested(petsclib::PetscLibType, dmc::PetscDM, dmf::PetscDM, mass::PetscMat, user::Cvoid) end

@for_petsc function DMPlexComputeMassMatrixNested(petsclib::$UnionPetscLib, dmc::PetscDM, dmf::PetscDM, mass::PetscMat, user::Cvoid )

    @chk ccall(
               (:DMPlexComputeMassMatrixNested, $petsc_library),
               PetscErrorCode,
               (CDM, CDM, CMat, Ptr{Cvoid}),
               dmc, dmf, mass, user,
              )


	return nothing
end 

"""
	DMPlexComputeInterpolatorGeneral(petsclib::PetscLibType,dmc::PetscDM, dmf::PetscDM, In::PetscMat, user::Cvoid) 
Form the local portion of the interpolation matrix from the coarse `DM` to a non

Input Parameters:
- `dmf`  - The fine mesh
- `dmc`  - The coarse mesh
- `user` - The user context

Output Parameter:
- `In` - The interpolation matrix

Level: developer

-seealso: [](ch_unstructured), `DM`, `DMPLEX`, `DMPlexComputeInterpolatorNested()`

# External Links
$(_doc_external("Dm/DMPlexComputeInterpolatorGeneral"))
"""
function DMPlexComputeInterpolatorGeneral(petsclib::PetscLibType, dmc::PetscDM, dmf::PetscDM, In::PetscMat, user::Cvoid) end

@for_petsc function DMPlexComputeInterpolatorGeneral(petsclib::$UnionPetscLib, dmc::PetscDM, dmf::PetscDM, In::PetscMat, user::Cvoid )

    @chk ccall(
               (:DMPlexComputeInterpolatorGeneral, $petsc_library),
               PetscErrorCode,
               (CDM, CDM, CMat, Ptr{Cvoid}),
               dmc, dmf, In, user,
              )


	return nothing
end 

"""
	DMPlexComputeMassMatrixGeneral(petsclib::PetscLibType,dmc::PetscDM, dmf::PetscDM, mass::PetscMat, user::Cvoid) 
Form the local portion of the mass matrix from the coarse `DM` to a non

Input Parameters:
- `dmf`  - The fine mesh
- `dmc`  - The coarse mesh
- `user` - The user context

Output Parameter:
- `mass` - The mass matrix

Level: developer

-seealso: [](ch_unstructured), `DM`, `DMPLEX`, `DMPlexComputeMassMatrixNested()`, `DMPlexComputeInterpolatorNested()`, `DMPlexComputeInterpolatorGeneral()`

# External Links
$(_doc_external("Dm/DMPlexComputeMassMatrixGeneral"))
"""
function DMPlexComputeMassMatrixGeneral(petsclib::PetscLibType, dmc::PetscDM, dmf::PetscDM, mass::PetscMat, user::Cvoid) end

@for_petsc function DMPlexComputeMassMatrixGeneral(petsclib::$UnionPetscLib, dmc::PetscDM, dmf::PetscDM, mass::PetscMat, user::Cvoid )

    @chk ccall(
               (:DMPlexComputeMassMatrixGeneral, $petsc_library),
               PetscErrorCode,
               (CDM, CDM, CMat, Ptr{Cvoid}),
               dmc, dmf, mass, user,
              )


	return nothing
end 

"""
	DMPlexComputeInjectorFEM(petsclib::PetscLibType,dmc::PetscDM, dmf::PetscDM, sc::VecScatter, user::Cvoid) 
Compute a mapping from coarse unknowns to fine unknowns

Input Parameters:
- `dmc`  - The coarse mesh
- `dmf`  - The fine mesh
- `user` - The user context

Output Parameter:
- `sc` - The mapping

Level: developer

-seealso: [](ch_unstructured), `DM`, `DMPLEX`, `DMPlexComputeInterpolatorNested()`

# External Links
$(_doc_external("Dm/DMPlexComputeInjectorFEM"))
"""
function DMPlexComputeInjectorFEM(petsclib::PetscLibType, dmc::PetscDM, dmf::PetscDM, sc::VecScatter, user::Cvoid) end

@for_petsc function DMPlexComputeInjectorFEM(petsclib::$UnionPetscLib, dmc::PetscDM, dmf::PetscDM, sc::VecScatter, user::Cvoid )

    @chk ccall(
               (:DMPlexComputeInjectorFEM, $petsc_library),
               PetscErrorCode,
               (CDM, CDM, Ptr{VecScatter}, Ptr{Cvoid}),
               dmc, dmf, sc, user,
              )


	return nothing
end 

"""
	u::Vector{PetscScalar},u_t::Vector{PetscScalar},a::Vector{PetscScalar} = DMPlexGetCellFields(petsclib::PetscLibType,dm::PetscDM, cellIS::IS, locX::PetscVec, locX_t::PetscVec, locA::PetscVec) 
Retrieve the field values values for a chunk of cells

Input Parameters:
- `dm`     - The `DM`
- `cellIS` - The cells to include
- `locX`   - A local vector with the solution fields
- `locX_t` - A local vector with solution field time derivatives, or `NULL`
- `locA`   - A local vector with auxiliary fields, or `NULL`

Output Parameters:
- `u`   - The field coefficients
- `u_t` - The fields derivative coefficients
- `a`   - The auxiliary field coefficients

Level: developer

-seealso: [](ch_unstructured), `DM`, `DMPLEX`, `DMPlexGetFaceFields()`

# External Links
$(_doc_external("Dm/DMPlexGetCellFields"))
"""
function DMPlexGetCellFields(petsclib::PetscLibType, dm::PetscDM, cellIS::IS, locX::PetscVec, locX_t::PetscVec, locA::PetscVec) end

@for_petsc function DMPlexGetCellFields(petsclib::$UnionPetscLib, dm::PetscDM, cellIS::IS, locX::PetscVec, locX_t::PetscVec, locA::PetscVec )
	u_ = Ref{Ptr{$PetscScalar}}()
	u_t_ = Ref{Ptr{$PetscScalar}}()
	a_ = Ref{Ptr{$PetscScalar}}()

    @chk ccall(
               (:DMPlexGetCellFields, $petsc_library),
               PetscErrorCode,
               (CDM, IS, CVec, CVec, CVec, Ptr{Ptr{$PetscScalar}}, Ptr{Ptr{$PetscScalar}}, Ptr{Ptr{$PetscScalar}}),
               dm, cellIS, locX, locX_t, locA, u_, u_t_, a_,
              )

	u = unsafe_wrap(Array, u_[], VecGetLocalSize(petsclib, x); own = false)
	u_t = unsafe_wrap(Array, u_t_[], VecGetLocalSize(petsclib, x); own = false)
	a = unsafe_wrap(Array, a_[], VecGetLocalSize(petsclib, x); own = false)

	return u,u_t,a
end 

"""
	u::Vector{PetscScalar},u_t::Vector{PetscScalar},a::Vector{PetscScalar} = DMPlexRestoreCellFields(petsclib::PetscLibType,dm::PetscDM, cellIS::IS, locX::PetscVec, locX_t::PetscVec, locA::PetscVec) 
Restore the field values values for a chunk of cells

Input Parameters:
- `dm`     - The `DM`
- `cellIS` - The cells to include
- `locX`   - A local vector with the solution fields
- `locX_t` - A local vector with solution field time derivatives, or `NULL`
- `locA`   - A local vector with auxiliary fields, or `NULL`

Output Parameters:
- `u`   - The field coefficients
- `u_t` - The fields derivative coefficients
- `a`   - The auxiliary field coefficients

Level: developer

-seealso: [](ch_unstructured), `DM`, `DMPLEX`, `DMPlexGetFaceFields()`

# External Links
$(_doc_external("Dm/DMPlexRestoreCellFields"))
"""
function DMPlexRestoreCellFields(petsclib::PetscLibType, dm::PetscDM, cellIS::IS, locX::PetscVec, locX_t::PetscVec, locA::PetscVec) end

@for_petsc function DMPlexRestoreCellFields(petsclib::$UnionPetscLib, dm::PetscDM, cellIS::IS, locX::PetscVec, locX_t::PetscVec, locA::PetscVec )
	u_ = Ref{Ptr{$PetscScalar}}()
	u_t_ = Ref{Ptr{$PetscScalar}}()
	a_ = Ref{Ptr{$PetscScalar}}()

    @chk ccall(
               (:DMPlexRestoreCellFields, $petsc_library),
               PetscErrorCode,
               (CDM, IS, CVec, CVec, CVec, Ptr{Ptr{$PetscScalar}}, Ptr{Ptr{$PetscScalar}}, Ptr{Ptr{$PetscScalar}}),
               dm, cellIS, locX, locX_t, locA, u_, u_t_, a_,
              )

	u = unsafe_wrap(Array, u_[], VecGetLocalSize(petsclib, x); own = false)
	u_t = unsafe_wrap(Array, u_t_[], VecGetLocalSize(petsclib, x); own = false)
	a = unsafe_wrap(Array, a_[], VecGetLocalSize(petsclib, x); own = false)

	return u,u_t,a
end 

"""
	Nface::PetscInt,uL::Vector{PetscScalar},uR::Vector{PetscScalar} = DMPlexGetFaceFields(petsclib::PetscLibType,dm::PetscDM, fStart::PetscInt, fEnd::PetscInt, locX::PetscVec, locX_t::PetscVec, faceGeometry::PetscVec, cellGeometry::PetscVec, locGrad::PetscVec) 
Retrieve the field values values for a chunk of faces

Input Parameters:
- `dm`           - The `DM`
- `fStart`       - The first face to include
- `fEnd`         - The first face to exclude
- `locX`         - A local vector with the solution fields
- `locX_t`       - A local vector with solution field time derivatives, or `NULL`
- `faceGeometry` - A local vector with face geometry
- `cellGeometry` - A local vector with cell geometry
- `locGrad`      - A local vector with field gradients, or `NULL`

Output Parameters:
- `Nface` - The number of faces with field values
- `uL`    - The field values at the left side of the face
- `uR`    - The field values at the right side of the face

Level: developer

-seealso: [](ch_unstructured), `DM`, `DMPLEX`, `DMPlexGetCellFields()`

# External Links
$(_doc_external("Dm/DMPlexGetFaceFields"))
"""
function DMPlexGetFaceFields(petsclib::PetscLibType, dm::PetscDM, fStart::PetscInt, fEnd::PetscInt, locX::PetscVec, locX_t::PetscVec, faceGeometry::PetscVec, cellGeometry::PetscVec, locGrad::PetscVec) end

@for_petsc function DMPlexGetFaceFields(petsclib::$UnionPetscLib, dm::PetscDM, fStart::$PetscInt, fEnd::$PetscInt, locX::PetscVec, locX_t::PetscVec, faceGeometry::PetscVec, cellGeometry::PetscVec, locGrad::PetscVec )
	Nface_ = Ref{$PetscInt}()
	uL_ = Ref{Ptr{$PetscScalar}}()
	uR_ = Ref{Ptr{$PetscScalar}}()

    @chk ccall(
               (:DMPlexGetFaceFields, $petsc_library),
               PetscErrorCode,
               (CDM, $PetscInt, $PetscInt, CVec, CVec, CVec, CVec, CVec, Ptr{$PetscInt}, Ptr{Ptr{$PetscScalar}}, Ptr{Ptr{$PetscScalar}}),
               dm, fStart, fEnd, locX, locX_t, faceGeometry, cellGeometry, locGrad, Nface_, uL_, uR_,
              )

	Nface = Nface_[]
	uL = unsafe_wrap(Array, uL_[], VecGetLocalSize(petsclib, x); own = false)
	uR = unsafe_wrap(Array, uR_[], VecGetLocalSize(petsclib, x); own = false)

	return Nface,uL,uR
end 

"""
	Nface::PetscInt,uL::Vector{PetscScalar},uR::Vector{PetscScalar} = DMPlexRestoreFaceFields(petsclib::PetscLibType,dm::PetscDM, fStart::PetscInt, fEnd::PetscInt, locX::PetscVec, locX_t::PetscVec, faceGeometry::PetscVec, cellGeometry::PetscVec, locGrad::PetscVec) 
Restore the field values values for a chunk of faces

Input Parameters:
- `dm`           - The `DM`
- `fStart`       - The first face to include
- `fEnd`         - The first face to exclude
- `locX`         - A local vector with the solution fields
- `locX_t`       - A local vector with solution field time derivatives, or `NULL`
- `faceGeometry` - A local vector with face geometry
- `cellGeometry` - A local vector with cell geometry
- `locGrad`      - A local vector with field gradients, or `NULL`

Output Parameters:
- `Nface` - The number of faces with field values
- `uL`    - The field values at the left side of the face
- `uR`    - The field values at the right side of the face

Level: developer

-seealso: [](ch_unstructured), `DM`, `DMPLEX`, `DMPlexGetFaceFields()`

# External Links
$(_doc_external("Dm/DMPlexRestoreFaceFields"))
"""
function DMPlexRestoreFaceFields(petsclib::PetscLibType, dm::PetscDM, fStart::PetscInt, fEnd::PetscInt, locX::PetscVec, locX_t::PetscVec, faceGeometry::PetscVec, cellGeometry::PetscVec, locGrad::PetscVec) end

@for_petsc function DMPlexRestoreFaceFields(petsclib::$UnionPetscLib, dm::PetscDM, fStart::$PetscInt, fEnd::$PetscInt, locX::PetscVec, locX_t::PetscVec, faceGeometry::PetscVec, cellGeometry::PetscVec, locGrad::PetscVec )
	Nface_ = Ref{$PetscInt}()
	uL_ = Ref{Ptr{$PetscScalar}}()
	uR_ = Ref{Ptr{$PetscScalar}}()

    @chk ccall(
               (:DMPlexRestoreFaceFields, $petsc_library),
               PetscErrorCode,
               (CDM, $PetscInt, $PetscInt, CVec, CVec, CVec, CVec, CVec, Ptr{$PetscInt}, Ptr{Ptr{$PetscScalar}}, Ptr{Ptr{$PetscScalar}}),
               dm, fStart, fEnd, locX, locX_t, faceGeometry, cellGeometry, locGrad, Nface_, uL_, uR_,
              )

	Nface = Nface_[]
	uL = unsafe_wrap(Array, uL_[], VecGetLocalSize(petsclib, x); own = false)
	uR = unsafe_wrap(Array, uR_[], VecGetLocalSize(petsclib, x); own = false)

	return Nface,uL,uR
end 

"""
	Nface::PetscInt,vol::Vector{PetscReal} = DMPlexGetFaceGeometry(petsclib::PetscLibType,dm::PetscDM, fStart::PetscInt, fEnd::PetscInt, faceGeometry::PetscVec, cellGeometry::PetscVec, fgeom::Vector{PetscFVFaceGeom}) 
Retrieve the geometric values for a chunk of faces

Input Parameters:
- `dm`           - The `DM`
- `fStart`       - The first face to include
- `fEnd`         - The first face to exclude
- `faceGeometry` - A local vector with face geometry
- `cellGeometry` - A local vector with cell geometry

Output Parameters:
- `Nface` - The number of faces with field values
- `fgeom` - The face centroid and normals
- `vol`   - The cell volumes

Level: developer

-seealso: [](ch_unstructured), `DM`, `DMPLEX`, `DMPlexGetCellFields()`

# External Links
$(_doc_external("Dm/DMPlexGetFaceGeometry"))
"""
function DMPlexGetFaceGeometry(petsclib::PetscLibType, dm::PetscDM, fStart::PetscInt, fEnd::PetscInt, faceGeometry::PetscVec, cellGeometry::PetscVec, fgeom::Vector{PetscFVFaceGeom}) end

@for_petsc function DMPlexGetFaceGeometry(petsclib::$UnionPetscLib, dm::PetscDM, fStart::$PetscInt, fEnd::$PetscInt, faceGeometry::PetscVec, cellGeometry::PetscVec, fgeom::Vector{PetscFVFaceGeom} )
	Nface_ = Ref{$PetscInt}()
	fgeom_ = Ref(pointer(fgeom))
	vol_ = Ref{Ptr{$PetscReal}}()

    @chk ccall(
               (:DMPlexGetFaceGeometry, $petsc_library),
               PetscErrorCode,
               (CDM, $PetscInt, $PetscInt, CVec, CVec, Ptr{$PetscInt}, Ptr{Ptr{PetscFVFaceGeom}}, Ptr{Ptr{$PetscReal}}),
               dm, fStart, fEnd, faceGeometry, cellGeometry, Nface_, fgeom_, vol_,
              )

	Nface = Nface_[]
	vol = unsafe_wrap(Array, vol_[], VecGetLocalSize(petsclib, x); own = false)

	return Nface,vol
end 

"""
	Nface::PetscInt,vol::Vector{PetscReal} = DMPlexRestoreFaceGeometry(petsclib::PetscLibType,dm::PetscDM, fStart::PetscInt, fEnd::PetscInt, faceGeometry::PetscVec, cellGeometry::PetscVec, fgeom::Vector{PetscFVFaceGeom}) 
Restore the field values values for a chunk of faces

Input Parameters:
- `dm`           - The `DM`
- `fStart`       - The first face to include
- `fEnd`         - The first face to exclude
- `faceGeometry` - A local vector with face geometry
- `cellGeometry` - A local vector with cell geometry

Output Parameters:
- `Nface` - The number of faces with field values
- `fgeom` - The face centroid and normals
- `vol`   - The cell volumes

Level: developer

-seealso: [](ch_unstructured), `DM`, `DMPLEX`, `DMPlexGetFaceFields()`

# External Links
$(_doc_external("Dm/DMPlexRestoreFaceGeometry"))
"""
function DMPlexRestoreFaceGeometry(petsclib::PetscLibType, dm::PetscDM, fStart::PetscInt, fEnd::PetscInt, faceGeometry::PetscVec, cellGeometry::PetscVec, fgeom::Vector{PetscFVFaceGeom}) end

@for_petsc function DMPlexRestoreFaceGeometry(petsclib::$UnionPetscLib, dm::PetscDM, fStart::$PetscInt, fEnd::$PetscInt, faceGeometry::PetscVec, cellGeometry::PetscVec, fgeom::Vector{PetscFVFaceGeom} )
	Nface_ = Ref{$PetscInt}()
	fgeom_ = Ref(pointer(fgeom))
	vol_ = Ref{Ptr{$PetscReal}}()

    @chk ccall(
               (:DMPlexRestoreFaceGeometry, $petsc_library),
               PetscErrorCode,
               (CDM, $PetscInt, $PetscInt, CVec, CVec, Ptr{$PetscInt}, Ptr{Ptr{PetscFVFaceGeom}}, Ptr{Ptr{$PetscReal}}),
               dm, fStart, fEnd, faceGeometry, cellGeometry, Nface_, fgeom_, vol_,
              )

	Nface = Nface_[]
	vol = unsafe_wrap(Array, vol_[], VecGetLocalSize(petsclib, x); own = false)

	return Nface,vol
end 

"""
	minRadius::PetscReal = DMPlexGetGeometryFVM(petsclib::PetscLibType,dm::PetscDM, facegeom::PetscVec, cellgeom::PetscVec) 
Return precomputed geometric data

Collective

Input Parameter:
- `dm` - The `DM`

Output Parameters:
- `facegeom`  - The values precomputed from face geometry
- `cellgeom`  - The values precomputed from cell geometry
- `minRadius` - The minimum radius over the mesh of an inscribed sphere in a cell, or `NULL` if not needed

Level: developer

-seealso: [](ch_unstructured), `DM`, `DMPLEX`, `DMTSSetRHSFunctionLocal()`

# External Links
$(_doc_external("Dm/DMPlexGetGeometryFVM"))
"""
function DMPlexGetGeometryFVM(petsclib::PetscLibType, dm::PetscDM, facegeom::PetscVec, cellgeom::PetscVec) end

@for_petsc function DMPlexGetGeometryFVM(petsclib::$UnionPetscLib, dm::PetscDM, facegeom::PetscVec, cellgeom::PetscVec )
	facegeom_ = Ref(facegeom.ptr)
	cellgeom_ = Ref(cellgeom.ptr)
	minRadius_ = Ref{$PetscReal}()

    @chk ccall(
               (:DMPlexGetGeometryFVM, $petsc_library),
               PetscErrorCode,
               (CDM, Ptr{CVec}, Ptr{CVec}, Ptr{$PetscReal}),
               dm, facegeom_, cellgeom_, minRadius_,
              )

	facegeom.ptr = C_NULL
	cellgeom.ptr = C_NULL
	minRadius = minRadius_[]

	return minRadius
end 

"""
	DMPlexGetGradientDM(petsclib::PetscLibType,dm::PetscDM, fv::PetscFV, dmGrad::PetscDM) 
Return gradient data layout

Collective

Input Parameters:
- `dm` - The `DM`
- `fv` - The `PetscFV`

Output Parameter:
- `dmGrad` - The layout for gradient values

Level: developer

-seealso: [](ch_unstructured), `DM`, `DMPLEX`, `DMPlexGetGeometryFVM()`

# External Links
$(_doc_external("Dm/DMPlexGetGradientDM"))
"""
function DMPlexGetGradientDM(petsclib::PetscLibType, dm::PetscDM, fv::PetscFV, dmGrad::PetscDM) end

@for_petsc function DMPlexGetGradientDM(petsclib::$UnionPetscLib, dm::PetscDM, fv::PetscFV, dmGrad::PetscDM )
	dmGrad_ = Ref(dmGrad.ptr)

    @chk ccall(
               (:DMPlexGetGradientDM, $petsc_library),
               PetscErrorCode,
               (CDM, PetscFV, Ptr{CDM}),
               dm, fv, dmGrad_,
              )

	dmGrad.ptr = C_NULL

	return nothing
end 

"""
	DMPlexComputeBdResidualSingleByKey(petsclib::PetscLibType,dm::PetscDM, wf::PetscWeakForm, key::PetscFormKey, facetIS::IS, locX::PetscVec, locX_t::PetscVec, t::PetscReal, coordField::DMField, locF::PetscVec) 
Compute the local boundary residual for terms matching the input key

Not collective

Input Parameters:
- `dm`         - The output `DM`
- `wf`         - The `PetscWeakForm` holding forms on this boundary
- `key`        - The `PetscFormKey` indicating what should be integrated
- `facetIS`    - The `IS` giving a set of faces to integrate over
- `locX`       - The local solution
- `locX_t`     - The time derivative of the local solution, or `NULL` for time-independent problems
- `t`          - The time
- `coordField` - The `DMField` object with coordinates for these faces

Output Parameter:
- `locF` - The local residual

Level: developer

-seealso: `DMPlexComputeBdResidualSingle()`, `DMPlexComputeJacobianByKey()`, `DMPlexComputeResidualHybridByKey()`, `DMPlexComputeJacobianHybridByKey()`, `PetscFormKey`

# External Links
$(_doc_external("Dm/DMPlexComputeBdResidualSingleByKey"))
"""
function DMPlexComputeBdResidualSingleByKey(petsclib::PetscLibType, dm::PetscDM, wf::PetscWeakForm, key::PetscFormKey, facetIS::IS, locX::PetscVec, locX_t::PetscVec, t::PetscReal, coordField::DMField, locF::PetscVec) end

@for_petsc function DMPlexComputeBdResidualSingleByKey(petsclib::$UnionPetscLib, dm::PetscDM, wf::PetscWeakForm, key::PetscFormKey, facetIS::IS, locX::PetscVec, locX_t::PetscVec, t::$PetscReal, coordField::DMField, locF::PetscVec )

    @chk ccall(
               (:DMPlexComputeBdResidualSingleByKey, $petsc_library),
               PetscErrorCode,
               (CDM, PetscWeakForm, PetscFormKey, IS, CVec, CVec, $PetscReal, DMField, CVec),
               dm, wf, key, facetIS, locX, locX_t, t, coordField, locF,
              )


	return nothing
end 

"""
	DMPlexComputeBdResidualSingle(petsclib::PetscLibType,dm::PetscDM, wf::PetscWeakForm, key::PetscFormKey, locX::PetscVec, locX_t::PetscVec, t::PetscReal, locF::PetscVec) 
Compute the local boundary residual

Not collective

Input Parameters:
- `dm`     - The output `DM`
- `wf`     - The `PetscWeakForm` holding forms on this boundary
- `key`    - The `PetscFormKey` indicating what should be integrated
- `locX`   - The local solution
- `locX_t` - The time derivative of the local solution, or `NULL` for time-independent problems
- `t`      - The time

Output Parameter:
- `locF` - The local residual

Level: developer

-seealso: `DMPlexComputeBdResidualSingleByKey()`, `DMPlexComputeJacobianByKey()`, `DMPlexComputeResidualHybridByKey()`, `DMPlexComputeJacobianHybridByKey()`, `PetscFormKey`

# External Links
$(_doc_external("Dm/DMPlexComputeBdResidualSingle"))
"""
function DMPlexComputeBdResidualSingle(petsclib::PetscLibType, dm::PetscDM, wf::PetscWeakForm, key::PetscFormKey, locX::PetscVec, locX_t::PetscVec, t::PetscReal, locF::PetscVec) end

@for_petsc function DMPlexComputeBdResidualSingle(petsclib::$UnionPetscLib, dm::PetscDM, wf::PetscWeakForm, key::PetscFormKey, locX::PetscVec, locX_t::PetscVec, t::$PetscReal, locF::PetscVec )

    @chk ccall(
               (:DMPlexComputeBdResidualSingle, $petsc_library),
               PetscErrorCode,
               (CDM, PetscWeakForm, PetscFormKey, CVec, CVec, $PetscReal, CVec),
               dm, wf, key, locX, locX_t, t, locF,
              )


	return nothing
end 

"""
	DMPlexComputeResidualByKey(petsclib::PetscLibType,dm::PetscDM, key::PetscFormKey, cellIS::IS, time::PetscReal, locX::PetscVec, locX_t::PetscVec, t::PetscReal, locF::PetscVec, user::Cvoid) 
Compute the local residual for terms matching the input key

Collective

Input Parameters:
- `dm`     - The output `DM`
- `key`    - The `PetscFormKey` indicating what should be integrated
- `cellIS` - The `IS` giving a set of cells to integrate over
- `time`   - The time, or `PETSC_MIN_REAL` to include implicit terms in a time-independent problems
- `locX`   - The local solution
- `locX_t` - The time derivative of the local solution, or `NULL` for time-independent problems
- `t`      - The time
- `user`   - An optional user context, passed to the pointwise functions

Output Parameter:
- `locF` - The local residual

Level: developer

-seealso: `DMPlexComputeJacobianByKey()`, `DMPlexComputeResidualHybridByKey()`, `DMPlexComputeJacobianHybridByKey()`, `PetscFormKey`

# External Links
$(_doc_external("Dm/DMPlexComputeResidualByKey"))
"""
function DMPlexComputeResidualByKey(petsclib::PetscLibType, dm::PetscDM, key::PetscFormKey, cellIS::IS, time::PetscReal, locX::PetscVec, locX_t::PetscVec, t::PetscReal, locF::PetscVec, user::Cvoid) end

@for_petsc function DMPlexComputeResidualByKey(petsclib::$UnionPetscLib, dm::PetscDM, key::PetscFormKey, cellIS::IS, time::$PetscReal, locX::PetscVec, locX_t::PetscVec, t::$PetscReal, locF::PetscVec, user::Cvoid )

    @chk ccall(
               (:DMPlexComputeResidualByKey, $petsc_library),
               PetscErrorCode,
               (CDM, PetscFormKey, IS, $PetscReal, CVec, CVec, $PetscReal, CVec, Ptr{Cvoid}),
               dm, key, cellIS, time, locX, locX_t, t, locF, user,
              )


	return nothing
end 

"""
	DMPlexComputeResidualHybridByKey(petsclib::PetscLibType,dm::PetscDM, key::Vector{PetscFormKey}, cellIS::IS, time::PetscReal, locX::PetscVec, locX_t::PetscVec, t::PetscReal, locF::PetscVec, user::Cvoid) 
Compute the local residual over hybrid cells for terms matching the input key

Collective

Input Parameters:
- `dm`     - The output `DM`
- `key`    - The `PetscFormKey` array (left cell, right cell, cohesive cell) indicating what should be integrated
- `cellIS` - The `IS` give a set of cells to integrate over
- `time`   - The time, or `PETSC_MIN_REAL` to include implicit terms in a time-independent problems
- `locX`   - The local solution
- `locX_t` - The time derivative of the local solution, or `NULL` for time-independent problems
- `t`      - The time
- `user`   - An optional user context, passed to the pointwise functions

Output Parameter:
- `locF` - The local residual

Level: developer

-seealso: `DMPlexComputeResidualByKey()`, `DMPlexComputeJacobianByKey()`, `DMPlexComputeJacobianHybridByKey()`, `PetscFormKey`

# External Links
$(_doc_external("Dm/DMPlexComputeResidualHybridByKey"))
"""
function DMPlexComputeResidualHybridByKey(petsclib::PetscLibType, dm::PetscDM, key::Vector{PetscFormKey}, cellIS::IS, time::PetscReal, locX::PetscVec, locX_t::PetscVec, t::PetscReal, locF::PetscVec, user::Cvoid) end

@for_petsc function DMPlexComputeResidualHybridByKey(petsclib::$UnionPetscLib, dm::PetscDM, key::Vector{PetscFormKey}, cellIS::IS, time::$PetscReal, locX::PetscVec, locX_t::PetscVec, t::$PetscReal, locF::PetscVec, user::Cvoid )

    @chk ccall(
               (:DMPlexComputeResidualHybridByKey, $petsc_library),
               PetscErrorCode,
               (CDM, Ptr{PetscFormKey}, IS, $PetscReal, CVec, CVec, $PetscReal, CVec, Ptr{Cvoid}),
               dm, key, cellIS, time, locX, locX_t, t, locF, user,
              )


	return nothing
end 

"""
	DMPlexComputeBdJacobianSingleByLabel(petsclib::PetscLibType,dm::PetscDM, wf::PetscWeakForm, label::DMLabel, numValues::PetscInt, values::Vector{PetscInt}, fieldI::PetscInt, facetIS::IS, locX::PetscVec, locX_t::PetscVec, t::PetscReal, coordField::DMField, X_tShift::PetscReal, Jac::PetscMat, JacP::PetscMat) 
Compute the local boundary Jacobian for terms matching the input label

Not collective

Input Parameters:
- `dm`         - The output `DM`
- `wf`         - The `PetscWeakForm` holding forms on this boundary
- `label`      - The `DMLabel` indicating what faces should be integrated over
- `numValues`  - The number of label values
- `values`     - The array of label values
- `fieldI`     - The test field for these integrals
- `facetIS`    - The `IS` giving the set of possible faces to integrate over (intersected with the label)
- `locX`       - The local solution
- `locX_t`     - The time derivative of the local solution, or `NULL` for time-independent problems
- `t`          - The time
- `coordField` - The `DMField` object with coordinates for these faces
- `X_tShift`   - The multiplier for dF/dxdot

Output Parameters:
- `Jac`  - The local Jacobian
- `JacP` - The local Jacobian preconditioner

Level: developer

-seealso: `DMPlexComputeBdJacobianSingle()`, `DMPlexComputeJacobianByKey()`, `DMPlexComputeResidualHybridByKey()`, `DMPlexComputeJacobianHybridByKey()`, `PetscFormKey`

# External Links
$(_doc_external("Dm/DMPlexComputeBdJacobianSingleByLabel"))
"""
function DMPlexComputeBdJacobianSingleByLabel(petsclib::PetscLibType, dm::PetscDM, wf::PetscWeakForm, label::DMLabel, numValues::PetscInt, values::Vector{PetscInt}, fieldI::PetscInt, facetIS::IS, locX::PetscVec, locX_t::PetscVec, t::PetscReal, coordField::DMField, X_tShift::PetscReal, Jac::PetscMat, JacP::PetscMat) end

@for_petsc function DMPlexComputeBdJacobianSingleByLabel(petsclib::$UnionPetscLib, dm::PetscDM, wf::PetscWeakForm, label::DMLabel, numValues::$PetscInt, values::Vector{$PetscInt}, fieldI::$PetscInt, facetIS::IS, locX::PetscVec, locX_t::PetscVec, t::$PetscReal, coordField::DMField, X_tShift::$PetscReal, Jac::PetscMat, JacP::PetscMat )

    @chk ccall(
               (:DMPlexComputeBdJacobianSingleByLabel, $petsc_library),
               PetscErrorCode,
               (CDM, PetscWeakForm, DMLabel, $PetscInt, Ptr{$PetscInt}, $PetscInt, IS, CVec, CVec, $PetscReal, DMField, $PetscReal, CMat, CMat),
               dm, wf, label, numValues, values, fieldI, facetIS, locX, locX_t, t, coordField, X_tShift, Jac, JacP,
              )


	return nothing
end 

"""
	DMPlexComputeBdJacobianSingle(petsclib::PetscLibType,dm::PetscDM, wf::PetscWeakForm, label::DMLabel, numValues::PetscInt, values::Vector{PetscInt}, fieldI::PetscInt, locX::PetscVec, locX_t::PetscVec, t::PetscReal, X_tShift::PetscReal, Jac::PetscMat, JacP::PetscMat) 
Compute the local boundary Jacobian

Not collective

Input Parameters:
- `dm`        - The output `DM`
- `wf`        - The `PetscWeakForm` holding forms on this boundary
- `label`     - The `DMLabel` indicating what faces should be integrated over
- `numValues` - The number of label values
- `values`    - The array of label values
- `fieldI`    - The test field for these integrals
- `locX`      - The local solution
- `locX_t`    - The time derivative of the local solution, or `NULL` for time-independent problems
- `t`         - The time
- `X_tShift`  - The multiplier for dF/dxdot

Output Parameters:
- `Jac`  - The local Jacobian
- `JacP` - The local Jacobian preconditioner

Level: developer

-seealso: `DMPlexComputeBdJacobianSingleByLabel()`, `DMPlexComputeJacobianByKey()`, `DMPlexComputeResidualHybridByKey()`, `DMPlexComputeJacobianHybridByKey()`, `PetscFormKey`

# External Links
$(_doc_external("Dm/DMPlexComputeBdJacobianSingle"))
"""
function DMPlexComputeBdJacobianSingle(petsclib::PetscLibType, dm::PetscDM, wf::PetscWeakForm, label::DMLabel, numValues::PetscInt, values::Vector{PetscInt}, fieldI::PetscInt, locX::PetscVec, locX_t::PetscVec, t::PetscReal, X_tShift::PetscReal, Jac::PetscMat, JacP::PetscMat) end

@for_petsc function DMPlexComputeBdJacobianSingle(petsclib::$UnionPetscLib, dm::PetscDM, wf::PetscWeakForm, label::DMLabel, numValues::$PetscInt, values::Vector{$PetscInt}, fieldI::$PetscInt, locX::PetscVec, locX_t::PetscVec, t::$PetscReal, X_tShift::$PetscReal, Jac::PetscMat, JacP::PetscMat )

    @chk ccall(
               (:DMPlexComputeBdJacobianSingle, $petsc_library),
               PetscErrorCode,
               (CDM, PetscWeakForm, DMLabel, $PetscInt, Ptr{$PetscInt}, $PetscInt, CVec, CVec, $PetscReal, $PetscReal, CMat, CMat),
               dm, wf, label, numValues, values, fieldI, locX, locX_t, t, X_tShift, Jac, JacP,
              )


	return nothing
end 

"""
	DMPlexComputeJacobianByKey(petsclib::PetscLibType,dm::PetscDM, key::PetscFormKey, cellIS::IS, t::PetscReal, X_tShift::PetscReal, locX::PetscVec, locX_t::PetscVec, Jac::PetscMat, JacP::PetscMat, user::Cvoid) 
Compute the local Jacobian for terms matching the input key

Collective

Input Parameters:
- `dm`       - The output `DM`
- `key`      - The `PetscFormKey` indicating what should be integrated
- `cellIS`   - The `IS` give a set of cells to integrate over
- `t`        - The time
- `X_tShift` - The multiplier for the Jacobian with respect to X_t
- `locX`     - The local solution
- `locX_t`   - The time derivative of the local solution, or `NULL` for time-independent problems
- `user`     - An optional user context, passed to the pointwise functions

Output Parameters:
- `Jac`  - The local Jacobian
- `JacP` - The local Jacobian preconditioner

Level: developer

-seealso: `DMPlexComputeResidualByKey()`, `DMPlexComputeResidualHybridByKey()`, `DMPlexComputeJacobianHybridByKey()`, `PetscFormKey`

# External Links
$(_doc_external("Dm/DMPlexComputeJacobianByKey"))
"""
function DMPlexComputeJacobianByKey(petsclib::PetscLibType, dm::PetscDM, key::PetscFormKey, cellIS::IS, t::PetscReal, X_tShift::PetscReal, locX::PetscVec, locX_t::PetscVec, Jac::PetscMat, JacP::PetscMat, user::Cvoid) end

@for_petsc function DMPlexComputeJacobianByKey(petsclib::$UnionPetscLib, dm::PetscDM, key::PetscFormKey, cellIS::IS, t::$PetscReal, X_tShift::$PetscReal, locX::PetscVec, locX_t::PetscVec, Jac::PetscMat, JacP::PetscMat, user::Cvoid )

    @chk ccall(
               (:DMPlexComputeJacobianByKey, $petsc_library),
               PetscErrorCode,
               (CDM, PetscFormKey, IS, $PetscReal, $PetscReal, CVec, CVec, CMat, CMat, Ptr{Cvoid}),
               dm, key, cellIS, t, X_tShift, locX, locX_t, Jac, JacP, user,
              )


	return nothing
end 

"""
	DMPlexComputeJacobianByKeyGeneral(petsclib::PetscLibType,dmr::PetscDM, dmc::PetscDM, key::PetscFormKey, cellIS::IS, t::PetscReal, X_tShift::PetscReal, locX::PetscVec, locX_t::PetscVec, Jac::PetscMat, JacP::PetscMat, user::Cvoid) 

# External Links
$(_doc_external("Dm/DMPlexComputeJacobianByKeyGeneral"))
"""
function DMPlexComputeJacobianByKeyGeneral(petsclib::PetscLibType, dmr::PetscDM, dmc::PetscDM, key::PetscFormKey, cellIS::IS, t::PetscReal, X_tShift::PetscReal, locX::PetscVec, locX_t::PetscVec, Jac::PetscMat, JacP::PetscMat, user::Cvoid) end

@for_petsc function DMPlexComputeJacobianByKeyGeneral(petsclib::$UnionPetscLib, dmr::PetscDM, dmc::PetscDM, key::PetscFormKey, cellIS::IS, t::$PetscReal, X_tShift::$PetscReal, locX::PetscVec, locX_t::PetscVec, Jac::PetscMat, JacP::PetscMat, user::Cvoid )

    @chk ccall(
               (:DMPlexComputeJacobianByKeyGeneral, $petsc_library),
               PetscErrorCode,
               (CDM, CDM, PetscFormKey, IS, $PetscReal, $PetscReal, CVec, CVec, CMat, CMat, Ptr{Cvoid}),
               dmr, dmc, key, cellIS, t, X_tShift, locX, locX_t, Jac, JacP, user,
              )


	return nothing
end 

"""
	DMPlexComputeJacobianHybridByKey(petsclib::PetscLibType,dm::PetscDM, key::Vector{PetscFormKey}, cellIS::IS, t::PetscReal, X_tShift::PetscReal, locX::PetscVec, locX_t::PetscVec, Jac::PetscMat, JacP::PetscMat, user::Cvoid) 
Compute the local Jacobian over hybrid cells for terms matching the input key

Collective

Input Parameters:
- `dm`       - The output `DM`
- `key`      - The `PetscFormKey` array (left cell, right cell, cohesive cell) indicating what should be integrated
- `cellIS`   - The `IS` give a set of cells to integrate over
- `t`        - The time
- `X_tShift` - The multiplier for the Jacobian with respect to X_t
- `locX`     - The local solution
- `locX_t`   - The time derivative of the local solution, or `NULL` for time-independent problems
- `user`     - An optional user context, passed to the pointwise functions

Output Parameters:
- `Jac`  - The local Jacobian
- `JacP` - The local Jacobian preconditioner

Level: developer

-seealso: `DMPlexComputeResidualByKey()`, `DMPlexComputeJacobianByKey()`, `DMPlexComputeResidualHybridByKey()`, `PetscFormKey`

# External Links
$(_doc_external("Dm/DMPlexComputeJacobianHybridByKey"))
"""
function DMPlexComputeJacobianHybridByKey(petsclib::PetscLibType, dm::PetscDM, key::Vector{PetscFormKey}, cellIS::IS, t::PetscReal, X_tShift::PetscReal, locX::PetscVec, locX_t::PetscVec, Jac::PetscMat, JacP::PetscMat, user::Cvoid) end

@for_petsc function DMPlexComputeJacobianHybridByKey(petsclib::$UnionPetscLib, dm::PetscDM, key::Vector{PetscFormKey}, cellIS::IS, t::$PetscReal, X_tShift::$PetscReal, locX::PetscVec, locX_t::PetscVec, Jac::PetscMat, JacP::PetscMat, user::Cvoid )

    @chk ccall(
               (:DMPlexComputeJacobianHybridByKey, $petsc_library),
               PetscErrorCode,
               (CDM, Ptr{PetscFormKey}, IS, $PetscReal, $PetscReal, CVec, CVec, CMat, CMat, Ptr{Cvoid}),
               dm, key, cellIS, t, X_tShift, locX, locX_t, Jac, JacP, user,
              )


	return nothing
end 

"""
	DMPlexComputeJacobianActionByKey(petsclib::PetscLibType,dm::PetscDM, key::PetscFormKey, cellIS::IS, t::PetscReal, X_tShift::PetscReal, locX::PetscVec, locX_t::PetscVec, locY::PetscVec, locF::PetscVec, user::Cvoid) 
Compute the local Jacobian for terms matching the input key

Collective

Input Parameters:
- `dm`       - The output `DM`
- `key`      - The `PetscFormKey` indicating what should be integrated
- `cellIS`   - The `IS` give a set of cells to integrate over
- `t`        - The time
- `X_tShift` - The multiplier for the Jacobian with respect to X_t
- `locX`     - The local solution
- `locX_t`   - The time derivative of the local solution, or `NULL` for time-independent problems
- `locY`     - The local vector acted on by J
- `user`     - An optional user context, passed to the pointwise functions

Output Parameter:
- `locF` - The local residual F = J(X) Y

Level: developer

-seealso: `DMPlexComputeResidualByKey()`, `DMPlexComputeJacobianByKey()`, `DMPlexComputeResidualHybridByKey()`, `DMPlexComputeJacobianHybridByKey()`, `PetscFormKey`

# External Links
$(_doc_external("Dm/DMPlexComputeJacobianActionByKey"))
"""
function DMPlexComputeJacobianActionByKey(petsclib::PetscLibType, dm::PetscDM, key::PetscFormKey, cellIS::IS, t::PetscReal, X_tShift::PetscReal, locX::PetscVec, locX_t::PetscVec, locY::PetscVec, locF::PetscVec, user::Cvoid) end

@for_petsc function DMPlexComputeJacobianActionByKey(petsclib::$UnionPetscLib, dm::PetscDM, key::PetscFormKey, cellIS::IS, t::$PetscReal, X_tShift::$PetscReal, locX::PetscVec, locX_t::PetscVec, locY::PetscVec, locF::PetscVec, user::Cvoid )

    @chk ccall(
               (:DMPlexComputeJacobianActionByKey, $petsc_library),
               PetscErrorCode,
               (CDM, PetscFormKey, IS, $PetscReal, $PetscReal, CVec, CVec, CVec, CVec, Ptr{Cvoid}),
               dm, key, cellIS, t, X_tShift, locX, locX_t, locY, locF, user,
              )


	return nothing
end 

"""
	moments::Vector{PetscReal} = DMPlexComputeMoments(petsclib::PetscLibType,dm::PetscDM, u::PetscVec) 
Compute the first three moments for a field

Noncollective

Input Parameters:
- `dm` - the `DMPLEX`
- `u`  - the field

Output Parameter:
- `moments` - the field moments

Level: intermediate

-seealso: `DM`, `DMPLEX`, `DMSwarmComputeMoments()`

# External Links
$(_doc_external("Dm/DMPlexComputeMoments"))
"""
function DMPlexComputeMoments(petsclib::PetscLibType, dm::PetscDM, u::PetscVec) end

@for_petsc function DMPlexComputeMoments(petsclib::$UnionPetscLib, dm::PetscDM, u::PetscVec )
	moments = Vector{$PetscReal}(undef, ni);  # CHECK SIZE!!

    @chk ccall(
               (:DMPlexComputeMoments, $petsc_library),
               PetscErrorCode,
               (CDM, CVec, Ptr{$PetscReal}),
               dm, u, moments,
              )


	return moments
end 

"""
	dm::PetscDM = DMPlexCreatePLYFromFile(petsclib::PetscLibType,comm::MPI_Comm, filename::String, interpolate::PetscBool) 
Create a `DMPLEX` mesh from a PLY <https://en.wikipedia.org/wiki/PLY_(file_format)> file.

Input Parameters:
- `comm`        - The MPI communicator
- `filename`    - Name of the .ply file
- `interpolate` - Create faces and edges in the mesh

Output Parameter:
- `dm` - The `DMPLEX` object representing the mesh

Level: beginner

-seealso: `DMPlexCreateFromFile()`, `DMPlexCreateGmsh()`, `DMPlexCreate()`

# External Links
$(_doc_external("Dm/DMPlexCreatePLYFromFile"))
"""
function DMPlexCreatePLYFromFile(petsclib::PetscLibType, comm::MPI_Comm, filename::String, interpolate::PetscBool) end

@for_petsc function DMPlexCreatePLYFromFile(petsclib::$UnionPetscLib, comm::MPI_Comm, filename::String, interpolate::PetscBool )
	dm_ = Ref{CDM}()

    @chk ccall(
               (:DMPlexCreatePLYFromFile, $petsc_library),
               PetscErrorCode,
               (MPI_Comm, Ptr{Cchar}, PetscBool, Ptr{CDM}),
               comm, filename, interpolate, dm_,
              )

	dm = PetscDM(dm_[], petsclib)

	return dm
end 

"""
	DMPlexVTKWriteAll(petsclib::PetscLibType,odm::PetscObject, viewer::PetscViewer) 
Write a file containing all the fields that have been provided to the viewer

Collective

Input Parameters:
- `odm`    - The `DMPLEX` specifying the mesh, passed as a `PetscObject`
- `viewer` - viewer of type `PETSCVIEWERVTK`

Level: developer

-seealso: [](ch_unstructured), `DM`, `PETSCVIEWEREXODUSII`, `DMPLEX`, `PETSCVIEWERVTK`

# External Links
$(_doc_external("Dm/DMPlexVTKWriteAll"))
"""
function DMPlexVTKWriteAll(petsclib::PetscLibType, odm::PetscObject, viewer::PetscViewer) end

@for_petsc function DMPlexVTKWriteAll(petsclib::$UnionPetscLib, odm::PetscObject, viewer::PetscViewer )

    @chk ccall(
               (:DMPlexVTKWriteAll, $petsc_library),
               PetscErrorCode,
               (PetscObject, PetscViewer),
               odm, viewer,
              )


	return nothing
end 

"""
	DMPlexPreallocateOperator(petsclib::PetscLibType,dm::PetscDM, bs::PetscInt, dnz::Vector{PetscInt}, onz::Vector{PetscInt}, dnzu::Vector{PetscInt}, onzu::Vector{PetscInt}, A::PetscMat, fillMatrix::PetscBool) 
Calculate the matrix nonzero pattern based upon the information in the `DM`,
the `PetscDS` it contains, and the default `PetscSection`.

Collective

Input Parameters:
- `dm`         - The `DMPLEX`
- `bs`         - The matrix blocksize
- `dnz`        - An array to hold the number of nonzeros in the diagonal block
- `onz`        - An array to hold the number of nonzeros in the off-diagonal block
- `dnzu`       - An array to hold the number of nonzeros in the upper triangle of the diagonal block
- `onzu`       - An array to hold the number of nonzeros in the upper triangle of the off-diagonal block
- `fillMatrix` - If `PETSC_TRUE`, fill the matrix with zeros

Output Parameter:
- `A` - The preallocated matrix

Level: advanced

-seealso: [](ch_unstructured), `DM`, `DMPLEX`, `DMCreateMatrix()`

# External Links
$(_doc_external("Dm/DMPlexPreallocateOperator"))
"""
function DMPlexPreallocateOperator(petsclib::PetscLibType, dm::PetscDM, bs::PetscInt, dnz::Vector{PetscInt}, onz::Vector{PetscInt}, dnzu::Vector{PetscInt}, onzu::Vector{PetscInt}, A::PetscMat, fillMatrix::PetscBool) end

@for_petsc function DMPlexPreallocateOperator(petsclib::$UnionPetscLib, dm::PetscDM, bs::$PetscInt, dnz::Vector{$PetscInt}, onz::Vector{$PetscInt}, dnzu::Vector{$PetscInt}, onzu::Vector{$PetscInt}, A::PetscMat, fillMatrix::PetscBool )

    @chk ccall(
               (:DMPlexPreallocateOperator, $petsc_library),
               PetscErrorCode,
               (CDM, $PetscInt, Ptr{$PetscInt}, Ptr{$PetscInt}, Ptr{$PetscInt}, Ptr{$PetscInt}, CMat, PetscBool),
               dm, bs, dnz, onz, dnzu, onzu, A, fillMatrix,
              )


	return nothing
end 

"""
	section::PetscSection = DMPlexCreateSection(petsclib::PetscLibType,dm::PetscDM, label::Vector{DMLabel}, numComp::Vector{PetscInt}, numDof::Vector{PetscInt}, numBC::PetscInt, bcField::Vector{PetscInt}, bcComps::Vector{IS}, bcPoints::Vector{IS}, perm::IS) 
Create a `PetscSection` based upon the dof layout specification provided.

Not Collective

Input Parameters:
- `dm`       - The `DMPLEX` object
- `label`    - An array of `DMLabel` of length `numFields` indicating the mesh support of each field, or `NULL` for the whole mesh
- `numComp`  - An array of size `numFields` that holds the number of components for each field
- `numDof`   - An array of size  numFields \time (dim+1) which holds the number of dof for each field on a mesh piece of dimension d
- `numBC`    - The number of boundary conditions
- `bcField`  - An array of size `numBC` giving the field number for each boundary condition
- `bcComps`  - [Optional] An array of size `numBC` of `IS` holding the field components to which each boundary condition applies
- `bcPoints` - An array of size `numBC` of `IS` holding the `DMPLEX` points to which each boundary condition applies
- `perm`     - Optional permutation of the chart, or `NULL`

Output Parameter:
- `section` - The `PetscSection` object

Level: developer

-seealso: [](ch_unstructured), `DM`, `DMPLEX`, `DMPlexCreate()`, `PetscSectionCreate()`, `PetscSectionSetPermutation()`

# External Links
$(_doc_external("Dm/DMPlexCreateSection"))
"""
function DMPlexCreateSection(petsclib::PetscLibType, dm::PetscDM, label::Vector{DMLabel}, numComp::Vector{PetscInt}, numDof::Vector{PetscInt}, numBC::PetscInt, bcField::Vector{PetscInt}, bcComps::Vector{IS}, bcPoints::Vector{IS}, perm::IS) end

@for_petsc function DMPlexCreateSection(petsclib::$UnionPetscLib, dm::PetscDM, label::Vector{DMLabel}, numComp::Vector{$PetscInt}, numDof::Vector{$PetscInt}, numBC::$PetscInt, bcField::Vector{$PetscInt}, bcComps::Vector{IS}, bcPoints::Vector{IS}, perm::IS )
	section_ = Ref{PetscSection}()

    @chk ccall(
               (:DMPlexCreateSection, $petsc_library),
               PetscErrorCode,
               (CDM, Ptr{DMLabel}, Ptr{$PetscInt}, Ptr{$PetscInt}, $PetscInt, Ptr{$PetscInt}, Ptr{IS}, Ptr{IS}, IS, Ptr{PetscSection}),
               dm, label, numComp, numDof, numBC, bcField, bcComps, bcPoints, perm, section_,
              )

	section = section_[]

	return section
end 

"""
	DMPlexSetReferenceTree(petsclib::PetscLibType,dm::PetscDM, ref::PetscDM) 
set the reference tree for hierarchically non

Not Collective

Input Parameters:
- `dm`  - The `DMPLEX` object
- `ref` - The reference tree `DMPLEX` object

Level: intermediate

-seealso: [](ch_unstructured), `DM`, `DMPLEX`,`DMPlexGetReferenceTree()`, `DMPlexCreateDefaultReferenceTree()`

# External Links
$(_doc_external("Dm/DMPlexSetReferenceTree"))
"""
function DMPlexSetReferenceTree(petsclib::PetscLibType, dm::PetscDM, ref::PetscDM) end

@for_petsc function DMPlexSetReferenceTree(petsclib::$UnionPetscLib, dm::PetscDM, ref::PetscDM )

    @chk ccall(
               (:DMPlexSetReferenceTree, $petsc_library),
               PetscErrorCode,
               (CDM, CDM),
               dm, ref,
              )


	return nothing
end 

"""
	DMPlexGetReferenceTree(petsclib::PetscLibType,dm::PetscDM, ref::PetscDM) 
get the reference tree for hierarchically non

Not Collective

Input Parameter:
- `dm` - The `DMPLEX` object

Output Parameter:
- `ref` - The reference tree `DMPLEX` object

Level: intermediate

-seealso: [](ch_unstructured), `DM`, `DMPLEX`, `DMPlexSetReferenceTree()`, `DMPlexCreateDefaultReferenceTree()`

# External Links
$(_doc_external("Dm/DMPlexGetReferenceTree"))
"""
function DMPlexGetReferenceTree(petsclib::PetscLibType, dm::PetscDM, ref::PetscDM) end

@for_petsc function DMPlexGetReferenceTree(petsclib::$UnionPetscLib, dm::PetscDM, ref::PetscDM )
	ref_ = Ref(ref.ptr)

    @chk ccall(
               (:DMPlexGetReferenceTree, $petsc_library),
               PetscErrorCode,
               (CDM, Ptr{CDM}),
               dm, ref_,
              )

	ref.ptr = C_NULL

	return nothing
end 

"""
	childOrientB::PetscInt,childB::PetscInt = DMPlexReferenceTreeGetChildSymmetry(petsclib::PetscLibType,dm::PetscDM, parent::PetscInt, parentOrientA::PetscInt, childOrientA::PetscInt, childA::PetscInt, parentOrientB::PetscInt) 
Given a reference tree, transform a childid and orientation from one parent frame to another

Input Parameters:
- `dm`            - the reference tree `DMPLEX` object
- `parent`        - the parent point
- `parentOrientA` - the reference orientation for describing the parent
- `childOrientA`  - the reference orientation for describing the child
- `childA`        - the reference childID for describing the child
- `parentOrientB` - the new orientation for describing the parent

Output Parameters:
- `childOrientB` - if not `NULL`, set to the new orientation for describing the child
- `childB`       - if not `NULL`, the new childID for describing the child

Level: developer

-seealso: [](ch_unstructured), `DM`, `DMPLEX`, `DMPlexGetReferenceTree()`, `DMPlexSetReferenceTree()`, `DMPlexSetTree()`

# External Links
$(_doc_external("Dm/DMPlexReferenceTreeGetChildSymmetry"))
"""
function DMPlexReferenceTreeGetChildSymmetry(petsclib::PetscLibType, dm::PetscDM, parent::PetscInt, parentOrientA::PetscInt, childOrientA::PetscInt, childA::PetscInt, parentOrientB::PetscInt) end

@for_petsc function DMPlexReferenceTreeGetChildSymmetry(petsclib::$UnionPetscLib, dm::PetscDM, parent::$PetscInt, parentOrientA::$PetscInt, childOrientA::$PetscInt, childA::$PetscInt, parentOrientB::$PetscInt )
	childOrientB_ = Ref{$PetscInt}()
	childB_ = Ref{$PetscInt}()

    @chk ccall(
               (:DMPlexReferenceTreeGetChildSymmetry, $petsc_library),
               PetscErrorCode,
               (CDM, $PetscInt, $PetscInt, $PetscInt, $PetscInt, $PetscInt, Ptr{$PetscInt}, Ptr{$PetscInt}),
               dm, parent, parentOrientA, childOrientA, childA, parentOrientB, childOrientB_, childB_,
              )

	childOrientB = childOrientB_[]
	childB = childB_[]

	return childOrientB,childB
end 

"""
	ref::PetscDM = DMPlexCreateDefaultReferenceTree(petsclib::PetscLibType,comm::MPI_Comm, dim::PetscInt, simplex::PetscBool) 
create a reference tree for isotropic hierarchical mesh refinement.

Collective

Input Parameters:
- `comm`    - the MPI communicator
- `dim`     - the spatial dimension
- `simplex` - Flag for simplex, otherwise use a tensor-product cell

Output Parameter:
- `ref` - the reference tree `DMPLEX` object

Level: intermediate

-seealso: `DMPlexSetReferenceTree()`, `DMPlexGetReferenceTree()`

# External Links
$(_doc_external("Dm/DMPlexCreateDefaultReferenceTree"))
"""
function DMPlexCreateDefaultReferenceTree(petsclib::PetscLibType, comm::MPI_Comm, dim::PetscInt, simplex::PetscBool) end

@for_petsc function DMPlexCreateDefaultReferenceTree(petsclib::$UnionPetscLib, comm::MPI_Comm, dim::$PetscInt, simplex::PetscBool )
	ref_ = Ref{CDM}()

    @chk ccall(
               (:DMPlexCreateDefaultReferenceTree, $petsc_library),
               PetscErrorCode,
               (MPI_Comm, $PetscInt, PetscBool, Ptr{CDM}),
               comm, dim, simplex, ref_,
              )

	ref = PetscDM(ref_[], petsclib)

	return ref
end 

"""
	DMPlexSetTree(petsclib::PetscLibType,dm::PetscDM, parentSection::PetscSection, parents::Vector{PetscInt}, childIDs::Vector{PetscInt}) 
set the tree that describes the hierarchy of non
the point-to-point constraints determined by the tree: a point is constrained to the points in the closure of its
tree root.

Collective

Input Parameters:
- `dm`            - the `DMPLEX` object
- `parentSection` - a section describing the tree: a point has a parent if it has 1 dof in the section; the section
offset indexes the parent and childID list; the reference count of parentSection is incremented
- `parents`       - a list of the point parents; copied, can be destroyed
- `childIDs`      - identifies the relationship of the child point to the parent point; if there is a reference tree, then
the child corresponds to the point in the reference tree with index childIDs; copied, can be destroyed

Level: intermediate

-seealso: [](ch_unstructured), `DM`, `DMPLEX`, `DMPlexGetTree()`, `DMPlexSetReferenceTree()`, `DMPlexSetAnchors()`, `DMPlexGetTreeParent()`, `DMPlexGetTreeChildren()`

# External Links
$(_doc_external("Dm/DMPlexSetTree"))
"""
function DMPlexSetTree(petsclib::PetscLibType, dm::PetscDM, parentSection::PetscSection, parents::Vector{PetscInt}, childIDs::Vector{PetscInt}) end

@for_petsc function DMPlexSetTree(petsclib::$UnionPetscLib, dm::PetscDM, parentSection::PetscSection, parents::Vector{$PetscInt}, childIDs::Vector{$PetscInt} )

    @chk ccall(
               (:DMPlexSetTree, $petsc_library),
               PetscErrorCode,
               (CDM, PetscSection, Ptr{$PetscInt}, Ptr{$PetscInt}),
               dm, parentSection, parents, childIDs,
              )


	return nothing
end 

"""
	parents::Vector{PetscInt},childIDs::Vector{PetscInt},children::Vector{PetscInt} = DMPlexGetTree(petsclib::PetscLibType,dm::PetscDM, parentSection::PetscSection, childSection::PetscSection) 
get the tree that describes the hierarchy of non
Collective

Input Parameter:
- `dm` - the `DMPLEX` object

Output Parameters:
- `parentSection` - a section describing the tree: a point has a parent if it has 1 dof in the section; the section
offset indexes the parent and childID list
- `parents`       - a list of the point parents
- `childIDs`      - identifies the relationship of the child point to the parent point; if there is a reference tree, then
the child corresponds to the point in the reference tree with index childID
- `childSection`  - the inverse of the parent section
- `children`      - a list of the point children

Level: intermediate

-seealso: [](ch_unstructured), `DM`, `DMPLEX`,`DMPlexSetTree()`, `DMPlexSetReferenceTree()`, `DMPlexSetAnchors()`, `DMPlexGetTreeParent()`, `DMPlexGetTreeChildren()`

# External Links
$(_doc_external("Dm/DMPlexGetTree"))
"""
function DMPlexGetTree(petsclib::PetscLibType, dm::PetscDM, parentSection::PetscSection, childSection::PetscSection) end

@for_petsc function DMPlexGetTree(petsclib::$UnionPetscLib, dm::PetscDM, parentSection::PetscSection, childSection::PetscSection )
	parents_ = Ref{Ptr{$PetscInt}}()
	childIDs_ = Ref{Ptr{$PetscInt}}()
	children_ = Ref{Ptr{$PetscInt}}()

    @chk ccall(
               (:DMPlexGetTree, $petsc_library),
               PetscErrorCode,
               (CDM, Ptr{PetscSection}, Ptr{Ptr{$PetscInt}}, Ptr{Ptr{$PetscInt}}, Ptr{PetscSection}, Ptr{Ptr{$PetscInt}}),
               dm, parentSection, parents_, childIDs_, childSection, children_,
              )

	parents = unsafe_wrap(Array, parents_[], VecGetLocalSize(petsclib, x); own = false)
	childIDs = unsafe_wrap(Array, childIDs_[], VecGetLocalSize(petsclib, x); own = false)
	children = unsafe_wrap(Array, children_[], VecGetLocalSize(petsclib, x); own = false)

	return parents,childIDs,children
end 

"""
	parent::PetscInt,childID::PetscInt = DMPlexGetTreeParent(petsclib::PetscLibType,dm::PetscDM, point::PetscInt) 
get the parent of a point in the tree describing the point hierarchy (not the DAG)

Input Parameters:
- `dm`    - the `DMPLEX` object
- `point` - the query point

Output Parameters:
- `parent`  - if not `NULL`, set to the parent of the point, or the point itself if the point does not have a parent
- `childID` - if not `NULL`, set to the child ID of the point with respect to its parent, or 0 if the point
does not have a parent

Level: intermediate

-seealso: [](ch_unstructured), `DM`, `DMPLEX`, `DMPlexSetTree()`, `DMPlexGetTree()`, `DMPlexGetTreeChildren()`

# External Links
$(_doc_external("Dm/DMPlexGetTreeParent"))
"""
function DMPlexGetTreeParent(petsclib::PetscLibType, dm::PetscDM, point::PetscInt) end

@for_petsc function DMPlexGetTreeParent(petsclib::$UnionPetscLib, dm::PetscDM, point::$PetscInt )
	parent_ = Ref{$PetscInt}()
	childID_ = Ref{$PetscInt}()

    @chk ccall(
               (:DMPlexGetTreeParent, $petsc_library),
               PetscErrorCode,
               (CDM, $PetscInt, Ptr{$PetscInt}, Ptr{$PetscInt}),
               dm, point, parent_, childID_,
              )

	parent = parent_[]
	childID = childID_[]

	return parent,childID
end 

"""
	numChildren::PetscInt,children::Vector{PetscInt} = DMPlexGetTreeChildren(petsclib::PetscLibType,dm::PetscDM, point::PetscInt) 
get the children of a point in the tree describing the point hierarchy (not the DAG)

Input Parameters:
- `dm`    - the `DMPLEX` object
- `point` - the query point

Output Parameters:
- `numChildren` - if not `NULL`, set to the number of children
- `children`    - if not `NULL`, set to a list children, or set to `NULL` if the point has no children

Level: intermediate

-seealso: [](ch_unstructured), `DM`, `DMPLEX`, `DMPlexSetTree()`, `DMPlexGetTree()`, `DMPlexGetTreeParent()`

# External Links
$(_doc_external("Dm/DMPlexGetTreeChildren"))
"""
function DMPlexGetTreeChildren(petsclib::PetscLibType, dm::PetscDM, point::PetscInt) end

@for_petsc function DMPlexGetTreeChildren(petsclib::$UnionPetscLib, dm::PetscDM, point::$PetscInt )
	numChildren_ = Ref{$PetscInt}()
	children_ = Ref{Ptr{$PetscInt}}()

    @chk ccall(
               (:DMPlexGetTreeChildren, $petsc_library),
               PetscErrorCode,
               (CDM, $PetscInt, Ptr{$PetscInt}, Ptr{Ptr{$PetscInt}}),
               dm, point, numChildren_, children_,
              )

	numChildren = numChildren_[]
	children = unsafe_wrap(Array, children_[], VecGetLocalSize(petsclib, x); own = false)

	return numChildren,children
end 

"""
	DMPlexTreeRefineCell(petsclib::PetscLibType,dm::PetscDM, cell::PetscInt, ncdm::PetscDM) 

# External Links
$(_doc_external("Dm/DMPlexTreeRefineCell"))
"""
function DMPlexTreeRefineCell(petsclib::PetscLibType, dm::PetscDM, cell::PetscInt, ncdm::PetscDM) end

@for_petsc function DMPlexTreeRefineCell(petsclib::$UnionPetscLib, dm::PetscDM, cell::$PetscInt, ncdm::PetscDM )
	ncdm_ = Ref(ncdm.ptr)

    @chk ccall(
               (:DMPlexTreeRefineCell, $petsc_library),
               PetscErrorCode,
               (CDM, $PetscInt, Ptr{CDM}),
               dm, cell, ncdm_,
              )

	ncdm.ptr = C_NULL

	return nothing
end 

"""
	DMPlexComputeInjectorReferenceTree(petsclib::PetscLibType,refTree::PetscDM, inj::PetscMat) 

# External Links
$(_doc_external("Dm/DMPlexComputeInjectorReferenceTree"))
"""
function DMPlexComputeInjectorReferenceTree(petsclib::PetscLibType, refTree::PetscDM, inj::PetscMat) end

@for_petsc function DMPlexComputeInjectorReferenceTree(petsclib::$UnionPetscLib, refTree::PetscDM, inj::PetscMat )
	inj_ = Ref(inj.ptr)

    @chk ccall(
               (:DMPlexComputeInjectorReferenceTree, $petsc_library),
               PetscErrorCode,
               (CDM, Ptr{CMat}),
               refTree, inj_,
              )

	inj.ptr = C_NULL

	return nothing
end 

"""
	DMPlexTransferVecTree(petsclib::PetscLibType,dmIn::PetscDM, vecIn::PetscVec, dmOut::PetscDM, vecOut::PetscVec, sfRefine::PetscSF, sfCoarsen::PetscSF, cidsRefine::PetscInt, cidsCoarsen::PetscInt, useBCs::PetscBool, time::PetscReal) 
transfer a vector between two meshes that differ from each other by refinement/coarsening
that can be represented by a common reference tree used by both.  This routine can be used for a combination of
coarsening and refinement at the same time.

Collective

Input Parameters:
- `dmIn`        - The `DMPLEX` mesh for the input vector
- `dmOut`       - The second `DMPLEX` mesh
- `vecIn`       - The input vector
- `sfRefine`    - A star forest indicating points in the mesh `dmIn` (roots in the star forest) that are parents to points in
the mesh `dmOut` (leaves in the star forest), i.e. where `dmOut` is more refined than `dmIn`
- `sfCoarsen`   - A star forest indicating points in the mesh `dmOut` (roots in the star forest) that are parents to points in
the mesh `dmIn` (leaves in the star forest), i.e. where `dmOut` is more coarsened than `dmIn`
- `cidsRefine`  - The childIds of the points in `dmOut`.  These childIds relate back to the reference tree: childid[j] = k implies
that mesh point j of `dmOut` was refined from a point in `dmIn` just as the mesh point k in the reference
tree was refined from its parent.  childid[j] = -1 indicates that the point j in `dmOut` is exactly
equivalent to its root in `dmIn`, so no interpolation is necessary.  childid[j] = -2 indicates that this
point j in `dmOut` is not a leaf of `sfRefine`.
- `cidsCoarsen` - The childIds of the points in `dmIn`.  These childIds relate back to the reference tree: childid[j] = k implies
that mesh point j of dmIn coarsens to a point in `dmOut` just as the mesh point k in the reference
tree coarsens to its parent.  childid[j] = -2 indicates that point j in `dmOut` is not a leaf in `sfCoarsen`.
- `useBCs`      - `PETSC_TRUE` indicates that boundary values should be inserted into `vecIn` before transfer.
- `time`        - Used if boundary values are time dependent.

Output Parameter:
- `vecOut` - Using interpolation and injection operators calculated on the reference tree, the transferred
projection of `vecIn` from `dmIn` to `dmOut`.  Note that any field discretized with a `PetscFV` finite volume
method that uses gradient reconstruction will use reconstructed gradients when interpolating from
coarse points to fine points.

Level: developer

-seealso: [](ch_unstructured), `DM`, `DMPLEX`, `PetscSF`, `Vec`, `PetscFV`, `DMPlexSetReferenceTree()`, `DMPlexGetReferenceTree()`, `PetscFVGetComputeGradients()`

# External Links
$(_doc_external("Dm/DMPlexTransferVecTree"))
"""
function DMPlexTransferVecTree(petsclib::PetscLibType, dmIn::PetscDM, vecIn::PetscVec, dmOut::PetscDM, vecOut::PetscVec, sfRefine::PetscSF, sfCoarsen::PetscSF, cidsRefine::PetscInt, cidsCoarsen::PetscInt, useBCs::PetscBool, time::PetscReal) end

@for_petsc function DMPlexTransferVecTree(petsclib::$UnionPetscLib, dmIn::PetscDM, vecIn::PetscVec, dmOut::PetscDM, vecOut::PetscVec, sfRefine::PetscSF, sfCoarsen::PetscSF, cidsRefine::$PetscInt, cidsCoarsen::$PetscInt, useBCs::PetscBool, time::$PetscReal )

    @chk ccall(
               (:DMPlexTransferVecTree, $petsc_library),
               PetscErrorCode,
               (CDM, CVec, CDM, CVec, PetscSF, PetscSF, Ptr{$PetscInt}, Ptr{$PetscInt}, PetscBool, $PetscReal),
               dmIn, vecIn, dmOut, vecOut, sfRefine, sfCoarsen, cidsRefine, cidsCoarsen, useBCs, time,
              )


	return nothing
end 

"""
	DMPlexFindVertices(petsclib::PetscLibType,dm::PetscDM, coordinates::PetscVec, eps::PetscReal, points::IS) 
Try to find DAG points based on their coordinates.

Not Collective (provided `DMGetCoordinatesLocalSetUp()` has been already called)

Input Parameters:
- `dm`          - The `DMPLEX` object
- `coordinates` - The `Vec` of coordinates of the sought points
- `eps`         - The tolerance or `PETSC_DEFAULT`

Output Parameter:
- `points` - The `IS` of found DAG points or -1

Level: intermediate

-seealso: `DMPLEX`, `DMPlexCreate()`, `DMGetCoordinatesLocal()`

# External Links
$(_doc_external("Dm/DMPlexFindVertices"))
"""
function DMPlexFindVertices(petsclib::PetscLibType, dm::PetscDM, coordinates::PetscVec, eps::PetscReal, points::IS) end

@for_petsc function DMPlexFindVertices(petsclib::$UnionPetscLib, dm::PetscDM, coordinates::PetscVec, eps::$PetscReal, points::IS )

    @chk ccall(
               (:DMPlexFindVertices, $petsc_library),
               PetscErrorCode,
               (CDM, CVec, $PetscReal, Ptr{IS}),
               dm, coordinates, eps, points,
              )


	return nothing
end 

"""
	R::Vector{PetscReal} = DMPlexComputeProjection2Dto1D(petsclib::PetscLibType,coords::Vector{PetscScalar}) 
Rewrite coordinates to be the 1D projection of the 2D coordinates

Not Collective

Input/Output Parameter:
- `coords` - The coordinates of a segment, on output the new y-coordinate, and 0 for x, an array of size 4, last two entries are unchanged

Output Parameter:
- `R` - The rotation which accomplishes the projection, array of size 4

Level: developer

-seealso: `DMPLEX`, `DMPlexComputeProjection3Dto1D()`, `DMPlexComputeProjection3Dto2D()`

# External Links
$(_doc_external("Dm/DMPlexComputeProjection2Dto1D"))
"""
function DMPlexComputeProjection2Dto1D(petsclib::PetscLibType, coords::Vector{PetscScalar}) end

@for_petsc function DMPlexComputeProjection2Dto1D(petsclib::$UnionPetscLib, coords::Vector{$PetscScalar} )
	R = Vector{$PetscReal}(undef, ni);  # CHECK SIZE!!

    @chk ccall(
               (:DMPlexComputeProjection2Dto1D, $petsc_library),
               PetscErrorCode,
               (Ptr{$PetscScalar}, Ptr{$PetscReal}),
               coords, R,
              )


	return R
end 

"""
	R::Vector{PetscReal} = DMPlexComputeProjection3Dto1D(petsclib::PetscLibType,coords::Vector{PetscScalar}) 
Rewrite coordinates to be the 1D projection of the 3D coordinates

Not Collective

Input/Output Parameter:
- `coords` - The coordinates of a segment; on output, the new y-coordinate, and 0 for x and z, an array of size 6, the other entries are unchanged

Output Parameter:
- `R` - The rotation which accomplishes the projection, an array of size 9

Level: developer

-seealso: `DMPLEX`, `DMPlexComputeProjection2Dto1D()`, `DMPlexComputeProjection3Dto2D()`

# External Links
$(_doc_external("Dm/DMPlexComputeProjection3Dto1D"))
"""
function DMPlexComputeProjection3Dto1D(petsclib::PetscLibType, coords::Vector{PetscScalar}) end

@for_petsc function DMPlexComputeProjection3Dto1D(petsclib::$UnionPetscLib, coords::Vector{$PetscScalar} )
	R = Vector{$PetscReal}(undef, ni);  # CHECK SIZE!!

    @chk ccall(
               (:DMPlexComputeProjection3Dto1D, $petsc_library),
               PetscErrorCode,
               (Ptr{$PetscScalar}, Ptr{$PetscReal}),
               coords, R,
              )


	return R
end 

"""
	R::Vector{PetscReal} = DMPlexComputeProjection3Dto2D(petsclib::PetscLibType,coordSize::PetscInt, coords::Vector{PetscScalar}) 
Rewrite coordinates of 3 or more coplanar 3D points to a common 2D basis for the
plane.  The normal is defined by positive orientation of the first 3 points.

Not Collective

Input Parameter:
- `coordSize` - Length of coordinate array (3x number of points); must be at least 9 (3 points)

Input/Output Parameter:
- `coords` - The interlaced coordinates of each coplanar 3D point; on output the first
2*coordSize/3 entries contain interlaced 2D points, with the rest undefined

Output Parameter:
- `R` - 3x3 row-major rotation matrix whose columns are the tangent basis [t1, t2, n].  Multiplying by R^T transforms from original frame to tangent frame.

Level: developer

-seealso: `DMPLEX`, `DMPlexComputeProjection2Dto1D()`, `DMPlexComputeProjection3Dto1D()`

# External Links
$(_doc_external("Dm/DMPlexComputeProjection3Dto2D"))
"""
function DMPlexComputeProjection3Dto2D(petsclib::PetscLibType, coordSize::PetscInt, coords::Vector{PetscScalar}) end

@for_petsc function DMPlexComputeProjection3Dto2D(petsclib::$UnionPetscLib, coordSize::$PetscInt, coords::Vector{$PetscScalar} )
	R = Vector{$PetscReal}(undef, ni);  # CHECK SIZE!!

    @chk ccall(
               (:DMPlexComputeProjection3Dto2D, $petsc_library),
               PetscErrorCode,
               ($PetscInt, Ptr{$PetscScalar}, Ptr{$PetscReal}),
               coordSize, coords, R,
              )


	return R
end 

"""
	isDG::PetscBool,Nc::PetscInt,array::Vector{PetscScalar},coords::Vector{PetscScalar} = DMPlexGetCellCoordinates(petsclib::PetscLibType,dm::PetscDM, cell::PetscInt) 
Get coordinates for a cell, taking into account periodicity

Not Collective

Input Parameters:
- `dm`   - The `DMPLEX`
- `cell` - The cell number

Output Parameters:
- `isDG`   - Using cellwise coordinates
- `Nc`     - The number of coordinates
- `array`  - The coordinate array
- `coords` - The cell coordinates

Level: developer

-seealso: `DMPLEX`, `DMPlexRestoreCellCoordinates()`, `DMGetCoordinatesLocal()`, `DMGetCellCoordinatesLocal()`

# External Links
$(_doc_external("Dm/DMPlexGetCellCoordinates"))
"""
function DMPlexGetCellCoordinates(petsclib::PetscLibType, dm::PetscDM, cell::PetscInt) end

@for_petsc function DMPlexGetCellCoordinates(petsclib::$UnionPetscLib, dm::PetscDM, cell::$PetscInt )
	isDG_ = Ref{PetscBool}()
	Nc_ = Ref{$PetscInt}()
	array_ = Ref{Ptr{$PetscScalar}}()
	coords_ = Ref{Ptr{$PetscScalar}}()

    @chk ccall(
               (:DMPlexGetCellCoordinates, $petsc_library),
               PetscErrorCode,
               (CDM, $PetscInt, Ptr{PetscBool}, Ptr{$PetscInt}, Ptr{Ptr{$PetscScalar}}, Ptr{Ptr{$PetscScalar}}),
               dm, cell, isDG_, Nc_, array_, coords_,
              )

	isDG = isDG_[]
	Nc = Nc_[]
	array = unsafe_wrap(Array, array_[], VecGetLocalSize(petsclib, x); own = false)
	coords = unsafe_wrap(Array, coords_[], VecGetLocalSize(petsclib, x); own = false)

	return isDG,Nc,array,coords
end 

"""
	isDG::PetscBool,Nc::PetscInt,array::Vector{PetscScalar},coords::Vector{PetscScalar} = DMPlexRestoreCellCoordinates(petsclib::PetscLibType,dm::PetscDM, cell::PetscInt) 
Get coordinates for a cell, taking into account periodicity

Not Collective

Input Parameters:
- `dm`   - The `DMPLEX`
- `cell` - The cell number

Output Parameters:
- `isDG`   - Using cellwise coordinates
- `Nc`     - The number of coordinates
- `array`  - The coordinate array
- `coords` - The cell coordinates

Level: developer

-seealso: `DMPLEX`, `DMPlexGetCellCoordinates()`, `DMGetCoordinatesLocal()`, `DMGetCellCoordinatesLocal()`

# External Links
$(_doc_external("Dm/DMPlexRestoreCellCoordinates"))
"""
function DMPlexRestoreCellCoordinates(petsclib::PetscLibType, dm::PetscDM, cell::PetscInt) end

@for_petsc function DMPlexRestoreCellCoordinates(petsclib::$UnionPetscLib, dm::PetscDM, cell::$PetscInt )
	isDG_ = Ref{PetscBool}()
	Nc_ = Ref{$PetscInt}()
	array_ = Ref{Ptr{$PetscScalar}}()
	coords_ = Ref{Ptr{$PetscScalar}}()

    @chk ccall(
               (:DMPlexRestoreCellCoordinates, $petsc_library),
               PetscErrorCode,
               (CDM, $PetscInt, Ptr{PetscBool}, Ptr{$PetscInt}, Ptr{Ptr{$PetscScalar}}, Ptr{Ptr{$PetscScalar}}),
               dm, cell, isDG_, Nc_, array_, coords_,
              )

	isDG = isDG_[]
	Nc = Nc_[]
	array = unsafe_wrap(Array, array_[], VecGetLocalSize(petsclib, x); own = false)
	coords = unsafe_wrap(Array, coords_[], VecGetLocalSize(petsclib, x); own = false)

	return isDG,Nc,array,coords
end 

"""
	v0::Vector{PetscReal},J::Vector{PetscReal},invJ::Vector{PetscReal},detJ::PetscReal = DMPlexComputeCellGeometryAffineFEM(petsclib::PetscLibType,dm::PetscDM, cell::PetscInt) 
Assuming an affine map, compute the Jacobian, inverse Jacobian, and Jacobian determinant for a given cell

Collective

Input Parameters:
- `dm`   - the `DMPLEX`
- `cell` - the cell

Output Parameters:
- `v0`   - the translation part of this affine transform, meaning the translation to the origin (not the first vertex of the reference cell)
- `J`    - the Jacobian of the transform from the reference element
- `invJ` - the inverse of the Jacobian
- `detJ` - the Jacobian determinant

Level: advanced

-seealso: `DMPLEX`, `DMPlexComputeCellGeometryFEM()`, `DMGetCoordinateSection()`, `DMGetCoordinates()`

# External Links
$(_doc_external("Dm/DMPlexComputeCellGeometryAffineFEM"))
"""
function DMPlexComputeCellGeometryAffineFEM(petsclib::PetscLibType, dm::PetscDM, cell::PetscInt) end

@for_petsc function DMPlexComputeCellGeometryAffineFEM(petsclib::$UnionPetscLib, dm::PetscDM, cell::$PetscInt )
	v0 = Vector{$PetscReal}(undef, ni);  # CHECK SIZE!!
	J = Vector{$PetscReal}(undef, ni);  # CHECK SIZE!!
	invJ = Vector{$PetscReal}(undef, ni);  # CHECK SIZE!!
	detJ_ = Ref{$PetscReal}()

    @chk ccall(
               (:DMPlexComputeCellGeometryAffineFEM, $petsc_library),
               PetscErrorCode,
               (CDM, $PetscInt, Ptr{$PetscReal}, Ptr{$PetscReal}, Ptr{$PetscReal}, Ptr{$PetscReal}),
               dm, cell, v0, J, invJ, detJ_,
              )

	detJ = detJ_[]

	return v0,J,invJ,detJ
end 

"""
	v::Vector{PetscReal},J::Vector{PetscReal},invJ::Vector{PetscReal},detJ::Vector{PetscReal} = DMPlexComputeCellGeometryFEM(petsclib::PetscLibType,dm::PetscDM, cell::PetscInt, quad::PetscQuadrature) 
Compute the Jacobian, inverse Jacobian, and Jacobian determinant at each quadrature point in the given cell

Collective

Input Parameters:
- `dm`   - the `DMPLEX`
- `cell` - the cell
- `quad` - the quadrature containing the points in the reference element where the geometry will be evaluated.  If `quad` is `NULL`, geometry will be
evaluated at the first vertex of the reference element

Output Parameters:
- `v`    - the image of the transformed quadrature points, otherwise the image of the first vertex in the closure of the reference element. This is a
one-dimensional array of size cdim * Nq where cdim is the dimension of the `DM` coordinate space and Nq is the number of quadrature points
- `J`    - the Jacobian of the transform from the reference element at each quadrature point. This is a one-dimensional array of size Nq * cdim * cdim containing
each Jacobian in column-major order.
- `invJ` - the inverse of the Jacobian at each quadrature point. This is a one-dimensional array of size Nq * cdim * cdim containing
each inverse Jacobian in column-major order.
- `detJ` - the Jacobian determinant at each quadrature point. This is a one-dimensional array of size Nq.

Level: advanced

-seealso: `DMPLEX`, `DMGetCoordinateSection()`, `DMGetCoordinates()`

# External Links
$(_doc_external("Dm/DMPlexComputeCellGeometryFEM"))
"""
function DMPlexComputeCellGeometryFEM(petsclib::PetscLibType, dm::PetscDM, cell::PetscInt, quad::PetscQuadrature) end

@for_petsc function DMPlexComputeCellGeometryFEM(petsclib::$UnionPetscLib, dm::PetscDM, cell::$PetscInt, quad::PetscQuadrature )
	v = Vector{$PetscReal}(undef, ni);  # CHECK SIZE!!
	J = Vector{$PetscReal}(undef, ni);  # CHECK SIZE!!
	invJ = Vector{$PetscReal}(undef, ni);  # CHECK SIZE!!
	detJ = Vector{$PetscReal}(undef, ni);  # CHECK SIZE!!

    @chk ccall(
               (:DMPlexComputeCellGeometryFEM, $petsc_library),
               PetscErrorCode,
               (CDM, $PetscInt, PetscQuadrature, Ptr{$PetscReal}, Ptr{$PetscReal}, Ptr{$PetscReal}, Ptr{$PetscReal}),
               dm, cell, quad, v, J, invJ, detJ,
              )


	return v,J,invJ,detJ
end 

"""
	vol::PetscReal,centroid::Vector{PetscReal},normal::Vector{PetscReal} = DMPlexComputeCellGeometryFVM(petsclib::PetscLibType,dm::PetscDM, cell::PetscInt) 
Compute the volume for a given cell

Collective

Input Parameters:
- `dm`   - the `DMPLEX`
- `cell` - the cell

Output Parameters:
- `vol`      - the cell volume
- `centroid` - the cell centroid
- `normal`   - the cell normal, if appropriate

Level: advanced

-seealso: `DMPLEX`, `DMGetCoordinateSection()`, `DMGetCoordinates()`

# External Links
$(_doc_external("Dm/DMPlexComputeCellGeometryFVM"))
"""
function DMPlexComputeCellGeometryFVM(petsclib::PetscLibType, dm::PetscDM, cell::PetscInt) end

@for_petsc function DMPlexComputeCellGeometryFVM(petsclib::$UnionPetscLib, dm::PetscDM, cell::$PetscInt )
	vol_ = Ref{$PetscReal}()
	centroid = Vector{$PetscReal}(undef, ni);  # CHECK SIZE!!
	normal = Vector{$PetscReal}(undef, ni);  # CHECK SIZE!!

    @chk ccall(
               (:DMPlexComputeCellGeometryFVM, $petsc_library),
               PetscErrorCode,
               (CDM, $PetscInt, Ptr{$PetscReal}, Ptr{$PetscReal}, Ptr{$PetscReal}),
               dm, cell, vol_, centroid, normal,
              )

	vol = vol_[]

	return vol,centroid,normal
end 

"""
	DMPlexComputeGeometryFVM(petsclib::PetscLibType,dm::PetscDM, cellgeom::PetscVec, facegeom::PetscVec) 
Computes the cell and face geometry for a finite volume method

Input Parameter:
- `dm` - The `DMPLEX`

Output Parameters:
- `cellgeom` - A `Vec` of `PetscFVCellGeom` data
- `facegeom` - A `Vec` of `PetscFVFaceGeom` data

Level: developer

-seealso: `DMPLEX`, `PetscFVFaceGeom`, `PetscFVCellGeom`

# External Links
$(_doc_external("Dm/DMPlexComputeGeometryFVM"))
"""
function DMPlexComputeGeometryFVM(petsclib::PetscLibType, dm::PetscDM, cellgeom::PetscVec, facegeom::PetscVec) end

@for_petsc function DMPlexComputeGeometryFVM(petsclib::$UnionPetscLib, dm::PetscDM, cellgeom::PetscVec, facegeom::PetscVec )
	cellgeom_ = Ref(cellgeom.ptr)
	facegeom_ = Ref(facegeom.ptr)

    @chk ccall(
               (:DMPlexComputeGeometryFVM, $petsc_library),
               PetscErrorCode,
               (CDM, Ptr{CVec}, Ptr{CVec}),
               dm, cellgeom_, facegeom_,
              )

	cellgeom.ptr = C_NULL
	facegeom.ptr = C_NULL

	return nothing
end 

"""
	minradius::PetscReal = DMPlexGetMinRadius(petsclib::PetscLibType,dm::PetscDM) 
Returns the minimum distance from any cell centroid to a face

Not Collective

Input Parameter:
- `dm` - the `DMPLEX`

Output Parameter:
- `minradius` - the minimum cell radius

Level: developer

-seealso: `DMPLEX`, `DMGetCoordinates()`

# External Links
$(_doc_external("Dm/DMPlexGetMinRadius"))
"""
function DMPlexGetMinRadius(petsclib::PetscLibType, dm::PetscDM) end

@for_petsc function DMPlexGetMinRadius(petsclib::$UnionPetscLib, dm::PetscDM )
	minradius_ = Ref{$PetscReal}()

    @chk ccall(
               (:DMPlexGetMinRadius, $petsc_library),
               PetscErrorCode,
               (CDM, Ptr{$PetscReal}),
               dm, minradius_,
              )

	minradius = minradius_[]

	return minradius
end 

"""
	DMPlexSetMinRadius(petsclib::PetscLibType,dm::PetscDM, minradius::PetscReal) 
Sets the minimum distance from the cell centroid to a face

Logically Collective

Input Parameters:
- `dm`        - the `DMPLEX`
- `minradius` - the minimum cell radius

Level: developer

-seealso: `DMPLEX`, `DMSetCoordinates()`

# External Links
$(_doc_external("Dm/DMPlexSetMinRadius"))
"""
function DMPlexSetMinRadius(petsclib::PetscLibType, dm::PetscDM, minradius::PetscReal) end

@for_petsc function DMPlexSetMinRadius(petsclib::$UnionPetscLib, dm::PetscDM, minradius::$PetscReal )

    @chk ccall(
               (:DMPlexSetMinRadius, $petsc_library),
               PetscErrorCode,
               (CDM, $PetscReal),
               dm, minradius,
              )


	return nothing
end 

"""
	DMPlexGetCoordinateMap(petsclib::PetscLibType,dm::PetscDM, coordFunc::PetscPoCintFn) 
Returns the function used to map coordinates of newly generated mesh points

Not Collective

Input Parameter:
- `dm` - the `DMPLEX`

Output Parameter:
- `coordFunc` - the mapping function

Level: developer

-seealso: `DMPLEX`, `DMGetCoordinates()`, `DMPlexSetCoordinateMap()`, `PetscPointFn`

# External Links
$(_doc_external("Dm/DMPlexGetCoordinateMap"))
"""
function DMPlexGetCoordinateMap(petsclib::PetscLibType, dm::PetscDM, coordFunc::PetscPoCintFn) end

@for_petsc function DMPlexGetCoordinateMap(petsclib::$UnionPetscLib, dm::PetscDM, coordFunc::PetscPoCintFn )

    @chk ccall(
               (:DMPlexGetCoordinateMap, $petsc_library),
               PetscErrorCode,
               (CDM, PetscPoCintFn),
               dm, coordFunc,
              )


	return nothing
end 

"""
	DMPlexSetCoordinateMap(petsclib::PetscLibType,dm::PetscDM, coordFunc::PetscPoCintFn) 
Sets the function used to map coordinates of newly generated mesh points

Logically Collective

Input Parameters:
- `dm`        - the `DMPLEX`
- `coordFunc` - the mapping function

Level: developer

-seealso: `DMPLEX`, `DMSetCoordinates()`, `DMPlexGetCoordinateMap()`, `PetscPointFn`

# External Links
$(_doc_external("Dm/DMPlexSetCoordinateMap"))
"""
function DMPlexSetCoordinateMap(petsclib::PetscLibType, dm::PetscDM, coordFunc::PetscPoCintFn) end

@for_petsc function DMPlexSetCoordinateMap(petsclib::$UnionPetscLib, dm::PetscDM, coordFunc::PetscPoCintFn )

    @chk ccall(
               (:DMPlexSetCoordinateMap, $petsc_library),
               PetscErrorCode,
               (CDM, Ptr{PetscPoCintFn}),
               dm, coordFunc,
              )


	return nothing
end 

"""
	DMPlexComputeGradientFVM(petsclib::PetscLibType,dm::PetscDM, fvm::PetscFV, faceGeometry::PetscVec, cellGeometry::PetscVec, dmGrad::PetscDM) 
Compute geometric factors for gradient reconstruction, which are stored in the geometry data, and compute layout for gradient data

Collective

Input Parameters:
- `dm`           - The `DMPLEX`
- `fvm`          - The `PetscFV`
- `cellGeometry` - The face geometry from `DMPlexComputeCellGeometryFVM()`

Input/Output Parameter:
- `faceGeometry` - The face geometry from `DMPlexComputeFaceGeometryFVM()`; on output
the geometric factors for gradient calculation are inserted

Output Parameter:
- `dmGrad` - The `DM` describing the layout of gradient data

Level: developer

-seealso: `DMPLEX`, `DMPlexGetFaceGeometryFVM()`, `DMPlexGetCellGeometryFVM()`

# External Links
$(_doc_external("Dm/DMPlexComputeGradientFVM"))
"""
function DMPlexComputeGradientFVM(petsclib::PetscLibType, dm::PetscDM, fvm::PetscFV, faceGeometry::PetscVec, cellGeometry::PetscVec, dmGrad::PetscDM) end

@for_petsc function DMPlexComputeGradientFVM(petsclib::$UnionPetscLib, dm::PetscDM, fvm::PetscFV, faceGeometry::PetscVec, cellGeometry::PetscVec, dmGrad::PetscDM )
	dmGrad_ = Ref(dmGrad.ptr)

    @chk ccall(
               (:DMPlexComputeGradientFVM, $petsc_library),
               PetscErrorCode,
               (CDM, PetscFV, CVec, CVec, Ptr{CDM}),
               dm, fvm, faceGeometry, cellGeometry, dmGrad_,
              )

	dmGrad.ptr = C_NULL

	return nothing
end 

"""
	DMPlexGetDataFVM(petsclib::PetscLibType,dm::PetscDM, fv::PetscFV, cellgeom::PetscVec, facegeom::PetscVec, gradDM::PetscDM) 
Retrieve precomputed cell geometry

Collective

Input Parameters:
- `dm` - The `DM`
- `fv` - The `PetscFV`

Output Parameters:
- `cellgeom` - The cell geometry
- `facegeom` - The face geometry
- `gradDM`   - The gradient matrices

Level: developer

-seealso: `DMPLEX`, `DMPlexComputeGeometryFVM()`

# External Links
$(_doc_external("Dm/DMPlexGetDataFVM"))
"""
function DMPlexGetDataFVM(petsclib::PetscLibType, dm::PetscDM, fv::PetscFV, cellgeom::PetscVec, facegeom::PetscVec, gradDM::PetscDM) end

@for_petsc function DMPlexGetDataFVM(petsclib::$UnionPetscLib, dm::PetscDM, fv::PetscFV, cellgeom::PetscVec, facegeom::PetscVec, gradDM::PetscDM )
	cellgeom_ = Ref(cellgeom.ptr)
	facegeom_ = Ref(facegeom.ptr)
	gradDM_ = Ref(gradDM.ptr)

    @chk ccall(
               (:DMPlexGetDataFVM, $petsc_library),
               PetscErrorCode,
               (CDM, PetscFV, Ptr{CVec}, Ptr{CVec}, Ptr{CDM}),
               dm, fv, cellgeom_, facegeom_, gradDM_,
              )

	cellgeom.ptr = C_NULL
	facegeom.ptr = C_NULL
	gradDM.ptr = C_NULL

	return nothing
end 

"""
	refCoords::Vector{PetscReal} = DMPlexCoordinatesToReference(petsclib::PetscLibType,dm::PetscDM, cell::PetscInt, numPoints::PetscInt, realCoords::Vector{PetscReal}) 
Pull coordinates back from the mesh to the reference element
using a single element map.

Not Collective

Input Parameters:
- `dm`         - The mesh, with coordinate maps defined either by a `PetscDS` for the coordinate `DM` (see `DMGetCoordinateDM()`) or
implicitly by the coordinates of the corner vertices of the cell: as an affine map for simplicial elements, or
as a multilinear map for tensor-product elements
- `cell`       - the cell whose map is used.
- `numPoints`  - the number of points to locate
- `realCoords` - (numPoints x coordinate dimension) array of coordinates (see `DMGetCoordinateDim()`)

Output Parameter:
- `refCoords` - (`numPoints` x `dimension`) array of reference coordinates (see `DMGetDimension()`)

Level: intermediate

-seealso: `DMPLEX`, `DMPlexReferenceToCoordinates()`

# External Links
$(_doc_external("Dm/DMPlexCoordinatesToReference"))
"""
function DMPlexCoordinatesToReference(petsclib::PetscLibType, dm::PetscDM, cell::PetscInt, numPoints::PetscInt, realCoords::Vector{PetscReal}) end

@for_petsc function DMPlexCoordinatesToReference(petsclib::$UnionPetscLib, dm::PetscDM, cell::$PetscInt, numPoints::$PetscInt, realCoords::Vector{$PetscReal} )
	refCoords = Vector{$PetscReal}(undef, ni);  # CHECK SIZE!!

    @chk ccall(
               (:DMPlexCoordinatesToReference, $petsc_library),
               PetscErrorCode,
               (CDM, $PetscInt, $PetscInt, Ptr{$PetscReal}, Ptr{$PetscReal}),
               dm, cell, numPoints, realCoords, refCoords,
              )


	return refCoords
end 

"""
	realCoords::Vector{PetscReal} = DMPlexReferenceToCoordinates(petsclib::PetscLibType,dm::PetscDM, cell::PetscInt, numPoints::PetscInt, refCoords::Vector{PetscReal}) 
Map references coordinates to coordinates in the mesh for a single element map.

Not Collective

Input Parameters:
- `dm`        - The mesh, with coordinate maps defined either by a PetscDS for the coordinate `DM` (see `DMGetCoordinateDM()`) or
implicitly by the coordinates of the corner vertices of the cell: as an affine map for simplicial elements, or
as a multilinear map for tensor-product elements
- `cell`      - the cell whose map is used.
- `numPoints` - the number of points to locate
- `refCoords` - (numPoints x dimension) array of reference coordinates (see `DMGetDimension()`)

Output Parameter:
- `realCoords` - (numPoints x coordinate dimension) array of coordinates (see `DMGetCoordinateDim()`)

Level: intermediate

-seealso: `DMPLEX`, `DMPlexCoordinatesToReference()`

# External Links
$(_doc_external("Dm/DMPlexReferenceToCoordinates"))
"""
function DMPlexReferenceToCoordinates(petsclib::PetscLibType, dm::PetscDM, cell::PetscInt, numPoints::PetscInt, refCoords::Vector{PetscReal}) end

@for_petsc function DMPlexReferenceToCoordinates(petsclib::$UnionPetscLib, dm::PetscDM, cell::$PetscInt, numPoints::$PetscInt, refCoords::Vector{$PetscReal} )
	realCoords = Vector{$PetscReal}(undef, ni);  # CHECK SIZE!!

    @chk ccall(
               (:DMPlexReferenceToCoordinates, $petsc_library),
               PetscErrorCode,
               (CDM, $PetscInt, $PetscInt, Ptr{$PetscReal}, Ptr{$PetscReal}),
               dm, cell, numPoints, refCoords, realCoords,
              )


	return realCoords
end 

"""
	DMPlexRemapGeometry(petsclib::PetscLibType,dm::PetscDM, time::PetscReal, func::external) 
This function maps the original `DM` coordinates to new coordinates.

Not Collective

Input Parameters:
- `dm`   - The `DM`
- `time` - The time
- `func` - The function transforming current coordinates to new coordinates

Calling sequence of `func`:
- `dim`          - The spatial dimension
- `Nf`           - The number of input fields (here 1)
- `NfAux`        - The number of input auxiliary fields
- `uOff`         - The offset of the coordinates in u[] (here 0)
- `uOff_x`       - The offset of the coordinates in u_x[] (here 0)
- `u`            - The coordinate values at this point in space
- `u_t`          - The coordinate time derivative at this point in space (here `NULL`)
- `u_x`          - The coordinate derivatives at this point in space
- `aOff`         - The offset of each auxiliary field in u[]
- `aOff_x`       - The offset of each auxiliary field in u_x[]
- `a`            - The auxiliary field values at this point in space
- `a_t`          - The auxiliary field time derivative at this point in space (or `NULL`)
- `a_x`          - The auxiliary field derivatives at this point in space
- `t`            - The current time
- `x`            - The coordinates of this point (here not used)
- `numConstants` - The number of constants
- `constants`    - The value of each constant
- `f`            - The new coordinates at this point in space

Level: intermediate

-seealso: `DMPLEX`, `DMGetCoordinates()`, `DMGetCoordinatesLocal()`, `DMGetCoordinateDM()`, `DMProjectFieldLocal()`, `DMProjectFieldLabelLocal()`

# External Links
$(_doc_external("Dm/DMPlexRemapGeometry"))
"""
function DMPlexRemapGeometry(petsclib::PetscLibType, dm::PetscDM, time::PetscReal, func::external) end

@for_petsc function DMPlexRemapGeometry(petsclib::$UnionPetscLib, dm::PetscDM, time::$PetscReal, func::external )

    @chk ccall(
               (:DMPlexRemapGeometry, $petsc_library),
               PetscErrorCode,
               (CDM, $PetscReal, external),
               dm, time, func,
              )


	return nothing
end 

"""
	DMPlexShearGeometry(petsclib::PetscLibType,dm::PetscDM, direction::DMDirection, multipliers::Vector{PetscReal}) 
This shears the domain, meaning adds a multiple of the shear coordinate to all other coordinates.

Not Collective

Input Parameters:
- `dm`          - The `DMPLEX`
- `direction`   - The shear coordinate direction, e.g. `DM_X` is the x-axis
- `multipliers` - The multiplier m for each direction which is not the shear direction

Level: intermediate

-seealso: `DMPLEX`, `DMPlexRemapGeometry()`, `DMDirection`, `DM_X`, `DM_Y`, `DM_Z`

# External Links
$(_doc_external("Dm/DMPlexShearGeometry"))
"""
function DMPlexShearGeometry(petsclib::PetscLibType, dm::PetscDM, direction::DMDirection, multipliers::Vector{PetscReal}) end

@for_petsc function DMPlexShearGeometry(petsclib::$UnionPetscLib, dm::PetscDM, direction::DMDirection, multipliers::Vector{$PetscReal} )

    @chk ccall(
               (:DMPlexShearGeometry, $petsc_library),
               PetscErrorCode,
               (CDM, DMDirection, Ptr{$PetscReal}),
               dm, direction, multipliers,
              )


	return nothing
end 

"""
	num_cells::PetscInt,cell_size::PetscInt,num_comp::PetscInt,l_size::PetscInt,offsets::Vector{PetscInt} = DMPlexGetLocalOffsets(petsclib::PetscLibType,dm::PetscDM, domain_label::DMLabel, label_value::PetscInt, height::PetscInt, dm_field::PetscInt) 
Allocate and populate array of local offsets for each cell closure.

Not collective

Input Parameters:
- `dm`           - The `DMPLEX` object
- `domain_label` - label for `DMPLEX` domain, or NULL for whole domain
- `label_value`  - Stratum value
- `height`       - Height of target cells in `DMPLEX` topology
- `dm_field`     - Index of `DMPLEX` field

Output Parameters:
- `num_cells` - Number of local cells
- `cell_size` - Size of each cell, given by cell_size * num_comp = num_dof
- `num_comp`  - Number of components per dof
- `l_size`    - Size of local vector
- `offsets`   - Allocated offsets array for cells

Level: developer

-seealso: [](ch_unstructured), `DMPlexGetLocalOffsetsSupport()`, `DM`, `DMPLEX`, `DMLabel`, `DMPlexGetClosureIndices()`, `DMPlexSetClosurePermutationTensor()`, `DMPlexGetCeedRestriction()`

# External Links
$(_doc_external("Dm/DMPlexGetLocalOffsets"))
"""
function DMPlexGetLocalOffsets(petsclib::PetscLibType, dm::PetscDM, domain_label::DMLabel, label_value::PetscInt, height::PetscInt, dm_field::PetscInt) end

@for_petsc function DMPlexGetLocalOffsets(petsclib::$UnionPetscLib, dm::PetscDM, domain_label::DMLabel, label_value::$PetscInt, height::$PetscInt, dm_field::$PetscInt )
	num_cells_ = Ref{$PetscInt}()
	cell_size_ = Ref{$PetscInt}()
	num_comp_ = Ref{$PetscInt}()
	l_size_ = Ref{$PetscInt}()
	offsets_ = Ref{Ptr{$PetscInt}}()

    @chk ccall(
               (:DMPlexGetLocalOffsets, $petsc_library),
               PetscErrorCode,
               (CDM, DMLabel, $PetscInt, $PetscInt, $PetscInt, Ptr{$PetscInt}, Ptr{$PetscInt}, Ptr{$PetscInt}, Ptr{$PetscInt}, Ptr{Ptr{$PetscInt}}),
               dm, domain_label, label_value, height, dm_field, num_cells_, cell_size_, num_comp_, l_size_, offsets_,
              )

	num_cells = num_cells_[]
	cell_size = cell_size_[]
	num_comp = num_comp_[]
	l_size = l_size_[]
	offsets = unsafe_wrap(Array, offsets_[], VecGetLocalSize(petsclib, x); own = false)

	return num_cells,cell_size,num_comp,l_size,offsets
end 

"""
	num_faces::PetscInt,num_comp::PetscInt,l_size::PetscInt,offsetsNeg::PetscInt,offsetsPos::PetscInt = DMPlexGetLocalOffsetsSupport(petsclib::PetscLibType,dm::PetscDM, domain_label::DMLabel, label_value::PetscInt) 
Allocate and populate arrays of local offsets for each face support.

Not collective

Input Parameters:
- `dm`           - The `DMPLEX` object
- `domain_label` - label for `DMPLEX` domain, or NULL for whole domain
- `label_value`  - Stratum value

Output Parameters:
- `num_faces`  - Number of local, non-boundary faces
- `num_comp`   - Number of components per dof
- `l_size`     - Size of local vector
- `offsetsNeg` - Allocated offsets array for cells on the inward normal side of each face
- `offsetsPos` - Allocated offsets array for cells on the outward normal side of each face

Level: developer

-seealso: [](ch_unstructured), `DMPlexGetLocalOffsets()`, `DM`, `DMPLEX`, `DMLabel`, `DMPlexGetClosureIndices()`, `DMPlexSetClosurePermutationTensor()`, `DMPlexGetCeedRestriction()`

# External Links
$(_doc_external("Dm/DMPlexGetLocalOffsetsSupport"))
"""
function DMPlexGetLocalOffsetsSupport(petsclib::PetscLibType, dm::PetscDM, domain_label::DMLabel, label_value::PetscInt) end

@for_petsc function DMPlexGetLocalOffsetsSupport(petsclib::$UnionPetscLib, dm::PetscDM, domain_label::DMLabel, label_value::$PetscInt )
	num_faces_ = Ref{$PetscInt}()
	num_comp_ = Ref{$PetscInt}()
	l_size_ = Ref{$PetscInt}()
	offsetsNeg_ = Ref{$PetscInt}()
	offsetsPos_ = Ref{$PetscInt}()

    @chk ccall(
               (:DMPlexGetLocalOffsetsSupport, $petsc_library),
               PetscErrorCode,
               (CDM, DMLabel, $PetscInt, Ptr{$PetscInt}, Ptr{$PetscInt}, Ptr{$PetscInt}, $PetscInt, $PetscInt),
               dm, domain_label, label_value, num_faces_, num_comp_, l_size_, offsetsNeg_, offsetsPos_,
              )

	num_faces = num_faces_[]
	num_comp = num_comp_[]
	l_size = l_size_[]
	offsetsNeg = offsetsNeg_[]
	offsetsPos = offsetsPos_[]

	return num_faces,num_comp,l_size,offsetsNeg,offsetsPos
end 

"""
	DMPlexGetOrdering(petsclib::PetscLibType,dm::PetscDM, otype::MatOrderingType, label::DMLabel, perm::IS) 
Calculate a reordering of the mesh

Collective

Input Parameters:
- `dm`    - The `DMPLEX` object
- `otype` - type of reordering, see `MatOrderingType`
- `label` - [Optional] Label used to segregate ordering into sets, or `NULL`

Output Parameter:
- `perm` - The point permutation as an `IS`, `perm`[old point number] = new point number

Level: intermediate

-seealso: `DMPLEX`, `DMPlexPermute()`, `MatOrderingType`, `MatGetOrdering()`

# External Links
$(_doc_external("Dm/DMPlexGetOrdering"))
"""
function DMPlexGetOrdering(petsclib::PetscLibType, dm::PetscDM, otype::MatOrderingType, label::DMLabel, perm::IS) end

@for_petsc function DMPlexGetOrdering(petsclib::$UnionPetscLib, dm::PetscDM, otype::MatOrderingType, label::DMLabel, perm::IS )

    @chk ccall(
               (:DMPlexGetOrdering, $petsc_library),
               PetscErrorCode,
               (CDM, MatOrderingType, DMLabel, Ptr{IS}),
               dm, otype, label, perm,
              )


	return nothing
end 

"""
	DMPlexGetOrdering1D(petsclib::PetscLibType,dm::PetscDM, perm::IS) 
Reorder the vertices so that the mesh is in a line

Collective

Input Parameter:
- `dm` - The `DMPLEX` object

Output Parameter:
- `perm` - The point permutation as an `IS`, `perm`[old point number] = new point number

Level: intermediate

-seealso: `DMPLEX`, `DMPlexGetOrdering()`, `DMPlexPermute()`, `MatGetOrdering()`

# External Links
$(_doc_external("Dm/DMPlexGetOrdering1D"))
"""
function DMPlexGetOrdering1D(petsclib::PetscLibType, dm::PetscDM, perm::IS) end

@for_petsc function DMPlexGetOrdering1D(petsclib::$UnionPetscLib, dm::PetscDM, perm::IS )

    @chk ccall(
               (:DMPlexGetOrdering1D, $petsc_library),
               PetscErrorCode,
               (CDM, Ptr{IS}),
               dm, perm,
              )


	return nothing
end 

"""
	DMPlexPermute(petsclib::PetscLibType,dm::PetscDM, perm::IS, pdm::PetscDM) 
Reorder the mesh according to the input permutation

Collective

Input Parameters:
- `dm`   - The `DMPLEX` object
- `perm` - The point permutation, `perm`[old point number] = new point number

Output Parameter:
- `pdm` - The permuted `DM`

Level: intermediate

-seealso: `DMPLEX`, `MatPermute()`

# External Links
$(_doc_external("Dm/DMPlexPermute"))
"""
function DMPlexPermute(petsclib::PetscLibType, dm::PetscDM, perm::IS, pdm::PetscDM) end

@for_petsc function DMPlexPermute(petsclib::$UnionPetscLib, dm::PetscDM, perm::IS, pdm::PetscDM )
	pdm_ = Ref(pdm.ptr)

    @chk ccall(
               (:DMPlexPermute, $petsc_library),
               PetscErrorCode,
               (CDM, IS, Ptr{CDM}),
               dm, perm, pdm_,
              )

	pdm.ptr = C_NULL

	return nothing
end 

"""
	DMPlexReorderSetDefault(petsclib::PetscLibType,dm::PetscDM, reorder::DMReorderDefaultFlag) 
Set flag indicating whether the DM should be reordered by default

Logically Collective

Input Parameters:
- `dm`      - The `DM`
- `reorder` - Flag for reordering

Level: intermediate

-seealso: `DMPlexReorderGetDefault()`

# External Links
$(_doc_external("Dm/DMPlexReorderSetDefault"))
"""
function DMPlexReorderSetDefault(petsclib::PetscLibType, dm::PetscDM, reorder::DMReorderDefaultFlag) end

@for_petsc function DMPlexReorderSetDefault(petsclib::$UnionPetscLib, dm::PetscDM, reorder::DMReorderDefaultFlag )

    @chk ccall(
               (:DMPlexReorderSetDefault, $petsc_library),
               PetscErrorCode,
               (CDM, DMReorderDefaultFlag),
               dm, reorder,
              )


	return nothing
end 

"""
	DMPlexReorderGetDefault(petsclib::PetscLibType,dm::PetscDM, reorder::DMReorderDefaultFlag) 
Get flag indicating whether the DM should be reordered by default

Not Collective

Input Parameter:
- `dm` - The `DM`

Output Parameter:
- `reorder` - Flag for reordering

Level: intermediate

-seealso: `DMPlexReorderSetDefault()`

# External Links
$(_doc_external("Dm/DMPlexReorderGetDefault"))
"""
function DMPlexReorderGetDefault(petsclib::PetscLibType, dm::PetscDM, reorder::DMReorderDefaultFlag) end

@for_petsc function DMPlexReorderGetDefault(petsclib::$UnionPetscLib, dm::PetscDM, reorder::DMReorderDefaultFlag )

    @chk ccall(
               (:DMPlexReorderGetDefault, $petsc_library),
               PetscErrorCode,
               (CDM, Ptr{DMReorderDefaultFlag}),
               dm, reorder,
              )


	return nothing
end 

"""
	DMPlexExtrude(petsclib::PetscLibType,dm::PetscDM, layers::PetscInt, thickness::PetscReal, tensor::PetscBool, symmetric::PetscBool, periodic::PetscBool, normal::Vector{PetscReal}, thicknesses::Vector{PetscReal}, activeLabel::DMLabel, edm::PetscDM) 
Extrude a volumetric mesh from the input surface mesh

Input Parameters:
- `dm`          - The surface mesh
- `layers`      - The number of extruded layers
- `thickness`   - The total thickness of the extruded layers, or `PETSC_DETERMINE`
- `tensor`      - Flag to create tensor produt cells
- `symmetric`   - Flag to extrude symmetrically about the surface
- `periodic`    - Flag to extrude periodically
- `normal`      - Surface normal vector, or `NULL`
- `thicknesses` - Thickness of each layer, or `NULL`
- `activeLabel` - `DMLabel` to extrude from, or `NULL` to extrude entire mesh

Output Parameter:
- `edm` - The volumetric mesh

Options Database Keys:
- `-dm_plex_transform_extrude_thickness <t>`           - The total thickness of extruded layers
- `-dm_plex_transform_extrude_use_tensor <bool>`       - Use tensor cells when extruding
- `-dm_plex_transform_extrude_symmetric <bool>`        - Extrude layers symmetrically about the surface
- `-dm_plex_transform_extrude_periodic <bool>`         - Extrude layers periodically
- `-dm_plex_transform_extrude_normal <n0,...,nd>`      - Specify the extrusion direction
- `-dm_plex_transform_extrude_thicknesses <t0,...,tl>` - Specify thickness of each layer

Level: intermediate

-seealso: [](ch_unstructured), `DM`, `DMPLEX`, `DMExtrude()`, `DMPlexTransform`, `DMPlexTransformExtrudeSetThickness()`, `DMPlexTransformExtrudeSetTensor()`

# External Links
$(_doc_external("Dm/DMPlexExtrude"))
"""
function DMPlexExtrude(petsclib::PetscLibType, dm::PetscDM, layers::PetscInt, thickness::PetscReal, tensor::PetscBool, symmetric::PetscBool, periodic::PetscBool, normal::Vector{PetscReal}, thicknesses::Vector{PetscReal}, activeLabel::DMLabel, edm::PetscDM) end

@for_petsc function DMPlexExtrude(petsclib::$UnionPetscLib, dm::PetscDM, layers::$PetscInt, thickness::$PetscReal, tensor::PetscBool, symmetric::PetscBool, periodic::PetscBool, normal::Vector{$PetscReal}, thicknesses::Vector{$PetscReal}, activeLabel::DMLabel, edm::PetscDM )
	edm_ = Ref(edm.ptr)

    @chk ccall(
               (:DMPlexExtrude, $petsc_library),
               PetscErrorCode,
               (CDM, $PetscInt, $PetscReal, PetscBool, PetscBool, PetscBool, Ptr{$PetscReal}, Ptr{$PetscReal}, DMLabel, Ptr{CDM}),
               dm, layers, thickness, tensor, symmetric, periodic, normal, thicknesses, activeLabel, edm_,
              )

	edm.ptr = C_NULL

	return nothing
end 

"""
	DMPlexInflateToGeomModelUseXYZ(petsclib::PetscLibType,dm::PetscDM) 
Snaps the vertex coordinates of a `DMPLEX` object representing the mesh to its geometry if some vertices depart from the model. This usually happens with non

Collective

Input Parameter:
- `dm` - The uninflated `DM` object representing the mesh

Level: intermediate

-seealso: [](ch_unstructured), `DM`, `DMPLEX`, `DMCreate()`, `DMPlexCreateEGADS()`

# External Links
$(_doc_external("Dm/DMPlexInflateToGeomModelUseXYZ"))
"""
function DMPlexInflateToGeomModelUseXYZ(petsclib::PetscLibType, dm::PetscDM) end

@for_petsc function DMPlexInflateToGeomModelUseXYZ(petsclib::$UnionPetscLib, dm::PetscDM )

    @chk ccall(
               (:DMPlexInflateToGeomModelUseXYZ, $petsc_library),
               PetscErrorCode,
               (CDM,),
               dm,
              )


	return nothing
end 

"""
	dm::PetscDM = DMPlexCreateGeomFromFile(petsclib::PetscLibType,comm::MPI_Comm, filename::String, islite::PetscBool) 
Create a `DMPLEX` mesh from an EGADS, IGES, or STEP file.

Collective

Input Parameters:
- `comm`     - The MPI communicator
- `filename` - The name of the EGADS, IGES, or STEP file
- `islite`   - Flag for EGADSlite support

Output Parameter:
- `dm` - The `DM` object representing the mesh

Level: beginner

-seealso: [](ch_unstructured), `DM`, `DMPLEX`, `DMCreate()`, `DMPlexCreateEGADS()`, `DMPlexCreateEGADSliteFromFile()`

# External Links
$(_doc_external("Dm/DMPlexCreateGeomFromFile"))
"""
function DMPlexCreateGeomFromFile(petsclib::PetscLibType, comm::MPI_Comm, filename::String, islite::PetscBool) end

@for_petsc function DMPlexCreateGeomFromFile(petsclib::$UnionPetscLib, comm::MPI_Comm, filename::String, islite::PetscBool )
	dm_ = Ref{CDM}()

    @chk ccall(
               (:DMPlexCreateGeomFromFile, $petsc_library),
               PetscErrorCode,
               (MPI_Comm, Ptr{Cchar}, Ptr{CDM}, PetscBool),
               comm, filename, dm_, islite,
              )

	dm = PetscDM(dm_[], petsclib)

	return dm
end 

"""
	DMPlexGeomDataAndGrads(petsclib::PetscLibType,dm::PetscDM, fullGeomGrad::PetscBool) 
Exposes Control Points and Control Point Weights defining the underlying geometry allowing user manipulation of the geometry.

Collective

Input Parameters:
- `dm`           - The DM object representing the mesh with PetscContainer containing an EGADS geometry model
- `fullGeomGrad` - PetscBool flag. Determines how the Surface Area and Volume Gradients wrt to Control Points and Control Point Weights are calculated.
PETSC_FALSE :: Surface Area Gradient wrt Control Points and Control Point Weights are calculated using the change in the local
FACE changes (not the entire body). Volume Gradients are not calculated. Faster computations.
PETSC_TRUE  :: Surface Area Gradietn wrt to Control Points and Control Point Weights are calculated using the change observed in
the entire solid body. Volume Gradients are calculated. Slower computation due to the need to generate a new solid
body geometry for every Control Point and Control Point Weight change.

Output Parameter:
- `dm` - The updated DM object representing the mesh with PetscContainers containing the Control Point, Control Point Weight and Gradient Data.

Level: intermediate

-seealso: `DMPLEX`, `DMCreate()`, `DMPlexCreateGeom()`, `DMPlexModifyEGADSGeomModel()`

# External Links
$(_doc_external("Dm/DMPlexGeomDataAndGrads"))
"""
function DMPlexGeomDataAndGrads(petsclib::PetscLibType, dm::PetscDM, fullGeomGrad::PetscBool) end

@for_petsc function DMPlexGeomDataAndGrads(petsclib::$UnionPetscLib, dm::PetscDM, fullGeomGrad::PetscBool )

    @chk ccall(
               (:DMPlexGeomDataAndGrads, $petsc_library),
               PetscErrorCode,
               (CDM, PetscBool),
               dm, fullGeomGrad,
              )


	return nothing
end 

"""
	DMPlexModifyGeomModel(petsclib::PetscLibType,dm::PetscDM, comm::MPI_Comm, newCP::Vector{PetscScalar}, newW::Vector{PetscScalar}, autoInflate::PetscBool, saveGeom::PetscBool, stpName::String) 
Generates a new EGADS geometry model based in user provided Control Points and Control Points Weights. Optionally, the function will inflate the DM to the new geometry and save the new geometry to a file.

Collective

Input Parameters:
- `dm`          - The DM object representing the mesh with PetscContainer containing an EGADS geometry model
- `comm`        - MPI_Comm object
- `newCP`       - C Array of [x, y, z] New/Updated Control Point Coordinates defining the geometry (See DMPlexGeomDataAndGrads() for format)
- `newW`        - C Array of New/Updated Control Point Weights associated with the Control Points defining the new geometry (See DMPlexGemGrads() for format)
- `autoInflate` - PetscBool Flag denoting if the user would like to inflate the DM points to the new geometry.
- `saveGeom`    - PetscBool Flag denoting if the user would iike to save the new geometry to a file.
- `stpName`     - Char Array indicating the name of the file to save the new geometry to. Extension must be included and will denote type of file written.
*.stp or *.step = STEP File
*.igs or *.iges = IGES File
*.egads = EGADS File
*.brep = BRep File (OpenCASCADE File)

Output Parameter:
- `dm` - The updated DM object representing the mesh with PetscContainers containing the updated/modified geometry

Level: intermediate

-seealso: `DMPLEX`, `DMCreate()`, `DMPlexCreateGeom()`, `DMPlexGeomDataAndGrads()`

# External Links
$(_doc_external("Dm/DMPlexModifyGeomModel"))
"""
function DMPlexModifyGeomModel(petsclib::PetscLibType, dm::PetscDM, comm::MPI_Comm, newCP::Vector{PetscScalar}, newW::Vector{PetscScalar}, autoInflate::PetscBool, saveGeom::PetscBool, stpName::String) end

@for_petsc function DMPlexModifyGeomModel(petsclib::$UnionPetscLib, dm::PetscDM, comm::MPI_Comm, newCP::Vector{$PetscScalar}, newW::Vector{$PetscScalar}, autoInflate::PetscBool, saveGeom::PetscBool, stpName::String )

    @chk ccall(
               (:DMPlexModifyGeomModel, $petsc_library),
               PetscErrorCode,
               (CDM, MPI_Comm, Ptr{$PetscScalar}, Ptr{$PetscScalar}, PetscBool, PetscBool, Ptr{Cchar}),
               dm, comm, newCP, newW, autoInflate, saveGeom, stpName,
              )


	return nothing
end 

"""
	DMPlexGetGeomModelTUV(petsclib::PetscLibType,dm::PetscDM) 
Gets the [t] (EDGES) and [u, v] (FACES) geometry parameters of DM points that are associated geometry relationships. Requires a DM with a EGADS model attached.

Collective

Input Parameter:
- `dm` - The DM object representing the mesh with PetscContainer containing an EGADS geometry model

Level: intermediate

-seealso: `DMPLEX`, `DMCreate()`, `DMPlexCreateGeom()`, `DMPlexGeomDataAndGrads()`

# External Links
$(_doc_external("Dm/DMPlexGetGeomModelTUV"))
"""
function DMPlexGetGeomModelTUV(petsclib::PetscLibType, dm::PetscDM) end

@for_petsc function DMPlexGetGeomModelTUV(petsclib::$UnionPetscLib, dm::PetscDM )

    @chk ccall(
               (:DMPlexGetGeomModelTUV, $petsc_library),
               PetscErrorCode,
               (CDM,),
               dm,
              )


	return nothing
end 

"""
	DMPlexInflateToGeomModelUseTUV(petsclib::PetscLibType,dm::PetscDM) 
Inflates the DM to the associated underlying geometry using the [t] {EDGES) and [u, v] (FACES} associated parameters. Requires a DM with an EGADS model attached and a previous call to DMPlexGetGeomModelTUV().

Collective

Input Parameter:
- `dm` - The DM object representing the mesh with PetscContainer containing an EGADS geometry model

Level: intermediate

-seealso: `DMPLEX`, `DMCreate()`, `DMPlexCreateGeom()`, `DMPlexGeomDataAndGrads()`, `DMPlexGetGeomModelTUV()`

# External Links
$(_doc_external("Dm/DMPlexInflateToGeomModelUseTUV"))
"""
function DMPlexInflateToGeomModelUseTUV(petsclib::PetscLibType, dm::PetscDM) end

@for_petsc function DMPlexInflateToGeomModelUseTUV(petsclib::$UnionPetscLib, dm::PetscDM )

    @chk ccall(
               (:DMPlexInflateToGeomModelUseTUV, $petsc_library),
               PetscErrorCode,
               (CDM,),
               dm,
              )


	return nothing
end 

"""
	DMPlexInflateToGeomModel(petsclib::PetscLibType,dm::PetscDM, useTUV::PetscBool) 
Wrapper function allowing two methods for inflating refined meshes to the underlying geometric domain.

Collective

Input Parameters:
- `dm`     - The DMPlex object with an attached PetscContainer storing a CAD Geometry object
- `useTUV` - PetscBool indicating if the user would like to inflate the DMPlex to the underlying geometry
using (t) for nodes on EDGEs and (u, v) for nodes on FACEs or using the nodes (x, y, z) coordinates
and shortest distance routine.
If useTUV = PETSC_TRUE, use the (t) or (u, v) parameters to inflate the DMPlex to the CAD geometry.
If useTUV = PETSC_FALSE, use the nodes (x, y, z) coordinates and the shortest disctance routine.

-seealso: `DMPlexGetGeomModelTUV()`, `DMPlexInflateToGeomModelUseTUV()`, `DMPlexInflateToGeomModelUseXYZ()`

# External Links
$(_doc_external("Dm/DMPlexInflateToGeomModel"))
"""
function DMPlexInflateToGeomModel(petsclib::PetscLibType, dm::PetscDM, useTUV::PetscBool) end

@for_petsc function DMPlexInflateToGeomModel(petsclib::$UnionPetscLib, dm::PetscDM, useTUV::PetscBool )

    @chk ccall(
               (:DMPlexInflateToGeomModel, $petsc_library),
               PetscErrorCode,
               (CDM, PetscBool),
               dm, useTUV,
              )


	return nothing
end 

"""
	numBodies::PetscInt = DMPlexGetGeomModelBodies(petsclib::PetscLibType,dm::PetscDM, bodies::PetscGeom) 
Returns an array of `PetscGeom` BODY objects attached to the referenced geometric model entity as well as the number of BODYs.

Collective

Input Parameter:
- `dm` - The DMPlex object with an attached PetscContainer storing a CAD Geometry object

Output Parameters:
- `bodies`    - Array of PetscGeom BODY objects referenced by the geometric model.
- `numBodies` - Number of BODYs referenced by the geometric model. Also the size of **bodies array.

Level: intermediate

-seealso:

# External Links
$(_doc_external("Dm/DMPlexGetGeomModelBodies"))
"""
function DMPlexGetGeomModelBodies(petsclib::PetscLibType, dm::PetscDM, bodies::PetscGeom) end

@for_petsc function DMPlexGetGeomModelBodies(petsclib::$UnionPetscLib, dm::PetscDM, bodies::PetscGeom )
	numBodies_ = Ref{$PetscInt}()

    @chk ccall(
               (:DMPlexGetGeomModelBodies, $petsc_library),
               PetscErrorCode,
               (CDM, PetscGeom, Ptr{$PetscInt}),
               dm, bodies, numBodies_,
              )

	numBodies = numBodies_[]

	return numBodies
end 

"""
	numShells::PetscInt = DMPlexGetGeomModelBodyShells(petsclib::PetscLibType,dm::PetscDM, body::PetscGeom, shells::PetscGeom) 
Returns an array of `PetscGeom` SHELL objects attached to the referenced BODY geometric entity as well as the number of SHELLs.

Collective

Input Parameters:
- `dm`   - The DMPlex object with an attached PetscContainer storing a CAD Geometry object
- `body` - PetscGeom BODY object containing the SHELL objects of interest.

Output Parameters:
- `shells`    - Array of PetscGeom SHELL objects referenced by the PetscGeom BODY object
- `numShells` - Number of SHELLs referenced by the PetscGeom BODY object. Also the size of **shells array.

Level: intermediate

-seealso:

# External Links
$(_doc_external("Dm/DMPlexGetGeomModelBodyShells"))
"""
function DMPlexGetGeomModelBodyShells(petsclib::PetscLibType, dm::PetscDM, body::PetscGeom, shells::PetscGeom) end

@for_petsc function DMPlexGetGeomModelBodyShells(petsclib::$UnionPetscLib, dm::PetscDM, body::PetscGeom, shells::PetscGeom )
	numShells_ = Ref{$PetscInt}()

    @chk ccall(
               (:DMPlexGetGeomModelBodyShells, $petsc_library),
               PetscErrorCode,
               (CDM, PetscGeom, PetscGeom, Ptr{$PetscInt}),
               dm, body, shells, numShells_,
              )

	numShells = numShells_[]

	return numShells
end 

"""
	numFaces::PetscInt = DMPlexGetGeomModelBodyFaces(petsclib::PetscLibType,dm::PetscDM, body::PetscGeom, faces::PetscGeom) 
Returns an array of `PetscGeom` FACE objects attached to the referenced BODY geometric entity as well as the number of FACEs.

Collective

Input Parameters:
- `dm`   - The DMPlex object with an attached PetscContainer storing a CAD Geometry object
- `body` - PetscGeom BODY object containing the FACE objects of interest.

Output Parameters:
- `faces`    - Array of PetscGeom FACE objects referenced by the PetscGeom BODY object
- `numFaces` - Number of FACEs referenced by the PetscGeom BODY object. Also the size of **faces array.

Level: intermediate

-seealso:

# External Links
$(_doc_external("Dm/DMPlexGetGeomModelBodyFaces"))
"""
function DMPlexGetGeomModelBodyFaces(petsclib::PetscLibType, dm::PetscDM, body::PetscGeom, faces::PetscGeom) end

@for_petsc function DMPlexGetGeomModelBodyFaces(petsclib::$UnionPetscLib, dm::PetscDM, body::PetscGeom, faces::PetscGeom )
	numFaces_ = Ref{$PetscInt}()

    @chk ccall(
               (:DMPlexGetGeomModelBodyFaces, $petsc_library),
               PetscErrorCode,
               (CDM, PetscGeom, PetscGeom, Ptr{$PetscInt}),
               dm, body, faces, numFaces_,
              )

	numFaces = numFaces_[]

	return numFaces
end 

"""
	numLoops::PetscInt = DMPlexGetGeomModelBodyLoops(petsclib::PetscLibType,dm::PetscDM, body::PetscGeom, loops::PetscGeom) 
Returns an array of `PetscGeom` Loop objects attached to the referenced BODY geometric entity as well as the number of LOOPs.

Collective

Input Parameters:
- `dm`   - The DMPlex object with an attached PetscContainer storing a CAD Geometry object
- `body` - PetscGeom BODY object containing the LOOP objects of interest.

Output Parameters:
- `loops`    - Array of PetscGeom FACE objects referenced by the PetscGeom SHELL object
- `numLoops` - Number of LOOPs referenced by the PetscGeom BODY object. Also the size of **loops array.

Level: intermediate

-seealso:

# External Links
$(_doc_external("Dm/DMPlexGetGeomModelBodyLoops"))
"""
function DMPlexGetGeomModelBodyLoops(petsclib::PetscLibType, dm::PetscDM, body::PetscGeom, loops::PetscGeom) end

@for_petsc function DMPlexGetGeomModelBodyLoops(petsclib::$UnionPetscLib, dm::PetscDM, body::PetscGeom, loops::PetscGeom )
	numLoops_ = Ref{$PetscInt}()

    @chk ccall(
               (:DMPlexGetGeomModelBodyLoops, $petsc_library),
               PetscErrorCode,
               (CDM, PetscGeom, PetscGeom, Ptr{$PetscInt}),
               dm, body, loops, numLoops_,
              )

	numLoops = numLoops_[]

	return numLoops
end 

"""
	numFaces::PetscInt = DMPlexGetGeomModelShellFaces(petsclib::PetscLibType,dm::PetscDM, body::PetscGeom, shell::PetscGeom, faces::PetscGeom) 
Returns an array of `PetscGeom` FACE objects attached to the referenced SHELL geometric entity as well as the number of FACEs.

Collective

Input Parameters:
- `dm`    - The DMPlex object with an attached PetscContainer storing a CAD Geometry object
- `body`  - PetscGeom BODY object containing the FACE objects of interest.
- `shell` - PetscGeom SHELL object with FACEs of interest.

Output Parameters:
- `faces`    - Array of PetscGeom FACE objects referenced by the PetscGeom SHELL object
- `numFaces` - Number of FACEs referenced by the PetscGeom SHELL object. Also the size of **faces array.

Level: intermediate

-seealso:

# External Links
$(_doc_external("Dm/DMPlexGetGeomModelShellFaces"))
"""
function DMPlexGetGeomModelShellFaces(petsclib::PetscLibType, dm::PetscDM, body::PetscGeom, shell::PetscGeom, faces::PetscGeom) end

@for_petsc function DMPlexGetGeomModelShellFaces(petsclib::$UnionPetscLib, dm::PetscDM, body::PetscGeom, shell::PetscGeom, faces::PetscGeom )
	numFaces_ = Ref{$PetscInt}()

    @chk ccall(
               (:DMPlexGetGeomModelShellFaces, $petsc_library),
               PetscErrorCode,
               (CDM, PetscGeom, PetscGeom, PetscGeom, Ptr{$PetscInt}),
               dm, body, shell, faces, numFaces_,
              )

	numFaces = numFaces_[]

	return numFaces
end 

"""
	numLoops::PetscInt = DMPlexGetGeomModelFaceLoops(petsclib::PetscLibType,dm::PetscDM, body::PetscGeom, face::PetscGeom, loops::PetscGeom) 
Returns an array of `PetscGeom` LOOP objects attached to the referenced FACE geometric entity as well as the number of LOOPs.

Collective

Input Parameters:
- `dm`   - The DMPlex object with an attached PetscContainer storing a CAD Geometry object
- `body` - PetscGeom BODY object containing the LOOP objects of interest.
- `face` - PetscGeom FACE object with LOOPs of interest.

Output Parameters:
- `loops`    - Array of PetscGeom LOOP objects referenced by the PetscGeom FACE object
- `numLoops` - Number of LOOPs referenced by the PetscGeom FACE object. Also the size of **loops array.

Level: intermediate

-seealso:

# External Links
$(_doc_external("Dm/DMPlexGetGeomModelFaceLoops"))
"""
function DMPlexGetGeomModelFaceLoops(petsclib::PetscLibType, dm::PetscDM, body::PetscGeom, face::PetscGeom, loops::PetscGeom) end

@for_petsc function DMPlexGetGeomModelFaceLoops(petsclib::$UnionPetscLib, dm::PetscDM, body::PetscGeom, face::PetscGeom, loops::PetscGeom )
	numLoops_ = Ref{$PetscInt}()

    @chk ccall(
               (:DMPlexGetGeomModelFaceLoops, $petsc_library),
               PetscErrorCode,
               (CDM, PetscGeom, PetscGeom, PetscGeom, Ptr{$PetscInt}),
               dm, body, face, loops, numLoops_,
              )

	numLoops = numLoops_[]

	return numLoops
end 

"""
	numEdges::PetscInt = DMPlexGetGeomModelFaceEdges(petsclib::PetscLibType,dm::PetscDM, body::PetscGeom, face::PetscGeom, edges::PetscGeom) 
Returns an array of `PetscGeom` EDGE objects attached to the referenced FACE geometric entity as well as the number of EDGEs.

Collective

Input Parameters:
- `dm`   - The DMPlex object with an attached PetscContainer storing a CAD Geometry object
- `body` - PetscGeom Body object containing the EDGE objects of interest.
- `face` - PetscGeom FACE object with EDGEs of interest.

Output Parameters:
- `edges`    - Array of PetscGeom EDGE objects referenced by the PetscGeom FACE object
- `numEdges` - Number of EDGEs referenced by the PetscGeom FACE object. Also the size of **edges array.

Level: intermediate

-seealso:

# External Links
$(_doc_external("Dm/DMPlexGetGeomModelFaceEdges"))
"""
function DMPlexGetGeomModelFaceEdges(petsclib::PetscLibType, dm::PetscDM, body::PetscGeom, face::PetscGeom, edges::PetscGeom) end

@for_petsc function DMPlexGetGeomModelFaceEdges(petsclib::$UnionPetscLib, dm::PetscDM, body::PetscGeom, face::PetscGeom, edges::PetscGeom )
	numEdges_ = Ref{$PetscInt}()

    @chk ccall(
               (:DMPlexGetGeomModelFaceEdges, $petsc_library),
               PetscErrorCode,
               (CDM, PetscGeom, PetscGeom, PetscGeom, Ptr{$PetscInt}),
               dm, body, face, edges, numEdges_,
              )

	numEdges = numEdges_[]

	return numEdges
end 

"""
	numEdges::PetscInt = DMPlexGetGeomModelBodyEdges(petsclib::PetscLibType,dm::PetscDM, body::PetscGeom, edges::PetscGeom) 
Returns an array of `PetscGeom` EDGE objects attached to the referenced BODY geometric entity as well as the number of EDGEs.

Collective

Input Parameters:
- `dm`   - The DMPlex object with an attached PetscContainer storing a CAD Geometry object
- `body` - PetscGeom body object of interest.

Output Parameters:
- `edges`    - Array of PetscGeom EDGE objects referenced by the PetscGeom BODY object
- `numEdges` - Number of EDGEs referenced by the PetscGeom BODY object. Also the size of **edges array.

Level: intermediate

-seealso:

# External Links
$(_doc_external("Dm/DMPlexGetGeomModelBodyEdges"))
"""
function DMPlexGetGeomModelBodyEdges(petsclib::PetscLibType, dm::PetscDM, body::PetscGeom, edges::PetscGeom) end

@for_petsc function DMPlexGetGeomModelBodyEdges(petsclib::$UnionPetscLib, dm::PetscDM, body::PetscGeom, edges::PetscGeom )
	numEdges_ = Ref{$PetscInt}()

    @chk ccall(
               (:DMPlexGetGeomModelBodyEdges, $petsc_library),
               PetscErrorCode,
               (CDM, PetscGeom, PetscGeom, Ptr{$PetscInt}),
               dm, body, edges, numEdges_,
              )

	numEdges = numEdges_[]

	return numEdges
end 

"""
	numNodes::PetscInt = DMPlexGetGeomModelBodyNodes(petsclib::PetscLibType,dm::PetscDM, body::PetscGeom, nodes::PetscGeom) 
Returns an array of `PetscGeom` NODE objects attached to the referenced BODY geometric entity as well as the number of NODES.

Collective

Input Parameters:
- `dm`   - The DMPlex object with an attached PetscContainer storing a CAD Geometry object
- `body` - PetscGeom body object of interest.

Output Parameters:
- `nodes`    - Array of PetscGeom NODE objects referenced by the PetscGeom BODY object
- `numNodes` - Number of NODEs referenced by the PetscGeom BODY object. Also the size of **nodes array.

Level: intermediate

-seealso:

# External Links
$(_doc_external("Dm/DMPlexGetGeomModelBodyNodes"))
"""
function DMPlexGetGeomModelBodyNodes(petsclib::PetscLibType, dm::PetscDM, body::PetscGeom, nodes::PetscGeom) end

@for_petsc function DMPlexGetGeomModelBodyNodes(petsclib::$UnionPetscLib, dm::PetscDM, body::PetscGeom, nodes::PetscGeom )
	numNodes_ = Ref{$PetscInt}()

    @chk ccall(
               (:DMPlexGetGeomModelBodyNodes, $petsc_library),
               PetscErrorCode,
               (CDM, PetscGeom, PetscGeom, Ptr{$PetscInt}),
               dm, body, nodes, numNodes_,
              )

	numNodes = numNodes_[]

	return numNodes
end 

"""
	numNodes::PetscInt = DMPlexGetGeomModelEdgeNodes(petsclib::PetscLibType,dm::PetscDM, body::PetscGeom, edge::PetscGeom, nodes::PetscGeom) 
Returns an array of `PetscGeom` NODE objects attached to the referenced EDGE geometric entity as well as the number of NODES.

Collective

Input Parameters:
- `dm`   - The DMPlex object with an attached PetscContainer storing a CAD Geometry object
- `body` - PetscGeom body object containing the EDGE object of interest.
- `edge` - PetscGeom EDGE object with NODEs of interest.

Output Parameters:
- `nodes`    - Array of PetscGeom NODE objects referenced by the PetscGeom EDGE object
- `numNodes` - Number of Nodes referenced by the PetscGeom EDGE object. Also the size of **nodes array.

Level: intermediate

-seealso:

# External Links
$(_doc_external("Dm/DMPlexGetGeomModelEdgeNodes"))
"""
function DMPlexGetGeomModelEdgeNodes(petsclib::PetscLibType, dm::PetscDM, body::PetscGeom, edge::PetscGeom, nodes::PetscGeom) end

@for_petsc function DMPlexGetGeomModelEdgeNodes(petsclib::$UnionPetscLib, dm::PetscDM, body::PetscGeom, edge::PetscGeom, nodes::PetscGeom )
	numNodes_ = Ref{$PetscInt}()

    @chk ccall(
               (:DMPlexGetGeomModelEdgeNodes, $petsc_library),
               PetscErrorCode,
               (CDM, PetscGeom, PetscGeom, PetscGeom, Ptr{$PetscInt}),
               dm, body, edge, nodes, numNodes_,
              )

	numNodes = numNodes_[]

	return numNodes
end 

"""
	id::PetscInt = DMPlexGetGeomID(petsclib::PetscLibType,dm::PetscDM, body::PetscGeom, topoObj::PetscGeom) 
Returns ID number of the entity in the geometric (CAD) model

Collective

Input Parameters:
- `dm`      - The DMPlex object with an attached PetscContainer storing a CAD Geometry object
- `body`    - PetscGeom body object containing the lower level entity the ID number is being requested.
- `topoObj` - PetscGeom SHELL, FACE, LOOP, EDGE, or NODE object for which ID number is being requested.

Output Parameter:
- `id` - ID number of the entity

Level: intermediate

-seealso:

# External Links
$(_doc_external("Dm/DMPlexGetGeomID"))
"""
function DMPlexGetGeomID(petsclib::PetscLibType, dm::PetscDM, body::PetscGeom, topoObj::PetscGeom) end

@for_petsc function DMPlexGetGeomID(petsclib::$UnionPetscLib, dm::PetscDM, body::PetscGeom, topoObj::PetscGeom )
	id_ = Ref{$PetscInt}()

    @chk ccall(
               (:DMPlexGetGeomID, $petsc_library),
               PetscErrorCode,
               (CDM, PetscGeom, PetscGeom, Ptr{$PetscInt}),
               dm, body, topoObj, id_,
              )

	id = id_[]

	return id
end 

"""
	DMPlexGetGeomObject(petsclib::PetscLibType,dm::PetscDM, body::PetscGeom, geomType::PetscInt, geomID::PetscInt, geomObj::PetscGeom) 
Returns Geometry Object using the objects ID in the geometric (CAD) model

Collective

Input Parameters:
- `dm`       - The DMPlex object with an attached PetscContainer storing a CAD Geometry object
- `body`     - PetscGeom body object containing the lower level entity the referenced by the ID.
- `geomType` - Keyword SHELL, FACE, LOOP, EDGE, or NODE of the geometry type for which ID number is being requested.
- `geomID`   - ID number of the geometry entity being requested.

Output Parameter:
- `geomObj` - Geometry Object referenced by the ID number requested.

Level: intermediate

-seealso:

# External Links
$(_doc_external("Dm/DMPlexGetGeomObject"))
"""
function DMPlexGetGeomObject(petsclib::PetscLibType, dm::PetscDM, body::PetscGeom, geomType::PetscInt, geomID::PetscInt, geomObj::PetscGeom) end

@for_petsc function DMPlexGetGeomObject(petsclib::$UnionPetscLib, dm::PetscDM, body::PetscGeom, geomType::$PetscInt, geomID::$PetscInt, geomObj::PetscGeom )

    @chk ccall(
               (:DMPlexGetGeomObject, $petsc_library),
               PetscErrorCode,
               (CDM, PetscGeom, $PetscInt, $PetscInt, Ptr{PetscGeom}),
               dm, body, geomType, geomID, geomObj,
              )


	return nothing
end 

"""
	numCntrlPnts::PetscInt = DMPlexGetGeomFaceNumOfControlPoints(petsclib::PetscLibType,dm::PetscDM, face::PetscGeom) 
Returns the total number of Control Points (and associated Weights) defining a FACE of a Geometry

Not collective

Input Parameters:
- `dm`   - The DMPlex object with an attached PetscContainer storing a CAD Geometry object
- `face` - PetscGeom FACE object

Output Parameter:
- `numCntrlPnts` - Number of Control Points (and Weights) defining the FACE

Level: intermediate

-seealso:

# External Links
$(_doc_external("Dm/DMPlexGetGeomFaceNumOfControlPoints"))
"""
function DMPlexGetGeomFaceNumOfControlPoints(petsclib::PetscLibType, dm::PetscDM, face::PetscGeom) end

@for_petsc function DMPlexGetGeomFaceNumOfControlPoints(petsclib::$UnionPetscLib, dm::PetscDM, face::PetscGeom )
	numCntrlPnts_ = Ref{$PetscInt}()

    @chk ccall(
               (:DMPlexGetGeomFaceNumOfControlPoints, $petsc_library),
               PetscErrorCode,
               (CDM, PetscGeom, Ptr{$PetscInt}),
               dm, face, numCntrlPnts_,
              )

	numCntrlPnts = numCntrlPnts_[]

	return numCntrlPnts
end 

"""
	volume::PetscScalar,surfArea::PetscScalar,centerOfGravity::PetscScalar,COGsize::PetscInt,inertiaMatrixCOG::PetscScalar,IMCOGsize::PetscInt = DMPlexGetGeomBodyMassProperties(petsclib::PetscLibType,dm::PetscDM, body::PetscGeom) 
Returns the Volume, Surface Area, Center of Gravity, and Inertia about the Body's Center of Gravity

Not collective

Input Parameters:
- `dm`   - The DMPlex object with an attached PetscContainer storing a CAD Geometry object
- `body` - PetscGeom BODY object

Output Parameters:
- `volume`           - Volume of the CAD Body attached to the DM Plex
- `surfArea`         - Surface Area of the CAD Body attached to the DM Plex
- `centerOfGravity`  - Array with the Center of Gravity coordinates of the CAD Body attached to the DM Plex [x, y, z]
- `COGszie`          - Size of centerOfGravity[] Array
- `inertiaMatrixCOG` - Array containing the Inertia about the Body's Center of Gravity [Ixx, Ixy, Ixz, Iyx, Iyy, Iyz, Izx, Izy, Izz]
- `IMCOGsize`        - Size of inertiaMatrixCOG[] Array

Level: intermediate

-seealso:

# External Links
$(_doc_external("Dm/DMPlexGetGeomBodyMassProperties"))
"""
function DMPlexGetGeomBodyMassProperties(petsclib::PetscLibType, dm::PetscDM, body::PetscGeom) end

@for_petsc function DMPlexGetGeomBodyMassProperties(petsclib::$UnionPetscLib, dm::PetscDM, body::PetscGeom )
	volume_ = Ref{$PetscScalar}()
	surfArea_ = Ref{$PetscScalar}()
	centerOfGravity_ = Ref{$PetscScalar}()
	COGsize_ = Ref{$PetscInt}()
	inertiaMatrixCOG_ = Ref{$PetscScalar}()
	IMCOGsize_ = Ref{$PetscInt}()

    @chk ccall(
               (:DMPlexGetGeomBodyMassProperties, $petsc_library),
               PetscErrorCode,
               (CDM, PetscGeom, Ptr{$PetscScalar}, Ptr{$PetscScalar}, $PetscScalar, Ptr{$PetscInt}, $PetscScalar, Ptr{$PetscInt}),
               dm, body, volume_, surfArea_, centerOfGravity_, COGsize_, inertiaMatrixCOG_, IMCOGsize_,
              )

	volume = volume_[]
	surfArea = surfArea_[]
	centerOfGravity = centerOfGravity_[]
	COGsize = COGsize_[]
	inertiaMatrixCOG = inertiaMatrixCOG_[]
	IMCOGsize = IMCOGsize_[]

	return volume,surfArea,centerOfGravity,COGsize,inertiaMatrixCOG,IMCOGsize
end 

"""
	volume::PetscScalar,surfArea::PetscScalar,COGsize::PetscInt,IMCOGsize::PetscInt = DMPlexRestoreGeomBodyMassProperties(petsclib::PetscLibType,dm::PetscDM, body::PetscGeom, centerOfGravity::PetscScalar, inertiaMatrixCOG::PetscScalar) 

# External Links
$(_doc_external("Dm/DMPlexRestoreGeomBodyMassProperties"))
"""
function DMPlexRestoreGeomBodyMassProperties(petsclib::PetscLibType, dm::PetscDM, body::PetscGeom, centerOfGravity::PetscScalar, inertiaMatrixCOG::PetscScalar) end

@for_petsc function DMPlexRestoreGeomBodyMassProperties(petsclib::$UnionPetscLib, dm::PetscDM, body::PetscGeom, centerOfGravity::$PetscScalar, inertiaMatrixCOG::$PetscScalar )
	volume_ = Ref{$PetscScalar}()
	surfArea_ = Ref{$PetscScalar}()
	COGsize_ = Ref{$PetscInt}()
	IMCOGsize_ = Ref{$PetscInt}()

    @chk ccall(
               (:DMPlexRestoreGeomBodyMassProperties, $petsc_library),
               PetscErrorCode,
               (CDM, PetscGeom, Ptr{$PetscScalar}, Ptr{$PetscScalar}, $PetscScalar, Ptr{$PetscInt}, $PetscScalar, Ptr{$PetscInt}),
               dm, body, volume_, surfArea_, centerOfGravity, COGsize_, inertiaMatrixCOG, IMCOGsize_,
              )

	volume = volume_[]
	surfArea = surfArea_[]
	COGsize = COGsize_[]
	IMCOGsize = IMCOGsize_[]

	return volume,surfArea,COGsize,IMCOGsize
end 

"""
	DMPlexFreeGeomObject(petsclib::PetscLibType,dm::PetscDM, geomObj::PetscGeom) 
Frees PetscGeom Objects

Not collective

Input Parameters:
- `dm`      - The DMPlex object with an attached PetscContainer storing a CAD Geometry object
- `geomObj` - PetscGeom object

Level: intermediate

-seealso:

# External Links
$(_doc_external("Dm/DMPlexFreeGeomObject"))
"""
function DMPlexFreeGeomObject(petsclib::PetscLibType, dm::PetscDM, geomObj::PetscGeom) end

@for_petsc function DMPlexFreeGeomObject(petsclib::$UnionPetscLib, dm::PetscDM, geomObj::PetscGeom )

    @chk ccall(
               (:DMPlexFreeGeomObject, $petsc_library),
               PetscErrorCode,
               (CDM, Ptr{PetscGeom}),
               dm, geomObj,
              )


	return nothing
end 

"""
	cpCoordDataLength::PetscInt,cpCoordData::PetscScalar,maxNumEquiv::PetscInt,wDataLength::PetscInt,wData::PetscScalar = DMPlexGetGeomCntrlPntAndWeightData(petsclib::PetscLibType,dm::PetscDM, cpHashTable::PetscHMapI, cpEquiv::PetscMat, wHashTable::PetscHMapI) 
Gets Control Point and Associated Weight Data for the Geometry attached to the DMPlex

Not collective

Input Parameter:
- `dm` - The DMPlex object with an attached PetscContainer storing a CAD Geometry object

Output Parameters:
- `cpHashTable`       - Hash Table containing the relationship between FACE ID and Control Point IDs.
- `cpCoordDataLength` - Length of cpCoordData Array.
- `cpCoordData`       - Array holding the Geometry Control Point Coordinate Data.
- `maxNumEquiv`       - Maximum Number of Equivalent Control Points (Control Points with the same coordinates but different IDs).
- `cpEquiv`           - Matrix with a size(Number of Control Points, Number or Control Points) which stores a value of 1.0 in locations where Control Points with different IDS (row or column) have the same coordinates
- `wHashTable`        - Hash Table containing the relationship between FACE ID and Control Point Weight.
- `wDataLength`       - Length of wData Array.
- `wData`             - Array holding the Weight for an associated Geometry Control Point.

-seealso:

# External Links
$(_doc_external("Dm/DMPlexGetGeomCntrlPntAndWeightData"))
"""
function DMPlexGetGeomCntrlPntAndWeightData(petsclib::PetscLibType, dm::PetscDM, cpHashTable::PetscHMapI, cpEquiv::PetscMat, wHashTable::PetscHMapI) end

@for_petsc function DMPlexGetGeomCntrlPntAndWeightData(petsclib::$UnionPetscLib, dm::PetscDM, cpHashTable::PetscHMapI, cpEquiv::PetscMat, wHashTable::PetscHMapI )
	cpCoordDataLength_ = Ref{$PetscInt}()
	cpCoordData_ = Ref{$PetscScalar}()
	maxNumEquiv_ = Ref{$PetscInt}()
	cpEquiv_ = Ref(cpEquiv.ptr)
	wDataLength_ = Ref{$PetscInt}()
	wData_ = Ref{$PetscScalar}()

    @chk ccall(
               (:DMPlexGetGeomCntrlPntAndWeightData, $petsc_library),
               PetscErrorCode,
               (CDM, Ptr{PetscHMapI}, Ptr{$PetscInt}, $PetscScalar, Ptr{$PetscInt}, Ptr{CMat}, Ptr{PetscHMapI}, Ptr{$PetscInt}, $PetscScalar),
               dm, cpHashTable, cpCoordDataLength_, cpCoordData_, maxNumEquiv_, cpEquiv_, wHashTable, wDataLength_, wData_,
              )

	cpCoordDataLength = cpCoordDataLength_[]
	cpCoordData = cpCoordData_[]
	maxNumEquiv = maxNumEquiv_[]
	cpEquiv.ptr = C_NULL
	wDataLength = wDataLength_[]
	wData = wData_[]

	return cpCoordDataLength,cpCoordData,maxNumEquiv,wDataLength,wData
end 

"""
	cpCoordDataLength::PetscInt,maxNumEquiv::PetscInt,wDataLength::PetscInt = DMPlexRestoreGeomCntrlPntAndWeightData(petsclib::PetscLibType,dm::PetscDM, cpHashTable::PetscHMapI, cpCoordData::PetscScalar, cpEquiv::PetscMat, wHashTable::PetscHMapI, wData::PetscScalar) 

# External Links
$(_doc_external("Dm/DMPlexRestoreGeomCntrlPntAndWeightData"))
"""
function DMPlexRestoreGeomCntrlPntAndWeightData(petsclib::PetscLibType, dm::PetscDM, cpHashTable::PetscHMapI, cpCoordData::PetscScalar, cpEquiv::PetscMat, wHashTable::PetscHMapI, wData::PetscScalar) end

@for_petsc function DMPlexRestoreGeomCntrlPntAndWeightData(petsclib::$UnionPetscLib, dm::PetscDM, cpHashTable::PetscHMapI, cpCoordData::$PetscScalar, cpEquiv::PetscMat, wHashTable::PetscHMapI, wData::$PetscScalar )
	cpCoordDataLength_ = Ref{$PetscInt}()
	maxNumEquiv_ = Ref{$PetscInt}()
	cpEquiv_ = Ref(cpEquiv.ptr)
	wDataLength_ = Ref{$PetscInt}()

    @chk ccall(
               (:DMPlexRestoreGeomCntrlPntAndWeightData, $petsc_library),
               PetscErrorCode,
               (CDM, Ptr{PetscHMapI}, Ptr{$PetscInt}, $PetscScalar, Ptr{$PetscInt}, Ptr{CMat}, Ptr{PetscHMapI}, Ptr{$PetscInt}, $PetscScalar),
               dm, cpHashTable, cpCoordDataLength_, cpCoordData, maxNumEquiv_, cpEquiv_, wHashTable, wDataLength_, wData,
              )

	cpCoordDataLength = cpCoordDataLength_[]
	maxNumEquiv = maxNumEquiv_[]
	cpEquiv.ptr = C_NULL
	wDataLength = wDataLength_[]

	return cpCoordDataLength,maxNumEquiv,wDataLength
end 

"""
	cpArraySize::PetscInt,gradSACP::PetscScalar,gradVolCP::PetscScalar,wArraySize::PetscInt,gradSAW::PetscScalar,gradVolW::PetscScalar = DMPlexGetGeomGradData(petsclib::PetscLibType,dm::PetscDM, cpSurfGradHashTable::PetscHMapI, cpSurfGrad::PetscMat) 
Gets Point, Surface and Volume Gradients with respect to changes in Control Points and their associated Weights for the Geometry attached to the DMPlex .

Not collective

Input Parameter:
- `dm` - The DMPlex object with an attached PetscContainer storing a CAD Geometry object

Output Parameters:
- `cpSurfGradHashTable` - Hash Table Relating the Control Point ID to the the Row in the cpSurfGrad Matrix
- `cpSurfGrad`          - Matrix containing the Surface Gradient with respect to the Control Point Data. Data is ranged where the Row corresponds to Control Point ID and the Columns are associated with the Geometric FACE.
- `cpArraySize`         - The size of arrays gradSACP and gradVolCP and is equal to 3 * total number of Control Points in the Geometry
- `gradSACP`            - Array containing the Surface Area Gradient with respect to Control Point Data. Data is arranged by Control Point ID * 3 where 3 is for the coordinate dimension.
- `gradVolCP`           - Array containing the Volume Gradient with respect to Control Point Data. Data is arranged by Control Point ID * 3 where 3 is for the coordinate dimension.
- `wArraySize`          - The size of arrayws gradSAW and gradVolW and is equal to the total number of Control Points in the Geometry.
- `gradSAW`             - Array containing the Surface Area Gradient with respect to Control Point Weight. Data is arranged by Control Point ID.
- `gradVolW`            - Array containing the Volume Gradient with respect to Control Point Weight. Data is arranged by Control Point ID.

-seealso: DMPlexGeomDataAndGrads

# External Links
$(_doc_external("Dm/DMPlexGetGeomGradData"))
"""
function DMPlexGetGeomGradData(petsclib::PetscLibType, dm::PetscDM, cpSurfGradHashTable::PetscHMapI, cpSurfGrad::PetscMat) end

@for_petsc function DMPlexGetGeomGradData(petsclib::$UnionPetscLib, dm::PetscDM, cpSurfGradHashTable::PetscHMapI, cpSurfGrad::PetscMat )
	cpSurfGrad_ = Ref(cpSurfGrad.ptr)
	cpArraySize_ = Ref{$PetscInt}()
	gradSACP_ = Ref{$PetscScalar}()
	gradVolCP_ = Ref{$PetscScalar}()
	wArraySize_ = Ref{$PetscInt}()
	gradSAW_ = Ref{$PetscScalar}()
	gradVolW_ = Ref{$PetscScalar}()

    @chk ccall(
               (:DMPlexGetGeomGradData, $petsc_library),
               PetscErrorCode,
               (CDM, Ptr{PetscHMapI}, Ptr{CMat}, Ptr{$PetscInt}, $PetscScalar, $PetscScalar, Ptr{$PetscInt}, $PetscScalar, $PetscScalar),
               dm, cpSurfGradHashTable, cpSurfGrad_, cpArraySize_, gradSACP_, gradVolCP_, wArraySize_, gradSAW_, gradVolW_,
              )

	cpSurfGrad.ptr = C_NULL
	cpArraySize = cpArraySize_[]
	gradSACP = gradSACP_[]
	gradVolCP = gradVolCP_[]
	wArraySize = wArraySize_[]
	gradSAW = gradSAW_[]
	gradVolW = gradVolW_[]

	return cpArraySize,gradSACP,gradVolCP,wArraySize,gradSAW,gradVolW
end 

"""
	cpArraySize::PetscInt,wArraySize::PetscInt = DMPlexRestoreGeomGradData(petsclib::PetscLibType,dm::PetscDM, cpSurfGradHashTable::PetscHMapI, cpSurfGrad::PetscMat, gradSACP::PetscScalar, gradVolCP::PetscScalar, gradSAW::PetscScalar, gradVolW::PetscScalar) 

# External Links
$(_doc_external("Dm/DMPlexRestoreGeomGradData"))
"""
function DMPlexRestoreGeomGradData(petsclib::PetscLibType, dm::PetscDM, cpSurfGradHashTable::PetscHMapI, cpSurfGrad::PetscMat, gradSACP::PetscScalar, gradVolCP::PetscScalar, gradSAW::PetscScalar, gradVolW::PetscScalar) end

@for_petsc function DMPlexRestoreGeomGradData(petsclib::$UnionPetscLib, dm::PetscDM, cpSurfGradHashTable::PetscHMapI, cpSurfGrad::PetscMat, gradSACP::$PetscScalar, gradVolCP::$PetscScalar, gradSAW::$PetscScalar, gradVolW::$PetscScalar )
	cpSurfGrad_ = Ref(cpSurfGrad.ptr)
	cpArraySize_ = Ref{$PetscInt}()
	wArraySize_ = Ref{$PetscInt}()

    @chk ccall(
               (:DMPlexRestoreGeomGradData, $petsc_library),
               PetscErrorCode,
               (CDM, Ptr{PetscHMapI}, Ptr{CMat}, Ptr{$PetscInt}, $PetscScalar, $PetscScalar, Ptr{$PetscInt}, $PetscScalar, $PetscScalar),
               dm, cpSurfGradHashTable, cpSurfGrad_, cpArraySize_, gradSACP, gradVolCP, wArraySize_, gradSAW, gradVolW,
              )

	cpSurfGrad.ptr = C_NULL
	cpArraySize = cpArraySize_[]
	wArraySize = wArraySize_[]

	return cpArraySize,wArraySize
end 

"""
	numCntrlPnts::PetscInt,cntrlPntFaceMap::PetscInt,cntrlPntWeightFaceMap::PetscInt,cntrlPntEdgeMap::PetscInt,cntrlPntWeightEdgeMap::PetscInt,cntrlPntVertexMap::PetscInt,cntrlPntWeightVertexMap::PetscInt = DMPlexGetGeomCntrlPntMaps(petsclib::PetscLibType,dm::PetscDM) 
Gets arrays which maps Control Point IDs to their associated Geometry FACE, EDGE, and VERTEX.

Not collective

Input Parameter:
- `dm` - The DMPlex object with an attached PetscContainer storing a CAD Geometry object

Output Parameters:
- `numCntrlPnts`            - Number of Control Points defining the Geometry attached to the DMPlex
- `cntrlPntFaceMap`         - Array containing the FACE ID for the Control Point. Array index corresponds to Control Point ID.
- `cntrlPntWeightFaceMap`   - Array containing the FACE ID for the Control Point Weight. Array index corresponds to Control Point ID.
- `cntrlPntEdgeMap`         - Array containing the EDGE ID for the Control Point. Array index corresponds to Control Point ID.
- `cntrlPntWeightEdgeMap`   - Array containing the EDGE ID for the Control Point Weight. Array index corresponds to Control Point ID.
- `cntrlPntVertexMap`       - Array containing the VERTEX ID for the Control Point. Array index corresponds to Control Point ID.
- `cntrlPntWeightVertexMap` - Array containing the VERTEX ID for the Control Point Weight. Array index corresponds to Control Point ID.

-seealso: DMPlexGeomDataAndGrads

# External Links
$(_doc_external("Dm/DMPlexGetGeomCntrlPntMaps"))
"""
function DMPlexGetGeomCntrlPntMaps(petsclib::PetscLibType, dm::PetscDM) end

@for_petsc function DMPlexGetGeomCntrlPntMaps(petsclib::$UnionPetscLib, dm::PetscDM )
	numCntrlPnts_ = Ref{$PetscInt}()
	cntrlPntFaceMap_ = Ref{$PetscInt}()
	cntrlPntWeightFaceMap_ = Ref{$PetscInt}()
	cntrlPntEdgeMap_ = Ref{$PetscInt}()
	cntrlPntWeightEdgeMap_ = Ref{$PetscInt}()
	cntrlPntVertexMap_ = Ref{$PetscInt}()
	cntrlPntWeightVertexMap_ = Ref{$PetscInt}()

    @chk ccall(
               (:DMPlexGetGeomCntrlPntMaps, $petsc_library),
               PetscErrorCode,
               (CDM, Ptr{$PetscInt}, $PetscInt, $PetscInt, $PetscInt, $PetscInt, $PetscInt, $PetscInt),
               dm, numCntrlPnts_, cntrlPntFaceMap_, cntrlPntWeightFaceMap_, cntrlPntEdgeMap_, cntrlPntWeightEdgeMap_, cntrlPntVertexMap_, cntrlPntWeightVertexMap_,
              )

	numCntrlPnts = numCntrlPnts_[]
	cntrlPntFaceMap = cntrlPntFaceMap_[]
	cntrlPntWeightFaceMap = cntrlPntWeightFaceMap_[]
	cntrlPntEdgeMap = cntrlPntEdgeMap_[]
	cntrlPntWeightEdgeMap = cntrlPntWeightEdgeMap_[]
	cntrlPntVertexMap = cntrlPntVertexMap_[]
	cntrlPntWeightVertexMap = cntrlPntWeightVertexMap_[]

	return numCntrlPnts,cntrlPntFaceMap,cntrlPntWeightFaceMap,cntrlPntEdgeMap,cntrlPntWeightEdgeMap,cntrlPntVertexMap,cntrlPntWeightVertexMap
end 

"""
	DMPlexInvertCell(petsclib::PetscLibType,cellType::DMPolytopeType, cone::Vector{PetscInt}) 
Flips cell orientations since `DMPLEX` stores some of them internally with outward normals.

Input Parameters:
- `cellType` - The cell type
- `cone`     - The incoming cone

Output Parameter:
- `cone` - The inverted cone (in-place)

Level: developer

-seealso: [](ch_unstructured), `DM`, `DMPLEX`, `DMPolytopeType`, `DMPlexGenerate()`

# External Links
$(_doc_external("Dm/DMPlexInvertCell"))
"""
function DMPlexInvertCell(petsclib::PetscLibType, cellType::DMPolytopeType, cone::Vector{PetscInt}) end

@for_petsc function DMPlexInvertCell(petsclib::$UnionPetscLib, cellType::DMPolytopeType, cone::Vector{$PetscInt} )

    @chk ccall(
               (:DMPlexInvertCell, $petsc_library),
               PetscErrorCode,
               (DMPolytopeType, Ptr{$PetscInt}),
               cellType, cone,
              )


	return nothing
end 

"""
	DMPlexReorderCell(petsclib::PetscLibType,dm::PetscDM, cell::PetscInt, cone::Vector{PetscInt}) 
Flips cell orientations since `DMPLEX` stores some of them internally with outward normals.

Input Parameters:
- `dm`   - The `DMPLEX` object
- `cell` - The cell
- `cone` - The incoming cone

Output Parameter:
- `cone` - The reordered cone (in-place)

Level: developer

-seealso: [](ch_unstructured), `DM`, `DMPLEX`, `DMPolytopeType`, `DMPlexGenerate()`

# External Links
$(_doc_external("Dm/DMPlexReorderCell"))
"""
function DMPlexReorderCell(petsclib::PetscLibType, dm::PetscDM, cell::PetscInt, cone::Vector{PetscInt}) end

@for_petsc function DMPlexReorderCell(petsclib::$UnionPetscLib, dm::PetscDM, cell::$PetscInt, cone::Vector{$PetscInt} )

    @chk ccall(
               (:DMPlexReorderCell, $petsc_library),
               PetscErrorCode,
               (CDM, $PetscInt, Ptr{$PetscInt}),
               dm, cell, cone,
              )


	return nothing
end 

"""
	DMPlexTriangleSetOptions(petsclib::PetscLibType,dm::PetscDM, opts::String) 
Set the options used for the Triangle mesh generator

Not Collective

Input Parameters:
- `dm`   - The `DMPLEX` object
- `opts` - The command line options

Level: developer

-seealso: [](ch_unstructured), `DM`, `DMPLEX`, `DMPlexTetgenSetOptions()`, `DMPlexGenerate()`

# External Links
$(_doc_external("Dm/DMPlexTriangleSetOptions"))
"""
function DMPlexTriangleSetOptions(petsclib::PetscLibType, dm::PetscDM, opts::String) end

@for_petsc function DMPlexTriangleSetOptions(petsclib::$UnionPetscLib, dm::PetscDM, opts::String )

    @chk ccall(
               (:DMPlexTriangleSetOptions, $petsc_library),
               PetscErrorCode,
               (CDM, Ptr{Cchar}),
               dm, opts,
              )


	return nothing
end 

"""
	DMPlexTetgenSetOptions(petsclib::PetscLibType,dm::PetscDM, opts::String) 
Set the options used for the Tetgen mesh generator

Not Collective

Input Parameters:
- `dm`   - The `DMPLEX` object
- `opts` - The command line options

Level: developer

-seealso: [](ch_unstructured), `DM`, `DMPLEX`, `DMPlexTriangleSetOptions()`, `DMPlexGenerate()`

# External Links
$(_doc_external("Dm/DMPlexTetgenSetOptions"))
"""
function DMPlexTetgenSetOptions(petsclib::PetscLibType, dm::PetscDM, opts::String) end

@for_petsc function DMPlexTetgenSetOptions(petsclib::$UnionPetscLib, dm::PetscDM, opts::String )

    @chk ccall(
               (:DMPlexTetgenSetOptions, $petsc_library),
               PetscErrorCode,
               (CDM, Ptr{Cchar}),
               dm, opts,
              )


	return nothing
end 

"""
	DMPlexGenerate(petsclib::PetscLibType,boundary::PetscDM, name::String, interpolate::PetscBool, mesh::PetscDM) 
Generates a mesh.

Not Collective

Input Parameters:
- `boundary`    - The `DMPLEX` boundary object
- `name`        - The mesh generation package name
- `interpolate` - Flag to create intermediate mesh elements

Output Parameter:
- `mesh` - The `DMPLEX` object

Options Database Keys:
- `-dm_plex_generate <name>` - package to generate mesh, for example, triangle, ctetgen or tetgen
- `-dm_generator <name>`     - package to generate mesh, for example, triangle, ctetgen or tetgen

Level: intermediate

-seealso: [](ch_unstructured), `DM`, `DMPLEX`, `DMPlexCreate()`, `DMRefine()`

# External Links
$(_doc_external("Dm/DMPlexGenerate"))
"""
function DMPlexGenerate(petsclib::PetscLibType, boundary::PetscDM, name::String, interpolate::PetscBool, mesh::PetscDM) end

@for_petsc function DMPlexGenerate(petsclib::$UnionPetscLib, boundary::PetscDM, name::String, interpolate::PetscBool, mesh::PetscDM )
	mesh_ = Ref(mesh.ptr)

    @chk ccall(
               (:DMPlexGenerate, $petsc_library),
               PetscErrorCode,
               (CDM, Ptr{Cchar}, PetscBool, Ptr{CDM}),
               boundary, name, interpolate, mesh_,
              )

	mesh.ptr = C_NULL

	return nothing
end 

"""
	DMPlexReconstructGradientsFVM(petsclib::PetscLibType,dm::PetscDM, locX::PetscVec, grad::PetscVec) 
reconstruct the gradient of a vector using a finite volume method.

Input Parameters:
- `dm`   - the mesh
- `locX` - the local representation of the vector

Output Parameter:
- `grad` - the global representation of the gradient

Level: developer

-seealso: [](ch_unstructured), `DM`, `Vec`, `DMPlexGetGradientDM()`

# External Links
$(_doc_external("Dm/DMPlexReconstructGradientsFVM"))
"""
function DMPlexReconstructGradientsFVM(petsclib::PetscLibType, dm::PetscDM, locX::PetscVec, grad::PetscVec) end

@for_petsc function DMPlexReconstructGradientsFVM(petsclib::$UnionPetscLib, dm::PetscDM, locX::PetscVec, grad::PetscVec )

    @chk ccall(
               (:DMPlexReconstructGradientsFVM, $petsc_library),
               PetscErrorCode,
               (CDM, CVec, CVec),
               dm, locX, grad,
              )


	return nothing
end 

"""
	DMPlexCreateCoordinateSpace(petsclib::PetscLibType,dm::PetscDM, degree::PetscInt, locized::PetscBool, project::PetscBool) 
Creates a finite element space for the coordinates

Collective

Input Parameters:
- `dm`        - The `DMPLEX`
- `degree`    - The degree of the finite element or `PETSC_DECIDE`
- `localized` - Flag to create a localized (DG) coordinate space
- `project`   - Flag to project current coordinates into the space

Level: advanced

-seealso: [](ch_unstructured), `DM`, `DMPLEX`, `PetscPointFn`, `PetscFECreateLagrange()`, `DMGetCoordinateDM()`, `DMPlexSetCoordinateMap()`

# External Links
$(_doc_external("Dm/DMPlexCreateCoordinateSpace"))
"""
function DMPlexCreateCoordinateSpace(petsclib::PetscLibType, dm::PetscDM, degree::PetscInt, locized::PetscBool, project::PetscBool) end

@for_petsc function DMPlexCreateCoordinateSpace(petsclib::$UnionPetscLib, dm::PetscDM, degree::$PetscInt, locized::PetscBool, project::PetscBool )

    @chk ccall(
               (:DMPlexCreateCoordinateSpace, $petsc_library),
               PetscErrorCode,
               (CDM, $PetscInt, PetscBool, PetscBool),
               dm, degree, locized, project,
              )


	return nothing
end 

"""
	newdm::PetscDM = DMPlexCreateDoublet(petsclib::PetscLibType,comm::MPI_Comm, dim::PetscInt, simplex::PetscBool, interpolate::PetscBool, refinementLimit::PetscReal) 
Creates a mesh of two cells of the specified type, optionally with later refinement.

Collective

Input Parameters:
- `comm`            - The communicator for the `DM` object
- `dim`             - The spatial dimension
- `simplex`         - Flag for simplicial cells, otherwise they are tensor product cells
- `interpolate`     - Flag to create intermediate mesh pieces (edges, faces)
- `refinementLimit` - A nonzero number indicates the largest admissible volume for a refined cell

Output Parameter:
- `newdm` - The `DM` object

Level: beginner

-seealso: [](ch_unstructured), `DM`, `DMPLEX`, `DMSetType()`, `DMCreate()`

# External Links
$(_doc_external("Dm/DMPlexCreateDoublet"))
"""
function DMPlexCreateDoublet(petsclib::PetscLibType, comm::MPI_Comm, dim::PetscInt, simplex::PetscBool, interpolate::PetscBool, refinementLimit::PetscReal) end

@for_petsc function DMPlexCreateDoublet(petsclib::$UnionPetscLib, comm::MPI_Comm, dim::$PetscInt, simplex::PetscBool, interpolate::PetscBool, refinementLimit::$PetscReal )
	newdm_ = Ref{CDM}()

    @chk ccall(
               (:DMPlexCreateDoublet, $petsc_library),
               PetscErrorCode,
               (MPI_Comm, $PetscInt, PetscBool, PetscBool, $PetscReal, Ptr{CDM}),
               comm, dim, simplex, interpolate, refinementLimit, newdm_,
              )

	newdm = PetscDM(newdm_[], petsclib)

	return newdm
end 

"""
	dm::PetscDM = DMPlexCreateBoxSurfaceMesh(petsclib::PetscLibType,comm::MPI_Comm, dim::PetscInt, faces::Vector{PetscInt}, lower::Vector{PetscReal}, upper::Vector{PetscReal}, interpolate::PetscBool) 
Creates a mesh on the surface of the tensor product of unit intervals (box) using tensor cells (hexahedra).

Collective

Input Parameters:
- `comm`        - The communicator for the `DM` object
- `dim`         - The spatial dimension of the box, so the resulting mesh is has dimension `dim`-1
- `faces`       - Number of faces per dimension, or `NULL` for (1,) in 1D and (2, 2) in 2D and (1, 1, 1) in 3D
- `lower`       - The lower left corner, or `NULL` for (0, 0, 0)
- `upper`       - The upper right corner, or `NULL` for (1, 1, 1)
- `interpolate` - Flag to create intermediate mesh pieces (edges, faces)

Output Parameter:
- `dm` - The `DM` object

Level: beginner

-seealso: [](ch_unstructured), `DM`, `DMPLEX`, `DMSetFromOptions()`, `DMPlexCreateBoxMesh()`, `DMPlexCreateFromFile()`, `DMSetType()`, `DMCreate()`

# External Links
$(_doc_external("Dm/DMPlexCreateBoxSurfaceMesh"))
"""
function DMPlexCreateBoxSurfaceMesh(petsclib::PetscLibType, comm::MPI_Comm, dim::PetscInt, faces::Vector{PetscInt}, lower::Vector{PetscReal}, upper::Vector{PetscReal}, interpolate::PetscBool) end

@for_petsc function DMPlexCreateBoxSurfaceMesh(petsclib::$UnionPetscLib, comm::MPI_Comm, dim::$PetscInt, faces::Vector{$PetscInt}, lower::Vector{$PetscReal}, upper::Vector{$PetscReal}, interpolate::PetscBool )
	dm_ = Ref{CDM}()

    @chk ccall(
               (:DMPlexCreateBoxSurfaceMesh, $petsc_library),
               PetscErrorCode,
               (MPI_Comm, $PetscInt, Ptr{$PetscInt}, Ptr{$PetscReal}, Ptr{$PetscReal}, PetscBool, Ptr{CDM}),
               comm, dim, faces, lower, upper, interpolate, dm_,
              )

	dm = PetscDM(dm_[], petsclib)

	return dm
end 

"""
	dm::PetscDM = DMPlexCreateBoxMesh(petsclib::PetscLibType,comm::MPI_Comm, dim::PetscInt, simplex::PetscBool, faces::Vector{PetscInt}, lower::Vector{PetscReal}, upper::Vector{PetscReal}, periodicity::Vector{DMBoundaryType}, interpolate::PetscBool, locizationHeight::PetscInt, sparseLocalize::PetscBool) 
Creates a mesh on the tensor product of unit intervals (box) using simplices or tensor cells (hexahedra).

Collective

Input Parameters:
- `comm`               - The communicator for the `DM` object
- `dim`                - The spatial dimension
- `simplex`            - `PETSC_TRUE` for simplices, `PETSC_FALSE` for tensor cells
- `faces`              - Number of faces per dimension, or `NULL` for (1,) in 1D and (2, 2) in 2D and (1, 1, 1) in 3D
- `lower`              - The lower left corner, or `NULL` for (0, 0, 0)
- `upper`              - The upper right corner, or `NULL` for (1, 1, 1)
- `periodicity`        - The boundary type for the X,Y,Z direction, or `NULL` for `DM_BOUNDARY_NONE`
- `interpolate`        - Flag to create intermediate mesh pieces (edges, faces)
- `localizationHeight` - Flag to localize edges and faces in addition to cells; only significant for periodic meshes
- `sparseLocalize`     - Flag to localize coordinates only for cells near the periodic boundary; only significant for periodic meshes

Output Parameter:
- `dm` - The `DM` object

Level: beginner

-seealso: [](ch_unstructured), `DM`, `DMPLEX`, `DMSetFromOptions()`, `DMPlexCreateFromFile()`, `DMPlexCreateHexCylinderMesh()`, `DMSetType()`, `DMCreate()`

# External Links
$(_doc_external("Dm/DMPlexCreateBoxMesh"))
"""
function DMPlexCreateBoxMesh(petsclib::PetscLibType, comm::MPI_Comm, dim::PetscInt, simplex::PetscBool, faces::Vector{PetscInt}, lower::Vector{PetscReal}, upper::Vector{PetscReal}, periodicity::Vector{DMBoundaryType}, interpolate::PetscBool, locizationHeight::PetscInt, sparseLocalize::PetscBool) end

@for_petsc function DMPlexCreateBoxMesh(petsclib::$UnionPetscLib, comm::MPI_Comm, dim::$PetscInt, simplex::PetscBool, faces::Vector{$PetscInt}, lower::Vector{$PetscReal}, upper::Vector{$PetscReal}, periodicity::Vector{DMBoundaryType}, interpolate::PetscBool, locizationHeight::$PetscInt, sparseLocalize::PetscBool )
	dm_ = Ref{CDM}()

    @chk ccall(
               (:DMPlexCreateBoxMesh, $petsc_library),
               PetscErrorCode,
               (MPI_Comm, $PetscInt, PetscBool, Ptr{$PetscInt}, Ptr{$PetscReal}, Ptr{$PetscReal}, Ptr{DMBoundaryType}, PetscBool, $PetscInt, PetscBool, Ptr{CDM}),
               comm, dim, simplex, faces, lower, upper, periodicity, interpolate, locizationHeight, sparseLocalize, dm_,
              )

	dm = PetscDM(dm_[], petsclib)

	return dm
end 

"""
	dm::PetscDM = DMPlexCreateWedgeBoxMesh(petsclib::PetscLibType,comm::MPI_Comm, faces::Vector{PetscInt}, lower::Vector{PetscReal}, upper::Vector{PetscReal}, periodicity::Vector{DMBoundaryType}, orderHeight::PetscBool, interpolate::PetscBool) 
Creates a 3

Collective

Input Parameters:
- `comm`        - The communicator for the `DM` object
- `faces`       - Number of faces per dimension, or `NULL` for (1, 1, 1)
- `lower`       - The lower left corner, or `NULL` for (0, 0, 0)
- `upper`       - The upper right corner, or `NULL` for (1, 1, 1)
- `periodicity` - The boundary type for the X,Y,Z direction, or `NULL` for `DM_BOUNDARY_NONE`
- `orderHeight` - If `PETSC_TRUE`, orders the extruded cells in the height first. Otherwise, orders the cell on the layers first
- `interpolate` - Flag to create intermediate mesh pieces (edges, faces)

Output Parameter:
- `dm` - The `DM` object

Level: beginner

-seealso: [](ch_unstructured), `DM`, `DMPLEX`, `DMPlexCreateHexCylinderMesh()`, `DMPlexCreateWedgeCylinderMesh()`, `DMExtrude()`, `DMPlexCreateBoxMesh()`, `DMSetType()`, `DMCreate()`

# External Links
$(_doc_external("Dm/DMPlexCreateWedgeBoxMesh"))
"""
function DMPlexCreateWedgeBoxMesh(petsclib::PetscLibType, comm::MPI_Comm, faces::Vector{PetscInt}, lower::Vector{PetscReal}, upper::Vector{PetscReal}, periodicity::Vector{DMBoundaryType}, orderHeight::PetscBool, interpolate::PetscBool) end

@for_petsc function DMPlexCreateWedgeBoxMesh(petsclib::$UnionPetscLib, comm::MPI_Comm, faces::Vector{$PetscInt}, lower::Vector{$PetscReal}, upper::Vector{$PetscReal}, periodicity::Vector{DMBoundaryType}, orderHeight::PetscBool, interpolate::PetscBool )
	dm_ = Ref{CDM}()

    @chk ccall(
               (:DMPlexCreateWedgeBoxMesh, $petsc_library),
               PetscErrorCode,
               (MPI_Comm, Ptr{$PetscInt}, Ptr{$PetscReal}, Ptr{$PetscReal}, Ptr{DMBoundaryType}, PetscBool, PetscBool, Ptr{CDM}),
               comm, faces, lower, upper, periodicity, orderHeight, interpolate, dm_,
              )

	dm = PetscDM(dm_[], petsclib)

	return dm
end 

"""
	dm::PetscDM = DMPlexCreateHypercubicMesh(petsclib::PetscLibType,comm::MPI_Comm, dim::PetscInt, edges::Vector{PetscInt}, lower::Vector{PetscReal}, upper::Vector{PetscReal}, overlap::PetscInt) 
Creates a periodic mesh on the tensor product of unit intervals using only vertices and edges.

Collective

Input Parameters:
- `comm`    - The communicator for the `DM` object
- `dim`     - The spatial dimension
- `edges`   - Number of edges per dimension, or `NULL` for (1,) in 1D and (2, 2) in 2D and (1, 1, 1) in 3D
- `lower`   - The lower left corner, or `NULL` for (0, 0, 0)
- `upper`   - The upper right corner, or `NULL` for (1, 1, 1)
- `overlap` - The number of vertices in each direction to include in the overlap (default is 1)

Output Parameter:
- `dm` - The DM object

Level: beginner

-seealso: `DMSetFromOptions()`, `DMPlexCreateFromFile()`, `DMPlexCreateHexCylinderMesh()`, `DMSetType()`, `DMCreate()`

# External Links
$(_doc_external("Dm/DMPlexCreateHypercubicMesh"))
"""
function DMPlexCreateHypercubicMesh(petsclib::PetscLibType, comm::MPI_Comm, dim::PetscInt, edges::Vector{PetscInt}, lower::Vector{PetscReal}, upper::Vector{PetscReal}, overlap::PetscInt) end

@for_petsc function DMPlexCreateHypercubicMesh(petsclib::$UnionPetscLib, comm::MPI_Comm, dim::$PetscInt, edges::Vector{$PetscInt}, lower::Vector{$PetscReal}, upper::Vector{$PetscReal}, overlap::$PetscInt )
	dm_ = Ref{CDM}()

    @chk ccall(
               (:DMPlexCreateHypercubicMesh, $petsc_library),
               PetscErrorCode,
               (MPI_Comm, $PetscInt, Ptr{$PetscInt}, Ptr{$PetscReal}, Ptr{$PetscReal}, $PetscInt, Ptr{CDM}),
               comm, dim, edges, lower, upper, overlap, dm_,
              )

	dm = PetscDM(dm_[], petsclib)

	return dm
end 

"""
	DMPlexSetOptionsPrefix(petsclib::PetscLibType,dm::PetscDM, prefix::String) 
Sets the prefix used for searching for all `DM` options in the database.

Logically Collective

Input Parameters:
- `dm`     - the `DM` context
- `prefix` - the prefix to prepend to all option names

Level: advanced

-seealso: [](ch_unstructured), `DM`, `DMPLEX`, `SNESSetFromOptions()`

# External Links
$(_doc_external("Dm/DMPlexSetOptionsPrefix"))
"""
function DMPlexSetOptionsPrefix(petsclib::PetscLibType, dm::PetscDM, prefix::String) end

@for_petsc function DMPlexSetOptionsPrefix(petsclib::$UnionPetscLib, dm::PetscDM, prefix::String )

    @chk ccall(
               (:DMPlexSetOptionsPrefix, $petsc_library),
               PetscErrorCode,
               (CDM, Ptr{Cchar}),
               dm, prefix,
              )


	return nothing
end 

"""
	dm::PetscDM = DMPlexCreateHexCylinderMesh(petsclib::PetscLibType,comm::MPI_Comm, periodicZ::DMBoundaryType, Nr::PetscInt) 
Creates a mesh on the tensor product of the unit interval with the circle (cylinder) using hexahedra.

Collective

Input Parameters:
- `comm`      - The communicator for the `DM` object
- `periodicZ` - The boundary type for the Z direction
- `Nr`        - The number of refinements to carry out

Output Parameter:
- `dm` - The `DM` object

Level: beginner

-seealso: [](ch_unstructured), `DM`, `DMPLEX`, `DMPlexCreateBoxMesh()`, `DMSetType()`, `DMCreate()`

# External Links
$(_doc_external("Dm/DMPlexCreateHexCylinderMesh"))
"""
function DMPlexCreateHexCylinderMesh(petsclib::PetscLibType, comm::MPI_Comm, periodicZ::DMBoundaryType, Nr::PetscInt) end

@for_petsc function DMPlexCreateHexCylinderMesh(petsclib::$UnionPetscLib, comm::MPI_Comm, periodicZ::DMBoundaryType, Nr::$PetscInt )
	dm_ = Ref{CDM}()

    @chk ccall(
               (:DMPlexCreateHexCylinderMesh, $petsc_library),
               PetscErrorCode,
               (MPI_Comm, DMBoundaryType, $PetscInt, Ptr{CDM}),
               comm, periodicZ, Nr, dm_,
              )

	dm = PetscDM(dm_[], petsclib)

	return dm
end 

"""
	dm::PetscDM = DMPlexCreateWedgeCylinderMesh(petsclib::PetscLibType,comm::MPI_Comm, n::PetscInt, interpolate::PetscBool) 
Creates a mesh on the tensor product of the unit interval with the circle (cylinder) using wedges.

Collective

Input Parameters:
- `comm`        - The communicator for the `DM` object
- `n`           - The number of wedges around the origin
- `interpolate` - Create edges and faces

Output Parameter:
- `dm` - The `DM` object

Level: beginner

-seealso: [](ch_unstructured), `DM`, `DMPLEX`, `DMPlexCreateHexCylinderMesh()`, `DMPlexCreateBoxMesh()`, `DMSetType()`, `DMCreate()`

# External Links
$(_doc_external("Dm/DMPlexCreateWedgeCylinderMesh"))
"""
function DMPlexCreateWedgeCylinderMesh(petsclib::PetscLibType, comm::MPI_Comm, n::PetscInt, interpolate::PetscBool) end

@for_petsc function DMPlexCreateWedgeCylinderMesh(petsclib::$UnionPetscLib, comm::MPI_Comm, n::$PetscInt, interpolate::PetscBool )
	dm_ = Ref{CDM}()

    @chk ccall(
               (:DMPlexCreateWedgeCylinderMesh, $petsc_library),
               PetscErrorCode,
               (MPI_Comm, $PetscInt, PetscBool, Ptr{CDM}),
               comm, n, interpolate, dm_,
              )

	dm = PetscDM(dm_[], petsclib)

	return dm
end 

"""
	dm::PetscDM = DMPlexCreateTPSMesh(petsclib::PetscLibType,comm::MPI_Comm, tpstype::DMPlexTPSType, extent::Vector{PetscInt}, periodic::Vector{DMBoundaryType}, tps_distribute::PetscBool, refinements::PetscInt, layers::PetscInt, thickness::PetscReal) 
Create a distributed, interpolated mesh of a triply

Collective

Input Parameters:
- `comm`           - The communicator for the `DM` object
- `tpstype`        - Type of triply-periodic surface
- `extent`         - Array of length 3 containing number of periods in each direction
- `periodic`       - array of length 3 with periodicity, or `NULL` for non-periodic
- `tps_distribute` - Distribute 2D manifold mesh prior to refinement and extrusion (more scalable)
- `refinements`    - Number of factor-of-2 refinements of 2D manifold mesh
- `layers`         - Number of cell layers extruded in normal direction
- `thickness`      - Thickness in normal direction

Output Parameter:
- `dm` - The `DM` object

Level: beginner

-seealso: [](ch_unstructured), `DM`, `DMPLEX`, `DMPlexCreateSphereMesh()`, `DMSetType()`, `DMCreate()`

# External Links
$(_doc_external("Dm/DMPlexCreateTPSMesh"))
"""
function DMPlexCreateTPSMesh(petsclib::PetscLibType, comm::MPI_Comm, tpstype::DMPlexTPSType, extent::Vector{PetscInt}, periodic::Vector{DMBoundaryType}, tps_distribute::PetscBool, refinements::PetscInt, layers::PetscInt, thickness::PetscReal) end

@for_petsc function DMPlexCreateTPSMesh(petsclib::$UnionPetscLib, comm::MPI_Comm, tpstype::DMPlexTPSType, extent::Vector{$PetscInt}, periodic::Vector{DMBoundaryType}, tps_distribute::PetscBool, refinements::$PetscInt, layers::$PetscInt, thickness::$PetscReal )
	dm_ = Ref{CDM}()

    @chk ccall(
               (:DMPlexCreateTPSMesh, $petsc_library),
               PetscErrorCode,
               (MPI_Comm, DMPlexTPSType, Ptr{$PetscInt}, Ptr{DMBoundaryType}, PetscBool, $PetscInt, $PetscInt, $PetscReal, Ptr{CDM}),
               comm, tpstype, extent, periodic, tps_distribute, refinements, layers, thickness, dm_,
              )

	dm = PetscDM(dm_[], petsclib)

	return dm
end 

"""
	dm::PetscDM = DMPlexCreateSphereMesh(petsclib::PetscLibType,comm::MPI_Comm, dim::PetscInt, simplex::PetscBool, R::PetscReal) 
Creates a mesh on the d

Collective

Input Parameters:
- `comm`    - The communicator for the `DM` object
- `dim`     - The dimension
- `simplex` - Use simplices, or tensor product cells
- `R`       - The radius

Output Parameter:
- `dm` - The `DM` object

Level: beginner

-seealso: [](ch_unstructured), `DM`, `DMPLEX`, `DMPlexCreateBallMesh()`, `DMPlexCreateBoxMesh()`, `DMSetType()`, `DMCreate()`

# External Links
$(_doc_external("Dm/DMPlexCreateSphereMesh"))
"""
function DMPlexCreateSphereMesh(petsclib::PetscLibType, comm::MPI_Comm, dim::PetscInt, simplex::PetscBool, R::PetscReal) end

@for_petsc function DMPlexCreateSphereMesh(petsclib::$UnionPetscLib, comm::MPI_Comm, dim::$PetscInt, simplex::PetscBool, R::$PetscReal )
	dm_ = Ref{CDM}()

    @chk ccall(
               (:DMPlexCreateSphereMesh, $petsc_library),
               PetscErrorCode,
               (MPI_Comm, $PetscInt, PetscBool, $PetscReal, Ptr{CDM}),
               comm, dim, simplex, R, dm_,
              )

	dm = PetscDM(dm_[], petsclib)

	return dm
end 

"""
	dm::PetscDM = DMPlexCreateBallMesh(petsclib::PetscLibType,comm::MPI_Comm, dim::PetscInt, R::PetscReal) 
Creates a simplex mesh on the d

Collective

Input Parameters:
- `comm` - The communicator for the `DM` object
- `dim`  - The dimension
- `R`    - The radius

Output Parameter:
- `dm` - The `DM` object

Options Database Key:
- `bd_dm_refine` - This will refine the surface mesh preserving the sphere geometry

Level: beginner

-seealso: [](ch_unstructured), `DM`, `DMPLEX`, `DMPlexCreateSphereMesh()`, `DMPlexCreateBoxMesh()`, `DMSetType()`, `DMCreate()`

# External Links
$(_doc_external("Dm/DMPlexCreateBallMesh"))
"""
function DMPlexCreateBallMesh(petsclib::PetscLibType, comm::MPI_Comm, dim::PetscInt, R::PetscReal) end

@for_petsc function DMPlexCreateBallMesh(petsclib::$UnionPetscLib, comm::MPI_Comm, dim::$PetscInt, R::$PetscReal )
	dm_ = Ref{CDM}()

    @chk ccall(
               (:DMPlexCreateBallMesh, $petsc_library),
               PetscErrorCode,
               (MPI_Comm, $PetscInt, $PetscReal, Ptr{CDM}),
               comm, dim, R, dm_,
              )

	dm = PetscDM(dm_[], petsclib)

	return dm
end 

"""
	refdm::PetscDM = DMPlexCreateReferenceCell(petsclib::PetscLibType,comm::MPI_Comm, ct::DMPolytopeType) 
Create a `DMPLEX` with the appropriate FEM reference cell

Collective

Input Parameters:
- `comm` - The communicator
- `ct`   - The cell type of the reference cell

Output Parameter:
- `refdm` - The reference cell

Level: intermediate

-seealso: [](ch_unstructured), `DM`, `DMPLEX`, `DMPlexCreateBoxMesh()`

# External Links
$(_doc_external("Dm/DMPlexCreateReferenceCell"))
"""
function DMPlexCreateReferenceCell(petsclib::PetscLibType, comm::MPI_Comm, ct::DMPolytopeType) end

@for_petsc function DMPlexCreateReferenceCell(petsclib::$UnionPetscLib, comm::MPI_Comm, ct::DMPolytopeType )
	refdm_ = Ref{CDM}()

    @chk ccall(
               (:DMPlexCreateReferenceCell, $petsc_library),
               PetscErrorCode,
               (MPI_Comm, DMPolytopeType, Ptr{CDM}),
               comm, ct, refdm_,
              )

	refdm = PetscDM(refdm_[], petsclib)

	return refdm
end 

"""
	mesh::PetscDM = DMPlexCreate(petsclib::PetscLibType,comm::MPI_Comm) 
Creates a `DMPLEX` object, which encapsulates an unstructured mesh, or CW complex, which can be expressed using a Hasse Diagram.

Collective

Input Parameter:
- `comm` - The communicator for the `DMPLEX` object

Output Parameter:
- `mesh` - The `DMPLEX` object

Level: beginner

-seealso: [](ch_unstructured), `DM`, `DMPLEX`, `DMType`, `DMCreate()`, `DMSetType()`

# External Links
$(_doc_external("Dm/DMPlexCreate"))
"""
function DMPlexCreate(petsclib::PetscLibType, comm::MPI_Comm) end

@for_petsc function DMPlexCreate(petsclib::$UnionPetscLib, comm::MPI_Comm )
	mesh_ = Ref{CDM}()

    @chk ccall(
               (:DMPlexCreate, $petsc_library),
               PetscErrorCode,
               (MPI_Comm, Ptr{CDM}),
               comm, mesh_,
              )

	mesh = PetscDM(mesh_[], petsclib)

	return mesh
end 

"""
	verticesAdjSaved::Vector{PetscInt} = DMPlexBuildFromCellListParallel(petsclib::PetscLibType,dm::PetscDM, numCells::PetscInt, numVertices::PetscInt, NVertices::PetscInt, numCorners::PetscInt, cells::Vector{PetscInt}, vertexSF::PetscSF) 
Build a distributed `DMPLEX` topology from a list of vertices for each cell (common mesh generator output) where all cells have the same celltype

Collective; No Fortran Support

Input Parameters:
- `dm`          - The `DM`
- `numCells`    - The number of cells owned by this process
- `numVertices` - The number of vertices to be owned by this process, or `PETSC_DECIDE`
- `NVertices`   - The global number of vertices, or `PETSC_DETERMINE`
- `numCorners`  - The number of vertices for each cell
- `cells`       - An array of  numCells \times numCorners numbers, the global vertex numbers for each cell

Output Parameters:
- `vertexSF`         - (Optional) `PetscSF` describing complete vertex ownership
- `verticesAdjSaved` - (Optional) vertex adjacency array

Level: advanced

-seealso: [](ch_unstructured), `DM`, `DMPLEX`, `DMPlexBuildFromCellList()`, `DMPlexCreateFromCellListParallelPetsc()`, `DMPlexBuildCoordinatesFromCellListParallel()`,
`PetscSF`

# External Links
$(_doc_external("Dm/DMPlexBuildFromCellListParallel"))
"""
function DMPlexBuildFromCellListParallel(petsclib::PetscLibType, dm::PetscDM, numCells::PetscInt, numVertices::PetscInt, NVertices::PetscInt, numCorners::PetscInt, cells::Vector{PetscInt}, vertexSF::PetscSF) end

@for_petsc function DMPlexBuildFromCellListParallel(petsclib::$UnionPetscLib, dm::PetscDM, numCells::$PetscInt, numVertices::$PetscInt, NVertices::$PetscInt, numCorners::$PetscInt, cells::Vector{$PetscInt}, vertexSF::PetscSF )
	verticesAdjSaved_ = Ref{Ptr{$PetscInt}}()

    @chk ccall(
               (:DMPlexBuildFromCellListParallel, $petsc_library),
               PetscErrorCode,
               (CDM, $PetscInt, $PetscInt, $PetscInt, $PetscInt, Ptr{$PetscInt}, Ptr{PetscSF}, Ptr{Ptr{$PetscInt}}),
               dm, numCells, numVertices, NVertices, numCorners, cells, vertexSF, verticesAdjSaved_,
              )

	verticesAdjSaved = unsafe_wrap(Array, verticesAdjSaved_[], VecGetLocalSize(petsclib, x); own = false)

	return verticesAdjSaved
end 

"""
	verticesAdjSaved::Vector{PetscInt} = DMPlexBuildFromCellSectionParallel(petsclib::PetscLibType,dm::PetscDM, numCells::PetscInt, numVertices::PetscInt, NVertices::PetscInt, cellSection::PetscSection, cells::Vector{PetscInt}, vertexSF::PetscSF) 
Build distributed `DMPLEX` topology from a list of vertices for each cell (common mesh generator output) allowing multiple celltypes

Collective; No Fortran Support

Input Parameters:
- `dm`          - The `DM`
- `numCells`    - The number of cells owned by this process
- `numVertices` - The number of vertices to be owned by this process, or `PETSC_DECIDE`
- `NVertices`   - The global number of vertices, or `PETSC_DETERMINE`
- `cellSection` - The `PetscSection` giving the number of vertices for each cell (layout of cells)
- `cells`       - An array of the global vertex numbers for each cell

Output Parameters:
- `vertexSF`         - (Optional) `PetscSF` describing complete vertex ownership
- `verticesAdjSaved` - (Optional) vertex adjacency array

Level: advanced

-seealso: [](ch_unstructured), `DM`, `DMPLEX`, `DMPlexBuildFromCellListParallel()`, `DMPlexCreateFromCellSectionParallel()`, `DMPlexBuildCoordinatesFromCellListParallel()`,
`PetscSF`

# External Links
$(_doc_external("Dm/DMPlexBuildFromCellSectionParallel"))
"""
function DMPlexBuildFromCellSectionParallel(petsclib::PetscLibType, dm::PetscDM, numCells::PetscInt, numVertices::PetscInt, NVertices::PetscInt, cellSection::PetscSection, cells::Vector{PetscInt}, vertexSF::PetscSF) end

@for_petsc function DMPlexBuildFromCellSectionParallel(petsclib::$UnionPetscLib, dm::PetscDM, numCells::$PetscInt, numVertices::$PetscInt, NVertices::$PetscInt, cellSection::PetscSection, cells::Vector{$PetscInt}, vertexSF::PetscSF )
	verticesAdjSaved_ = Ref{Ptr{$PetscInt}}()

    @chk ccall(
               (:DMPlexBuildFromCellSectionParallel, $petsc_library),
               PetscErrorCode,
               (CDM, $PetscInt, $PetscInt, $PetscInt, PetscSection, Ptr{$PetscInt}, Ptr{PetscSF}, Ptr{Ptr{$PetscInt}}),
               dm, numCells, numVertices, NVertices, cellSection, cells, vertexSF, verticesAdjSaved_,
              )

	verticesAdjSaved = unsafe_wrap(Array, verticesAdjSaved_[], VecGetLocalSize(petsclib, x); own = false)

	return verticesAdjSaved
end 

"""
	DMPlexBuildCoordinatesFromCellListParallel(petsclib::PetscLibType,dm::PetscDM, spaceDim::PetscInt, sfVert::PetscSF, vertexCoords::Vector{PetscReal}) 
Build `DM` coordinates from a list of coordinates for each owned vertex (common mesh generator output)

Collective; No Fortran Support

Input Parameters:
- `dm`           - The `DM`
- `spaceDim`     - The spatial dimension used for coordinates
- `sfVert`       - `PetscSF` describing complete vertex ownership
- `vertexCoords` - An array of numVertices*spaceDim numbers, the coordinates of each vertex

Level: advanced

-seealso: [](ch_unstructured), `DM`, `DMPLEX`, `DMPlexBuildCoordinatesFromCellList()`, `DMPlexCreateFromCellListParallelPetsc()`, `DMPlexBuildFromCellListParallel()`

# External Links
$(_doc_external("Dm/DMPlexBuildCoordinatesFromCellListParallel"))
"""
function DMPlexBuildCoordinatesFromCellListParallel(petsclib::PetscLibType, dm::PetscDM, spaceDim::PetscInt, sfVert::PetscSF, vertexCoords::Vector{PetscReal}) end

@for_petsc function DMPlexBuildCoordinatesFromCellListParallel(petsclib::$UnionPetscLib, dm::PetscDM, spaceDim::$PetscInt, sfVert::PetscSF, vertexCoords::Vector{$PetscReal} )

    @chk ccall(
               (:DMPlexBuildCoordinatesFromCellListParallel, $petsc_library),
               PetscErrorCode,
               (CDM, $PetscInt, PetscSF, Ptr{$PetscReal}),
               dm, spaceDim, sfVert, vertexCoords,
              )


	return nothing
end 

"""
	vertexSF::PetscSF,verticesAdj::Vector{PetscInt},dm::PetscDM = DMPlexCreateFromCellListParallelPetsc(petsclib::PetscLibType,comm::MPI_Comm, dim::PetscInt, numCells::PetscInt, numVertices::PetscInt, NVertices::PetscInt, numCorners::PetscInt, interpolate::PetscBool, cells::Vector{PetscInt}, spaceDim::PetscInt, vertexCoords::Vector{PetscReal}) 
Create distributed `DMPLEX` from a list of vertices for each cell (common mesh generator output) where all cells have the same celltype

Collective

Input Parameters:
- `comm`         - The communicator
- `dim`          - The topological dimension of the mesh
- `numCells`     - The number of cells owned by this process
- `numVertices`  - The number of vertices owned by this process, or `PETSC_DECIDE`
- `NVertices`    - The global number of vertices, or `PETSC_DECIDE`
- `numCorners`   - The number of vertices for each cell
- `interpolate`  - Flag indicating that intermediate mesh entities (faces, edges) should be created automatically
- `cells`        - An array of numCells*numCorners numbers, the global vertex numbers for each cell
- `spaceDim`     - The spatial dimension used for coordinates
- `vertexCoords` - An array of numVertices*spaceDim numbers, the coordinates of each vertex

Output Parameters:
- `dm`          - The `DM`
- `vertexSF`    - (Optional) `PetscSF` describing complete vertex ownership
- `verticesAdj` - (Optional) vertex adjacency array

Level: intermediate

-seealso: [](ch_unstructured), `DM`, `DMPLEX`, `DMPlexCreateFromCellListPetsc()`, `DMPlexBuildFromCellListParallel()`, `DMPlexBuildCoordinatesFromCellListParallel()`, `DMPlexCreateFromDAG()`, `DMPlexCreate()`

# External Links
$(_doc_external("Dm/DMPlexCreateFromCellListParallelPetsc"))
"""
function DMPlexCreateFromCellListParallelPetsc(petsclib::PetscLibType, comm::MPI_Comm, dim::PetscInt, numCells::PetscInt, numVertices::PetscInt, NVertices::PetscInt, numCorners::PetscInt, interpolate::PetscBool, cells::Vector{PetscInt}, spaceDim::PetscInt, vertexCoords::Vector{PetscReal}) end

@for_petsc function DMPlexCreateFromCellListParallelPetsc(petsclib::$UnionPetscLib, comm::MPI_Comm, dim::$PetscInt, numCells::$PetscInt, numVertices::$PetscInt, NVertices::$PetscInt, numCorners::$PetscInt, interpolate::PetscBool, cells::Vector{$PetscInt}, spaceDim::$PetscInt, vertexCoords::Vector{$PetscReal} )
	vertexSF_ = Ref{PetscSF}()
	verticesAdj_ = Ref{Ptr{$PetscInt}}()
	dm_ = Ref{CDM}()

    @chk ccall(
               (:DMPlexCreateFromCellListParallelPetsc, $petsc_library),
               PetscErrorCode,
               (MPI_Comm, $PetscInt, $PetscInt, $PetscInt, $PetscInt, $PetscInt, PetscBool, Ptr{$PetscInt}, $PetscInt, Ptr{$PetscReal}, Ptr{PetscSF}, Ptr{Ptr{$PetscInt}}, Ptr{CDM}),
               comm, dim, numCells, numVertices, NVertices, numCorners, interpolate, cells, spaceDim, vertexCoords, vertexSF_, verticesAdj_, dm_,
              )

	vertexSF = vertexSF_[]
	verticesAdj = unsafe_wrap(Array, verticesAdj_[], VecGetLocalSize(petsclib, x); own = false)
	dm = PetscDM(dm_[], petsclib)

	return vertexSF,verticesAdj,dm
end 

"""
	vertexSF::PetscSF,verticesAdj::Vector{PetscInt},dm::PetscDM = DMPlexCreateFromCellSectionParallel(petsclib::PetscLibType,comm::MPI_Comm, dim::PetscInt, numCells::PetscInt, numVertices::PetscInt, NVertices::PetscInt, cellSection::PetscSection, interpolate::PetscBool, cells::Vector{PetscInt}, spaceDim::PetscInt, vertexCoords::Vector{PetscReal}) 
Create distributed `DMPLEX` from a list of vertices for each cell (common mesh generator output) and supports multiple celltypes

Collective

Input Parameters:
- `comm`         - The communicator
- `dim`          - The topological dimension of the mesh
- `numCells`     - The number of cells owned by this process
- `numVertices`  - The number of vertices owned by this process, or `PETSC_DECIDE`
- `NVertices`    - The global number of vertices, or `PETSC_DECIDE`
- `cellSection`  - The `PetscSection` giving the number of vertices for each cell (layout of cells)
- `interpolate`  - Flag indicating that intermediate mesh entities (faces, edges) should be created automatically
- `cells`        - An array of the global vertex numbers for each cell
- `spaceDim`     - The spatial dimension used for coordinates
- `vertexCoords` - An array of numVertices*spaceDim numbers, the coordinates of each vertex

Output Parameters:
- `dm`          - The `DM`
- `vertexSF`    - (Optional) `PetscSF` describing complete vertex ownership
- `verticesAdj` - (Optional) vertex adjacency array

Level: intermediate

-seealso: [](ch_unstructured), `DM`, `DMPLEX`, `DMPlexCreateFromCellListPetsc()`, `DMPlexBuildFromCellListParallel()`, `DMPlexBuildCoordinatesFromCellListParallel()`, `DMPlexCreateFromDAG()`, `DMPlexCreate()`

# External Links
$(_doc_external("Dm/DMPlexCreateFromCellSectionParallel"))
"""
function DMPlexCreateFromCellSectionParallel(petsclib::PetscLibType, comm::MPI_Comm, dim::PetscInt, numCells::PetscInt, numVertices::PetscInt, NVertices::PetscInt, cellSection::PetscSection, interpolate::PetscBool, cells::Vector{PetscInt}, spaceDim::PetscInt, vertexCoords::Vector{PetscReal}) end

@for_petsc function DMPlexCreateFromCellSectionParallel(petsclib::$UnionPetscLib, comm::MPI_Comm, dim::$PetscInt, numCells::$PetscInt, numVertices::$PetscInt, NVertices::$PetscInt, cellSection::PetscSection, interpolate::PetscBool, cells::Vector{$PetscInt}, spaceDim::$PetscInt, vertexCoords::Vector{$PetscReal} )
	vertexSF_ = Ref{PetscSF}()
	verticesAdj_ = Ref{Ptr{$PetscInt}}()
	dm_ = Ref{CDM}()

    @chk ccall(
               (:DMPlexCreateFromCellSectionParallel, $petsc_library),
               PetscErrorCode,
               (MPI_Comm, $PetscInt, $PetscInt, $PetscInt, $PetscInt, PetscSection, PetscBool, Ptr{$PetscInt}, $PetscInt, Ptr{$PetscReal}, Ptr{PetscSF}, Ptr{Ptr{$PetscInt}}, Ptr{CDM}),
               comm, dim, numCells, numVertices, NVertices, cellSection, interpolate, cells, spaceDim, vertexCoords, vertexSF_, verticesAdj_, dm_,
              )

	vertexSF = vertexSF_[]
	verticesAdj = unsafe_wrap(Array, verticesAdj_[], VecGetLocalSize(petsclib, x); own = false)
	dm = PetscDM(dm_[], petsclib)

	return vertexSF,verticesAdj,dm
end 

"""
	DMPlexBuildFromCellList(petsclib::PetscLibType,dm::PetscDM, numCells::PetscInt, numVertices::PetscInt, numCorners::PetscInt, cells::Vector{PetscInt}) 
Build `DMPLEX` topology from a list of vertices for each cell (common mesh generator output)

Collective; No Fortran Support

Input Parameters:
- `dm`          - The `DM`
- `numCells`    - The number of cells owned by this process
- `numVertices` - The number of vertices owned by this process, or `PETSC_DETERMINE`
- `numCorners`  - The number of vertices for each cell
- `cells`       - An array of `numCells` x `numCorners` numbers, the global vertex numbers for each cell

Level: advanced

-seealso: [](ch_unstructured), `DM`, `DMPLEX`, `DMPlexBuildFromCellListParallel()`, `DMPlexBuildCoordinatesFromCellList()`, `DMPlexCreateFromCellListPetsc()`

# External Links
$(_doc_external("Dm/DMPlexBuildFromCellList"))
"""
function DMPlexBuildFromCellList(petsclib::PetscLibType, dm::PetscDM, numCells::PetscInt, numVertices::PetscInt, numCorners::PetscInt, cells::Vector{PetscInt}) end

@for_petsc function DMPlexBuildFromCellList(petsclib::$UnionPetscLib, dm::PetscDM, numCells::$PetscInt, numVertices::$PetscInt, numCorners::$PetscInt, cells::Vector{$PetscInt} )

    @chk ccall(
               (:DMPlexBuildFromCellList, $petsc_library),
               PetscErrorCode,
               (CDM, $PetscInt, $PetscInt, $PetscInt, Ptr{$PetscInt}),
               dm, numCells, numVertices, numCorners, cells,
              )


	return nothing
end 

"""
	DMPlexBuildCoordinatesFromCellList(petsclib::PetscLibType,dm::PetscDM, spaceDim::PetscInt, vertexCoords::Vector{PetscReal}) 
Build `DM` coordinates from a list of coordinates for each owned vertex (common mesh generator output)

Collective

Input Parameters:
- `dm`           - The `DM`
- `spaceDim`     - The spatial dimension used for coordinates
- `vertexCoords` - An array of numVertices*spaceDim numbers, the coordinates of each vertex

Level: advanced

-seealso: [](ch_unstructured), `DM`, `DMPLEX`, `DMPlexBuildCoordinatesFromCellListParallel()`, `DMPlexCreateFromCellListPetsc()`, `DMPlexBuildFromCellList()`

# External Links
$(_doc_external("Dm/DMPlexBuildCoordinatesFromCellList"))
"""
function DMPlexBuildCoordinatesFromCellList(petsclib::PetscLibType, dm::PetscDM, spaceDim::PetscInt, vertexCoords::Vector{PetscReal}) end

@for_petsc function DMPlexBuildCoordinatesFromCellList(petsclib::$UnionPetscLib, dm::PetscDM, spaceDim::$PetscInt, vertexCoords::Vector{$PetscReal} )

    @chk ccall(
               (:DMPlexBuildCoordinatesFromCellList, $petsc_library),
               PetscErrorCode,
               (CDM, $PetscInt, Ptr{$PetscReal}),
               dm, spaceDim, vertexCoords,
              )


	return nothing
end 

"""
	dm::PetscDM = DMPlexCreateFromCellListPetsc(petsclib::PetscLibType,comm::MPI_Comm, dim::PetscInt, numCells::PetscInt, numVertices::PetscInt, numCorners::PetscInt, interpolate::PetscBool, cells::Vector{PetscInt}, spaceDim::PetscInt, vertexCoords::Vector{PetscReal}) 
Create `DMPLEX` from a list of vertices for each cell (common mesh generator output), but only process 0 takes in the input

Collective

Input Parameters:
- `comm`         - The communicator
- `dim`          - The topological dimension of the mesh
- `numCells`     - The number of cells, only on process 0
- `numVertices`  - The number of vertices owned by this process, or `PETSC_DECIDE`, only on process 0
- `numCorners`   - The number of vertices for each cell, only on process 0
- `interpolate`  - Flag indicating that intermediate mesh entities (faces, edges) should be created automatically
- `cells`        - An array of  numCells \times numCorners numbers, the vertices for each cell, only on process 0
- `spaceDim`     - The spatial dimension used for coordinates
- `vertexCoords` - An array of  numVertices \times spaceDim numbers, the coordinates of each vertex, only on process 0

Output Parameter:
- `dm` - The `DM`, which only has points on process 0

Level: intermediate

-seealso: [](ch_unstructured), `DM`, `DMPLEX`, `DMPlexCreateFromCellListParallelPetsc()`, `DMPlexBuildFromCellList()`, `DMPlexBuildCoordinatesFromCellList()`, `DMPlexCreateFromDAG()`, `DMPlexCreate()`

# External Links
$(_doc_external("Dm/DMPlexCreateFromCellListPetsc"))
"""
function DMPlexCreateFromCellListPetsc(petsclib::PetscLibType, comm::MPI_Comm, dim::PetscInt, numCells::PetscInt, numVertices::PetscInt, numCorners::PetscInt, interpolate::PetscBool, cells::Vector{PetscInt}, spaceDim::PetscInt, vertexCoords::Vector{PetscReal}) end

@for_petsc function DMPlexCreateFromCellListPetsc(petsclib::$UnionPetscLib, comm::MPI_Comm, dim::$PetscInt, numCells::$PetscInt, numVertices::$PetscInt, numCorners::$PetscInt, interpolate::PetscBool, cells::Vector{$PetscInt}, spaceDim::$PetscInt, vertexCoords::Vector{$PetscReal} )
	dm_ = Ref{CDM}()

    @chk ccall(
               (:DMPlexCreateFromCellListPetsc, $petsc_library),
               PetscErrorCode,
               (MPI_Comm, $PetscInt, $PetscInt, $PetscInt, $PetscInt, PetscBool, Ptr{$PetscInt}, $PetscInt, Ptr{$PetscReal}, Ptr{CDM}),
               comm, dim, numCells, numVertices, numCorners, interpolate, cells, spaceDim, vertexCoords, dm_,
              )

	dm = PetscDM(dm_[], petsclib)

	return dm
end 

"""
	DMPlexCreateFromDAG(petsclib::PetscLibType,dm::PetscDM, depth::PetscInt, numPoints::Vector{PetscInt}, coneSize::Vector{PetscInt}, cones::Vector{PetscInt}, coneOrientations::Vector{PetscInt}, vertexCoords::Vector{PetscScalar}) 
This takes as input the adjacency

Input Parameters:
- `dm`               - The empty `DM` object, usually from `DMCreate()` and `DMSetDimension()`
- `depth`            - The depth of the DAG
- `numPoints`        - Array of size  depth + 1  containing the number of points at each `depth`
- `coneSize`         - The cone size of each point
- `cones`            - The concatenation of the cone points for each point, the cone list must be oriented correctly for each point
- `coneOrientations` - The orientation of each cone point
- `vertexCoords`     - An array of  numPoints[0] \times spacedim  numbers representing the coordinates of each vertex, with `spacedim` the value set via `DMSetCoordinateDim()`

Output Parameter:
- `dm` - The `DM`

Level: advanced

-seealso: [](ch_unstructured), `DM`, `DMPLEX`, `DMPlexCreateFromCellListPetsc()`, `DMPlexCreate()`

# External Links
$(_doc_external("Dm/DMPlexCreateFromDAG"))
"""
function DMPlexCreateFromDAG(petsclib::PetscLibType, dm::PetscDM, depth::PetscInt, numPoints::Vector{PetscInt}, coneSize::Vector{PetscInt}, cones::Vector{PetscInt}, coneOrientations::Vector{PetscInt}, vertexCoords::Vector{PetscScalar}) end

@for_petsc function DMPlexCreateFromDAG(petsclib::$UnionPetscLib, dm::PetscDM, depth::$PetscInt, numPoints::Vector{$PetscInt}, coneSize::Vector{$PetscInt}, cones::Vector{$PetscInt}, coneOrientations::Vector{$PetscInt}, vertexCoords::Vector{$PetscScalar} )

    @chk ccall(
               (:DMPlexCreateFromDAG, $petsc_library),
               PetscErrorCode,
               (CDM, $PetscInt, Ptr{$PetscInt}, Ptr{$PetscInt}, Ptr{$PetscInt}, Ptr{$PetscInt}, Ptr{$PetscScalar}),
               dm, depth, numPoints, coneSize, cones, coneOrientations, vertexCoords,
              )


	return nothing
end 

"""
	dm::PetscDM = DMPlexCreateFromFile(petsclib::PetscLibType,comm::MPI_Comm, filename::String, plexname::String, interpolate::PetscBool) 
This takes a filename and produces a `DM`

Collective

Input Parameters:
- `comm`        - The communicator
- `filename`    - A file name
- `plexname`    - The object name of the resulting `DM`, also used for intra-datafile lookup by some formats
- `interpolate` - Flag to create intermediate mesh pieces (edges, faces)

Output Parameter:
- `dm` - The `DM`

Options Database Key:
- `-dm_plex_create_from_hdf5_xdmf` - use the `PETSC_VIEWER_HDF5_XDMF` format for reading HDF5

Use `-dm_plex_create_ prefix` to pass options to the internal `PetscViewer`, e.g. `-dm_plex_create_viewer_hdf5_collective`

Level: beginner

-seealso: [](ch_unstructured), `DM`, `DMPLEX`, `DMPlexCreateFromDAG()`, `DMPlexCreateFromCellListPetsc()`, `DMPlexCreate()`, `PetscObjectSetName()`, `DMView()`, `DMLoad()`

# External Links
$(_doc_external("Dm/DMPlexCreateFromFile"))
"""
function DMPlexCreateFromFile(petsclib::PetscLibType, comm::MPI_Comm, filename::String, plexname::String, interpolate::PetscBool) end

@for_petsc function DMPlexCreateFromFile(petsclib::$UnionPetscLib, comm::MPI_Comm, filename::String, plexname::String, interpolate::PetscBool )
	dm_ = Ref{CDM}()

    @chk ccall(
               (:DMPlexCreateFromFile, $petsc_library),
               PetscErrorCode,
               (MPI_Comm, Ptr{Cchar}, Ptr{Cchar}, PetscBool, Ptr{CDM}),
               comm, filename, plexname, interpolate, dm_,
              )

	dm = PetscDM(dm_[], petsclib)

	return dm
end 

"""
	dm::PetscDM = DMPlexCreateEphemeral(petsclib::PetscLibType,tr::DMPlexTransform, prefix::String) 
This takes a `DMPlexTransform` and a base `DMPlex` and produces an ephemeral `DM`, meaning one that is created on the fly in response to queries.

Input Parameters:
- `tr`     - The `DMPlexTransform`
- `prefix` - An options prefix, or NULL

Output Parameter:
- `dm` - The `DM`

Level: beginner

-seealso: `DMPlexCreateFromFile`, `DMPlexCreateFromDAG()`, `DMPlexCreateFromCellListPetsc()`, `DMPlexCreate()`

# External Links
$(_doc_external("Dm/DMPlexCreateEphemeral"))
"""
function DMPlexCreateEphemeral(petsclib::PetscLibType, tr::DMPlexTransform, prefix::String) end

@for_petsc function DMPlexCreateEphemeral(petsclib::$UnionPetscLib, tr::DMPlexTransform, prefix::String )
	dm_ = Ref{CDM}()

    @chk ccall(
               (:DMPlexCreateEphemeral, $petsc_library),
               PetscErrorCode,
               (DMPlexTransform, Ptr{Cchar}, Ptr{CDM}),
               tr, prefix, dm_,
              )

	dm = PetscDM(dm_[], petsclib)

	return dm
end 

"""
	DMPlexMarkBoundaryFaces(petsclib::PetscLibType,dm::PetscDM, val::PetscInt, label::DMLabel) 
Mark all faces on the boundary

Collective

Input Parameters:
- `dm`  - The original `DM`
- `val` - The marker value, or `PETSC_DETERMINE` to use some value in the closure (or 1 if none are found)

Output Parameter:
- `label` - The `DMLabel` marking boundary faces with the given value

Level: developer

-seealso: [](ch_unstructured), `DM`, `DMPLEX`, `DMLabelCreate()`, `DMCreateLabel()`

# External Links
$(_doc_external("Dm/DMPlexMarkBoundaryFaces"))
"""
function DMPlexMarkBoundaryFaces(petsclib::PetscLibType, dm::PetscDM, val::PetscInt, label::DMLabel) end

@for_petsc function DMPlexMarkBoundaryFaces(petsclib::$UnionPetscLib, dm::PetscDM, val::$PetscInt, label::DMLabel )

    @chk ccall(
               (:DMPlexMarkBoundaryFaces, $petsc_library),
               PetscErrorCode,
               (CDM, $PetscInt, DMLabel),
               dm, val, label,
              )


	return nothing
end 

"""
	DMPlexLabelComplete(petsclib::PetscLibType,dm::PetscDM, label::DMLabel) 
Starting with a label marking points on a surface, we add the transitive closure to the surface

Input Parameters:
- `dm`    - The `DM`
- `label` - A `DMLabel` marking the surface points

Output Parameter:
- `label` - A `DMLabel` marking all surface points in the transitive closure

Level: developer

-seealso: [](ch_unstructured), `DM`, `DMPLEX`, `DMPlexLabelCohesiveComplete()`

# External Links
$(_doc_external("Dm/DMPlexLabelComplete"))
"""
function DMPlexLabelComplete(petsclib::PetscLibType, dm::PetscDM, label::DMLabel) end

@for_petsc function DMPlexLabelComplete(petsclib::$UnionPetscLib, dm::PetscDM, label::DMLabel )

    @chk ccall(
               (:DMPlexLabelComplete, $petsc_library),
               PetscErrorCode,
               (CDM, DMLabel),
               dm, label,
              )


	return nothing
end 

"""
	DMPlexLabelAddCells(petsclib::PetscLibType,dm::PetscDM, label::DMLabel) 
Starting with a label marking points on a surface, we add a cell for each point

Input Parameters:
- `dm`    - The `DM`
- `label` - A `DMLabel` marking the surface points

Output Parameter:
- `label` - A `DMLabel` incorporating cells

Level: developer

-seealso: [](ch_unstructured), `DM`, `DMPLEX`, `DMPlexLabelAddFaceCells()`, `DMPlexLabelComplete()`, `DMPlexLabelCohesiveComplete()`

# External Links
$(_doc_external("Dm/DMPlexLabelAddCells"))
"""
function DMPlexLabelAddCells(petsclib::PetscLibType, dm::PetscDM, label::DMLabel) end

@for_petsc function DMPlexLabelAddCells(petsclib::$UnionPetscLib, dm::PetscDM, label::DMLabel )

    @chk ccall(
               (:DMPlexLabelAddCells, $petsc_library),
               PetscErrorCode,
               (CDM, DMLabel),
               dm, label,
              )


	return nothing
end 

"""
	DMPlexLabelAddFaceCells(petsclib::PetscLibType,dm::PetscDM, label::DMLabel) 
Starting with a label marking faces on a surface, we add a cell for each face

Input Parameters:
- `dm`    - The `DM`
- `label` - A `DMLabel` marking the surface points

Output Parameter:
- `label` - A `DMLabel` incorporating cells

Level: developer

-seealso: [](ch_unstructured), `DM`, `DMPLEX`, `DMPlexLabelAddCells()`, `DMPlexLabelComplete()`, `DMPlexLabelCohesiveComplete()`

# External Links
$(_doc_external("Dm/DMPlexLabelAddFaceCells"))
"""
function DMPlexLabelAddFaceCells(petsclib::PetscLibType, dm::PetscDM, label::DMLabel) end

@for_petsc function DMPlexLabelAddFaceCells(petsclib::$UnionPetscLib, dm::PetscDM, label::DMLabel )

    @chk ccall(
               (:DMPlexLabelAddFaceCells, $petsc_library),
               PetscErrorCode,
               (CDM, DMLabel),
               dm, label,
              )


	return nothing
end 

"""
	DMPlexLabelClearCells(petsclib::PetscLibType,dm::PetscDM, label::DMLabel) 
Remove cells from a label

Input Parameters:
- `dm`    - The `DM`
- `label` - A `DMLabel` marking surface points and their adjacent cells

Output Parameter:
- `label` - A `DMLabel` without cells

Level: developer

-seealso: [](ch_unstructured), `DM`, `DMPLEX`, `DMPlexLabelComplete()`, `DMPlexLabelCohesiveComplete()`, `DMPlexLabelAddCells()`

# External Links
$(_doc_external("Dm/DMPlexLabelClearCells"))
"""
function DMPlexLabelClearCells(petsclib::PetscLibType, dm::PetscDM, label::DMLabel) end

@for_petsc function DMPlexLabelClearCells(petsclib::$UnionPetscLib, dm::PetscDM, label::DMLabel )

    @chk ccall(
               (:DMPlexLabelClearCells, $petsc_library),
               PetscErrorCode,
               (CDM, DMLabel),
               dm, label,
              )


	return nothing
end 

"""
	numGhostCells::PetscInt = DMPlexConstructGhostCells(petsclib::PetscLibType,dm::PetscDM, labelName::String, dmGhosted::PetscDM) 
Construct ghost cells which connect to every boundary face

Collective

Input Parameters:
- `dm`        - The original `DM`
- `labelName` - The label specifying the boundary faces, or "Face Sets" if this is `NULL`

Output Parameters:
- `numGhostCells` - The number of ghost cells added to the `DM`
- `dmGhosted`     - The new `DM`

Level: developer

-seealso: [](ch_unstructured), `DM`, `DMPLEX`, `DMCreate()`

# External Links
$(_doc_external("Dm/DMPlexConstructGhostCells"))
"""
function DMPlexConstructGhostCells(petsclib::PetscLibType, dm::PetscDM, labelName::String, dmGhosted::PetscDM) end

@for_petsc function DMPlexConstructGhostCells(petsclib::$UnionPetscLib, dm::PetscDM, labelName::String, dmGhosted::PetscDM )
	numGhostCells_ = Ref{$PetscInt}()
	dmGhosted_ = Ref(dmGhosted.ptr)

    @chk ccall(
               (:DMPlexConstructGhostCells, $petsc_library),
               PetscErrorCode,
               (CDM, Ptr{Cchar}, Ptr{$PetscInt}, Ptr{CDM}),
               dm, labelName, numGhostCells_, dmGhosted_,
              )

	numGhostCells = numGhostCells_[]
	dmGhosted.ptr = C_NULL

	return numGhostCells
end 

"""
	DMPlexConstructCohesiveCells(petsclib::PetscLibType,dm::PetscDM, label::DMLabel, splitLabel::DMLabel, dmSplit::PetscDM) 
Construct cohesive cells which split the face along an internal interface

Collective

Input Parameters:
- `dm`    - The original `DM`
- `label` - The `DMLabel` specifying the boundary faces (this could be auto-generated)

Output Parameters:
- `splitLabel` - The `DMLabel` containing the split points, or `NULL` if no output is desired
- `dmSplit`    - The new `DM`

Level: developer

-seealso: [](ch_unstructured), `DM`, `DMPLEX`, `DMCreate()`, `DMPlexLabelCohesiveComplete()`

# External Links
$(_doc_external("Dm/DMPlexConstructCohesiveCells"))
"""
function DMPlexConstructCohesiveCells(petsclib::PetscLibType, dm::PetscDM, label::DMLabel, splitLabel::DMLabel, dmSplit::PetscDM) end

@for_petsc function DMPlexConstructCohesiveCells(petsclib::$UnionPetscLib, dm::PetscDM, label::DMLabel, splitLabel::DMLabel, dmSplit::PetscDM )
	dmSplit_ = Ref(dmSplit.ptr)

    @chk ccall(
               (:DMPlexConstructCohesiveCells, $petsc_library),
               PetscErrorCode,
               (CDM, DMLabel, DMLabel, Ptr{CDM}),
               dm, label, splitLabel, dmSplit_,
              )

	dmSplit.ptr = C_NULL

	return nothing
end 

"""
	DMPlexLabelCohesiveComplete(petsclib::PetscLibType,dm::PetscDM, label::DMLabel, blabel::DMLabel, bvalue::PetscInt, flip::PetscBool, split::PetscBool, subdm::PetscDM) 
Starting with a label marking points on an internal surface, we add all other mesh pieces
to complete the surface

Input Parameters:
- `dm`     - The `DM`
- `label`  - A `DMLabel` marking the surface
- `blabel` - A `DMLabel` marking the vertices on the boundary which will not be duplicated, or `NULL` to find them automatically
- `bvalue` - Value of `DMLabel` marking the vertices on the boundary
- `flip`   - Flag to flip the submesh normal and replace points on the other side
- `split`  - Split faces impinging on the surface, rather than clamping the surface boundary
- `subdm`  - The `DM` associated with the label, or `NULL`

Output Parameter:
- `label` - A `DMLabel` marking all surface points

Level: developer

-seealso: [](ch_unstructured), `DM`, `DMPLEX`, `DMPlexConstructCohesiveCells()`, `DMPlexLabelComplete()`

# External Links
$(_doc_external("Dm/DMPlexLabelCohesiveComplete"))
"""
function DMPlexLabelCohesiveComplete(petsclib::PetscLibType, dm::PetscDM, label::DMLabel, blabel::DMLabel, bvalue::PetscInt, flip::PetscBool, split::PetscBool, subdm::PetscDM) end

@for_petsc function DMPlexLabelCohesiveComplete(petsclib::$UnionPetscLib, dm::PetscDM, label::DMLabel, blabel::DMLabel, bvalue::$PetscInt, flip::PetscBool, split::PetscBool, subdm::PetscDM )

    @chk ccall(
               (:DMPlexLabelCohesiveComplete, $petsc_library),
               PetscErrorCode,
               (CDM, DMLabel, DMLabel, $PetscInt, PetscBool, PetscBool, CDM),
               dm, label, blabel, bvalue, flip, split, subdm,
              )


	return nothing
end 

"""
	hybridLabel::DMLabel,splitLabel::DMLabel,dmInterface::PetscDM,dmHybrid::PetscDM = DMPlexCreateHybridMesh(petsclib::PetscLibType,dm::PetscDM, label::DMLabel, bdlabel::DMLabel, bdvalue::PetscInt) 
Create a mesh with hybrid cells along an internal interface

Collective

Input Parameters:
- `dm`      - The original `DM`
- `label`   - The label specifying the interface vertices
- `bdlabel` - The optional label specifying the interface boundary vertices
- `bdvalue` - Value of optional label specifying the interface boundary vertices

Output Parameters:
- `hybridLabel` - The label fully marking the interface, or `NULL` if no output is desired
- `splitLabel`  - The label containing the split points, or `NULL` if no output is desired
- `dmInterface` - The new interface `DM`, or `NULL`
- `dmHybrid`    - The new `DM` with cohesive cells

Level: developer

-seealso: [](ch_unstructured), `DM`, `DMPLEX`, `DMPlexConstructCohesiveCells()`, `DMPlexLabelCohesiveComplete()`, `DMPlexGetSubpointMap()`, `DMCreate()`

# External Links
$(_doc_external("Dm/DMPlexCreateHybridMesh"))
"""
function DMPlexCreateHybridMesh(petsclib::PetscLibType, dm::PetscDM, label::DMLabel, bdlabel::DMLabel, bdvalue::PetscInt) end

@for_petsc function DMPlexCreateHybridMesh(petsclib::$UnionPetscLib, dm::PetscDM, label::DMLabel, bdlabel::DMLabel, bdvalue::$PetscInt )
	hybridLabel_ = Ref{DMLabel}()
	splitLabel_ = Ref{DMLabel}()
	dmInterface_ = Ref{CDM}()
	dmHybrid_ = Ref{CDM}()

    @chk ccall(
               (:DMPlexCreateHybridMesh, $petsc_library),
               PetscErrorCode,
               (CDM, DMLabel, DMLabel, $PetscInt, Ptr{DMLabel}, Ptr{DMLabel}, Ptr{CDM}, Ptr{CDM}),
               dm, label, bdlabel, bdvalue, hybridLabel_, splitLabel_, dmInterface_, dmHybrid_,
              )

	hybridLabel = hybridLabel_[]
	splitLabel = splitLabel_[]
	dmInterface = PetscDM(dmInterface_[], petsclib)
	dmHybrid = PetscDM(dmHybrid_[], petsclib)

	return hybridLabel,splitLabel,dmInterface,dmHybrid
end 

"""
	faceVertices::Vector{PetscInt},posOriented::PetscBool = DMPlexGetOrientedFace(petsclib::PetscLibType,dm::PetscDM, cell::PetscInt, faceSize::PetscInt, face::Vector{PetscInt}, numCorners::PetscInt, indices::Vector{PetscInt}, origVertices::Vector{PetscInt}) 
Given a cell and a face, as a set of vertices, return the oriented face, as a set of vertices,
in faceVertices. The orientation is such that the face normal points out of the cell

Not Collective

Input Parameters:
- `dm`           - The original mesh
- `cell`         - The cell mesh point
- `faceSize`     - The number of vertices on the face
- `face`         - The face vertices
- `numCorners`   - The number of vertices on the cell
- `indices`      - Local numbering of face vertices in cell cone
- `origVertices` - Original face vertices

Output Parameters:
- `faceVertices` - The face vertices properly oriented
- `posOriented`  - `PETSC_TRUE` if the face was oriented with outward normal

Level: developer

-seealso: [](ch_unstructured), `DM`, `DMPLEX`, `DMPlexGetCone()`

# External Links
$(_doc_external("Dm/DMPlexGetOrientedFace"))
"""
function DMPlexGetOrientedFace(petsclib::PetscLibType, dm::PetscDM, cell::PetscInt, faceSize::PetscInt, face::Vector{PetscInt}, numCorners::PetscInt, indices::Vector{PetscInt}, origVertices::Vector{PetscInt}) end

@for_petsc function DMPlexGetOrientedFace(petsclib::$UnionPetscLib, dm::PetscDM, cell::$PetscInt, faceSize::$PetscInt, face::Vector{$PetscInt}, numCorners::$PetscInt, indices::Vector{$PetscInt}, origVertices::Vector{$PetscInt} )
	faceVertices = Vector{$PetscInt}(undef, ni);  # CHECK SIZE!!
	posOriented_ = Ref{PetscBool}()

    @chk ccall(
               (:DMPlexGetOrientedFace, $petsc_library),
               PetscErrorCode,
               (CDM, $PetscInt, $PetscInt, Ptr{$PetscInt}, $PetscInt, Ptr{$PetscInt}, Ptr{$PetscInt}, Ptr{$PetscInt}, Ptr{PetscBool}),
               dm, cell, faceSize, face, numCorners, indices, origVertices, faceVertices, posOriented_,
              )

	posOriented = posOriented_[]

	return faceVertices,posOriented
end 

"""
	subdm::PetscDM = DMPlexCreateSubmesh(petsclib::PetscLibType,dm::PetscDM, vertexLabel::DMLabel, value::PetscInt, markedFaces::PetscBool) 
Extract a hypersurface from the mesh using vertices defined by a label

Input Parameters:
- `dm`          - The original mesh
- `vertexLabel` - The `DMLabel` marking points contained in the surface
- `value`       - The label value to use
- `markedFaces` - `PETSC_TRUE` if surface faces are marked in addition to vertices, `PETSC_FALSE` if only vertices are marked

Output Parameter:
- `subdm` - The surface mesh

Level: developer

-seealso: [](ch_unstructured), `DM`, `DMPLEX`, `DMPlexGetSubpointMap()`, `DMGetLabel()`, `DMLabelSetValue()`

# External Links
$(_doc_external("Dm/DMPlexCreateSubmesh"))
"""
function DMPlexCreateSubmesh(petsclib::PetscLibType, dm::PetscDM, vertexLabel::DMLabel, value::PetscInt, markedFaces::PetscBool) end

@for_petsc function DMPlexCreateSubmesh(petsclib::$UnionPetscLib, dm::PetscDM, vertexLabel::DMLabel, value::$PetscInt, markedFaces::PetscBool )
	subdm_ = Ref{CDM}()

    @chk ccall(
               (:DMPlexCreateSubmesh, $petsc_library),
               PetscErrorCode,
               (CDM, DMLabel, $PetscInt, PetscBool, Ptr{CDM}),
               dm, vertexLabel, value, markedFaces, subdm_,
              )

	subdm = PetscDM(subdm_[], petsclib)

	return subdm
end 

"""
	subdm::PetscDM = DMPlexCreateCohesiveSubmesh(petsclib::PetscLibType,dm::PetscDM, hasLagrange::PetscBool, label::String, value::PetscInt) 
Extract from a mesh with cohesive cells the hypersurface defined by one face of the cells. Optionally, a label can be given to restrict the cells.

Input Parameters:
- `dm`          - The original mesh
- `hasLagrange` - The mesh has Lagrange unknowns in the cohesive cells
- `label`       - A label name, or `NULL`
- `value`       - A label value

Output Parameter:
- `subdm` - The surface mesh

Level: developer

-seealso: [](ch_unstructured), `DM`, `DMPLEX`, `DMPlexGetSubpointMap()`, `DMPlexCreateSubmesh()`

# External Links
$(_doc_external("Dm/DMPlexCreateCohesiveSubmesh"))
"""
function DMPlexCreateCohesiveSubmesh(petsclib::PetscLibType, dm::PetscDM, hasLagrange::PetscBool, label::String, value::PetscInt) end

@for_petsc function DMPlexCreateCohesiveSubmesh(petsclib::$UnionPetscLib, dm::PetscDM, hasLagrange::PetscBool, label::String, value::$PetscInt )
	subdm_ = Ref{CDM}()

    @chk ccall(
               (:DMPlexCreateCohesiveSubmesh, $petsc_library),
               PetscErrorCode,
               (CDM, PetscBool, Ptr{Cchar}, $PetscInt, Ptr{CDM}),
               dm, hasLagrange, label, value, subdm_,
              )

	subdm = PetscDM(subdm_[], petsclib)

	return subdm
end 

"""
	DMPlexReorderCohesiveSupports(petsclib::PetscLibType,dm::PetscDM) 
Ensure that face supports for cohesive end caps are ordered

Not Collective

Input Parameter:
- `dm` - The `DM` containing cohesive cells

Level: developer

-seealso: `DMPlexConstructCohesiveCells()`, `DMPlexCreateCohesiveSubmesh()`

# External Links
$(_doc_external("Dm/DMPlexReorderCohesiveSupports"))
"""
function DMPlexReorderCohesiveSupports(petsclib::PetscLibType, dm::PetscDM) end

@for_petsc function DMPlexReorderCohesiveSupports(petsclib::$UnionPetscLib, dm::PetscDM )

    @chk ccall(
               (:DMPlexReorderCohesiveSupports, $petsc_library),
               PetscErrorCode,
               (CDM,),
               dm,
              )


	return nothing
end 

"""
	DMPlexFilter(petsclib::PetscLibType,dm::PetscDM, cellLabel::DMLabel, value::PetscInt, ignoreLabelHalo::PetscBool, sanitizeSubmesh::PetscBool, ownershipTransferSF::PetscSF, subdm::PetscDM) 
Extract a subset of mesh cells defined by a label as a separate mesh

Input Parameters:
- `dm`              - The original mesh
- `cellLabel`       - The `DMLabel` marking cells contained in the new mesh
- `value`           - The label value to use
- `ignoreLabelHalo` - The flag indicating if labeled points that are in the halo are ignored
- `sanitizeSubmesh` - The flag indicating if a subpoint is forced to be owned by a rank that owns a subcell that contains that point in its closure

Output Parameters:
- `ownershipTransferSF` - The `PetscSF` representing the ownership transfers between parent local meshes due to submeshing.
- `subdm`               - The new mesh

Level: developer

-seealso: [](ch_unstructured), `DM`, `DMPLEX`, `DMPlexGetSubpointMap()`, `DMGetLabel()`, `DMLabelSetValue()`, `DMPlexCreateSubmesh()`

# External Links
$(_doc_external("Dm/DMPlexFilter"))
"""
function DMPlexFilter(petsclib::PetscLibType, dm::PetscDM, cellLabel::DMLabel, value::PetscInt, ignoreLabelHalo::PetscBool, sanitizeSubmesh::PetscBool, ownershipTransferSF::PetscSF, subdm::PetscDM) end

@for_petsc function DMPlexFilter(petsclib::$UnionPetscLib, dm::PetscDM, cellLabel::DMLabel, value::$PetscInt, ignoreLabelHalo::PetscBool, sanitizeSubmesh::PetscBool, ownershipTransferSF::PetscSF, subdm::PetscDM )
	subdm_ = Ref(subdm.ptr)

    @chk ccall(
               (:DMPlexFilter, $petsc_library),
               PetscErrorCode,
               (CDM, DMLabel, $PetscInt, PetscBool, PetscBool, Ptr{PetscSF}, Ptr{CDM}),
               dm, cellLabel, value, ignoreLabelHalo, sanitizeSubmesh, ownershipTransferSF, subdm_,
              )

	subdm.ptr = C_NULL

	return nothing
end 

"""
	DMPlexGetSubpointMap(petsclib::PetscLibType,dm::PetscDM, subpointMap::DMLabel) 
Returns a `DMLabel` with point dimension as values

Input Parameter:
- `dm` - The submesh `DM`

Output Parameter:
- `subpointMap` - The `DMLabel` of all the points from the original mesh in this submesh, or `NULL` if this is not a submesh

Level: developer

-seealso: [](ch_unstructured), `DM`, `DMPLEX`, `DMPlexCreateSubmesh()`, `DMPlexGetSubpointIS()`

# External Links
$(_doc_external("Dm/DMPlexGetSubpointMap"))
"""
function DMPlexGetSubpointMap(petsclib::PetscLibType, dm::PetscDM, subpointMap::DMLabel) end

@for_petsc function DMPlexGetSubpointMap(petsclib::$UnionPetscLib, dm::PetscDM, subpointMap::DMLabel )

    @chk ccall(
               (:DMPlexGetSubpointMap, $petsc_library),
               PetscErrorCode,
               (CDM, Ptr{DMLabel}),
               dm, subpointMap,
              )


	return nothing
end 

"""
	DMPlexSetSubpointMap(petsclib::PetscLibType,dm::PetscDM, subpointMap::DMLabel) 
Sets the `DMLabel` with point dimension as values

Input Parameters:
- `dm`          - The submesh `DM`
- `subpointMap` - The `DMLabel` of all the points from the original mesh in this submesh

Level: developer

-seealso: [](ch_unstructured), `DM`, `DMPLEX`, `DMPlexCreateSubmesh()`, `DMPlexGetSubpointIS()`

# External Links
$(_doc_external("Dm/DMPlexSetSubpointMap"))
"""
function DMPlexSetSubpointMap(petsclib::PetscLibType, dm::PetscDM, subpointMap::DMLabel) end

@for_petsc function DMPlexSetSubpointMap(petsclib::$UnionPetscLib, dm::PetscDM, subpointMap::DMLabel )

    @chk ccall(
               (:DMPlexSetSubpointMap, $petsc_library),
               PetscErrorCode,
               (CDM, DMLabel),
               dm, subpointMap,
              )


	return nothing
end 

"""
	DMPlexGetSubpointIS(petsclib::PetscLibType,dm::PetscDM, subpointIS::IS) 
Returns an `IS` covering the entire subdm chart with the original points as data

Input Parameter:
- `dm` - The submesh `DM`

Output Parameter:
- `subpointIS` - The `IS` of all the points from the original mesh in this submesh, or `NULL` if this is not a submesh

Level: developer

-seealso: [](ch_unstructured), `DM`, `DMPLEX`, `DMPlexCreateSubmesh()`, `DMPlexGetSubpointMap()`

# External Links
$(_doc_external("Dm/DMPlexGetSubpointIS"))
"""
function DMPlexGetSubpointIS(petsclib::PetscLibType, dm::PetscDM, subpointIS::IS) end

@for_petsc function DMPlexGetSubpointIS(petsclib::$UnionPetscLib, dm::PetscDM, subpointIS::IS )

    @chk ccall(
               (:DMPlexGetSubpointIS, $petsc_library),
               PetscErrorCode,
               (CDM, Ptr{IS}),
               dm, subpointIS,
              )


	return nothing
end 

"""
	DMGetEnclosureRelation(petsclib::PetscLibType,dmA::PetscDM, dmB::PetscDM, rel::DMEnclosureType) 
Get the relationship between `dmA` and `dmB`

Input Parameters:
- `dmA` - The first `DM`
- `dmB` - The second `DM`

Output Parameter:
- `rel` - The relation of `dmA` to `dmB`

Level: intermediate

-seealso: [](ch_unstructured), `DM`, `DMPLEX`, `DMGetEnclosurePoint()`

# External Links
$(_doc_external("Dm/DMGetEnclosureRelation"))
"""
function DMGetEnclosureRelation(petsclib::PetscLibType, dmA::PetscDM, dmB::PetscDM, rel::DMEnclosureType) end

@for_petsc function DMGetEnclosureRelation(petsclib::$UnionPetscLib, dmA::PetscDM, dmB::PetscDM, rel::DMEnclosureType )

    @chk ccall(
               (:DMGetEnclosureRelation, $petsc_library),
               PetscErrorCode,
               (CDM, CDM, Ptr{DMEnclosureType}),
               dmA, dmB, rel,
              )


	return nothing
end 

"""
	pA::PetscInt = DMGetEnclosurePoint(petsclib::PetscLibType,dmA::PetscDM, dmB::PetscDM, etype::DMEnclosureType, pB::PetscInt) 
Get the point `pA` in `dmA` which corresponds to the point `pB` in `dmB`

Input Parameters:
- `dmA`   - The first `DM`
- `dmB`   - The second `DM`
- `etype` - The type of enclosure relation that `dmA` has to `dmB`
- `pB`    - A point of `dmB`

Output Parameter:
- `pA` - The corresponding point of `dmA`

Level: intermediate

-seealso: [](ch_unstructured), `DM`, `DMPLEX`, `DMGetEnclosureRelation()`

# External Links
$(_doc_external("Dm/DMGetEnclosurePoint"))
"""
function DMGetEnclosurePoint(petsclib::PetscLibType, dmA::PetscDM, dmB::PetscDM, etype::DMEnclosureType, pB::PetscInt) end

@for_petsc function DMGetEnclosurePoint(petsclib::$UnionPetscLib, dmA::PetscDM, dmB::PetscDM, etype::DMEnclosureType, pB::$PetscInt )
	pA_ = Ref{$PetscInt}()

    @chk ccall(
               (:DMGetEnclosurePoint, $petsc_library),
               PetscErrorCode,
               (CDM, CDM, DMEnclosureType, $PetscInt, Ptr{$PetscInt}),
               dmA, dmB, etype, pB, pA_,
              )

	pA = pA_[]

	return pA
end 

"""
	dm::PetscDM = DMPlexCreateExodus(petsclib::PetscLibType,comm::MPI_Comm, exoid::PetscExodusIIInt, interpolate::PetscBool) 
Create a `DMPLEX` mesh from an ExodusII file ID.

Collective

Input Parameters:
- `comm`        - The MPI communicator
- `exoid`       - The ExodusII id associated with a exodus file and obtained using ex_open
- `interpolate` - Create faces and edges in the mesh

Output Parameter:
- `dm` - The `DM` object representing the mesh

Level: beginner

-seealso: [](ch_unstructured), `DM`, `PETSCVIEWEREXODUSII`, `DMPLEX`, `DMCreate()`

# External Links
$(_doc_external("Dm/DMPlexCreateExodus"))
"""
function DMPlexCreateExodus(petsclib::PetscLibType, comm::MPI_Comm, exoid::PetscExodusIIInt, interpolate::PetscBool) end

@for_petsc function DMPlexCreateExodus(petsclib::$UnionPetscLib, comm::MPI_Comm, exoid::PetscExodusIIInt, interpolate::PetscBool )
	dm_ = Ref{CDM}()

    @chk ccall(
               (:DMPlexCreateExodus, $petsc_library),
               PetscErrorCode,
               (MPI_Comm, PetscExodusIIInt, PetscBool, Ptr{CDM}),
               comm, exoid, interpolate, dm_,
              )

	dm = PetscDM(dm_[], petsclib)

	return dm
end 

"""
	Nf::PetscInt,v0::Vector{PetscReal},J::Vector{PetscReal},invJ::Vector{PetscReal},detJ::Vector{PetscReal} = DMPlexRefineRegularGetAffineFaceTransforms(petsclib::PetscLibType,tr::DMPlexTransform, ct::DMPolytopeType) 
Gets the affine map from the reference face cell to each face in the given cell

Input Parameters:
- `tr` - The `DMPlexTransform` object
- `ct` - The cell type

Output Parameters:
- `Nf`   - The number of faces for this cell type
- `v0`   - The translation of the first vertex for each face
- `J`    - The Jacobian for each face (map from original cell to subcell)
- `invJ` - The inverse Jacobian for each face
- `detJ` - The determinant of the Jacobian for each face

Level: developer

-seealso: `DMPLEX`, `DM`, `DMPlexTransform`, `DMPolytopeType`, `DMPlexCellRefinerGetAffineTransforms()`

# External Links
$(_doc_external("Dm/DMPlexRefineRegularGetAffineFaceTransforms"))
"""
function DMPlexRefineRegularGetAffineFaceTransforms(petsclib::PetscLibType, tr::DMPlexTransform, ct::DMPolytopeType) end

@for_petsc function DMPlexRefineRegularGetAffineFaceTransforms(petsclib::$UnionPetscLib, tr::DMPlexTransform, ct::DMPolytopeType )
	Nf_ = Ref{$PetscInt}()
	v0_ = Ref{Ptr{$PetscReal}}()
	J_ = Ref{Ptr{$PetscReal}}()
	invJ_ = Ref{Ptr{$PetscReal}}()
	detJ_ = Ref{Ptr{$PetscReal}}()

    @chk ccall(
               (:DMPlexRefineRegularGetAffineFaceTransforms, $petsc_library),
               PetscErrorCode,
               (DMPlexTransform, DMPolytopeType, Ptr{$PetscInt}, Ptr{Ptr{$PetscReal}}, Ptr{Ptr{$PetscReal}}, Ptr{Ptr{$PetscReal}}, Ptr{Ptr{$PetscReal}}),
               tr, ct, Nf_, v0_, J_, invJ_, detJ_,
              )

	Nf = Nf_[]
	v0 = unsafe_wrap(Array, v0_[], VecGetLocalSize(petsclib, x); own = false)
	J = unsafe_wrap(Array, J_[], VecGetLocalSize(petsclib, x); own = false)
	invJ = unsafe_wrap(Array, invJ_[], VecGetLocalSize(petsclib, x); own = false)
	detJ = unsafe_wrap(Array, detJ_[], VecGetLocalSize(petsclib, x); own = false)

	return Nf,v0,J,invJ,detJ
end 

"""
	Nc::PetscInt,v0::Vector{PetscReal},J::Vector{PetscReal},invJ::Vector{PetscReal} = DMPlexRefineRegularGetAffineTransforms(petsclib::PetscLibType,tr::DMPlexTransform, ct::DMPolytopeType) 
Gets the affine map from the reference cell to each subcell

Input Parameters:
- `tr` - The `DMPlexTransform` object
- `ct` - The cell type

Output Parameters:
- `Nc`   - The number of subcells produced from this cell type
- `v0`   - The translation of the first vertex for each subcell, an array of length dim * Nc. Pass `NULL` to ignore.
- `J`    - The Jacobian for each subcell (map from reference cell to subcell), an array of length dim^2 * Nc. Pass `NULL` to ignore.
- `invJ` - The inverse Jacobian for each subcell, an array of length dim^2 * Nc. Pass `NULL` to ignore.

Level: developer

-seealso: `DMPLEX`, `DM`, `DMPlexTransform`, `DMPolytopeType`, `DMPlexRefineRegularGetAffineFaceTransforms()`, `DMPLEXREFINEREGULAR`

# External Links
$(_doc_external("Dm/DMPlexRefineRegularGetAffineTransforms"))
"""
function DMPlexRefineRegularGetAffineTransforms(petsclib::PetscLibType, tr::DMPlexTransform, ct::DMPolytopeType) end

@for_petsc function DMPlexRefineRegularGetAffineTransforms(petsclib::$UnionPetscLib, tr::DMPlexTransform, ct::DMPolytopeType )
	Nc_ = Ref{$PetscInt}()
	v0_ = Ref{Ptr{$PetscReal}}()
	J_ = Ref{Ptr{$PetscReal}}()
	invJ_ = Ref{Ptr{$PetscReal}}()

    @chk ccall(
               (:DMPlexRefineRegularGetAffineTransforms, $petsc_library),
               PetscErrorCode,
               (DMPlexTransform, DMPolytopeType, Ptr{$PetscInt}, Ptr{Ptr{$PetscReal}}, Ptr{Ptr{$PetscReal}}, Ptr{Ptr{$PetscReal}}),
               tr, ct, Nc_, v0_, J_, invJ_,
              )

	Nc = Nc_[]
	v0 = unsafe_wrap(Array, v0_[], VecGetLocalSize(petsclib, x); own = false)
	J = unsafe_wrap(Array, J_[], VecGetLocalSize(petsclib, x); own = false)
	invJ = unsafe_wrap(Array, invJ_[], VecGetLocalSize(petsclib, x); own = false)

	return Nc,v0,J,invJ
end 

"""
	DMSlicedSetGhosts(petsclib::PetscLibType,dm::PetscDM, bs::PetscInt, nloc::PetscInt, Nghosts::PetscInt, ghosts::Vector{PetscInt}) 
Sets the global indices of other processes elements that will
be ghosts on this process

Not Collective

Input Parameters:
- `dm`      - the `DMSLICED` object
- `bs`      - block size
- `nlocal`  - number of local (owned, non-ghost) blocks
- `Nghosts` - number of ghost blocks on this process
- `ghosts`  - global indices of each ghost block

Level: advanced

-seealso: `DM`, `DMSLICED`, `DMDestroy()`, `DMCreateGlobalVector()`

# External Links
$(_doc_external("Dm/DMSlicedSetGhosts"))
"""
function DMSlicedSetGhosts(petsclib::PetscLibType, dm::PetscDM, bs::PetscInt, nloc::PetscInt, Nghosts::PetscInt, ghosts::Vector{PetscInt}) end

@for_petsc function DMSlicedSetGhosts(petsclib::$UnionPetscLib, dm::PetscDM, bs::$PetscInt, nloc::$PetscInt, Nghosts::$PetscInt, ghosts::Vector{$PetscInt} )

    @chk ccall(
               (:DMSlicedSetGhosts, $petsc_library),
               PetscErrorCode,
               (CDM, $PetscInt, $PetscInt, $PetscInt, Ptr{$PetscInt}),
               dm, bs, nloc, Nghosts, ghosts,
              )


	return nothing
end 

"""
	DMSlicedSetPreallocation(petsclib::PetscLibType,dm::PetscDM, d_nz::PetscInt, d_nnz::Vector{PetscInt}, o_nz::PetscInt, o_nnz::Vector{PetscInt}) 
sets the matrix memory preallocation for matrices computed by `DMSLICED`

Not Collective

Input Parameters:
- `dm`    - the `DM` object
- `d_nz`  - number of block nonzeros per block row in diagonal portion of local
submatrix  (same for all local rows)
- `d_nnz` - array containing the number of block nonzeros in the various block rows
of the in diagonal portion of the local (possibly different for each block
row) or `NULL`.
- `o_nz`  - number of block nonzeros per block row in the off-diagonal portion of local
submatrix (same for all local rows).
- `o_nnz` - array containing the number of nonzeros in the various block rows of the
off-diagonal portion of the local submatrix (possibly different for
each block row) or `NULL`.

Level: advanced

-seealso: `DM`, `DMSLICED`, `DMDestroy()`, `DMCreateGlobalVector()`, `MatMPIAIJSetPreallocation()`,
`MatMPIBAIJSetPreallocation()`, `DMSlicedGetMatrix()`, `DMSlicedSetBlockFills()`

# External Links
$(_doc_external("Dm/DMSlicedSetPreallocation"))
"""
function DMSlicedSetPreallocation(petsclib::PetscLibType, dm::PetscDM, d_nz::PetscInt, d_nnz::Vector{PetscInt}, o_nz::PetscInt, o_nnz::Vector{PetscInt}) end

@for_petsc function DMSlicedSetPreallocation(petsclib::$UnionPetscLib, dm::PetscDM, d_nz::$PetscInt, d_nnz::Vector{$PetscInt}, o_nz::$PetscInt, o_nnz::Vector{$PetscInt} )

    @chk ccall(
               (:DMSlicedSetPreallocation, $petsc_library),
               PetscErrorCode,
               (CDM, $PetscInt, Ptr{$PetscInt}, $PetscInt, Ptr{$PetscInt}),
               dm, d_nz, d_nnz, o_nz, o_nnz,
              )


	return nothing
end 

"""
	DMSlicedSetBlockFills(petsclib::PetscLibType,dm::PetscDM, dfill::Vector{PetscInt}, ofill::Vector{PetscInt}) 
Sets the fill pattern in each block for a multi
of the matrix returned by `DMSlicedGetMatrix()`.

Logically Collective

Input Parameters:
- `dm`    - the `DM` object
- `dfill` - the fill pattern in the diagonal block (may be `NULL`, means use dense block)
- `ofill` - the fill pattern in the off-diagonal blocks

Level: advanced

-seealso: `DM`, `DMSLICED`, `DMSlicedGetMatrix()`, `DMDASetBlockFills()`

# External Links
$(_doc_external("Dm/DMSlicedSetBlockFills"))
"""
function DMSlicedSetBlockFills(petsclib::PetscLibType, dm::PetscDM, dfill::Vector{PetscInt}, ofill::Vector{PetscInt}) end

@for_petsc function DMSlicedSetBlockFills(petsclib::$UnionPetscLib, dm::PetscDM, dfill::Vector{$PetscInt}, ofill::Vector{$PetscInt} )

    @chk ccall(
               (:DMSlicedSetBlockFills, $petsc_library),
               PetscErrorCode,
               (CDM, Ptr{$PetscInt}, Ptr{$PetscInt}),
               dm, dfill, ofill,
              )


	return nothing
end 

"""
	dm::PetscDM = DMSlicedCreate(petsclib::PetscLibType,comm::MPI_Comm, bs::PetscInt, nloc::PetscInt, Nghosts::PetscInt, ghosts::Vector{PetscInt}, d_nnz::Vector{PetscInt}, o_nnz::Vector{PetscInt}) 
Creates a `DM` object, used to manage data for a unstructured problem

Collective

Input Parameters:
- `comm`    - the processors that will share the global vector
- `bs`      - the block size
- `nlocal`  - number of vector entries on this process
- `Nghosts` - number of ghost points needed on this process
- `ghosts`  - global indices of all ghost points for this process
- `d_nnz`   - matrix preallocation information representing coupling within this process
- `o_nnz`   - matrix preallocation information representing coupling between this process and other processes

Output Parameter:
- `dm` - the slice object

Level: advanced

-seealso: `DM`, `DMSLICED`, `DMDestroy()`, `DMCreateGlobalVector()`, `DMSetType()`, `DMSlicedSetGhosts()`, `DMSlicedSetPreallocation()`,
`VecGhostUpdateBegin()`, `VecGhostUpdateEnd()`,
`VecGhostGetLocalForm()`, `VecGhostRestoreLocalForm()`

# External Links
$(_doc_external("Dm/DMSlicedCreate"))
"""
function DMSlicedCreate(petsclib::PetscLibType, comm::MPI_Comm, bs::PetscInt, nloc::PetscInt, Nghosts::PetscInt, ghosts::Vector{PetscInt}, d_nnz::Vector{PetscInt}, o_nnz::Vector{PetscInt}) end

@for_petsc function DMSlicedCreate(petsclib::$UnionPetscLib, comm::MPI_Comm, bs::$PetscInt, nloc::$PetscInt, Nghosts::$PetscInt, ghosts::Vector{$PetscInt}, d_nnz::Vector{$PetscInt}, o_nnz::Vector{$PetscInt} )
	dm_ = Ref{CDM}()

    @chk ccall(
               (:DMSlicedCreate, $petsc_library),
               PetscErrorCode,
               (MPI_Comm, $PetscInt, $PetscInt, $PetscInt, Ptr{$PetscInt}, Ptr{$PetscInt}, Ptr{$PetscInt}, Ptr{CDM}),
               comm, bs, nloc, Nghosts, ghosts, d_nnz, o_nnz, dm_,
              )

	dm = PetscDM(dm_[], petsclib)

	return dm
end 

"""
	x::PetscScalar,y::PetscScalar = DMDAMapCoordsToPeriodicDomain(petsclib::PetscLibType,da::PetscDM) 

# External Links
$(_doc_external("Ts/DMDAMapCoordsToPeriodicDomain"))
"""
function DMDAMapCoordsToPeriodicDomain(petsclib::PetscLibType, da::PetscDM) end

@for_petsc function DMDAMapCoordsToPeriodicDomain(petsclib::$UnionPetscLib, da::PetscDM )
	x_ = Ref{$PetscScalar}()
	y_ = Ref{$PetscScalar}()

    @chk ccall(
               (:DMDAMapCoordsToPeriodicDomain, $petsc_library),
               PetscErrorCode,
               (CDM, Ptr{$PetscScalar}, Ptr{$PetscScalar}),
               da, x_, y_,
              )

	x = x_[]
	y = y_[]

	return x,y
end 

"""
	DMTSSetIFunction(petsclib::PetscLibType,dm::PetscDM, func::TSIFunctionFn, ctx::Cvoid) 
set `TS` implicit function evaluation function into a `DMTS`

Not Collective

Input Parameters:
- `dm`   - `DM` to be used with `TS`
- `func` - function evaluating f(t,u,u_t)
- `ctx`  - context for residual evaluation

Level: developer

-seealso: [](ch_ts), `DMTS`, `TS`, `DM`, `TSIFunctionFn`

# External Links
$(_doc_external("Ts/DMTSSetIFunction"))
"""
function DMTSSetIFunction(petsclib::PetscLibType, dm::PetscDM, func::TSIFunctionFn, ctx::Cvoid) end

@for_petsc function DMTSSetIFunction(petsclib::$UnionPetscLib, dm::PetscDM, func::TSIFunctionFn, ctx::Cvoid )

    @chk ccall(
               (:DMTSSetIFunction, $petsc_library),
               PetscErrorCode,
               (CDM, Ptr{TSIFunctionFn}, Ptr{Cvoid}),
               dm, func, ctx,
              )


	return nothing
end 

"""
	DMTSSetIFunctionContextDestroy(petsclib::PetscLibType,dm::PetscDM, f::PetscCtxDestroyFn) 
set `TS` implicit evaluation context destroy function into a `DMTS`

Not Collective

Input Parameters:
- `dm` - `DM` to be used with `TS`
- `f`  - implicit evaluation context destroy function, see `PetscCtxDestroyFn` for its calling sequence

Level: developer

-seealso: [](ch_ts), `DMTS`, `DM`, `TS`, `DMTSSetIFunction()`, `TSSetIFunction()`, `PetscCtxDestroyFn`

# External Links
$(_doc_external("Ts/DMTSSetIFunctionContextDestroy"))
"""
function DMTSSetIFunctionContextDestroy(petsclib::PetscLibType, dm::PetscDM, f::PetscCtxDestroyFn) end

@for_petsc function DMTSSetIFunctionContextDestroy(petsclib::$UnionPetscLib, dm::PetscDM, f::PetscCtxDestroyFn )

    @chk ccall(
               (:DMTSSetIFunctionContextDestroy, $petsc_library),
               PetscErrorCode,
               (CDM, Ptr{PetscCtxDestroyFn}),
               dm, f,
              )


	return nothing
end 

"""
	DMTSGetIFunction(petsclib::PetscLibType,dm::PetscDM, func::TSIFunctionFn, ctx::Cvoid) 
get `TS` implicit residual evaluation function from a `DMTS`

Not Collective

Input Parameter:
- `dm` - `DM` to be used with `TS`

Output Parameters:
- `func` - function evaluation function, for calling sequence see `TSIFunctionFn`
- `ctx`  - context for residual evaluation

Level: developer

-seealso: [](ch_ts), `DMTS`, `TS`, `DM`, `DMTSSetIFunction()`, `TSIFunctionFn`

# External Links
$(_doc_external("Ts/DMTSGetIFunction"))
"""
function DMTSGetIFunction(petsclib::PetscLibType, dm::PetscDM, func::TSIFunctionFn, ctx::Cvoid) end

@for_petsc function DMTSGetIFunction(petsclib::$UnionPetscLib, dm::PetscDM, func::TSIFunctionFn, ctx::Cvoid )

    @chk ccall(
               (:DMTSGetIFunction, $petsc_library),
               PetscErrorCode,
               (CDM, TSIFunctionFn, Cvoid),
               dm, func, ctx,
              )


	return nothing
end 

"""
	DMTSSetI2Function(petsclib::PetscLibType,dm::PetscDM, fun::TSI2FunctionFn, ctx::Cvoid) 
set `TS` implicit function evaluation function for 2nd order systems into a `TSDM`

Not Collective

Input Parameters:
- `dm`  - `DM` to be used with `TS`
- `fun` - function evaluation routine
- `ctx` - context for residual evaluation

Level: developer

-seealso: [](ch_ts), `DMTS`, `DM`, `TS`, `TSSetI2Function()`

# External Links
$(_doc_external("Ts/DMTSSetI2Function"))
"""
function DMTSSetI2Function(petsclib::PetscLibType, dm::PetscDM, fun::TSI2FunctionFn, ctx::Cvoid) end

@for_petsc function DMTSSetI2Function(petsclib::$UnionPetscLib, dm::PetscDM, fun::TSI2FunctionFn, ctx::Cvoid )

    @chk ccall(
               (:DMTSSetI2Function, $petsc_library),
               PetscErrorCode,
               (CDM, Ptr{TSI2FunctionFn}, Ptr{Cvoid}),
               dm, fun, ctx,
              )


	return nothing
end 

"""
	DMTSSetI2FunctionContextDestroy(petsclib::PetscLibType,dm::PetscDM, f::PetscCtxDestroyFn) 
set `TS` implicit evaluation for 2nd order systems context destroy into a `DMTS`

Not Collective

Input Parameters:
- `dm` - `DM` to be used with `TS`
- `f`  - implicit evaluation context destroy function, see `PetscCtxDestroyFn` for its calling sequence

Level: developer

-seealso: [](ch_ts), `DMTS`, `TSSetI2FunctionContextDestroy()`, `DMTSSetI2Function()`, `TSSetI2Function()`

# External Links
$(_doc_external("Ts/DMTSSetI2FunctionContextDestroy"))
"""
function DMTSSetI2FunctionContextDestroy(petsclib::PetscLibType, dm::PetscDM, f::PetscCtxDestroyFn) end

@for_petsc function DMTSSetI2FunctionContextDestroy(petsclib::$UnionPetscLib, dm::PetscDM, f::PetscCtxDestroyFn )

    @chk ccall(
               (:DMTSSetI2FunctionContextDestroy, $petsc_library),
               PetscErrorCode,
               (CDM, Ptr{PetscCtxDestroyFn}),
               dm, f,
              )


	return nothing
end 

"""
	DMTSGetI2Function(petsclib::PetscLibType,dm::PetscDM, fun::TSI2FunctionFn, ctx::Cvoid) 
get `TS` implicit residual evaluation function for 2nd order systems from a `DMTS`

Not Collective

Input Parameter:
- `dm` - `DM` to be used with `TS`

Output Parameters:
- `fun` - function evaluation function, for calling sequence see `TSSetI2Function()`
- `ctx` - context for residual evaluation

Level: developer

-seealso: [](ch_ts), `DMTS`, `DM`, `TS`, `DMTSSetI2Function()`, `TSGetI2Function()`

# External Links
$(_doc_external("Ts/DMTSGetI2Function"))
"""
function DMTSGetI2Function(petsclib::PetscLibType, dm::PetscDM, fun::TSI2FunctionFn, ctx::Cvoid) end

@for_petsc function DMTSGetI2Function(petsclib::$UnionPetscLib, dm::PetscDM, fun::TSI2FunctionFn, ctx::Cvoid )

    @chk ccall(
               (:DMTSGetI2Function, $petsc_library),
               PetscErrorCode,
               (CDM, TSI2FunctionFn, Cvoid),
               dm, fun, ctx,
              )


	return nothing
end 

"""
	DMTSSetI2Jacobian(petsclib::PetscLibType,dm::PetscDM, jac::TSI2JacobianFn, ctx::Cvoid) 
set `TS` implicit Jacobian evaluation function for 2nd order systems from a `DMTS`

Not Collective

Input Parameters:
- `dm`  - `DM` to be used with `TS`
- `jac` - Jacobian evaluation routine
- `ctx` - context for Jacobian evaluation

Level: developer

-seealso: [](ch_ts), `DMTS`, `DM`, `TS`, `TSI2JacobianFn`, `TSSetI2Jacobian()`

# External Links
$(_doc_external("Ts/DMTSSetI2Jacobian"))
"""
function DMTSSetI2Jacobian(petsclib::PetscLibType, dm::PetscDM, jac::TSI2JacobianFn, ctx::Cvoid) end

@for_petsc function DMTSSetI2Jacobian(petsclib::$UnionPetscLib, dm::PetscDM, jac::TSI2JacobianFn, ctx::Cvoid )

    @chk ccall(
               (:DMTSSetI2Jacobian, $petsc_library),
               PetscErrorCode,
               (CDM, Ptr{TSI2JacobianFn}, Ptr{Cvoid}),
               dm, jac, ctx,
              )


	return nothing
end 

"""
	DMTSSetI2JacobianContextDestroy(petsclib::PetscLibType,dm::PetscDM, f::PetscCtxDestroyFn) 
set `TS` implicit Jacobian evaluation for 2nd order systems context destroy function into a `DMTS`

Not Collective

Input Parameters:
- `dm` - `DM` to be used with `TS`
- `f`  - implicit Jacobian evaluation context destroy function, see `PetscCtxDestroyFn` for its calling sequence

Level: developer

-seealso: [](ch_ts), `DMTS`, `DM`, `TS`, `TSSetI2JacobianContextDestroy()`, `DMTSSetI2Jacobian()`, `TSSetI2Jacobian()`

# External Links
$(_doc_external("Ts/DMTSSetI2JacobianContextDestroy"))
"""
function DMTSSetI2JacobianContextDestroy(petsclib::PetscLibType, dm::PetscDM, f::PetscCtxDestroyFn) end

@for_petsc function DMTSSetI2JacobianContextDestroy(petsclib::$UnionPetscLib, dm::PetscDM, f::PetscCtxDestroyFn )

    @chk ccall(
               (:DMTSSetI2JacobianContextDestroy, $petsc_library),
               PetscErrorCode,
               (CDM, Ptr{PetscCtxDestroyFn}),
               dm, f,
              )


	return nothing
end 

"""
	DMTSGetI2Jacobian(petsclib::PetscLibType,dm::PetscDM, jac::TSI2JacobianFn, ctx::Cvoid) 
get `TS` implicit Jacobian evaluation function for 2nd order systems from a `DMTS`

Not Collective

Input Parameter:
- `dm` - `DM` to be used with `TS`

Output Parameters:
- `jac` - Jacobian evaluation function,  for calling sequence see `TSI2JacobianFn`
- `ctx` - context for Jacobian evaluation

Level: developer

-seealso: [](ch_ts), `DMTS`, `DM`, `TS`, `DMTSSetI2Jacobian()`, `TSGetI2Jacobian()`, `TSI2JacobianFn`

# External Links
$(_doc_external("Ts/DMTSGetI2Jacobian"))
"""
function DMTSGetI2Jacobian(petsclib::PetscLibType, dm::PetscDM, jac::TSI2JacobianFn, ctx::Cvoid) end

@for_petsc function DMTSGetI2Jacobian(petsclib::$UnionPetscLib, dm::PetscDM, jac::TSI2JacobianFn, ctx::Cvoid )

    @chk ccall(
               (:DMTSGetI2Jacobian, $petsc_library),
               PetscErrorCode,
               (CDM, TSI2JacobianFn, Cvoid),
               dm, jac, ctx,
              )


	return nothing
end 

"""
	DMTSSetRHSFunction(petsclib::PetscLibType,dm::PetscDM, func::TSRHSFunctionFn, ctx::Cvoid) 
set `TS` explicit residual evaluation function into a `DMTS`

Not Collective

Input Parameters:
- `dm`   - `DM` to be used with `TS`
- `func` - RHS function evaluation routine, see `TSRHSFunctionFn` for the calling sequence
- `ctx`  - context for residual evaluation

Level: developer

-seealso: [](ch_ts), `DMTS`, `DM`, `TS`, `TSRHSFunctionFn`

# External Links
$(_doc_external("Ts/DMTSSetRHSFunction"))
"""
function DMTSSetRHSFunction(petsclib::PetscLibType, dm::PetscDM, func::TSRHSFunctionFn, ctx::Cvoid) end

@for_petsc function DMTSSetRHSFunction(petsclib::$UnionPetscLib, dm::PetscDM, func::TSRHSFunctionFn, ctx::Cvoid )

    @chk ccall(
               (:DMTSSetRHSFunction, $petsc_library),
               PetscErrorCode,
               (CDM, Ptr{TSRHSFunctionFn}, Ptr{Cvoid}),
               dm, func, ctx,
              )


	return nothing
end 

"""
	DMTSSetRHSFunctionContextDestroy(petsclib::PetscLibType,dm::PetscDM, f::PetscCtxDestroyFn) 
set `TS` explicit residual evaluation context destroy function into a `DMTS`

Not Collective

Input Parameters:
- `dm` - `DM` to be used with `TS`
- `f`  - explicit evaluation context destroy function, see `PetscCtxDestroyFn` for its calling sequence

Level: developer

-seealso: [](ch_ts), `DMTS`, `TSSetRHSFunctionContextDestroy()`, `DMTSSetRHSFunction()`, `TSSetRHSFunction()`

# External Links
$(_doc_external("Ts/DMTSSetRHSFunctionContextDestroy"))
"""
function DMTSSetRHSFunctionContextDestroy(petsclib::PetscLibType, dm::PetscDM, f::PetscCtxDestroyFn) end

@for_petsc function DMTSSetRHSFunctionContextDestroy(petsclib::$UnionPetscLib, dm::PetscDM, f::PetscCtxDestroyFn )

    @chk ccall(
               (:DMTSSetRHSFunctionContextDestroy, $petsc_library),
               PetscErrorCode,
               (CDM, Ptr{PetscCtxDestroyFn}),
               dm, f,
              )


	return nothing
end 

"""
	DMTSSetTransientVariable(petsclib::PetscLibType,dm::PetscDM, tvar::TSTransientVariableFn, ctx::Cvoid) 
sets function to transform from state to transient variables into a `DMTS`

Logically Collective

Input Parameters:
- `dm`   - `DM` to be used with `TS`
- `tvar` - a function that transforms to transient variables, see `TSTransientVariableFn` for the calling sequence
- `ctx`  - a context for tvar

Level: developer

-seealso: [](ch_ts), `DMTS`, `TS`, `TSBDF`, `TSSetTransientVariable()`, `DMTSGetTransientVariable()`, `DMTSSetIFunction()`, `DMTSSetIJacobian()`, `TSTransientVariableFn`

# External Links
$(_doc_external("Ts/DMTSSetTransientVariable"))
"""
function DMTSSetTransientVariable(petsclib::PetscLibType, dm::PetscDM, tvar::TSTransientVariableFn, ctx::Cvoid) end

@for_petsc function DMTSSetTransientVariable(petsclib::$UnionPetscLib, dm::PetscDM, tvar::TSTransientVariableFn, ctx::Cvoid )

    @chk ccall(
               (:DMTSSetTransientVariable, $petsc_library),
               PetscErrorCode,
               (CDM, Ptr{TSTransientVariableFn}, Ptr{Cvoid}),
               dm, tvar, ctx,
              )


	return nothing
end 

"""
	DMTSGetTransientVariable(petsclib::PetscLibType,dm::PetscDM, tvar::TSTransientVariableFn, ctx::Cvoid) 
gets function to transform from state to transient variables set with `DMTSSetTransientVariable()` from a `TSDM`

Logically Collective

Input Parameter:
- `dm` - `DM` to be used with `TS`

Output Parameters:
- `tvar` - a function that transforms to transient variables, see `TSTransientVariableFn` for the calling sequence
- `ctx`  - a context for tvar

Level: developer

-seealso: [](ch_ts), `DMTS`, `DM`, `DMTSSetTransientVariable()`, `DMTSGetIFunction()`, `DMTSGetIJacobian()`, `TSTransientVariableFn`

# External Links
$(_doc_external("Ts/DMTSGetTransientVariable"))
"""
function DMTSGetTransientVariable(petsclib::PetscLibType, dm::PetscDM, tvar::TSTransientVariableFn, ctx::Cvoid) end

@for_petsc function DMTSGetTransientVariable(petsclib::$UnionPetscLib, dm::PetscDM, tvar::TSTransientVariableFn, ctx::Cvoid )

    @chk ccall(
               (:DMTSGetTransientVariable, $petsc_library),
               PetscErrorCode,
               (CDM, TSTransientVariableFn, Ptr{Cvoid}),
               dm, tvar, ctx,
              )


	return nothing
end 

"""
	DMTSGetSolutionFunction(petsclib::PetscLibType,dm::PetscDM, func::TSSolutionFn, ctx::Cvoid) 
gets the `TS` solution evaluation function from a `DMTS`

Not Collective

Input Parameter:
- `dm` - `DM` to be used with `TS`

Output Parameters:
- `func` - solution function evaluation function, for calling sequence see `TSSolutionFn`
- `ctx`  - context for solution evaluation

Level: developer

-seealso: [](ch_ts), `DMTS`, `TS`, `DM`, `DMTSSetSolutionFunction()`, `TSSolutionFn`

# External Links
$(_doc_external("Ts/DMTSGetSolutionFunction"))
"""
function DMTSGetSolutionFunction(petsclib::PetscLibType, dm::PetscDM, func::TSSolutionFn, ctx::Cvoid) end

@for_petsc function DMTSGetSolutionFunction(petsclib::$UnionPetscLib, dm::PetscDM, func::TSSolutionFn, ctx::Cvoid )

    @chk ccall(
               (:DMTSGetSolutionFunction, $petsc_library),
               PetscErrorCode,
               (CDM, TSSolutionFn, Cvoid),
               dm, func, ctx,
              )


	return nothing
end 

"""
	DMTSSetSolutionFunction(petsclib::PetscLibType,dm::PetscDM, func::TSSolutionFn, ctx::Cvoid) 
set `TS` solution evaluation function into a `DMTS`

Not Collective

Input Parameters:
- `dm`   - `DM` to be used with `TS`
- `func` - solution function evaluation routine, for calling sequence see `TSSolutionFn`
- `ctx`  - context for solution evaluation

Level: developer

-seealso: [](ch_ts), `DMTS`, `DM`, `TS`, `DMTSGetSolutionFunction()`, `TSSolutionFn`

# External Links
$(_doc_external("Ts/DMTSSetSolutionFunction"))
"""
function DMTSSetSolutionFunction(petsclib::PetscLibType, dm::PetscDM, func::TSSolutionFn, ctx::Cvoid) end

@for_petsc function DMTSSetSolutionFunction(petsclib::$UnionPetscLib, dm::PetscDM, func::TSSolutionFn, ctx::Cvoid )

    @chk ccall(
               (:DMTSSetSolutionFunction, $petsc_library),
               PetscErrorCode,
               (CDM, Ptr{TSSolutionFn}, Ptr{Cvoid}),
               dm, func, ctx,
              )


	return nothing
end 

"""
	DMTSSetForcingFunction(petsclib::PetscLibType,dm::PetscDM, func::TSForcingFn, ctx::Cvoid) 
set `TS` forcing function evaluation function into a `DMTS`

Not Collective

Input Parameters:
- `dm`   - `DM` to be used with `TS`
- `func` - forcing function evaluation routine, for calling sequence see `TSForcingFn`
- `ctx`  - context for solution evaluation

Level: developer

-seealso: [](ch_ts), `DMTS`, `DM`, `TS`, `TSForcingFn`, `TSSetForcingFunction()`, `DMTSGetForcingFunction()`

# External Links
$(_doc_external("Ts/DMTSSetForcingFunction"))
"""
function DMTSSetForcingFunction(petsclib::PetscLibType, dm::PetscDM, func::TSForcingFn, ctx::Cvoid) end

@for_petsc function DMTSSetForcingFunction(petsclib::$UnionPetscLib, dm::PetscDM, func::TSForcingFn, ctx::Cvoid )

    @chk ccall(
               (:DMTSSetForcingFunction, $petsc_library),
               PetscErrorCode,
               (CDM, Ptr{TSForcingFn}, Ptr{Cvoid}),
               dm, func, ctx,
              )


	return nothing
end 

"""
	DMTSGetForcingFunction(petsclib::PetscLibType,dm::PetscDM, f::TSForcingFn, ctx::Cvoid) 
get `TS` forcing function evaluation function from a `DMTS`

Not Collective

Input Parameter:
- `dm` - `DM` to be used with `TS`

Output Parameters:
- `f`   - forcing function evaluation function; see `TSForcingFn` for the calling sequence
- `ctx` - context for solution evaluation

Level: developer

-seealso: [](ch_ts), `DMTS`, `TS`, `DM`, `TSSetForcingFunction()`, `TSForcingFn`

# External Links
$(_doc_external("Ts/DMTSGetForcingFunction"))
"""
function DMTSGetForcingFunction(petsclib::PetscLibType, dm::PetscDM, f::TSForcingFn, ctx::Cvoid) end

@for_petsc function DMTSGetForcingFunction(petsclib::$UnionPetscLib, dm::PetscDM, f::TSForcingFn, ctx::Cvoid )

    @chk ccall(
               (:DMTSGetForcingFunction, $petsc_library),
               PetscErrorCode,
               (CDM, TSForcingFn, Cvoid),
               dm, f, ctx,
              )


	return nothing
end 

"""
	DMTSGetRHSFunction(petsclib::PetscLibType,dm::PetscDM, func::TSRHSFunctionFn, ctx::Cvoid) 
get `TS` explicit residual evaluation function from a `DMTS`

Not Collective

Input Parameter:
- `dm` - `DM` to be used with `TS`

Output Parameters:
- `func` - residual evaluation function, for calling sequence see `TSRHSFunctionFn`
- `ctx`  - context for residual evaluation

Level: developer

-seealso: [](ch_ts), `DMTS`, `DM`, `TS`, `TSRHSFunctionFn`, `TSGetRHSFunction()`

# External Links
$(_doc_external("Ts/DMTSGetRHSFunction"))
"""
function DMTSGetRHSFunction(petsclib::PetscLibType, dm::PetscDM, func::TSRHSFunctionFn, ctx::Cvoid) end

@for_petsc function DMTSGetRHSFunction(petsclib::$UnionPetscLib, dm::PetscDM, func::TSRHSFunctionFn, ctx::Cvoid )

    @chk ccall(
               (:DMTSGetRHSFunction, $petsc_library),
               PetscErrorCode,
               (CDM, TSRHSFunctionFn, Cvoid),
               dm, func, ctx,
              )


	return nothing
end 

"""
	DMTSSetIJacobian(petsclib::PetscLibType,dm::PetscDM, func::TSIJacobianFn, ctx::Cvoid) 
set `TS` Jacobian evaluation function into a `DMTS`

Not Collective

Input Parameters:
- `dm`   - `DM` to be used with `TS`
- `func` - Jacobian evaluation routine, see `TSIJacobianFn` for the calling sequence
- `ctx`  - context for residual evaluation

Level: developer

-seealso: [](ch_ts), `DMTS`, `TS`, `DM`, `TSIJacobianFn`, `DMTSGetIJacobian()`, `TSSetIJacobian()`

# External Links
$(_doc_external("Ts/DMTSSetIJacobian"))
"""
function DMTSSetIJacobian(petsclib::PetscLibType, dm::PetscDM, func::TSIJacobianFn, ctx::Cvoid) end

@for_petsc function DMTSSetIJacobian(petsclib::$UnionPetscLib, dm::PetscDM, func::TSIJacobianFn, ctx::Cvoid )

    @chk ccall(
               (:DMTSSetIJacobian, $petsc_library),
               PetscErrorCode,
               (CDM, Ptr{TSIJacobianFn}, Ptr{Cvoid}),
               dm, func, ctx,
              )


	return nothing
end 

"""
	DMTSSetIJacobianContextDestroy(petsclib::PetscLibType,dm::PetscDM, f::PetscCtxDestroyFn) 
set `TS` Jacobian evaluation context destroy function into a `DMTS`

Not Collective

Input Parameters:
- `dm` - `DM` to be used with `TS`
- `f`  - Jacobian evaluation context destroy function, see `PetscCtxDestroyFn` for its calling sequence

Level: developer

-seealso: [](ch_ts), `DMTS`, `TSSetIJacobianContextDestroy()`, `TSSetI2JacobianContextDestroy()`, `DMTSSetIJacobian()`, `TSSetIJacobian()`

# External Links
$(_doc_external("Ts/DMTSSetIJacobianContextDestroy"))
"""
function DMTSSetIJacobianContextDestroy(petsclib::PetscLibType, dm::PetscDM, f::PetscCtxDestroyFn) end

@for_petsc function DMTSSetIJacobianContextDestroy(petsclib::$UnionPetscLib, dm::PetscDM, f::PetscCtxDestroyFn )

    @chk ccall(
               (:DMTSSetIJacobianContextDestroy, $petsc_library),
               PetscErrorCode,
               (CDM, Ptr{PetscCtxDestroyFn}),
               dm, f,
              )


	return nothing
end 

"""
	DMTSGetIJacobian(petsclib::PetscLibType,dm::PetscDM, func::TSIJacobianFn, ctx::Cvoid) 
get `TS` Jacobian evaluation function from a `DMTS`

Not Collective

Input Parameter:
- `dm` - `DM` to be used with `TS`

Output Parameters:
- `func` - Jacobian evaluation function, for calling sequence see `TSIJacobianFn`
- `ctx`  - context for residual evaluation

Level: developer

-seealso: [](ch_ts), `DMTS`, `DM`, `TS`, `DMTSSetIJacobian()`, `TSIJacobianFn`

# External Links
$(_doc_external("Ts/DMTSGetIJacobian"))
"""
function DMTSGetIJacobian(petsclib::PetscLibType, dm::PetscDM, func::TSIJacobianFn, ctx::Cvoid) end

@for_petsc function DMTSGetIJacobian(petsclib::$UnionPetscLib, dm::PetscDM, func::TSIJacobianFn, ctx::Cvoid )

    @chk ccall(
               (:DMTSGetIJacobian, $petsc_library),
               PetscErrorCode,
               (CDM, TSIJacobianFn, Cvoid),
               dm, func, ctx,
              )


	return nothing
end 

"""
	DMTSSetRHSJacobian(petsclib::PetscLibType,dm::PetscDM, func::TSRHSJacobianFn, ctx::Cvoid) 
set `TS` Jacobian evaluation function into a `DMTS`

Not Collective

Input Parameters:
- `dm`   - `DM` to be used with `TS`
- `func` - Jacobian evaluation routine, for calling sequence see `TSIJacobianFn`
- `ctx`  - context for residual evaluation

Level: developer

-seealso: [](ch_ts), `DMTS`, `TSRHSJacobianFn`, `DMTSGetRHSJacobian()`, `TSSetRHSJacobian()`

# External Links
$(_doc_external("Ts/DMTSSetRHSJacobian"))
"""
function DMTSSetRHSJacobian(petsclib::PetscLibType, dm::PetscDM, func::TSRHSJacobianFn, ctx::Cvoid) end

@for_petsc function DMTSSetRHSJacobian(petsclib::$UnionPetscLib, dm::PetscDM, func::TSRHSJacobianFn, ctx::Cvoid )

    @chk ccall(
               (:DMTSSetRHSJacobian, $petsc_library),
               PetscErrorCode,
               (CDM, Ptr{TSRHSJacobianFn}, Ptr{Cvoid}),
               dm, func, ctx,
              )


	return nothing
end 

"""
	DMTSSetRHSJacobianContextDestroy(petsclib::PetscLibType,dm::PetscDM, f::PetscCtxDestroyFn) 
set `TS` Jacobian evaluation context destroy function from a `DMTS`

Not Collective

Input Parameters:
- `dm` - `DM` to be used with `TS`
- `f`  - Jacobian evaluation context destroy function, see `PetscCtxDestroyFn` for its calling sequence

Level: developer

-seealso: [](ch_ts), `DMTS`, `TS`, `TSSetRHSJacobianContextDestroy()`, `DMTSSetRHSJacobian()`, `TSSetRHSJacobian()`

# External Links
$(_doc_external("Ts/DMTSSetRHSJacobianContextDestroy"))
"""
function DMTSSetRHSJacobianContextDestroy(petsclib::PetscLibType, dm::PetscDM, f::PetscCtxDestroyFn) end

@for_petsc function DMTSSetRHSJacobianContextDestroy(petsclib::$UnionPetscLib, dm::PetscDM, f::PetscCtxDestroyFn )

    @chk ccall(
               (:DMTSSetRHSJacobianContextDestroy, $petsc_library),
               PetscErrorCode,
               (CDM, Ptr{PetscCtxDestroyFn}),
               dm, f,
              )


	return nothing
end 

"""
	DMTSGetRHSJacobian(petsclib::PetscLibType,dm::PetscDM, func::TSRHSJacobianFn, ctx::Cvoid) 
get `TS` Jacobian evaluation function from a `DMTS`

Not Collective

Input Parameter:
- `dm` - `DM` to be used with `TS`

Output Parameters:
- `func` - Jacobian evaluation function, for calling sequence see `TSRHSJacobianFn`
- `ctx`  - context for residual evaluation

Level: developer

-seealso: [](ch_ts), `DMTS`, `DM`, `TS`, `DMTSSetRHSJacobian()`, `TSRHSJacobianFn`

# External Links
$(_doc_external("Ts/DMTSGetRHSJacobian"))
"""
function DMTSGetRHSJacobian(petsclib::PetscLibType, dm::PetscDM, func::TSRHSJacobianFn, ctx::Cvoid) end

@for_petsc function DMTSGetRHSJacobian(petsclib::$UnionPetscLib, dm::PetscDM, func::TSRHSJacobianFn, ctx::Cvoid )

    @chk ccall(
               (:DMTSGetRHSJacobian, $petsc_library),
               PetscErrorCode,
               (CDM, TSRHSJacobianFn, Cvoid),
               dm, func, ctx,
              )


	return nothing
end 

"""
	DMTSSetIFunctionSerialize(petsclib::PetscLibType,dm::PetscDM, view::external, load::external) 
sets functions used to view and load a `TSIFunctionFn` context

Not Collective

Input Parameters:
- `dm`   - `DM` to be used with `TS`
- `view` - viewer function
- `load` - loading function

Level: developer

-seealso: [](ch_ts), `DMTS`, `DM`, `TS`

# External Links
$(_doc_external("Ts/DMTSSetIFunctionSerialize"))
"""
function DMTSSetIFunctionSerialize(petsclib::PetscLibType, dm::PetscDM, view::external, load::external) end

@for_petsc function DMTSSetIFunctionSerialize(petsclib::$UnionPetscLib, dm::PetscDM, view::external, load::external )

    @chk ccall(
               (:DMTSSetIFunctionSerialize, $petsc_library),
               PetscErrorCode,
               (CDM, external, external),
               dm, view, load,
              )


	return nothing
end 

"""
	DMTSSetIJacobianSerialize(petsclib::PetscLibType,dm::PetscDM, view::external, load::external) 
sets functions used to view and load a `TSIJacobianFn` context

Not Collective

Input Parameters:
- `dm`   - `DM` to be used with `TS`
- `view` - viewer function
- `load` - loading function

Level: developer

-seealso: [](ch_ts), `DMTS`, `DM`, `TS`

# External Links
$(_doc_external("Ts/DMTSSetIJacobianSerialize"))
"""
function DMTSSetIJacobianSerialize(petsclib::PetscLibType, dm::PetscDM, view::external, load::external) end

@for_petsc function DMTSSetIJacobianSerialize(petsclib::$UnionPetscLib, dm::PetscDM, view::external, load::external )

    @chk ccall(
               (:DMTSSetIJacobianSerialize, $petsc_library),
               PetscErrorCode,
               (CDM, external, external),
               dm, view, load,
              )


	return nothing
end 

"""
	DMTSSetBoundaryLocal(petsclib::PetscLibType,dm::PetscDM, func::external, ctx::Cvoid) 
set the function for essential boundary data for a local implicit function evaluation.

Logically Collective

Input Parameters:
- `dm`   - `DM` to associate callback with
- `func` - local function evaluation
- `ctx`  - context for function evaluation

Level: intermediate

-seealso: [](ch_ts), `DM`, `TS`, `DMTSSetIFunction()`, `DMTSSetIJacobianLocal()`

# External Links
$(_doc_external("Ts/DMTSSetBoundaryLocal"))
"""
function DMTSSetBoundaryLocal(petsclib::PetscLibType, dm::PetscDM, func::external, ctx::Cvoid) end

@for_petsc function DMTSSetBoundaryLocal(petsclib::$UnionPetscLib, dm::PetscDM, func::external, ctx::Cvoid )

    @chk ccall(
               (:DMTSSetBoundaryLocal, $petsc_library),
               PetscErrorCode,
               (CDM, external, Ptr{Cvoid}),
               dm, func, ctx,
              )


	return nothing
end 

"""
	DMTSSetIFunctionLocal(petsclib::PetscLibType,dm::PetscDM, func::external, ctx::Cvoid) 
set a local implicit function evaluation function. This function is called with local vector
containing the local vector information PLUS ghost point information. It should compute a result for all local
elements and `DM` will automatically accumulate the overlapping values.

Logically Collective

Input Parameters:
- `dm`   - `DM` to associate callback with
- `func` - local function evaluation
- `ctx`  - context for function evaluation

Level: beginner

-seealso: [](ch_ts), `DM`, `DMTSGetIFunctionLocal()`, `DMTSSetIFunction()`, `DMTSSetIJacobianLocal()`

# External Links
$(_doc_external("Ts/DMTSSetIFunctionLocal"))
"""
function DMTSSetIFunctionLocal(petsclib::PetscLibType, dm::PetscDM, func::external, ctx::Cvoid) end

@for_petsc function DMTSSetIFunctionLocal(petsclib::$UnionPetscLib, dm::PetscDM, func::external, ctx::Cvoid )

    @chk ccall(
               (:DMTSSetIFunctionLocal, $petsc_library),
               PetscErrorCode,
               (CDM, external, Ptr{Cvoid}),
               dm, func, ctx,
              )


	return nothing
end 

"""
	DMTSSetIJacobianLocal(petsclib::PetscLibType,dm::PetscDM, func::external, ctx::Cvoid) 
set a local Jacobian evaluation function

Logically Collective

Input Parameters:
- `dm`   - `DM` to associate callback with
- `func` - local Jacobian evaluation
- `ctx`  - optional context for local Jacobian evaluation

Level: beginner

-seealso: [](ch_ts), `DM`, `DMTSGetIJacobianLocal()`, `DMTSSetIFunctionLocal()`, `DMTSSetIJacobian()`, `DMTSSetIFunction()`

# External Links
$(_doc_external("Ts/DMTSSetIJacobianLocal"))
"""
function DMTSSetIJacobianLocal(petsclib::PetscLibType, dm::PetscDM, func::external, ctx::Cvoid) end

@for_petsc function DMTSSetIJacobianLocal(petsclib::$UnionPetscLib, dm::PetscDM, func::external, ctx::Cvoid )

    @chk ccall(
               (:DMTSSetIJacobianLocal, $petsc_library),
               PetscErrorCode,
               (CDM, external, Ptr{Cvoid}),
               dm, func, ctx,
              )


	return nothing
end 

"""
	DMTSSetRHSFunctionLocal(petsclib::PetscLibType,dm::PetscDM, func::external, ctx::Cvoid) 
set a local rhs function evaluation function. This function is called with local vector
containing the local vector information PLUS ghost point information. It should compute a result for all local
elements and `DM` will automatically accumulate the overlapping values.

Logically Collective

Input Parameters:
- `dm`   - `DM` to associate callback with
- `func` - local function evaluation
- `ctx`  - context for function evaluation

Level: beginner

-seealso: [](ch_ts), `DM`, `DMTSGetRHSFunctionLocal()`, `DMTSSetRHSFunction()`, `DMTSSetIFunction()`, `DMTSSetIJacobianLocal()`

# External Links
$(_doc_external("Ts/DMTSSetRHSFunctionLocal"))
"""
function DMTSSetRHSFunctionLocal(petsclib::PetscLibType, dm::PetscDM, func::external, ctx::Cvoid) end

@for_petsc function DMTSSetRHSFunctionLocal(petsclib::$UnionPetscLib, dm::PetscDM, func::external, ctx::Cvoid )

    @chk ccall(
               (:DMTSSetRHSFunctionLocal, $petsc_library),
               PetscErrorCode,
               (CDM, external, Ptr{Cvoid}),
               dm, func, ctx,
              )


	return nothing
end 

"""
	DMTSCreateRHSMassMatrix(petsclib::PetscLibType,dm::PetscDM) 
This creates the mass matrix associated with the given `DM`, and a solver to invert it, and stores them in the `DM` context.

Collective

Input Parameter:
- `dm` - `DM` providing the mass matrix

Level: developer

-seealso: [](ch_ts), `DM`, `DMTSCreateRHSMassMatrixLumped()`, `DMTSDestroyRHSMassMatrix()`, `DMCreateMassMatrix()`, `DMTS`

# External Links
$(_doc_external("Ts/DMTSCreateRHSMassMatrix"))
"""
function DMTSCreateRHSMassMatrix(petsclib::PetscLibType, dm::PetscDM) end

@for_petsc function DMTSCreateRHSMassMatrix(petsclib::$UnionPetscLib, dm::PetscDM )

    @chk ccall(
               (:DMTSCreateRHSMassMatrix, $petsc_library),
               PetscErrorCode,
               (CDM,),
               dm,
              )


	return nothing
end 

"""
	DMTSCreateRHSMassMatrixLumped(petsclib::PetscLibType,dm::PetscDM) 
This creates the lumped mass matrix associated with the given `DM`, and a solver to invert it, and stores them in the `DM` context.

Collective

Input Parameter:
- `dm` - `DM` providing the mass matrix

Level: developer

-seealso: [](ch_ts), `DM`, `DMTSCreateRHSMassMatrix()`, `DMTSDestroyRHSMassMatrix()`, `DMCreateMassMatrix()`, `DMTS`

# External Links
$(_doc_external("Ts/DMTSCreateRHSMassMatrixLumped"))
"""
function DMTSCreateRHSMassMatrixLumped(petsclib::PetscLibType, dm::PetscDM) end

@for_petsc function DMTSCreateRHSMassMatrixLumped(petsclib::$UnionPetscLib, dm::PetscDM )

    @chk ccall(
               (:DMTSCreateRHSMassMatrixLumped, $petsc_library),
               PetscErrorCode,
               (CDM,),
               dm,
              )


	return nothing
end 

"""
	DMTSDestroyRHSMassMatrix(petsclib::PetscLibType,dm::PetscDM) 
Destroys the mass matrix and solver stored in the `DM` context, if they exist.

Logically Collective

Input Parameter:
- `dm` - `DM` providing the mass matrix

Level: developer

-seealso: [](ch_ts), `DM`, `DMTSCreateRHSMassMatrixLumped()`, `DMCreateMassMatrix()`, `DMTS`

# External Links
$(_doc_external("Ts/DMTSDestroyRHSMassMatrix"))
"""
function DMTSDestroyRHSMassMatrix(petsclib::PetscLibType, dm::PetscDM) end

@for_petsc function DMTSDestroyRHSMassMatrix(petsclib::$UnionPetscLib, dm::PetscDM )

    @chk ccall(
               (:DMTSDestroyRHSMassMatrix, $petsc_library),
               PetscErrorCode,
               (CDM,),
               dm,
              )


	return nothing
end 

"""
	DMPlexTSComputeRHSFunctionFVM(petsclib::PetscLibType,dm::PetscDM, time::PetscReal, locX::PetscVec, F::PetscVec, user::Cvoid) 
Form the forcing `F` from the local input `locX` using pointwise functions specified by the user

Input Parameters:
- `dm`   - The mesh
- `time` - The time
- `locX` - Local solution
- `user` - The user context

Output Parameter:
- `F` - Global output vector

Level: developer

-seealso: [](ch_ts), `DMPLEX`, `TS`, `DMPlexComputeJacobianActionFEM()`

# External Links
$(_doc_external("Ts/DMPlexTSComputeRHSFunctionFVM"))
"""
function DMPlexTSComputeRHSFunctionFVM(petsclib::PetscLibType, dm::PetscDM, time::PetscReal, locX::PetscVec, F::PetscVec, user::Cvoid) end

@for_petsc function DMPlexTSComputeRHSFunctionFVM(petsclib::$UnionPetscLib, dm::PetscDM, time::$PetscReal, locX::PetscVec, F::PetscVec, user::Cvoid )

    @chk ccall(
               (:DMPlexTSComputeRHSFunctionFVM, $petsc_library),
               PetscErrorCode,
               (CDM, $PetscReal, CVec, CVec, Ptr{Cvoid}),
               dm, time, locX, F, user,
              )


	return nothing
end 

"""
	DMPlexTSComputeBoundary(petsclib::PetscLibType,dm::PetscDM, time::PetscReal, locX::PetscVec, locX_t::PetscVec, user::Cvoid) 
Insert the essential boundary values into the local input `locX` and/or its time derivative `locX_t` using pointwise functions specified by the user

Input Parameters:
- `dm`     - The mesh
- `time`   - The time
- `locX`   - Local solution
- `locX_t` - Local solution time derivative, or `NULL`
- `user`   - The user context

Level: developer

-seealso: [](ch_ts), `DMPLEX`, `TS`, `DMPlexComputeJacobianActionFEM()`

# External Links
$(_doc_external("Ts/DMPlexTSComputeBoundary"))
"""
function DMPlexTSComputeBoundary(petsclib::PetscLibType, dm::PetscDM, time::PetscReal, locX::PetscVec, locX_t::PetscVec, user::Cvoid) end

@for_petsc function DMPlexTSComputeBoundary(petsclib::$UnionPetscLib, dm::PetscDM, time::$PetscReal, locX::PetscVec, locX_t::PetscVec, user::Cvoid )

    @chk ccall(
               (:DMPlexTSComputeBoundary, $petsc_library),
               PetscErrorCode,
               (CDM, $PetscReal, CVec, CVec, Ptr{Cvoid}),
               dm, time, locX, locX_t, user,
              )


	return nothing
end 

"""
	DMPlexTSComputeIFunctionFEM(petsclib::PetscLibType,dm::PetscDM, time::PetscReal, locX::PetscVec, locX_t::PetscVec, locF::PetscVec, user::Cvoid) 
Form the local residual `locF` from the local input `locX` using pointwise functions specified by the user

Input Parameters:
- `dm`     - The mesh
- `time`   - The time
- `locX`   - Local solution
- `locX_t` - Local solution time derivative, or `NULL`
- `user`   - The user context

Output Parameter:
- `locF` - Local output vector

Level: developer

-seealso: [](ch_ts), `DMPLEX`, `TS`, `DMPlexTSComputeRHSFunctionFEM()`

# External Links
$(_doc_external("Ts/DMPlexTSComputeIFunctionFEM"))
"""
function DMPlexTSComputeIFunctionFEM(petsclib::PetscLibType, dm::PetscDM, time::PetscReal, locX::PetscVec, locX_t::PetscVec, locF::PetscVec, user::Cvoid) end

@for_petsc function DMPlexTSComputeIFunctionFEM(petsclib::$UnionPetscLib, dm::PetscDM, time::$PetscReal, locX::PetscVec, locX_t::PetscVec, locF::PetscVec, user::Cvoid )

    @chk ccall(
               (:DMPlexTSComputeIFunctionFEM, $petsc_library),
               PetscErrorCode,
               (CDM, $PetscReal, CVec, CVec, CVec, Ptr{Cvoid}),
               dm, time, locX, locX_t, locF, user,
              )


	return nothing
end 

"""
	DMPlexTSComputeIJacobianFEM(petsclib::PetscLibType,dm::PetscDM, time::PetscReal, locX::PetscVec, locX_t::PetscVec, X_tShift::PetscReal, Jac::PetscMat, JacP::PetscMat, user::Cvoid) 
Form the Jacobian `Jac` from the local input `locX` using pointwise functions specified by the user

Input Parameters:
- `dm`       - The mesh
- `time`     - The time
- `locX`     - Local solution
- `locX_t`   - Local solution time derivative, or `NULL`
- `X_tShift` - The multiplicative parameter for dF/du_t
- `user`     - The user context

Output Parameters:
- `Jac`  - the Jacobian
- `JacP` - an additional approximation for the Jacobian to be used to compute the preconditioner (often is `Jac`)

Level: developer

-seealso: [](ch_ts), `TS`, `DM`, `DMPlexTSComputeIFunctionFEM()`, `DMPlexTSComputeRHSFunctionFEM()`

# External Links
$(_doc_external("Ts/DMPlexTSComputeIJacobianFEM"))
"""
function DMPlexTSComputeIJacobianFEM(petsclib::PetscLibType, dm::PetscDM, time::PetscReal, locX::PetscVec, locX_t::PetscVec, X_tShift::PetscReal, Jac::PetscMat, JacP::PetscMat, user::Cvoid) end

@for_petsc function DMPlexTSComputeIJacobianFEM(petsclib::$UnionPetscLib, dm::PetscDM, time::$PetscReal, locX::PetscVec, locX_t::PetscVec, X_tShift::$PetscReal, Jac::PetscMat, JacP::PetscMat, user::Cvoid )

    @chk ccall(
               (:DMPlexTSComputeIJacobianFEM, $petsc_library),
               PetscErrorCode,
               (CDM, $PetscReal, CVec, CVec, $PetscReal, CMat, CMat, Ptr{Cvoid}),
               dm, time, locX, locX_t, X_tShift, Jac, JacP, user,
              )


	return nothing
end 

"""
	DMPlexTSComputeRHSFunctionFEM(petsclib::PetscLibType,dm::PetscDM, time::PetscReal, locX::PetscVec, locG::PetscVec, user::Cvoid) 
Form the local residual `locG` from the local input `locX` using pointwise functions specified by the user

Input Parameters:
- `dm`   - The mesh
- `time` - The time
- `locX` - Local solution
- `user` - The user context

Output Parameter:
- `locG` - Local output vector

Level: developer

-seealso: [](ch_ts), `TS`, `DM`, `DMPlexTSComputeIFunctionFEM()`, `DMPlexTSComputeIJacobianFEM()`

# External Links
$(_doc_external("Ts/DMPlexTSComputeRHSFunctionFEM"))
"""
function DMPlexTSComputeRHSFunctionFEM(petsclib::PetscLibType, dm::PetscDM, time::PetscReal, locX::PetscVec, locG::PetscVec, user::Cvoid) end

@for_petsc function DMPlexTSComputeRHSFunctionFEM(petsclib::$UnionPetscLib, dm::PetscDM, time::$PetscReal, locX::PetscVec, locG::PetscVec, user::Cvoid )

    @chk ccall(
               (:DMPlexTSComputeRHSFunctionFEM, $petsc_library),
               PetscErrorCode,
               (CDM, $PetscReal, CVec, CVec, Ptr{Cvoid}),
               dm, time, locX, locG, user,
              )


	return nothing
end 

"""
	residual::PetscReal = DMTSCheckResidual(petsclib::PetscLibType,ts::TS, dm::PetscDM, t::PetscReal, u::PetscVec, u_t::PetscVec, tol::PetscReal) 
Check the residual of the exact solution

Input Parameters:
- `ts`  - the `TS` object
- `dm`  - the `DM`
- `t`   - the time
- `u`   - a `DM` vector
- `u_t` - a `DM` vector
- `tol` - A tolerance for the check, or -1 to print the results instead

Output Parameter:
- `residual` - The residual norm of the exact solution, or `NULL`

Level: developer

-seealso: [](ch_ts), `DM`, `DMTSCheckFromOptions()`, `DMTSCheckJacobian()`, `DNSNESCheckFromOptions()`, `DMSNESCheckDiscretization()`, `DMSNESCheckJacobian()`

# External Links
$(_doc_external("Ts/DMTSCheckResidual"))
"""
function DMTSCheckResidual(petsclib::PetscLibType, ts::TS, dm::PetscDM, t::PetscReal, u::PetscVec, u_t::PetscVec, tol::PetscReal) end

@for_petsc function DMTSCheckResidual(petsclib::$UnionPetscLib, ts::TS, dm::PetscDM, t::$PetscReal, u::PetscVec, u_t::PetscVec, tol::$PetscReal )
	residual_ = Ref{$PetscReal}()

    @chk ccall(
               (:DMTSCheckResidual, $petsc_library),
               PetscErrorCode,
               (TS, CDM, $PetscReal, CVec, CVec, $PetscReal, Ptr{$PetscReal}),
               ts, dm, t, u, u_t, tol, residual_,
              )

	residual = residual_[]

	return residual
end 

"""
	isLinear::PetscBool,convRate::PetscReal = DMTSCheckJacobian(petsclib::PetscLibType,ts::TS, dm::PetscDM, t::PetscReal, u::PetscVec, u_t::PetscVec, tol::PetscReal) 
Check the Jacobian of the exact solution against the residual using the Taylor Test

Input Parameters:
- `ts`  - the `TS` object
- `dm`  - the `DM`
- `t`   - the time
- `u`   - a `DM` vector
- `u_t` - a `DM` vector
- `tol` - A tolerance for the check, or -1 to print the results instead

Output Parameters:
- `isLinear` - Flag indicating that the function looks linear, or `NULL`
- `convRate` - The rate of convergence of the linear model, or `NULL`

Level: developer

-seealso: [](ch_ts), `DNTSCheckFromOptions()`, `DMTSCheckResidual()`, `DNSNESCheckFromOptions()`, `DMSNESCheckDiscretization()`, `DMSNESCheckResidual()`

# External Links
$(_doc_external("Ts/DMTSCheckJacobian"))
"""
function DMTSCheckJacobian(petsclib::PetscLibType, ts::TS, dm::PetscDM, t::PetscReal, u::PetscVec, u_t::PetscVec, tol::PetscReal) end

@for_petsc function DMTSCheckJacobian(petsclib::$UnionPetscLib, ts::TS, dm::PetscDM, t::$PetscReal, u::PetscVec, u_t::PetscVec, tol::$PetscReal )
	isLinear_ = Ref{PetscBool}()
	convRate_ = Ref{$PetscReal}()

    @chk ccall(
               (:DMTSCheckJacobian, $petsc_library),
               PetscErrorCode,
               (TS, CDM, $PetscReal, CVec, CVec, $PetscReal, Ptr{PetscBool}, Ptr{$PetscReal}),
               ts, dm, t, u, u_t, tol, isLinear_, convRate_,
              )

	isLinear = isLinear_[]
	convRate = convRate_[]

	return isLinear,convRate
end 

"""
	DMTSCheckFromOptions(petsclib::PetscLibType,ts::TS, u::PetscVec) 
Check the residual and Jacobian functions using the exact solution by outputting some diagnostic information based on
values in the options database

Input Parameters:
- `ts` - the `TS` object
- `u`  - representative `TS` vector

Level: developer

-seealso: `DMTS`

# External Links
$(_doc_external("Ts/DMTSCheckFromOptions"))
"""
function DMTSCheckFromOptions(petsclib::PetscLibType, ts::TS, u::PetscVec) end

@for_petsc function DMTSCheckFromOptions(petsclib::$UnionPetscLib, ts::TS, u::PetscVec )

    @chk ccall(
               (:DMTSCheckFromOptions, $petsc_library),
               PetscErrorCode,
               (TS, CVec),
               ts, u,
              )


	return nothing
end 

"""
	DMDATSSetRHSFunctionLocal(petsclib::PetscLibType,dm::PetscDM, imode::InsertMode, func::DMDATSRHSFunctionLocalFn, ctx::Cvoid) 
set a local residual evaluation function for use with `DMDA`

Logically Collective

Input Parameters:
- `dm`    - `DM` to associate callback with
- `imode` - insert mode for the residual
- `func`  - local residual evaluation, see `DMDATSRHSFunctionLocalFn` for the calling sequence
- `ctx`   - optional context for local residual evaluation

Level: beginner

-seealso: [](ch_ts), `DMDA`, `DMDATSRHSFunctionLocalFn`, `TS`, `TSSetRHSFunction()`, `DMTSSetRHSFunction()`, `DMDATSSetRHSJacobianLocal()`, `DMDASNESSetFunctionLocal()`

# External Links
$(_doc_external("Ts/DMDATSSetRHSFunctionLocal"))
"""
function DMDATSSetRHSFunctionLocal(petsclib::PetscLibType, dm::PetscDM, imode::InsertMode, func::DMDATSRHSFunctionLocalFn, ctx::Cvoid) end

@for_petsc function DMDATSSetRHSFunctionLocal(petsclib::$UnionPetscLib, dm::PetscDM, imode::InsertMode, func::DMDATSRHSFunctionLocalFn, ctx::Cvoid )

    @chk ccall(
               (:DMDATSSetRHSFunctionLocal, $petsc_library),
               PetscErrorCode,
               (CDM, InsertMode, Ptr{DMDATSRHSFunctionLocalFn}, Ptr{Cvoid}),
               dm, imode, func, ctx,
              )


	return nothing
end 

"""
	DMDATSSetRHSJacobianLocal(petsclib::PetscLibType,dm::PetscDM, func::DMDATSRHSJacobianLocalFn, ctx::Cvoid) 
set a local residual evaluation function for use with `DMDA`

Logically Collective

Input Parameters:
- `dm`   - `DM` to associate callback with
- `func` - local RHS Jacobian evaluation routine, see `DMDATSRHSJacobianLocalFn` for the calling sequence
- `ctx`  - optional context for local jacobian evaluation

Level: beginner

-seealso: [](ch_ts), `DMDA`, `DMDATSRHSJacobianLocalFn`, `DMTSSetRHSJacobian()`,
`DMDATSSetRHSFunctionLocal()`, `DMDASNESSetJacobianLocal()`

# External Links
$(_doc_external("Ts/DMDATSSetRHSJacobianLocal"))
"""
function DMDATSSetRHSJacobianLocal(petsclib::PetscLibType, dm::PetscDM, func::DMDATSRHSJacobianLocalFn, ctx::Cvoid) end

@for_petsc function DMDATSSetRHSJacobianLocal(petsclib::$UnionPetscLib, dm::PetscDM, func::DMDATSRHSJacobianLocalFn, ctx::Cvoid )

    @chk ccall(
               (:DMDATSSetRHSJacobianLocal, $petsc_library),
               PetscErrorCode,
               (CDM, Ptr{DMDATSRHSJacobianLocalFn}, Ptr{Cvoid}),
               dm, func, ctx,
              )


	return nothing
end 

"""
	DMDATSSetIFunctionLocal(petsclib::PetscLibType,dm::PetscDM, imode::InsertMode, func::DMDATSIFunctionLocalFn, ctx::Cvoid) 
set a local residual evaluation function for use with `DMDA`

Logically Collective

Input Parameters:
- `dm`    - `DM` to associate callback with
- `imode` - the insert mode of the function
- `func`  - local residual evaluation, see `DMDATSIFunctionLocalFn` for the calling sequence
- `ctx`   - optional context for local residual evaluation

Level: beginner

-seealso: [](ch_ts), `DMDA`, `DMDATSIFunctionLocalFn`, `DMTSSetIFunction()`,
`DMDATSSetIJacobianLocal()`, `DMDASNESSetFunctionLocal()`

# External Links
$(_doc_external("Ts/DMDATSSetIFunctionLocal"))
"""
function DMDATSSetIFunctionLocal(petsclib::PetscLibType, dm::PetscDM, imode::InsertMode, func::DMDATSIFunctionLocalFn, ctx::Cvoid) end

@for_petsc function DMDATSSetIFunctionLocal(petsclib::$UnionPetscLib, dm::PetscDM, imode::InsertMode, func::DMDATSIFunctionLocalFn, ctx::Cvoid )

    @chk ccall(
               (:DMDATSSetIFunctionLocal, $petsc_library),
               PetscErrorCode,
               (CDM, InsertMode, Ptr{DMDATSIFunctionLocalFn}, Ptr{Cvoid}),
               dm, imode, func, ctx,
              )


	return nothing
end 

"""
	DMDATSSetIJacobianLocal(petsclib::PetscLibType,dm::PetscDM, func::DMDATSIJacobianLocalFn, ctx::Cvoid) 
set a local residual evaluation function for use with `DMDA`

Logically Collective

Input Parameters:
- `dm`   - `DM` to associate callback with
- `func` - local residual evaluation, see `DMDATSIJacobianLocalFn` for the calling sequence
- `ctx`  - optional context for local residual evaluation

Level: beginner

-seealso: [](ch_ts), `DMDA`, `DMDATSIJacobianLocalFn`, `DMTSSetIJacobian()`,
`DMDATSSetIFunctionLocal()`, `DMDASNESSetJacobianLocal()`

# External Links
$(_doc_external("Ts/DMDATSSetIJacobianLocal"))
"""
function DMDATSSetIJacobianLocal(petsclib::PetscLibType, dm::PetscDM, func::DMDATSIJacobianLocalFn, ctx::Cvoid) end

@for_petsc function DMDATSSetIJacobianLocal(petsclib::$UnionPetscLib, dm::PetscDM, func::DMDATSIJacobianLocalFn, ctx::Cvoid )

    @chk ccall(
               (:DMDATSSetIJacobianLocal, $petsc_library),
               PetscErrorCode,
               (CDM, Ptr{DMDATSIJacobianLocalFn}, Ptr{Cvoid}),
               dm, func, ctx,
              )


	return nothing
end 

"""
	DMPlexTSComputeRHSFunctionFVMCEED(petsclib::PetscLibType,dm::PetscDM, time::PetscReal, locX::PetscVec, F::PetscVec, user::Cvoid) 

# External Links
$(_doc_external("Ts/DMPlexTSComputeRHSFunctionFVMCEED"))
"""
function DMPlexTSComputeRHSFunctionFVMCEED(petsclib::PetscLibType, dm::PetscDM, time::PetscReal, locX::PetscVec, F::PetscVec, user::Cvoid) end

@for_petsc function DMPlexTSComputeRHSFunctionFVMCEED(petsclib::$UnionPetscLib, dm::PetscDM, time::$PetscReal, locX::PetscVec, F::PetscVec, user::Cvoid )

    @chk ccall(
               (:DMPlexTSComputeRHSFunctionFVMCEED, $petsc_library),
               PetscErrorCode,
               (CDM, $PetscReal, CVec, CVec, Ptr{Cvoid}),
               dm, time, locX, F, user,
              )


	return nothing
end 

"""
	DMPlexLandauAddMaxwellians(petsclib::PetscLibType,dm::PetscDM, X::PetscVec, time::PetscReal, temps::Vector{PetscReal}, ns::Vector{PetscReal}, grid::PetscInt, b_id::PetscInt, n_batch::PetscInt, actx::Cvoid) 
Add a Maxwellian distribution to a state

Collective

Input Parameters:
- `dm`      - The mesh (local)
- `time`    - Current time
- `temps`   - Temperatures of each species (global)
- `ns`      - Number density of each species (global)
- `grid`    - index into current grid - just used for offset into `temp` and `ns`
- `b_id`    - batch index
- `n_batch` - number of batches
- `actx`    - Landau context

Output Parameter:
- `X` - The state (local to this grid)

Level: beginner

-seealso: `DMPlexLandauCreateVelocitySpace()`

# External Links
$(_doc_external("Ts/DMPlexLandauAddMaxwellians"))
"""
function DMPlexLandauAddMaxwellians(petsclib::PetscLibType, dm::PetscDM, X::PetscVec, time::PetscReal, temps::Vector{PetscReal}, ns::Vector{PetscReal}, grid::PetscInt, b_id::PetscInt, n_batch::PetscInt, actx::Cvoid) end

@for_petsc function DMPlexLandauAddMaxwellians(petsclib::$UnionPetscLib, dm::PetscDM, X::PetscVec, time::$PetscReal, temps::Vector{$PetscReal}, ns::Vector{$PetscReal}, grid::$PetscInt, b_id::$PetscInt, n_batch::$PetscInt, actx::Cvoid )

    @chk ccall(
               (:DMPlexLandauAddMaxwellians, $petsc_library),
               PetscErrorCode,
               (CDM, CVec, $PetscReal, Ptr{$PetscReal}, Ptr{$PetscReal}, $PetscInt, $PetscInt, $PetscInt, Ptr{Cvoid}),
               dm, X, time, temps, ns, grid, b_id, n_batch, actx,
              )


	return nothing
end 

"""
	X::PetscVec,J::PetscMat,pack::PetscDM = DMPlexLandauCreateVelocitySpace(petsclib::PetscLibType,comm::MPI_Comm, dim::PetscInt, prefix::String) 
Create a `DMPLEX` velocity space mesh

Collective

Input Parameters:
- `comm`   - The MPI communicator
- `dim`    - velocity space dimension (2 for axisymmetric, 3 for full 3X + 3V solver)
- `prefix` - prefix for options (not tested)

Output Parameters:
- `pack` - The `DM` object representing the mesh
- `X`    - A vector (user destroys)
- `J`    - Optional matrix (object destroys)

Level: beginner

-seealso: `DMPlexCreate()`, `DMPlexLandauDestroyVelocitySpace()`

# External Links
$(_doc_external("Ts/DMPlexLandauCreateVelocitySpace"))
"""
function DMPlexLandauCreateVelocitySpace(petsclib::PetscLibType, comm::MPI_Comm, dim::PetscInt, prefix::String) end

@for_petsc function DMPlexLandauCreateVelocitySpace(petsclib::$UnionPetscLib, comm::MPI_Comm, dim::$PetscInt, prefix::String )
	X_ = Ref{CVec}()
	J_ = Ref{CMat}()
	pack_ = Ref{CDM}()

    @chk ccall(
               (:DMPlexLandauCreateVelocitySpace, $petsc_library),
               PetscErrorCode,
               (MPI_Comm, $PetscInt, Ptr{Cchar}, Ptr{CVec}, Ptr{CMat}, Ptr{CDM}),
               comm, dim, prefix, X_, J_, pack_,
              )

	X = PetscVec(X_[], petsclib)
	J = PetscMat(J_[], petsclib)
	pack = PetscDM(pack_[], petsclib)

	return X,J,pack
end 

"""
	DMPlexLandauAccess(petsclib::PetscLibType,pack::PetscDM, X::PetscVec, func::external, user_ctx::Cvoid) 
Access to the distribution function with user callback

Collective

Input Parameters:
- `pack`     - the `DMCOMPOSITE`
- `func`     - call back function
- `user_ctx` - user context

Input/Output Parameter:
- `X` - Vector to data to

Level: advanced

-seealso: `DMPlexLandauCreateVelocitySpace()`

# External Links
$(_doc_external("Ts/DMPlexLandauAccess"))
"""
function DMPlexLandauAccess(petsclib::PetscLibType, pack::PetscDM, X::PetscVec, func::external, user_ctx::Cvoid) end

@for_petsc function DMPlexLandauAccess(petsclib::$UnionPetscLib, pack::PetscDM, X::PetscVec, func::external, user_ctx::Cvoid )

    @chk ccall(
               (:DMPlexLandauAccess, $petsc_library),
               PetscErrorCode,
               (CDM, CVec, external, Ptr{Cvoid}),
               pack, X, func, user_ctx,
              )


	return nothing
end 

"""
	DMPlexLandauDestroyVelocitySpace(petsclib::PetscLibType,dm::PetscDM) 
Destroy a `DMPLEX` velocity space mesh

Collective

Input/Output Parameters:
- `dm` - the `DM` to destroy

Level: beginner

-seealso: `DMPlexLandauCreateVelocitySpace()`

# External Links
$(_doc_external("Ts/DMPlexLandauDestroyVelocitySpace"))
"""
function DMPlexLandauDestroyVelocitySpace(petsclib::PetscLibType, dm::PetscDM) end

@for_petsc function DMPlexLandauDestroyVelocitySpace(petsclib::$UnionPetscLib, dm::PetscDM )
	dm_ = Ref(dm.ptr)

    @chk ccall(
               (:DMPlexLandauDestroyVelocitySpace, $petsc_library),
               PetscErrorCode,
               (Ptr{CDM},),
               dm_,
              )

	dm.ptr = C_NULL

	return nothing
end 

"""
	DMPlexLandauPrintNorms(petsclib::PetscLibType,X::PetscVec, stepi::PetscInt) 
collects moments and prints them

Collective

Input Parameters:
- `X`     - the state
- `stepi` - current step to print

Level: beginner

-seealso: `DMPlexLandauCreateVelocitySpace()`

# External Links
$(_doc_external("Ts/DMPlexLandauPrintNorms"))
"""
function DMPlexLandauPrintNorms(petsclib::PetscLibType, X::PetscVec, stepi::PetscInt) end

@for_petsc function DMPlexLandauPrintNorms(petsclib::$UnionPetscLib, X::PetscVec, stepi::$PetscInt )

    @chk ccall(
               (:DMPlexLandauPrintNorms, $petsc_library),
               PetscErrorCode,
               (CVec, $PetscInt),
               X, stepi,
              )


	return nothing
end 

"""
	Amat::PetscMat = DMPlexLandauCreateMassMatrix(petsclib::PetscLibType,pack::PetscDM) 
Create mass matrix for Landau in Plex space (not field major order of Jacobian)
- `puts mass matrix into ctx->M`

Collective

Input Parameter:
- `pack` - the `DM` object. Puts matrix in Landau context M field

Output Parameter:
- `Amat` - The mass matrix (optional), mass matrix is added to the `DM` context

Level: beginner

-seealso: `DMPlexLandauCreateVelocitySpace()`

# External Links
$(_doc_external("Ts/DMPlexLandauCreateMassMatrix"))
"""
function DMPlexLandauCreateMassMatrix(petsclib::PetscLibType, pack::PetscDM) end

@for_petsc function DMPlexLandauCreateMassMatrix(petsclib::$UnionPetscLib, pack::PetscDM )
	Amat_ = Ref{CMat}()

    @chk ccall(
               (:DMPlexLandauCreateMassMatrix, $petsc_library),
               PetscErrorCode,
               (CDM, Ptr{CMat}),
               pack, Amat_,
              )

	Amat = PetscMat(Amat_[], petsclib)

	return Amat
end 

"""
	DMPlexLandauIFunction(petsclib::PetscLibType,ts::TS, time_dummy::PetscReal, X::PetscVec, X_t::PetscVec, F::PetscVec, actx::Cvoid) 
`TS` residual calculation, confusingly this computes the Jacobian w/o mass

Collective

Input Parameters:
- `ts`         - The time stepping context
- `time_dummy` - current time (not used)
- `X`          - Current state
- `X_t`        - Time derivative of current state
- `actx`       - Landau context

Output Parameter:
- `F` - The residual

Level: beginner

-seealso: `DMPlexLandauCreateVelocitySpace()`, `DMPlexLandauIJacobian()`

# External Links
$(_doc_external("Ts/DMPlexLandauIFunction"))
"""
function DMPlexLandauIFunction(petsclib::PetscLibType, ts::TS, time_dummy::PetscReal, X::PetscVec, X_t::PetscVec, F::PetscVec, actx::Cvoid) end

@for_petsc function DMPlexLandauIFunction(petsclib::$UnionPetscLib, ts::TS, time_dummy::$PetscReal, X::PetscVec, X_t::PetscVec, F::PetscVec, actx::Cvoid )

    @chk ccall(
               (:DMPlexLandauIFunction, $petsc_library),
               PetscErrorCode,
               (TS, $PetscReal, CVec, CVec, CVec, Ptr{Cvoid}),
               ts, time_dummy, X, X_t, F, actx,
              )


	return nothing
end 

"""
	DMPlexLandauIJacobian(petsclib::PetscLibType,ts::TS, time_dummy::PetscReal, X::PetscVec, U_tdummy::PetscVec, shift::PetscReal, Amat::PetscMat, Pmat::PetscMat, actx::Cvoid) 
`TS` Jacobian construction, confusingly this adds mass

Collective

Input Parameters:
- `ts`         - The time stepping context
- `time_dummy` - current time (not used)
- `X`          - Current state
- `U_tdummy`   - Time derivative of current state (not used)
- `shift`      - shift for du/dt term
- `actx`       - Landau context

Output Parameters:
- `Amat` - Jacobian
- `Pmat` - same as Amat

Level: beginner

-seealso: `DMPlexLandauCreateVelocitySpace()`, `DMPlexLandauIFunction()`

# External Links
$(_doc_external("Ts/DMPlexLandauIJacobian"))
"""
function DMPlexLandauIJacobian(petsclib::PetscLibType, ts::TS, time_dummy::PetscReal, X::PetscVec, U_tdummy::PetscVec, shift::PetscReal, Amat::PetscMat, Pmat::PetscMat, actx::Cvoid) end

@for_petsc function DMPlexLandauIJacobian(petsclib::$UnionPetscLib, ts::TS, time_dummy::$PetscReal, X::PetscVec, U_tdummy::PetscVec, shift::$PetscReal, Amat::PetscMat, Pmat::PetscMat, actx::Cvoid )

    @chk ccall(
               (:DMPlexLandauIJacobian, $petsc_library),
               PetscErrorCode,
               (TS, $PetscReal, CVec, CVec, $PetscReal, CMat, CMat, Ptr{Cvoid}),
               ts, time_dummy, X, U_tdummy, shift, Amat, Pmat, actx,
              )


	return nothing
end 

"""
	DMPlexSetGlobalToNaturalSF(petsclib::PetscLibType,dm::PetscDM, sf::PetscSF) 

# External Links
$(_doc_external("Dm/DMPlexSetGlobalToNaturalSF"))
"""
function DMPlexSetGlobalToNaturalSF(petsclib::PetscLibType, dm::PetscDM, sf::PetscSF) end

@for_petsc function DMPlexSetGlobalToNaturalSF(petsclib::$UnionPetscLib, dm::PetscDM, sf::PetscSF )

    @chk ccall(
               (:DMPlexSetGlobalToNaturalSF, $petsc_library),
               PetscErrorCode,
               (CDM, PetscSF),
               dm, sf,
              )


	return nothing
end 

"""
	DMPlexGetGlobalToNaturalSF(petsclib::PetscLibType,dm::PetscDM, sf::PetscSF) 

# External Links
$(_doc_external("Dm/DMPlexGetGlobalToNaturalSF"))
"""
function DMPlexGetGlobalToNaturalSF(petsclib::PetscLibType, dm::PetscDM, sf::PetscSF) end

@for_petsc function DMPlexGetGlobalToNaturalSF(petsclib::$UnionPetscLib, dm::PetscDM, sf::PetscSF )

    @chk ccall(
               (:DMPlexGetGlobalToNaturalSF, $petsc_library),
               PetscErrorCode,
               (CDM, Ptr{PetscSF}),
               dm, sf,
              )


	return nothing
end 

